// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { ParameterizedContext as Context } from "koa";
import { InsightEvent, Logger } from "@compas/stdlib";
import { Next } from "@compas/server";
import { Middleware } from "@compas/server";
import { QueryPart } from "@compas/store";
declare global {
  type BenchNested = { foo: true; bar: 5; nest: BenchSimple[] };
  type BenchSimple = { foo: boolean; bar: number; baz: string };
  type CompasStructure = undefined | any;
  type CompasStructureResponse = any;
  type GroupFullRoute = CompasStructure;
  type GroupFullRouteBody = { foo: string; bar: ServerOptions };
  type ServerOptions = "A" | "B" | "C";
  type GroupFullRouteParams = { full: string; color: number };
  type GroupFullRouteResponse = { items: { foo: string; bar: ServerItem }[] };
  type ServerItem = { A: string; B: number; C: number; D: boolean; E: Date };
  type GroupRefRoute = CompasStructure;
  type GroupRefRouteParams = { id: ServerInput };
  type ServerInput = number;
  type GroupRefRouteQuery = { ref: string; ref2: string };
  type GroupRefRouteResponse = BenchNested;
  type GroupUpload = CompasStructure;
  type GroupUploadFiles = { input1: ReadableStream };
  type GroupUploadResponse = ReadableStream;
  type ServerAnswers = { [K in ServerOptions]: string };
  type ServerCreate = CompasStructure;
  type ServerCreateBody = { foo: boolean; string?: undefined | null | string };
  type ServerCreateQuery = { alwaysTrue?: undefined | boolean };
  type ServerCreateResponse = { foo: boolean };
  type ServerEmptyResponse = CompasStructure;
  type ServerEmptyResponseQuery = { foo?: undefined | string };
  type ServerGetFile = CompasStructure;
  type ServerGetFileQuery = { throwError?: undefined | boolean };
  type ServerGetFileResponse = GroupUploadResponse;
  type ServerGetId = CompasStructure;
  type ServerGetIdParams = { id: number };
  type ServerGetIdResponse = ServerGetIdParams;
  type ServerInvalidResponse = CompasStructure;
  type ServerInvalidResponseResponse = { id: string };
  type ServerPatchTest = CompasStructure;
  type ServerPatchTestResponse = {};
  type ServerSearch = CompasStructure;
  type ServerSearchBody = ServerCreateResponse;
  type ServerSearchResponse = { bar: boolean };
  type ServerServerError = CompasStructure;
  type ServerServerErrorResponse = ServerPatchTestResponse;
  type ServerSetFile = CompasStructure;
  type ServerSetFileFiles = { myFile: ReadableStream };
  type ServerSetFileResponse = { success: true };
  type ServerSetMimeCheckedFile = CompasStructure;
  type ServerSetMimeCheckedFileFiles = ServerSetFileFiles;
  type ServerSetMimeCheckedFileResponse = ServerSetFileResponse;
  type ServerValidatorShim = CompasStructure;
  type ServerValidatorShimBody = { anyOf: boolean | string };
  type ServerValidatorShimResponse = ServerSetFileResponse;
  type CompasStructureCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    CompasStructureResponse
  >;
  type CompasStructureFn = (
    ctx: CompasStructureCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupFullRouteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GroupFullRouteParams;
      validatedBody: GroupFullRouteBody;
    },
    GroupFullRouteResponse
  >;
  type GroupFullRouteFn = (
    ctx: GroupFullRouteCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupRefRouteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GroupRefRouteQuery;
      validatedParams: GroupRefRouteParams;
    },
    GroupRefRouteResponse
  >;
  type GroupRefRouteFn = (
    ctx: GroupRefRouteCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupUploadFilesValidated = {
    input1: {
      size: number;
      filepath: string;
      originalFilename?: string;
      newFilename?: string;
      mimetype?: string;
      mtime?: Date;
      hashAlgorithm?: "sha1" | "md5" | "sha256";
      hash?: string;
    };
  };
  type GroupUploadCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedFiles: GroupUploadFilesValidated;
    },
    GroupUploadResponse
  >;
  type GroupUploadFn = (
    ctx: GroupUploadCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ServerCreateQuery;
      validatedBody: ServerCreateBody;
    },
    ServerCreateResponse
  >;
  type ServerCreateFn = (
    ctx: ServerCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerEmptyResponseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ServerEmptyResponseQuery;
    },
    unknown
  >;
  type ServerEmptyResponseFn = (
    ctx: ServerEmptyResponseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerGetFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ServerGetFileQuery;
    },
    ServerGetFileResponse
  >;
  type ServerGetFileFn = (
    ctx: ServerGetFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerGetIdCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ServerGetIdParams;
    },
    ServerGetIdResponse
  >;
  type ServerGetIdFn = (
    ctx: ServerGetIdCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerInvalidResponseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ServerInvalidResponseResponse
  >;
  type ServerInvalidResponseFn = (
    ctx: ServerInvalidResponseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerPatchTestCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ServerPatchTestResponse
  >;
  type ServerPatchTestFn = (
    ctx: ServerPatchTestCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerSearchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ServerSearchBody;
    },
    ServerSearchResponse
  >;
  type ServerSearchFn = (
    ctx: ServerSearchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerServerErrorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ServerServerErrorResponse
  >;
  type ServerServerErrorFn = (
    ctx: ServerServerErrorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerSetFileFilesValidated = {
    myFile: {
      size: number;
      filepath: string;
      originalFilename?: string;
      newFilename?: string;
      mimetype?: string;
      mtime?: Date;
      hashAlgorithm?: "sha1" | "md5" | "sha256";
      hash?: string;
    };
  };
  type ServerSetFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedFiles: ServerSetFileFilesValidated;
    },
    ServerSetFileResponse
  >;
  type ServerSetFileFn = (
    ctx: ServerSetFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerSetMimeCheckedFileFilesValidated = ServerSetFileFilesValidated;
  type ServerSetMimeCheckedFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedFiles: ServerSetMimeCheckedFileFilesValidated;
    },
    ServerSetMimeCheckedFileResponse
  >;
  type ServerSetMimeCheckedFileFn = (
    ctx: ServerSetMimeCheckedFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerValidatorShimCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ServerValidatorShimBody;
    },
    ServerValidatorShimResponse
  >;
  type ServerValidatorShimFn = (
    ctx: ServerValidatorShimCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupMiddleware = {
    compas: Middleware | Middleware[];
    group: Middleware | Middleware[];
    server: Middleware | Middleware[];
  };
  type CompasStructureResponseApiResponse = CompasStructureResponse;
  type GroupFullRouteParamsInput = { full: string; color: number | string };
  type GroupFullRouteBodyInput = { foo: string; bar: ServerOptionsInput };
  type ServerOptionsInput = ServerOptions;
  type GroupFullRouteResponseApiResponse = {
    items: { foo: string; bar: ServerItemApiResponse }[];
  };
  type ServerItemApiResponse = {
    A: string;
    B: number;
    C: number;
    D: boolean;
    E: string;
  };
  type GroupRefRouteParamsInput = { id: ServerInputInput };
  type ServerInputInput = number | string;
  type GroupRefRouteQueryInput = GroupRefRouteQuery;
  type GroupRefRouteResponseApiResponse = BenchNestedApiResponse;
  type BenchNestedApiResponse = {
    foo: true;
    bar: 5;
    nest: BenchSimpleApiResponse[];
  };
  type BenchSimpleApiResponse = BenchSimple;
  type GroupUploadFilesInput = {
    input1: { name?: string; data: ReadableStream };
  };
  type GroupUploadResponseApiResponse = GroupUploadResponse;
  type ServerCreateQueryInput = ServerCreateQuery;
  type ServerCreateBodyInput = ServerCreateBody;
  type ServerCreateResponseApiResponse = ServerCreateResponse;
  type ServerEmptyResponseQueryInput = ServerEmptyResponseQuery;
  type ServerGetFileQueryInput = {
    throwError?: undefined | boolean | "true" | "false";
  };
  type ServerGetFileResponseApiResponse = GroupUploadResponse;
  type ServerGetIdParamsInput = { id: number | string };
  type ServerGetIdResponseApiResponse = ServerGetIdParams;
  type ServerInvalidResponseResponseApiResponse = ServerInvalidResponseResponse;
  type ServerPatchTestResponseApiResponse = ServerPatchTestResponse;
  type ServerSearchBodyInput = ServerCreateResponse;
  type ServerSearchResponseApiResponse = ServerSearchResponse;
  type ServerServerErrorResponseApiResponse = ServerPatchTestResponse;
  type ServerSetFileFilesInput = {
    myFile: { name?: string; data: ReadableStream };
  };
  type ServerSetFileResponseApiResponse = ServerSetFileResponse;
  type ServerSetMimeCheckedFileFilesInput = ServerSetFileFilesInput;
  type ServerSetMimeCheckedFileResponseApiResponse = ServerSetFileResponse;
  type ServerValidatorShimBodyInput = ServerValidatorShimBody;
  type ServerValidatorShimResponseApiResponse = ServerSetFileResponse;
  type SqlCategory = {
    id: string;
    label: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type SqlCategoryMeta = {
    postCount: number;
    isHighlighted?: undefined | boolean;
    isNew: boolean;
    id: string;
    category: string;
  };
  type SqlCoolString = undefined | "true" | "false";
  type SqlJobStatusAggregate = { id: string; job: number };
  type SqlPost = {
    title: string;
    body: string;
    id: string;
    writer: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  type SqlPostCategory = {
    id: string;
    post: string;
    category: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type SqlPostage = {
    value: number;
    id: string;
    post: string;
    images: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  type SqlUser = {
    nickName: string;
    email: string;
    authKey: string;
    isCool?: SqlCoolString;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  type StoreFile = {
    bucketName: string;
    contentLength: number;
    contentType: string;
    name: string;
    meta: StoreFileMeta;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  // User definable, optional object to store whatever you want
  type StoreFileMeta = {
    transforms?: undefined | any;
    transformedFromOriginal?: undefined | string;
  };
  type StoreFileGroup = {
    name?: undefined | string;
    order: number;
    meta: StoreFileGroupMeta;
    id: string;
    file?: undefined | string;
    parent?: undefined | string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  // User definable, optional object to store whatever you want
  type StoreFileGroupMeta = ServerPatchTestResponse;
  type StoreJob = {
    id: number;
    isComplete: boolean;
    priority: number;
    scheduledAt: Date;
    name: string;
    data: any;
    retryCount: number;
    handlerTimeout?: undefined | number;
    createdAt: Date;
    updatedAt: Date;
  };
  type SqlCategoryWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlCategoryWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    label?: undefined | string;
    labelNotEqual?: undefined | string;
    labelIn?: undefined | string[] | QueryPart<any>;
    labelNotIn?: undefined | string[] | QueryPart<any>;
    labelLike?: undefined | string;
    labelILike?: undefined | string;
    labelNotLike?: undefined | string;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    postsExists?: undefined | SqlPostCategoryWhere;
    postsNotExists?: undefined | SqlPostCategoryWhere;
    metaExists?: undefined | SqlCategoryMetaWhere;
    metaNotExists?: undefined | SqlCategoryMetaWhere;
  };
  type SqlPostCategoryWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlPostCategoryWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    category?: undefined | string;
    categoryNotEqual?: undefined | string;
    categoryIn?: undefined | string[] | QueryPart<any>;
    categoryNotIn?: undefined | string[] | QueryPart<any>;
    post?: undefined | string;
    postNotEqual?: undefined | string;
    postIn?: undefined | string[] | QueryPart<any>;
    postNotIn?: undefined | string[] | QueryPart<any>;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
  };
  type SqlCategoryMetaWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlCategoryMetaWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    category?: undefined | string;
    categoryNotEqual?: undefined | string;
    categoryIn?: undefined | string[] | QueryPart<any>;
    categoryNotIn?: undefined | string[] | QueryPart<any>;
    isHighlighted?: undefined | boolean;
    isHighlightedIsNull?: undefined | boolean;
    isHighlightedIsNotNull?: undefined | boolean;
  };
  type SqlJobStatusAggregateWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlJobStatusAggregateWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    job?: undefined | number;
    jobNotEqual?: undefined | number;
    jobIn?: undefined | number[] | QueryPart<any>;
    jobNotIn?: undefined | number[] | QueryPart<any>;
    jobGreaterThan?: undefined | number;
    jobLowerThan?: undefined | number;
  };
  type SqlPostWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlPostWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    writer?: undefined | string;
    writerNotEqual?: undefined | string;
    writerIn?: undefined | string[] | QueryPart<any>;
    writerNotIn?: undefined | string[] | QueryPart<any>;
    title?: undefined | string;
    titleNotEqual?: undefined | string;
    titleIn?: undefined | string[] | QueryPart<any>;
    titleNotIn?: undefined | string[] | QueryPart<any>;
    titleLike?: undefined | string;
    titleILike?: undefined | string;
    titleNotLike?: undefined | string;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    categoriesExists?: undefined | SqlPostCategoryWhere;
    categoriesNotExists?: undefined | SqlPostCategoryWhere;
    postagesExists?: undefined | SqlPostageWhere;
    postagesNotExists?: undefined | SqlPostageWhere;
  };
  type SqlPostageWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlPostageWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    images?: undefined | string;
    imagesNotEqual?: undefined | string;
    imagesIn?: undefined | string[] | QueryPart<any>;
    imagesNotIn?: undefined | string[] | QueryPart<any>;
    post?: undefined | string;
    postNotEqual?: undefined | string;
    postIn?: undefined | string[] | QueryPart<any>;
    postNotIn?: undefined | string[] | QueryPart<any>;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
  };
  type SqlUserWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlUserWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    email?: undefined | string;
    emailNotEqual?: undefined | string;
    emailIn?: undefined | string[] | QueryPart<any>;
    emailNotIn?: undefined | string[] | QueryPart<any>;
    emailLike?: undefined | string;
    emailILike?: undefined | string;
    emailNotLike?: undefined | string;
    isCool?: undefined | "true" | "false";
    isCoolNotEqual?: undefined | "true" | "false";
    isCoolIn?: undefined | ("true" | "false")[] | QueryPart<any>;
    isCoolNotIn?: undefined | ("true" | "false")[] | QueryPart<any>;
    isCoolLike?: undefined | "true" | "false";
    isCoolILike?: undefined | "true" | "false";
    isCoolNotLike?: undefined | "true" | "false";
    isCoolIsNull?: undefined | boolean;
    isCoolIsNotNull?: undefined | boolean;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    postsExists?: undefined | SqlPostWhere;
    postsNotExists?: undefined | SqlPostWhere;
  };
  type StoreFileWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreFileWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    bucketName?: undefined | string;
    bucketNameNotEqual?: undefined | string;
    bucketNameIn?: undefined | string[] | QueryPart<any>;
    bucketNameNotIn?: undefined | string[] | QueryPart<any>;
    bucketNameLike?: undefined | string;
    bucketNameILike?: undefined | string;
    bucketNameNotLike?: undefined | string;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    groupExists?: undefined | StoreFileGroupWhere;
    groupNotExists?: undefined | StoreFileGroupWhere;
  };
  type StoreFileGroupWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreFileGroupWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    order?: undefined | number;
    orderNotEqual?: undefined | number;
    orderIn?: undefined | number[] | QueryPart<any>;
    orderNotIn?: undefined | number[] | QueryPart<any>;
    orderGreaterThan?: undefined | number;
    orderLowerThan?: undefined | number;
    orderIsNull?: undefined | boolean;
    orderIsNotNull?: undefined | boolean;
    file?: undefined | string;
    fileNotEqual?: undefined | string;
    fileIn?: undefined | string[] | QueryPart<any>;
    fileNotIn?: undefined | string[] | QueryPart<any>;
    fileIsNull?: undefined | boolean;
    fileIsNotNull?: undefined | boolean;
    parent?: undefined | string;
    parentNotEqual?: undefined | string;
    parentIn?: undefined | string[] | QueryPart<any>;
    parentNotIn?: undefined | string[] | QueryPart<any>;
    parentIsNull?: undefined | boolean;
    parentIsNotNull?: undefined | boolean;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    childrenExists?: undefined | StoreFileGroupWhere;
    childrenNotExists?: undefined | StoreFileGroupWhere;
    postageImagesExists?: undefined | SqlPostageWhere;
    postageImagesNotExists?: undefined | SqlPostageWhere;
  };
  type StoreJobWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreJobWhere[];
    id?: undefined | number;
    idNotEqual?: undefined | number;
    idIn?: undefined | number[] | QueryPart<any>;
    idNotIn?: undefined | number[] | QueryPart<any>;
    idGreaterThan?: undefined | number;
    idLowerThan?: undefined | number;
    isComplete?: undefined | boolean;
    isCompleteIsNull?: undefined | boolean;
    isCompleteIsNotNull?: undefined | boolean;
    name?: undefined | string;
    nameNotEqual?: undefined | string;
    nameIn?: undefined | string[] | QueryPart<any>;
    nameNotIn?: undefined | string[] | QueryPart<any>;
    nameLike?: undefined | string;
    nameILike?: undefined | string;
    nameNotLike?: undefined | string;
    scheduledAt?: undefined | Date;
    scheduledAtNotEqual?: undefined | Date;
    scheduledAtIn?: undefined | Date[] | QueryPart<any>;
    scheduledAtNotIn?: undefined | Date[] | QueryPart<any>;
    scheduledAtGreaterThan?: undefined | Date;
    scheduledAtLowerThan?: undefined | Date;
    scheduledAtIsNull?: undefined | boolean;
    scheduledAtIsNotNull?: undefined | boolean;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    statusExists?: undefined | SqlJobStatusAggregateWhere;
    statusNotExists?: undefined | SqlJobStatusAggregateWhere;
  };
  type SqlCategoryOrderBy =
    | QueryPart<any>
    | ("id" | "label" | "createdAt" | "updatedAt")[];
  type SqlCategoryOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    label?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type CompasSqlOrderBy = "ASC" | "DESC";
  type SqlCategoryMetaOrderBy =
    | QueryPart<any>
    | ("id" | "category" | "isHighlighted")[];
  type SqlCategoryMetaOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    category?: undefined | CompasSqlOrderBy;
    isHighlighted?: undefined | CompasSqlOrderByOptionalField;
  };
  type CompasSqlOrderByOptionalField =
    | "ASC"
    | "DESC"
    | "ASC NULLS FIRST"
    | "DESC NULLS LAST";
  type SqlJobStatusAggregateOrderBy = QueryPart<any> | ("id" | "job")[];
  type SqlJobStatusAggregateOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    job?: undefined | CompasSqlOrderBy;
  };
  type SqlPostOrderBy =
    | QueryPart<any>
    | ("id" | "writer" | "title" | "createdAt" | "updatedAt" | "deletedAt")[];
  type SqlPostOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    writer?: undefined | CompasSqlOrderBy;
    title?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type SqlPostCategoryOrderBy =
    | QueryPart<any>
    | ("id" | "category" | "post" | "createdAt" | "updatedAt")[];
  type SqlPostCategoryOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    category?: undefined | CompasSqlOrderBy;
    post?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type SqlPostageOrderBy =
    | QueryPart<any>
    | ("id" | "images" | "post" | "createdAt" | "updatedAt" | "deletedAt")[];
  type SqlPostageOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    images?: undefined | CompasSqlOrderBy;
    post?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type SqlUserOrderBy =
    | QueryPart<any>
    | ("id" | "email" | "isCool" | "createdAt" | "updatedAt" | "deletedAt")[];
  type SqlUserOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    email?: undefined | CompasSqlOrderBy;
    isCool?: undefined | CompasSqlOrderByOptionalField;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreFileOrderBy =
    | QueryPart<any>
    | ("id" | "bucketName" | "createdAt" | "updatedAt" | "deletedAt")[];
  type StoreFileOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    bucketName?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreFileGroupOrderBy =
    | QueryPart<any>
    | (
        | "id"
        | "order"
        | "file"
        | "parent"
        | "createdAt"
        | "updatedAt"
        | "deletedAt"
      )[];
  type StoreFileGroupOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    order?: undefined | CompasSqlOrderByOptionalField;
    file?: undefined | CompasSqlOrderByOptionalField;
    parent?: undefined | CompasSqlOrderByOptionalField;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreJobOrderBy =
    | QueryPart<any>
    | (
        | "id"
        | "isComplete"
        | "name"
        | "scheduledAt"
        | "createdAt"
        | "updatedAt"
      )[];
  type StoreJobOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    isComplete?: undefined | CompasSqlOrderByOptionalField;
    name?: undefined | CompasSqlOrderBy;
    scheduledAt?: undefined | CompasSqlOrderByOptionalField;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type SqlCategoryInsertPartial = {
    id?: undefined | string;
    label: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlCategoryUpdatePartial = {
    label?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlCategoryMetaInsertPartial = {
    id?: undefined | string;
    isNew?: undefined | null | boolean;
    postCount: number;
    category: string;
    isHighlighted?: undefined | null | boolean;
  };
  type SqlCategoryMetaUpdatePartial = {
    isNew?: undefined | boolean;
    postCount?: undefined | number;
    category?: undefined | string;
    isHighlighted?: undefined | null | boolean;
  };
  type SqlJobStatusAggregateInsertPartial = {
    id?: undefined | string;
    job: number;
  };
  type SqlJobStatusAggregateUpdatePartial = { job?: undefined | number };
  type SqlPostInsertPartial = {
    id?: undefined | string;
    writer: string;
    body: string;
    title: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlPostUpdatePartial = {
    writer?: undefined | string;
    body?: undefined | string;
    title?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlPostCategoryInsertPartial = {
    id?: undefined | string;
    category: string;
    post: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlPostCategoryUpdatePartial = {
    category?: undefined | string;
    post?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlPostageInsertPartial = {
    id?: undefined | string;
    value: number;
    images: string;
    post: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlPostageUpdatePartial = {
    value?: undefined | number;
    images?: undefined | string;
    post?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlUserInsertPartial = {
    id?: undefined | string;
    authKey: string;
    email: string;
    nickName: string;
    isCool?: undefined | null | "true" | "false";
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlUserUpdatePartial = {
    authKey?: undefined | string;
    email?: undefined | string;
    nickName?: undefined | string;
    isCool?: undefined | null | "true" | "false";
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileInsertPartial = {
    id?: undefined | string;
    contentLength: number;
    bucketName: string;
    contentType: string;
    name: string;
    meta?:
      | undefined
      | {
          transforms?: undefined | any;
          transformedFromOriginal?: undefined | string;
        };
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileUpdatePartial = {
    contentLength?: undefined | number;
    bucketName?: undefined | string;
    contentType?: undefined | string;
    name?: undefined | string;
    meta?:
      | undefined
      | {
          transforms?: undefined | any;
          transformedFromOriginal?: undefined | string;
        };
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileGroupInsertPartial = {
    id?: undefined | string;
    order?: undefined | number;
    file?: undefined | null | string;
    parent?: undefined | null | string;
    name?: undefined | null | string;
    meta?: undefined | {};
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileGroupUpdatePartial = {
    order?: undefined | number;
    file?: undefined | null | string;
    parent?: undefined | null | string;
    name?: undefined | null | string;
    meta?: undefined | {};
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreJobInsertPartial = {
    id?: undefined | number;
    isComplete?: undefined | boolean;
    handlerTimeout?: undefined | null | number;
    priority?: undefined | number;
    retryCount?: undefined | number;
    name: string;
    scheduledAt?: undefined | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreJobUpdatePartial = {
    isComplete?: undefined | boolean;
    handlerTimeout?: undefined | null | number;
    priority?: undefined | number;
    retryCount?: undefined | number;
    name?: undefined | string;
    scheduledAt?: undefined | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlCategoryQueryBuilder = {
    where?: undefined | SqlCategoryWhere;
    orderBy?: undefined | SqlCategoryOrderBy;
    orderBySpec?: undefined | SqlCategoryOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    posts?: undefined | SqlPostCategoryQueryBuilder;
    viaPosts?: undefined | SqlPostCategoryQueryTraverser;
    meta?: undefined | SqlCategoryMetaQueryBuilder;
    viaMeta?: undefined | SqlCategoryMetaQueryTraverser;
  };
  type SqlPostCategoryQueryBuilder = {
    where?: undefined | SqlPostCategoryWhere;
    orderBy?: undefined | SqlPostCategoryOrderBy;
    orderBySpec?: undefined | SqlPostCategoryOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    post?: undefined | SqlPostQueryBuilder;
    viaPost?: undefined | SqlPostQueryTraverser;
    category?: undefined | SqlCategoryQueryBuilder;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlPostQueryBuilder = {
    where?: undefined | SqlPostWhere;
    orderBy?: undefined | SqlPostOrderBy;
    orderBySpec?: undefined | SqlPostOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    writer?: undefined | SqlUserQueryBuilder;
    viaWriter?: undefined | SqlUserQueryTraverser;
    categories?: undefined | SqlPostCategoryQueryBuilder;
    viaCategories?: undefined | SqlPostCategoryQueryTraverser;
    postages?: undefined | SqlPostageQueryBuilder;
    viaPostages?: undefined | SqlPostageQueryTraverser;
  };
  type SqlUserQueryBuilder = {
    where?: undefined | SqlUserWhere;
    orderBy?: undefined | SqlUserOrderBy;
    orderBySpec?: undefined | SqlUserOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    posts?: undefined | SqlPostQueryBuilder;
    viaPosts?: undefined | SqlPostQueryTraverser;
  };
  type SqlPostQueryTraverser = {
    where?: undefined | SqlPostWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaWriter?: undefined | SqlUserQueryTraverser;
    viaCategories?: undefined | SqlPostCategoryQueryTraverser;
    viaPostages?: undefined | SqlPostageQueryTraverser;
  };
  type SqlUserQueryTraverser = {
    where?: undefined | SqlUserWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPosts?: undefined | SqlPostQueryTraverser;
  };
  type SqlPostCategoryQueryTraverser = {
    where?: undefined | SqlPostCategoryWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPost?: undefined | SqlPostQueryTraverser;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlCategoryQueryTraverser = {
    where?: undefined | SqlCategoryWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPosts?: undefined | SqlPostCategoryQueryTraverser;
    viaMeta?: undefined | SqlCategoryMetaQueryTraverser;
  };
  type SqlCategoryMetaQueryTraverser = {
    where?: undefined | SqlCategoryMetaWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlPostageQueryTraverser = {
    where?: undefined | SqlPostageWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPost?: undefined | SqlPostQueryTraverser;
    viaImages?: undefined | StoreFileGroupQueryTraverser;
  };
  type StoreFileGroupQueryTraverser = {
    where?: undefined | StoreFileGroupWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaFile?: undefined | StoreFileQueryTraverser;
    viaParent?: undefined | StoreFileGroupQueryTraverser;
    viaChildren?: undefined | StoreFileGroupQueryTraverser;
    viaPostageImages?: undefined | SqlPostageQueryTraverser;
  };
  type StoreFileQueryTraverser = {
    where?: undefined | StoreFileWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaGroup?: undefined | StoreFileGroupQueryTraverser;
  };
  type SqlPostageQueryBuilder = {
    where?: undefined | SqlPostageWhere;
    orderBy?: undefined | SqlPostageOrderBy;
    orderBySpec?: undefined | SqlPostageOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    post?: undefined | SqlPostQueryBuilder;
    viaPost?: undefined | SqlPostQueryTraverser;
    images?: undefined | StoreFileGroupQueryBuilder;
    viaImages?: undefined | StoreFileGroupQueryTraverser;
  };
  type StoreFileGroupQueryBuilder = {
    where?: undefined | StoreFileGroupWhere;
    orderBy?: undefined | StoreFileGroupOrderBy;
    orderBySpec?: undefined | StoreFileGroupOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    file?: undefined | StoreFileQueryBuilder;
    viaFile?: undefined | StoreFileQueryTraverser;
    parent?: undefined | StoreFileGroupQueryBuilder;
    viaParent?: undefined | StoreFileGroupQueryTraverser;
    children?: undefined | StoreFileGroupQueryBuilder;
    viaChildren?: undefined | StoreFileGroupQueryTraverser;
    postageImages?: undefined | SqlPostageQueryBuilder;
    viaPostageImages?: undefined | SqlPostageQueryTraverser;
  };
  type StoreFileQueryBuilder = {
    where?: undefined | StoreFileWhere;
    orderBy?: undefined | StoreFileOrderBy;
    orderBySpec?: undefined | StoreFileOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    group?: undefined | StoreFileGroupQueryBuilder;
    viaGroup?: undefined | StoreFileGroupQueryTraverser;
  };
  type SqlCategoryMetaQueryBuilder = {
    where?: undefined | SqlCategoryMetaWhere;
    orderBy?: undefined | SqlCategoryMetaOrderBy;
    orderBySpec?: undefined | SqlCategoryMetaOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    category?: undefined | SqlCategoryQueryBuilder;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlJobStatusAggregateQueryBuilder = {
    where?: undefined | SqlJobStatusAggregateWhere;
    orderBy?: undefined | SqlJobStatusAggregateOrderBy;
    orderBySpec?: undefined | SqlJobStatusAggregateOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    job?: undefined | StoreJobQueryBuilder;
    viaJob?: undefined | StoreJobQueryTraverser;
  };
  type StoreJobQueryBuilder = {
    where?: undefined | StoreJobWhere;
    orderBy?: undefined | StoreJobOrderBy;
    orderBySpec?: undefined | StoreJobOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    status?: undefined | SqlJobStatusAggregateQueryBuilder;
    viaStatus?: undefined | SqlJobStatusAggregateQueryTraverser;
  };
  type SqlJobStatusAggregateQueryTraverser = {
    where?: undefined | SqlJobStatusAggregateWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaJob?: undefined | StoreJobQueryTraverser;
  };
  type StoreJobQueryTraverser = {
    where?: undefined | StoreJobWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaStatus?: undefined | SqlJobStatusAggregateQueryTraverser;
  };
  type QueryResultSqlCategory = SqlCategory & {
    posts?: QueryResultSqlPostCategory[];
    meta?: QueryResultSqlCategoryMeta | string | number;
  };
  type QueryResultSqlCategoryMeta = SqlCategoryMeta & {
    category?: QueryResultSqlCategory | string | number;
  };
  type QueryResultSqlJobStatusAggregate = SqlJobStatusAggregate & {
    job?: QueryResultStoreJob | string | number;
  };
  type QueryResultSqlPost = SqlPost & {
    writer?: QueryResultSqlUser | string | number;
    categories?: QueryResultSqlPostCategory[];
    postages?: QueryResultSqlPostage[];
  };
  type QueryResultSqlPostCategory = SqlPostCategory & {
    post?: QueryResultSqlPost | string | number;
    category?: QueryResultSqlCategory | string | number;
  };
  type QueryResultSqlPostage = SqlPostage & {
    post?: QueryResultSqlPost | string | number;
    images?: QueryResultStoreFileGroup | string | number;
  };
  type QueryResultSqlUser = SqlUser & {
    posts?: QueryResultSqlPost[];
  };
  type QueryResultStoreFile = StoreFile & {
    group?: QueryResultStoreFileGroup | string | number;
  };
  type QueryResultStoreFileGroup = StoreFileGroup & {
    file?: QueryResultStoreFile | string | number;
    parent?: QueryResultStoreFileGroup | string | number;
    children?: QueryResultStoreFileGroup[];
    postageImages?: QueryResultSqlPostage | string | number;
  };
  type QueryResultStoreJob = StoreJob & {
    status?: QueryResultSqlJobStatusAggregate | string | number;
  };
  type ValidatorAnyOf = boolean | number;
  type ValidatorArray = boolean[];
  type ValidatorArrayConvert = ValidatorArray;
  type ValidatorArrayMinMax = ValidatorArray;
  type ValidatorBool = boolean;
  type ValidatorBoolAllowNull = undefined | null | boolean;
  type ValidatorBoolConvert = ValidatorBool;
  type ValidatorBoolDefault = ValidatorBool;
  type ValidatorBoolOneOf = true;
  type ValidatorBoolOptional = undefined | boolean;
  type ValidatorDate = Date;
  type ValidatorDateAllowNull = undefined | null | Date;
  type ValidatorDateDefault = ValidatorDate;
  type ValidatorDateFuture = ValidatorDate;
  type ValidatorDateMax = ValidatorDate;
  type ValidatorDateMin = ValidatorDate;
  type ValidatorDateOptional = undefined | Date;
  type ValidatorDatePast = ValidatorDate;
  type ValidatorGeneric = { [key: number]: boolean };
  type ValidatorNamedLevelOne = { levelOne: ValidatorNamedLevelTwo };
  type ValidatorNamedLevelTwo = { two: ValidatorNamedLevelThree };
  type ValidatorNamedLevelThree = { foo?: undefined | ValidatorNamedLevelOne };
  type ValidatorNumber = ServerInput;
  type ValidatorNumberConvert = ServerInput;
  type ValidatorNumberFloat = ServerInput;
  type ValidatorNumberMinMax = ServerInput;
  type ValidatorNumberOneOf = 1 | 3 | 5;
  type ValidatorObject = { bool: boolean; string: string };
  type ValidatorObjectLoose = ValidatorObject;
  type ValidatorObjectOptional = undefined | { bool: boolean; string: string };
  type ValidatorObjectWithOptionalReference = { ref?: ValidatorObjectOptional };
  type ValidatorRecursive = { recursive?: undefined | ValidatorRecursive };
  type ValidatorString = string;
  type ValidatorStringAllowNull = undefined | null | string;
  type ValidatorStringConvert = ValidatorString;
  type ValidatorStringDisallowedCharacters = ValidatorString;
  type ValidatorStringLower = ValidatorString;
  type ValidatorStringMinMax = ValidatorString;
  type ValidatorStringOneOf = "north" | "east";
  type ValidatorStringPattern = ValidatorString;
  type ValidatorStringTrim = ValidatorString;
  type ValidatorStringUpper = ValidatorString;
  type ValidatorUuid = ValidatorString;
  type DocParserBlock =
    | DocParserUnknownBlock
    | DocParserFunctionDeclarationBlock;
  type DocParserUnknownBlock = {
    type: "unknown";
    raw: string;
    range?: DocParserRange;
  };
  type DocParserRange =
    | undefined
    | {
        start: number;
        end: number;
        pkg: DocParserPackage;
        file: string;
        line?: undefined | string;
      };
  type DocParserPackage = "stdlib" | "cli" | "store" | "server";
  type DocParserFunctionDeclarationBlock = {
    type: "functionDeclaration";
    name?: undefined | string;
    summary?: undefined | string;
    description?: undefined | string;
    availableSince?: undefined | string;
    isVariable: boolean;
    parsedType: DocParserFunctionType;
    range?: DocParserRange;
  };
  type DocParserFunctionType = {
    type: "function";
    params: { name: string; description: string; type: DocParserType }[];
    returnType: DocParserType;
  };
  type DocParserType = DocParserLiteralType | DocParserFunctionType;
  type DocParserLiteralType = {
    type: "literal";
    value: string;
    isOptional?: undefined | boolean;
    defaultValue?: undefined | string;
    isDocBlockReference?: undefined | boolean;
  };
  type DocParserJSComment = {
    type: "MultiLine" | "SingleLine";
    value: string;
    range?: DocParserRange;
  };
  type StoreImageTransformOptions = { q: number; w: number };
  type StoreJobInterval = {
    years?: undefined | number;
    months?: undefined | number;
    days?: undefined | number;
    hours?: undefined | number;
    minutes?: undefined | number;
    seconds?: undefined | number;
  };
  type StoreSession = {
    expires: Date;
    data: any;
    id: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type StoreSessionStore = {
    data: any;
    checksum: string;
    revokedAt?: undefined | Date;
    id: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type StoreSessionStoreToken = {
    expiresAt: Date;
    revokedAt?: undefined | Date;
    createdAt: Date;
    id: string;
    session: string;
    refreshToken?: undefined | string;
  };
  type StoreSessionWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreSessionWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    expires?: undefined | Date;
    expiresNotEqual?: undefined | Date;
    expiresIn?: undefined | Date[] | QueryPart<any>;
    expiresNotIn?: undefined | Date[] | QueryPart<any>;
    expiresGreaterThan?: undefined | Date;
    expiresLowerThan?: undefined | Date;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
  };
  type StoreSessionStoreWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreSessionStoreWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    accessTokensExists?: undefined | StoreSessionStoreTokenWhere;
    accessTokensNotExists?: undefined | StoreSessionStoreTokenWhere;
  };
  type StoreSessionStoreTokenWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreSessionStoreTokenWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    session?: undefined | string;
    sessionNotEqual?: undefined | string;
    sessionIn?: undefined | string[] | QueryPart<any>;
    sessionNotIn?: undefined | string[] | QueryPart<any>;
    expiresAt?: undefined | Date;
    expiresAtNotEqual?: undefined | Date;
    expiresAtIn?: undefined | Date[] | QueryPart<any>;
    expiresAtNotIn?: undefined | Date[] | QueryPart<any>;
    expiresAtGreaterThan?: undefined | Date;
    expiresAtLowerThan?: undefined | Date;
    refreshToken?: undefined | string;
    refreshTokenNotEqual?: undefined | string;
    refreshTokenIn?: undefined | string[] | QueryPart<any>;
    refreshTokenNotIn?: undefined | string[] | QueryPart<any>;
    refreshTokenIsNull?: undefined | boolean;
    refreshTokenIsNotNull?: undefined | boolean;
    revokedAt?: undefined | Date;
    revokedAtNotEqual?: undefined | Date;
    revokedAtIn?: undefined | Date[] | QueryPart<any>;
    revokedAtNotIn?: undefined | Date[] | QueryPart<any>;
    revokedAtGreaterThan?: undefined | Date;
    revokedAtLowerThan?: undefined | Date;
    revokedAtIsNull?: undefined | boolean;
    revokedAtIsNotNull?: undefined | boolean;
    accessTokenExists?: undefined | StoreSessionStoreTokenWhere;
    accessTokenNotExists?: undefined | StoreSessionStoreTokenWhere;
  };
  type StoreSessionOrderBy =
    | QueryPart<any>
    | ("id" | "expires" | "createdAt" | "updatedAt")[];
  type StoreSessionOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    expires?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type StoreSessionStoreOrderBy =
    | QueryPart<any>
    | ("id" | "createdAt" | "updatedAt")[];
  type StoreSessionStoreOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type StoreSessionStoreTokenOrderBy =
    | QueryPart<any>
    | ("id" | "session" | "expiresAt" | "refreshToken" | "revokedAt")[];
  type StoreSessionStoreTokenOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    session?: undefined | CompasSqlOrderBy;
    expiresAt?: undefined | CompasSqlOrderBy;
    refreshToken?: undefined | CompasSqlOrderByOptionalField;
    revokedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreSessionInsertPartial = {
    id?: undefined | string;
    expires: Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreSessionUpdatePartial = {
    expires?: undefined | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreSessionStoreInsertPartial = {
    id?: undefined | string;
    checksum: string;
    revokedAt?: undefined | null | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreSessionStoreUpdatePartial = {
    checksum?: undefined | string;
    revokedAt?: undefined | null | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreSessionStoreTokenInsertPartial = {
    id?: undefined | string;
    session: string;
    expiresAt: Date;
    refreshToken?: undefined | null | string;
    revokedAt?: undefined | null | Date;
    createdAt: Date;
  };
  type StoreSessionStoreTokenUpdatePartial = {
    session?: undefined | string;
    expiresAt?: undefined | Date;
    refreshToken?: undefined | null | string;
    revokedAt?: undefined | null | Date;
    createdAt?: undefined | Date;
  };
  type StoreSessionQueryBuilder = {
    where?: undefined | StoreSessionWhere;
    orderBy?: undefined | StoreSessionOrderBy;
    orderBySpec?: undefined | StoreSessionOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
  };
  type StoreSessionQueryTraverser = {
    where?: undefined | StoreSessionWhere;
    limit?: undefined | number;
    offset?: undefined | number;
  };
  type StoreSessionStoreQueryBuilder = {
    where?: undefined | StoreSessionStoreWhere;
    orderBy?: undefined | StoreSessionStoreOrderBy;
    orderBySpec?: undefined | StoreSessionStoreOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    accessTokens?: undefined | StoreSessionStoreTokenQueryBuilder;
    viaAccessTokens?: undefined | StoreSessionStoreTokenQueryTraverser;
  };
  type StoreSessionStoreTokenQueryBuilder = {
    where?: undefined | StoreSessionStoreTokenWhere;
    orderBy?: undefined | StoreSessionStoreTokenOrderBy;
    orderBySpec?: undefined | StoreSessionStoreTokenOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    session?: undefined | StoreSessionStoreQueryBuilder;
    viaSession?: undefined | StoreSessionStoreQueryTraverser;
    refreshToken?: undefined | StoreSessionStoreTokenQueryBuilder;
    viaRefreshToken?: undefined | StoreSessionStoreTokenQueryTraverser;
    accessToken?: undefined | StoreSessionStoreTokenQueryBuilder;
    viaAccessToken?: undefined | StoreSessionStoreTokenQueryTraverser;
  };
  type StoreSessionStoreQueryTraverser = {
    where?: undefined | StoreSessionStoreWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaAccessTokens?: undefined | StoreSessionStoreTokenQueryTraverser;
  };
  type StoreSessionStoreTokenQueryTraverser = {
    where?: undefined | StoreSessionStoreTokenWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaSession?: undefined | StoreSessionStoreQueryTraverser;
    viaRefreshToken?: undefined | StoreSessionStoreTokenQueryTraverser;
    viaAccessToken?: undefined | StoreSessionStoreTokenQueryTraverser;
  };
  type QueryResultStoreSession = StoreSession & {};
  type QueryResultStoreSessionStore = StoreSessionStore & {
    accessTokens?: QueryResultStoreSessionStoreToken[];
  };
  type QueryResultStoreSessionStoreToken = StoreSessionStoreToken & {
    session?: QueryResultStoreSessionStore | string | number;
    refreshToken?: QueryResultStoreSessionStoreToken | string | number;
    accessToken?: QueryResultStoreSessionStoreToken | string | number;
  };
}
