// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { ParameterizedContext as Context } from "koa";
import { InsightEvent, Logger } from "@compas/stdlib";
import { Next } from "@compas/server";
import { Middleware } from "@compas/server";
import { QueryPart } from "@compas/store";
declare global {
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg =
    | undefined
    | any;
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPath = {
    org: string;
    runner_group_id: number;
    repository_id: number;
  };
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse = any;
  type ActionsActionsAddSelectedRepoToOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsAddSelectedRepoToOrgSecretPath = {
    org: string;
    secret_name: string;
    repository_id: number;
  };
  type ActionsActionsAddSelectedRepoToOrgSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsAddSelfHostedRunnerToGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsAddSelfHostedRunnerToGroupForOrgPath = {
    org: string;
    runner_group_id: number;
    runner_id: number;
  };
  type ActionsActionsAddSelfHostedRunnerToGroupForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCancelWorkflowRun =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCancelWorkflowRunPath = {
    owner: string;
    repo: string;
    run_id: number;
  };
  type ActionsActionsCancelWorkflowRunResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCreateOrUpdateOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateOrUpdateOrgSecretBody =
    | undefined
    | {
        encrypted_value?: undefined | string;
        key_id?: undefined | string;
        visibility?: undefined | "all" | "private" | "selected";
        selected_repository_ids?: undefined | string[];
      };
  type ActionsActionsCreateOrUpdateOrgSecretPath = {
    org: string;
    secret_name: string;
  };
  type ActionsActionsCreateOrUpdateOrgSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCreateOrUpdateRepoSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateOrUpdateRepoSecretBody =
    | undefined
    | { encrypted_value?: undefined | string; key_id?: undefined | string };
  type ActionsActionsCreateOrUpdateRepoSecretPath = {
    owner: string;
    repo: string;
    secret_name: string;
  };
  type ActionsActionsCreateOrUpdateRepoSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCreateRegistrationTokenForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateRegistrationTokenForOrgPath = { org: string };
  type ActionsActionsCreateRegistrationTokenForOrgResponse =
    GithubApiAuthenticationToken;
  type GithubApiAuthenticationToken = {
    token: string;
    expires_at: string;
    permissions?: undefined | { [key: string]: any };
    repositories?: undefined | GithubApiRepository[];
    single_file?: undefined | string;
    repository_selection?: undefined | "all" | "selected";
  };
  type GithubApiRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: GithubApiLicenseSimple;
    forks: number;
    permissions?:
      | undefined
      | {
          admin: boolean;
          pull: boolean;
          triage?: undefined | boolean;
          push: boolean;
          maintain?: undefined | boolean;
        };
    owner: GithubApiSimpleUser;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics?: undefined | string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    allow_rebase_merge: boolean;
    template_repository?:
      | undefined
      | {
          id?: undefined | number;
          node_id?: undefined | string;
          name?: undefined | string;
          full_name?: undefined | string;
          owner?:
            | undefined
            | {
                login?: undefined | string;
                id?: undefined | number;
                node_id?: undefined | string;
                avatar_url?: undefined | string;
                gravatar_id?: undefined | string;
                url?: undefined | string;
                html_url?: undefined | string;
                followers_url?: undefined | string;
                following_url?: undefined | string;
                gists_url?: undefined | string;
                starred_url?: undefined | string;
                subscriptions_url?: undefined | string;
                organizations_url?: undefined | string;
                repos_url?: undefined | string;
                events_url?: undefined | string;
                received_events_url?: undefined | string;
                type?: undefined | string;
                site_admin?: undefined | boolean;
              };
          private?: undefined | boolean;
          html_url?: undefined | string;
          description?: undefined | string;
          fork?: undefined | boolean;
          url?: undefined | string;
          archive_url?: undefined | string;
          assignees_url?: undefined | string;
          blobs_url?: undefined | string;
          branches_url?: undefined | string;
          collaborators_url?: undefined | string;
          comments_url?: undefined | string;
          commits_url?: undefined | string;
          compare_url?: undefined | string;
          contents_url?: undefined | string;
          contributors_url?: undefined | string;
          deployments_url?: undefined | string;
          downloads_url?: undefined | string;
          events_url?: undefined | string;
          forks_url?: undefined | string;
          git_commits_url?: undefined | string;
          git_refs_url?: undefined | string;
          git_tags_url?: undefined | string;
          git_url?: undefined | string;
          issue_comment_url?: undefined | string;
          issue_events_url?: undefined | string;
          issues_url?: undefined | string;
          keys_url?: undefined | string;
          labels_url?: undefined | string;
          languages_url?: undefined | string;
          merges_url?: undefined | string;
          milestones_url?: undefined | string;
          notifications_url?: undefined | string;
          pulls_url?: undefined | string;
          releases_url?: undefined | string;
          ssh_url?: undefined | string;
          stargazers_url?: undefined | string;
          statuses_url?: undefined | string;
          subscribers_url?: undefined | string;
          subscription_url?: undefined | string;
          tags_url?: undefined | string;
          teams_url?: undefined | string;
          trees_url?: undefined | string;
          clone_url?: undefined | string;
          mirror_url?: undefined | string;
          hooks_url?: undefined | string;
          svn_url?: undefined | string;
          homepage?: undefined | string;
          language?: undefined | string;
          forks_count?: undefined | number;
          stargazers_count?: undefined | number;
          watchers_count?: undefined | number;
          size?: undefined | number;
          default_branch?: undefined | string;
          open_issues_count?: undefined | number;
          is_template?: undefined | boolean;
          topics?: undefined | string[];
          has_issues?: undefined | boolean;
          has_projects?: undefined | boolean;
          has_wiki?: undefined | boolean;
          has_pages?: undefined | boolean;
          has_downloads?: undefined | boolean;
          archived?: undefined | boolean;
          disabled?: undefined | boolean;
          visibility?: undefined | string;
          pushed_at?: undefined | string;
          created_at?: undefined | string;
          updated_at?: undefined | string;
          permissions?:
            | undefined
            | {
                admin?: undefined | boolean;
                push?: undefined | boolean;
                pull?: undefined | boolean;
              };
          allow_rebase_merge?: undefined | boolean;
          temp_clone_token?: undefined | string;
          allow_squash_merge?: undefined | boolean;
          delete_branch_on_merge?: undefined | boolean;
          allow_merge_commit?: undefined | boolean;
          subscribers_count?: undefined | number;
          network_count?: undefined | number;
        };
    temp_clone_token?: undefined | string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count?: undefined | number;
    network_count?: undefined | number;
    open_issues: number;
    watchers: number;
    master_branch?: undefined | string;
    starred_at?: undefined | string;
  };
  type GithubApiLicenseSimple = {
    key: string;
    name: string;
    url: string;
    spdx_id: string;
    node_id: string;
    html_url?: undefined | string;
  };
  type GithubApiSimpleUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    starred_at?: undefined | string;
  };
  type ActionsActionsCreateRegistrationTokenForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateRegistrationTokenForRepoPath = {
    owner: string;
    repo: string;
  };
  type ActionsActionsCreateRegistrationTokenForRepoResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponse;
  type ActionsActionsCreateRemoveTokenForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateRemoveTokenForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsCreateRemoveTokenForOrgResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponse;
  type ActionsActionsCreateRemoveTokenForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateRemoveTokenForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsCreateRemoveTokenForRepoResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponse;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgBody =
    | undefined
    | {
        name: string;
        visibility: "selected" | "all" | "private";
        selected_repository_ids?: undefined | number[];
        runners?: undefined | number[];
      };
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgResponse =
    GithubApiRunnerGroupsOrg;
  type GithubApiRunnerGroupsOrg = {
    id?: undefined | number;
    name?: undefined | string;
    visibility?: undefined | string;
    default?: undefined | boolean;
    selected_repositories_url?: undefined | string;
    runners_url?: undefined | string;
    inherited?: undefined | boolean;
  };
  type ActionsActionsCreateWorkflowDispatch =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsCreateWorkflowDispatchBody =
    | undefined
    | { ref: string; inputs?: undefined | { [key: string]: string } };
  type ActionsActionsCreateWorkflowDispatchPath = {
    owner: string;
    repo: string;
    workflow_id: number | string;
  };
  type ActionsActionsCreateWorkflowDispatchResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteArtifact =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteArtifactPath = {
    owner: string;
    repo: string;
    artifact_id: number;
  };
  type ActionsActionsDeleteArtifactResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteOrgSecretPath =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsDeleteOrgSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteRepoSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteRepoSecretPath =
    ActionsActionsCreateOrUpdateRepoSecretPath;
  type ActionsActionsDeleteRepoSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteSelfHostedRunnerFromOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteSelfHostedRunnerFromOrgPath = {
    org: string;
    runner_id: number;
  };
  type ActionsActionsDeleteSelfHostedRunnerFromOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteSelfHostedRunnerFromRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteSelfHostedRunnerFromRepoPath = {
    owner: string;
    repo: string;
    runner_id: number;
  };
  type ActionsActionsDeleteSelfHostedRunnerFromRepoResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath = {
    org: string;
    runner_group_id: number;
  };
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteWorkflowRun =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteWorkflowRunLogs =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDeleteWorkflowRunLogsPath =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsDeleteWorkflowRunLogsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteWorkflowRunPath =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsDeleteWorkflowRunResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationPath = {
    org: string;
    repository_id: number;
  };
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDisableWorkflow =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDisableWorkflowPath =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsDisableWorkflowResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDownloadArtifact =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDownloadArtifactPath = {
    owner: string;
    repo: string;
    artifact_id: number;
    archive_format: string;
  };
  type ActionsActionsDownloadArtifactResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDownloadJobLogsForWorkflowRun =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDownloadJobLogsForWorkflowRunPath = {
    owner: string;
    repo: string;
    job_id: number;
  };
  type ActionsActionsDownloadJobLogsForWorkflowRunResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDownloadWorkflowRunLogs =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsDownloadWorkflowRunLogsPath =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsDownloadWorkflowRunLogsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationPath =
    ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationPath;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsEnableWorkflow =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsEnableWorkflowPath =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsEnableWorkflowResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsGetAllowedActionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetAllowedActionsOrganizationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsGetAllowedActionsOrganizationResponse =
    GithubApiSelectedActions;
  type GithubApiSelectedActions = {
    github_owned_allowed?: undefined | boolean;
    verified_allowed?: undefined | boolean;
    patterns_allowed?: undefined | string[];
  };
  type ActionsActionsGetAllowedActionsRepository =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetAllowedActionsRepositoryPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsGetAllowedActionsRepositoryResponse =
    ActionsActionsGetAllowedActionsOrganizationResponse;
  type ActionsActionsGetArtifact =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetArtifactPath = ActionsActionsDeleteArtifactPath;
  type ActionsActionsGetArtifactResponse = GithubApiArtifact;
  type GithubApiArtifact = {
    id: number;
    node_id: string;
    name: string;
    size_in_bytes: number;
    url: string;
    archive_download_url: string;
    expired: boolean;
    created_at: string;
    expires_at: string;
    updated_at: string;
  };
  type ActionsActionsGetGithubActionsPermissionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetGithubActionsPermissionsOrganizationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsGetGithubActionsPermissionsOrganizationResponse =
    GithubApiActionsOrganizationPermissions;
  type GithubApiActionsOrganizationPermissions = {
    enabled_repositories?: undefined | GithubApiEnabledRepositories;
    selected_repositories_url?: undefined | string;
    allowed_actions?: undefined | GithubApiAllowedActions;
    selected_actions_url?: undefined | GithubApiSelectedActionsUrl;
  };
  type GithubApiEnabledRepositories = "all" | "none" | "selected";
  type GithubApiAllowedActions = "all" | "local_only" | "selected";
  type GithubApiSelectedActionsUrl = string;
  type ActionsActionsGetGithubActionsPermissionsRepository =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetGithubActionsPermissionsRepositoryPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsGetGithubActionsPermissionsRepositoryResponse =
    GithubApiActionsRepositoryPermissions;
  type GithubApiActionsRepositoryPermissions = {
    enabled?: undefined | GithubApiActionsEnabled;
    allowed_actions?: undefined | GithubApiAllowedActions;
    selected_actions_url?: undefined | GithubApiSelectedActionsUrl;
  };
  type GithubApiActionsEnabled = boolean;
  type ActionsActionsGetJobForWorkflowRun =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetJobForWorkflowRunPath =
    ActionsActionsDownloadJobLogsForWorkflowRunPath;
  type ActionsActionsGetJobForWorkflowRunResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsGetOrgPublicKey =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetOrgPublicKeyPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsGetOrgPublicKeyResponse = GithubApiActionsPublicKey;
  type GithubApiActionsPublicKey = {
    key_id: string;
    key: string;
    id?: undefined | number;
    url?: undefined | string;
    title?: undefined | string;
    created_at?: undefined | string;
  };
  type ActionsActionsGetOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetOrgSecretPath =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsGetOrgSecretResponse = GithubApiOrganizationActionsSecret;
  type GithubApiOrganizationActionsSecret = {
    name: string;
    created_at: string;
    updated_at: string;
    visibility: "all" | "private" | "selected";
    selected_repositories_url?: undefined | string;
  };
  type ActionsActionsGetRepoPublicKey =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetRepoPublicKeyPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsGetRepoPublicKeyResponse =
    ActionsActionsGetOrgPublicKeyResponse;
  type ActionsActionsGetRepoSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetRepoSecretPath =
    ActionsActionsCreateOrUpdateRepoSecretPath;
  type ActionsActionsGetRepoSecretResponse = GithubApiActionsSecret;
  type GithubApiActionsSecret = {
    name: string;
    created_at: string;
    updated_at: string;
  };
  type ActionsActionsGetSelfHostedRunnerForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetSelfHostedRunnerForOrgPath =
    ActionsActionsDeleteSelfHostedRunnerFromOrgPath;
  type ActionsActionsGetSelfHostedRunnerForOrgResponse = GithubApiRunner;
  type GithubApiRunner = {
    id: number;
    name: string;
    os: string;
    status: string;
    busy: boolean;
    labels: {
      id?: undefined | number;
      name?: undefined | string;
      type?: undefined | "read-only" | "custom";
    }[];
  };
  type ActionsActionsGetSelfHostedRunnerForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetSelfHostedRunnerForRepoPath =
    ActionsActionsDeleteSelfHostedRunnerFromRepoPath;
  type ActionsActionsGetSelfHostedRunnerForRepoResponse =
    ActionsActionsGetSelfHostedRunnerForOrgResponse;
  type ActionsActionsGetSelfHostedRunnerGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetSelfHostedRunnerGroupForOrgPath =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsGetSelfHostedRunnerGroupForOrgResponse =
    ActionsActionsCreateSelfHostedRunnerGroupForOrgResponse;
  type ActionsActionsGetWorkflow =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetWorkflowPath = ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsGetWorkflowResponse = GithubApiWorkflow;
  type GithubApiWorkflow = {
    id: number;
    node_id: string;
    name: string;
    path: string;
    state: "active" | "deleted";
    created_at: string;
    updated_at: string;
    url: string;
    html_url: string;
    badge_url: string;
    deleted_at?: undefined | string;
  };
  type ActionsActionsGetWorkflowRun =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetWorkflowRunPath = ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsGetWorkflowRunResponse = GithubApiWorkflowRun;
  type GithubApiWorkflowRun = {
    id: number;
    name?: undefined | string;
    node_id: string;
    head_branch: string;
    head_sha: string;
    run_number: number;
    event: string;
    status: string;
    conclusion: string;
    workflow_id: number;
    url: string;
    html_url: string;
    pull_requests: GithubApiPullRequestMinimal[];
    created_at: string;
    updated_at: string;
    jobs_url: string;
    logs_url: string;
    check_suite_url: string;
    artifacts_url: string;
    cancel_url: string;
    rerun_url: string;
    workflow_url: string;
    head_commit: GithubApiSimpleCommit;
    repository: GithubApiMinimalRepository;
    head_repository: GithubApiMinimalRepository;
    head_repository_id?: undefined | number;
  };
  type GithubApiPullRequestMinimal = {
    id: number;
    number: number;
    url: string;
    head: {
      ref: string;
      sha: string;
      repo: { id: number; url: string; name: string };
    };
    base: {
      ref: string;
      sha: string;
      repo: { id: number; url: string; name: string };
    };
  };
  type GithubApiSimpleCommit = {
    id: string;
    tree_id: string;
    message: string;
    timestamp: string;
    author: { name: string; email: string };
    committer: { name: string; email: string };
  };
  type GithubApiMinimalRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: { [key: string]: any };
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url?: undefined | string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url?: undefined | string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url?: undefined | string;
    mirror_url?: undefined | string;
    hooks_url: string;
    svn_url?: undefined | string;
    homepage?: undefined | string;
    language?: undefined | string;
    forks_count?: undefined | number;
    stargazers_count?: undefined | number;
    watchers_count?: undefined | number;
    size?: undefined | number;
    default_branch?: undefined | string;
    open_issues_count?: undefined | number;
    is_template?: undefined | boolean;
    topics?: undefined | string[];
    has_issues?: undefined | boolean;
    has_projects?: undefined | boolean;
    has_wiki?: undefined | boolean;
    has_pages?: undefined | boolean;
    has_downloads?: undefined | boolean;
    archived?: undefined | boolean;
    disabled?: undefined | boolean;
    visibility?: undefined | string;
    pushed_at?: undefined | string;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    permissions?:
      | undefined
      | {
          admin?: undefined | boolean;
          push?: undefined | boolean;
          pull?: undefined | boolean;
        };
    template_repository?: undefined | { [key: string]: any };
    temp_clone_token?: undefined | string;
    delete_branch_on_merge?: undefined | boolean;
    subscribers_count?: undefined | number;
    network_count?: undefined | number;
    license?:
      | undefined
      | {
          key?: undefined | string;
          name?: undefined | string;
          spdx_id?: undefined | string;
          url?: undefined | string;
          node_id?: undefined | string;
        };
    forks?: undefined | number;
    open_issues?: undefined | number;
    watchers?: undefined | number;
  };
  type ActionsActionsGetWorkflowRunUsage =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetWorkflowRunUsagePath =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsGetWorkflowRunUsageResponse = GithubApiWorkflowRunUsage;
  type GithubApiWorkflowRunUsage = {
    billable?:
      | undefined
      | {
          UBUNTU?:
            | undefined
            | { total_ms?: undefined | number; jobs?: undefined | number };
          MACOS?:
            | undefined
            | { total_ms?: undefined | number; jobs?: undefined | number };
          WINDOWS?:
            | undefined
            | { total_ms?: undefined | number; jobs?: undefined | number };
        };
    run_duration_ms?: undefined | number;
  };
  type ActionsActionsGetWorkflowUsage =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsGetWorkflowUsagePath =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsGetWorkflowUsageResponse = GithubApiWorkflowUsage;
  type GithubApiWorkflowUsage = {
    billable?:
      | undefined
      | {
          UBUNTU?: undefined | { total_ms?: undefined | number };
          MACOS?: undefined | { total_ms?: undefined | number };
          WINDOWS?: undefined | { total_ms?: undefined | number };
        };
  };
  type ActionsActionsListArtifactsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListArtifactsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListArtifactsForRepoQuery = {
    per_page: number;
    page: number;
  };
  type ActionsActionsListArtifactsForRepoResponse = {
    total_count?: undefined | number;
    artifacts?: undefined | GithubApiArtifact[];
  };
  type ActionsActionsListJobsForWorkflowRun =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListJobsForWorkflowRunPath =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsListJobsForWorkflowRunQuery = {
    filter: "latest" | "all";
    per_page: number;
    page: number;
  };
  type ActionsActionsListJobsForWorkflowRunResponse = {
    total_count?: undefined | number;
    jobs?: undefined | GithubApiJob[];
  };
  type GithubApiJob = {
    id: number;
    run_id: number;
    run_url: string;
    node_id: string;
    head_sha: string;
    url: string;
    html_url: string;
    status: "queued" | "in_progress" | "completed";
    conclusion: string;
    started_at: string;
    completed_at: string;
    name: string;
    steps?:
      | undefined
      | {
          status: "queued" | "in_progress" | "completed";
          conclusion: string;
          name: string;
          number: number;
          started_at?: undefined | string;
          completed_at?: undefined | string;
        }[];
    check_run_url: string;
  };
  type ActionsActionsListOrgSecrets =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListOrgSecretsPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListOrgSecretsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListOrgSecretsResponse = {
    total_count?: undefined | number;
    secrets?: undefined | GithubApiOrganizationActionsSecret[];
  };
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgPath =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse = {
    total_count?: undefined | number;
    repositories?: undefined | GithubApiRepository[];
  };
  type ActionsActionsListRepoSecrets =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListRepoSecretsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListRepoSecretsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListRepoSecretsResponse = {
    total_count?: undefined | number;
    secrets?: undefined | GithubApiActionsSecret[];
  };
  type ActionsActionsListRepoWorkflows =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListRepoWorkflowsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListRepoWorkflowsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListRepoWorkflowsResponse = {
    total_count?: undefined | number;
    workflows?: undefined | GithubApiWorkflow[];
  };
  type ActionsActionsListRunnerApplicationsForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListRunnerApplicationsForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListRunnerApplicationsForOrgResponse =
    GithubApiRunnerApplication[];
  type GithubApiRunnerApplication = {
    os?: undefined | string;
    architecture?: undefined | string;
    download_url?: undefined | string;
    filename?: undefined | string;
  };
  type ActionsActionsListRunnerApplicationsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListRunnerApplicationsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListRunnerApplicationsForRepoResponse =
    ActionsActionsListRunnerApplicationsForOrgResponse;
  type ActionsActionsListSelectedReposForOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListSelectedReposForOrgSecretPath =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsListSelectedReposForOrgSecretResponse = {
    total_count?: undefined | number;
    repositories?: undefined | GithubApiMinimalRepository[];
  };
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse =
    ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsListSelfHostedRunnerGroupsForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgResponse = {
    total_count?: undefined | number;
    runner_groups?: undefined | GithubApiRunnerGroupsOrg[];
  };
  type ActionsActionsListSelfHostedRunnersForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListSelfHostedRunnersForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListSelfHostedRunnersForOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListSelfHostedRunnersForOrgResponse = {
    total_count?: undefined | number;
    runners?: undefined | GithubApiRunner[];
  };
  type ActionsActionsListSelfHostedRunnersForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListSelfHostedRunnersForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListSelfHostedRunnersForRepoQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListSelfHostedRunnersForRepoResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponse;
  type ActionsActionsListSelfHostedRunnersInGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgPath =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponse;
  type ActionsActionsListWorkflowRunArtifacts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListWorkflowRunArtifactsPath =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsListWorkflowRunArtifactsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActionsActionsListWorkflowRunArtifactsResponse =
    ActionsActionsListArtifactsForRepoResponse;
  type ActionsActionsListWorkflowRuns =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListWorkflowRunsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsListWorkflowRunsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListWorkflowRunsForRepoQuery = {
    actor?: undefined | string;
    branch?: undefined | string;
    event?: undefined | string;
    status?: undefined | "completed" | "status" | "conclusion";
    per_page: number;
    page: number;
  };
  type ActionsActionsListWorkflowRunsForRepoResponse = {
    total_count?: undefined | number;
    workflow_runs?: undefined | GithubApiWorkflowRun[];
  };
  type ActionsActionsListWorkflowRunsPath =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsListWorkflowRunsQuery =
    ActionsActionsListWorkflowRunsForRepoQuery;
  type ActionsActionsListWorkflowRunsResponse =
    ActionsActionsListWorkflowRunsForRepoResponse;
  type ActionsActionsReRunWorkflow =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsReRunWorkflowPath = ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsReRunWorkflowResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPath =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPath;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsRemoveSelectedRepoFromOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsRemoveSelectedRepoFromOrgSecretPath =
    ActionsActionsAddSelectedRepoToOrgSecretPath;
  type ActionsActionsRemoveSelectedRepoFromOrgSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgPath =
    ActionsActionsAddSelfHostedRunnerToGroupForOrgPath;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetAllowedActionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetAllowedActionsOrganizationBody =
    | undefined
    | GithubApiSelectedActions;
  type ActionsActionsSetAllowedActionsOrganizationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsSetAllowedActionsOrganizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetAllowedActionsRepository =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetAllowedActionsRepositoryBody =
    ActionsActionsSetAllowedActionsOrganizationBody;
  type ActionsActionsSetAllowedActionsRepositoryPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsSetAllowedActionsRepositoryResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetGithubActionsPermissionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetGithubActionsPermissionsOrganizationBody =
    | undefined
    | {
        enabled_repositories: GithubApiEnabledRepositories;
        allowed_actions?: undefined | GithubApiAllowedActions;
      };
  type ActionsActionsSetGithubActionsPermissionsOrganizationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsSetGithubActionsPermissionsOrganizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetGithubActionsPermissionsRepository =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetGithubActionsPermissionsRepositoryBody =
    | undefined
    | {
        enabled: GithubApiActionsEnabled;
        allowed_actions?: undefined | GithubApiAllowedActions;
      };
  type ActionsActionsSetGithubActionsPermissionsRepositoryPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsSetGithubActionsPermissionsRepositoryResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBody =
    | undefined
    | { selected_repository_ids: number[] };
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPath =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetSelectedReposForOrgSecret =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetSelectedReposForOrgSecretBody =
    | undefined
    | { selected_repository_ids?: undefined | number[] };
  type ActionsActionsSetSelectedReposForOrgSecretPath =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsSetSelectedReposForOrgSecretResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBody =
    ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBody;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgBody =
    | undefined
    | { runners: number[] };
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgPath =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgBody =
    | undefined
    | {
        name?: undefined | string;
        visibility?: undefined | "selected" | "all" | "private";
      };
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgPath =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgResponse =
    ActionsActionsCreateSelfHostedRunnerGroupForOrgResponse;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUserPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityDeleteRepoSubscription =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityDeleteRepoSubscriptionPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityDeleteRepoSubscriptionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityDeleteThreadSubscription =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityDeleteThreadSubscriptionPath = { thread_id: number };
  type ActivityActivityDeleteThreadSubscriptionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityGetFeeds =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityGetFeedsResponse = GithubApiFeed;
  type GithubApiFeed = {
    timeline_url: string;
    user_url: string;
    current_user_public_url?: undefined | string;
    current_user_url?: undefined | string;
    current_user_actor_url?: undefined | string;
    current_user_organization_url?: undefined | string;
    current_user_organization_urls?: undefined | string[];
    security_advisories_url?: undefined | string;
    _links: {
      timeline: GithubApiLinkWithType;
      user: GithubApiLinkWithType;
      security_advisories?: undefined | GithubApiLinkWithType;
      current_user?: undefined | GithubApiLinkWithType;
      current_user_public?: undefined | GithubApiLinkWithType;
      current_user_actor?: undefined | GithubApiLinkWithType;
      current_user_organization?: undefined | GithubApiLinkWithType;
      current_user_organizations?: undefined | GithubApiLinkWithType[];
    };
  };
  type GithubApiLinkWithType = { href: string; type: string };
  type ActivityActivityGetRepoSubscription =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityGetRepoSubscriptionPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityGetRepoSubscriptionResponse =
    GithubApiRepositorySubscription;
  type GithubApiRepositorySubscription = {
    subscribed: boolean;
    ignored: boolean;
    reason: string;
    created_at: string;
    url: string;
    repository_url: string;
  };
  type ActivityActivityGetThread =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityGetThreadPath =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityGetThreadResponse = GithubApiThread;
  type GithubApiThread = {
    id?: undefined | string;
    repository?: undefined | GithubApiMinimalRepository;
    subject?:
      | undefined
      | {
          title?: undefined | string;
          url?: undefined | string;
          latest_comment_url?: undefined | string;
          type?: undefined | string;
        };
    reason?: undefined | string;
    unread?: undefined | boolean;
    updated_at?: undefined | string;
    last_read_at?: undefined | string;
    url?: undefined | string;
    subscription_url?: undefined | string;
  };
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUserPath =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUserResponse =
    GithubApiThreadSubscription;
  type GithubApiThreadSubscription = {
    subscribed: boolean;
    ignored: boolean;
    reason: string;
    created_at: string;
    url: string;
    thread_url?: undefined | string;
    repository_url?: undefined | string;
  };
  type ActivityActivityListEventsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListEventsForAuthenticatedUserPath = {
    username: string;
  };
  type ActivityActivityListEventsForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListEventsForAuthenticatedUserResponse =
    GithubApiEvent[];
  type GithubApiEvent = {
    id: string;
    type: string;
    actor: GithubApiActor;
    repo: { id: number; name: string; url: string };
    org?: undefined | GithubApiActor;
    payload: {
      action: string;
      issue?: undefined | GithubApiIssueSimple;
      comment?: undefined | GithubApiIssueComment;
      pages?:
        | undefined
        | {
            page_name?: undefined | string;
            title?: undefined | string;
            summary?: undefined | string;
            action?: undefined | string;
            sha?: undefined | string;
            html_url?: undefined | string;
          }[];
    };
    public: boolean;
    created_at: string;
  };
  type GithubApiActor = {
    id: number;
    login: string;
    display_login?: undefined | string;
    gravatar_id: string;
    url: string;
    avatar_url: string;
  };
  type GithubApiIssueSimple = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body?: undefined | string;
    user: GithubApiSimpleUser;
    labels: GithubApiLabel[];
    assignee: GithubApiSimpleUser;
    assignees?: undefined | GithubApiSimpleUser[];
    milestone: GithubApiMilestone;
    locked: boolean;
    active_lock_reason?: undefined | string;
    comments: number;
    pull_request?:
      | undefined
      | {
          merged_at?: undefined | string;
          diff_url: string;
          html_url: string;
          patch_url: string;
          url: string;
        };
    closed_at: string;
    created_at: string;
    updated_at: string;
    author_association: string;
    body_html?: undefined | string;
    body_text?: undefined | string;
    timeline_url?: undefined | string;
    repository?: undefined | GithubApiRepository;
    performed_via_github_app?: undefined | GithubApiIntegration;
  };
  type GithubApiLabel = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GithubApiMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: "open" | "closed";
    title: string;
    description: string;
    creator: GithubApiSimpleUser;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GithubApiIntegration = {
    id: number;
    slug?: undefined | string;
    node_id: string;
    owner: GithubApiSimpleUser;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      issues?: undefined | string;
      checks?: undefined | string;
      metadata?: undefined | string;
      contents?: undefined | string;
      deployments?: undefined | string;
    };
    events: string[];
    installations_count?: undefined | number;
    client_id?: undefined | string;
    client_secret?: undefined | string;
    webhook_secret?: undefined | string;
    pem?: undefined | string;
  };
  type GithubApiIssueComment = {
    id: number;
    node_id: string;
    url: string;
    body?: undefined | string;
    body_text?: undefined | string;
    body_html?: undefined | string;
    html_url: string;
    user: GithubApiSimpleUser;
    created_at: string;
    updated_at: string;
    issue_url: string;
    author_association:
      | "collaborator"
      | "contributor"
      | "first_timer"
      | "first_time_contributor"
      | "mannequin"
      | "member"
      | "none"
      | "owner";
    performed_via_github_app?: undefined | GithubApiIntegration;
    reactions?: undefined | GithubApiReactionRollup;
  };
  type GithubApiReactionRollup = {
    url: string;
    total_count: number;
    "+1": number;
    "-1": number;
    laugh: number;
    confused: number;
    heart: number;
    hooray: number;
    eyes: number;
    rocket: number;
  };
  type ActivityActivityListNotificationsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListNotificationsForAuthenticatedUserQuery = {
    all: boolean;
    participating: boolean;
    since?: undefined | string;
    before?: undefined | string;
    per_page: number;
    page: number;
  };
  type ActivityActivityListNotificationsForAuthenticatedUserResponse =
    GithubApiThread[];
  type ActivityActivityListOrgEventsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListOrgEventsForAuthenticatedUserPath = {
    username: string;
    org: string;
  };
  type ActivityActivityListOrgEventsForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListOrgEventsForAuthenticatedUserResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListPublicEvents =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListPublicEventsForRepoNetwork =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListPublicEventsForRepoNetworkPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListPublicEventsForRepoNetworkQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListPublicEventsForRepoNetworkResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListPublicEventsForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListPublicEventsForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListPublicEventsForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListPublicEventsForUserResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListPublicEventsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListPublicEventsResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListPublicOrgEvents =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListPublicOrgEventsPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActivityActivityListPublicOrgEventsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListPublicOrgEventsResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListReceivedEventsForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListReceivedEventsForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReceivedEventsForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListReceivedEventsForUserResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListReceivedPublicEventsForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListReceivedPublicEventsForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReceivedPublicEventsForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListReceivedPublicEventsForUserResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListRepoEvents =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListRepoEventsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListRepoEventsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListRepoEventsResponse =
    ActivityActivityListEventsForAuthenticatedUserResponse;
  type ActivityActivityListRepoNotificationsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserQuery =
    ActivityActivityListNotificationsForAuthenticatedUserQuery;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserResponse =
    ActivityActivityListNotificationsForAuthenticatedUserResponse;
  type ActivityActivityListReposStarredByAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListReposStarredByAuthenticatedUserQuery = {
    sort: "created" | "updated";
    direction: "asc" | "desc";
    per_page: number;
    page: number;
  };
  type ActivityActivityListReposStarredByAuthenticatedUserResponse =
    GithubApiRepository[];
  type ActivityActivityListReposStarredByUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListReposStarredByUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReposStarredByUserQuery =
    ActivityActivityListReposStarredByAuthenticatedUserQuery;
  type ActivityActivityListReposStarredByUserResponse =
    ActivityActivityListReposStarredByAuthenticatedUserResponse;
  type ActivityActivityListReposWatchedByUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListReposWatchedByUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReposWatchedByUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListReposWatchedByUserResponse =
    GithubApiMinimalRepository[];
  type ActivityActivityListStargazersForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListStargazersForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListStargazersForRepoQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListStargazersForRepoResponse = GithubApiSimpleUser[];
  type ActivityActivityListWatchedReposForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListWatchedReposForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListWatchedReposForAuthenticatedUserResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type ActivityActivityListWatchersForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityListWatchersForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListWatchersForRepoQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ActivityActivityListWatchersForRepoResponse =
    ActivityActivityListStargazersForRepoResponse;
  type ActivityActivityMarkNotificationsAsRead =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityMarkNotificationsAsReadBody =
    | undefined
    | { last_read_at?: undefined | string; read?: undefined | boolean };
  type ActivityActivityMarkNotificationsAsReadResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityMarkRepoNotificationsAsRead =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityMarkRepoNotificationsAsReadBody =
    | undefined
    | { last_read_at?: undefined | string };
  type ActivityActivityMarkRepoNotificationsAsReadPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityMarkRepoNotificationsAsReadResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityMarkThreadAsRead =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityMarkThreadAsReadPath =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityMarkThreadAsReadResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivitySetRepoSubscription =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivitySetRepoSubscriptionBody =
    | undefined
    | { subscribed?: undefined | boolean; ignored?: undefined | boolean };
  type ActivityActivitySetRepoSubscriptionPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivitySetRepoSubscriptionResponse =
    ActivityActivityGetRepoSubscriptionResponse;
  type ActivityActivitySetThreadSubscription =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivitySetThreadSubscriptionBody =
    | undefined
    | { ignored: boolean };
  type ActivityActivitySetThreadSubscriptionPath =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivitySetThreadSubscriptionResponse =
    ActivityActivityGetThreadSubscriptionForAuthenticatedUserResponse;
  type ActivityActivityStarRepoForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityStarRepoForAuthenticatedUserPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityStarRepoForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityUnstarRepoForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ActivityActivityUnstarRepoForAuthenticatedUserPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityUnstarRepoForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsAddRepoToInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsAddRepoToInstallationPath = {
    installation_id: number;
    repository_id: number;
  };
  type AppsAppsAddRepoToInstallationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsCheckAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsCheckAuthorizationPath = {
    client_id: string;
    access_token: string;
  };
  type AppsAppsCheckAuthorizationResponse = GithubApiAuthorization;
  type GithubApiAuthorization = {
    id: number;
    url: string;
    scopes: string[];
    token: string;
    token_last_eight: string;
    hashed_token: string;
    app: { client_id: string; name: string; url: string };
    note: string;
    note_url: string;
    updated_at: string;
    created_at: string;
    fingerprint: string;
    user?: undefined | GithubApiSimpleUser;
    installation?: undefined | GithubApiScopedInstallation;
  };
  type GithubApiScopedInstallation = {
    permissions: { [key: string]: any };
    repository_selection: "all" | "selected";
    single_file_name: string;
    has_multiple_single_files?: undefined | boolean;
    single_file_paths?: undefined | string[];
    repositories_url: string;
    account: GithubApiSimpleUser;
  };
  type AppsAppsCheckToken =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsCheckTokenBody = undefined | { access_token: string };
  type AppsAppsCheckTokenPath = { client_id: string };
  type AppsAppsCheckTokenResponse = AppsAppsCheckAuthorizationResponse;
  type AppsAppsCreateContentAttachment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsCreateContentAttachmentBody =
    | undefined
    | { title: string; body: string };
  type AppsAppsCreateContentAttachmentPath = { content_reference_id: number };
  type AppsAppsCreateContentAttachmentResponse =
    GithubApiContentReferenceAttachment;
  type GithubApiContentReferenceAttachment = {
    id: number;
    title: string;
    body: string;
    node_id?: undefined | string;
  };
  type AppsAppsCreateFromManifest =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsCreateFromManifestPath = { code: string };
  type AppsAppsCreateFromManifestResponse =
    | GithubApiIntegration
    | {
        client_id: string;
        client_secret: string;
        webhook_secret: string;
        pem: string;
      };
  type AppsAppsCreateInstallationAccessToken =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsCreateInstallationAccessTokenBody =
    | undefined
    | {
        repositories?: undefined | string[];
        repository_ids?: undefined | number[];
        permissions?:
          | undefined
          | {
              contents?: undefined | string;
              issues?: undefined | string;
              deployments?: undefined | string;
              single_file?: undefined | string;
              def_not_a_repo?: undefined | string;
            };
      };
  type AppsAppsCreateInstallationAccessTokenPath = { installation_id: number };
  type AppsAppsCreateInstallationAccessTokenResponse =
    GithubApiInstallationToken;
  type GithubApiInstallationToken = {
    token?: undefined | string;
    expires_at?: undefined | string;
    permissions?:
      | undefined
      | {
          issues?: undefined | string;
          contents?: undefined | string;
          metadata?: undefined | string;
          single_file?: undefined | string;
        };
    repository_selection?: undefined | "all" | "selected";
    repositories?: undefined | GithubApiRepository[];
    single_file?: undefined | string;
    has_multiple_single_files?: undefined | boolean;
    single_file_paths?: undefined | string[];
  };
  type AppsAppsDeleteAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsDeleteAuthorizationBody =
    | undefined
    | { access_token?: undefined | string };
  type AppsAppsDeleteAuthorizationPath = AppsAppsCheckTokenPath;
  type AppsAppsDeleteAuthorizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsDeleteInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsDeleteInstallationPath =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsDeleteInstallationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsDeleteToken =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsDeleteTokenBody = AppsAppsDeleteAuthorizationBody;
  type AppsAppsDeleteTokenPath = AppsAppsCheckTokenPath;
  type AppsAppsDeleteTokenResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsGetAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetAuthenticatedResponse = GithubApiIntegration;
  type AppsAppsGetBySlug =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetBySlugPath = { app_slug: string };
  type AppsAppsGetBySlugResponse = AppsAppsGetAuthenticatedResponse;
  type AppsAppsGetInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetInstallationPath = AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsGetInstallationResponse = GithubApiInstallation;
  type GithubApiInstallation = {
    id: number;
    account: GithubApiSimpleUser | GithubApiEnterprise;
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: {
      deployments?: undefined | string;
      checks?: undefined | string;
      metadata?: undefined | string;
      contents?: undefined | string;
      pull_requests?: undefined | string;
      statuses?: undefined | string;
      issues?: undefined | string;
      organization_administration?: undefined | string;
    };
    events: string[];
    created_at: string;
    updated_at: string;
    single_file_name: string;
    has_multiple_single_files?: undefined | boolean;
    single_file_paths?: undefined | string[];
    app_slug: string;
    suspended_by?: undefined | GithubApiSimpleUser;
    suspended_at?: undefined | string;
    contact_email?: undefined | string;
  };
  type GithubApiEnterprise = {
    description?: undefined | string;
    html_url: string;
    website_url?: undefined | string;
    id: number;
    node_id: string;
    name: string;
    slug: string;
    created_at: string;
    updated_at: string;
    avatar_url: string;
  };
  type AppsAppsGetOrgInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetOrgInstallationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type AppsAppsGetOrgInstallationResponse = AppsAppsGetInstallationResponse;
  type AppsAppsGetRepoInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetRepoInstallationPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type AppsAppsGetRepoInstallationResponse = AppsAppsGetInstallationResponse;
  type AppsAppsGetSubscriptionPlanForAccount =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetSubscriptionPlanForAccountPath = { account_id: number };
  type AppsAppsGetSubscriptionPlanForAccountResponse =
    GithubApiMarketplacePurchase;
  type GithubApiMarketplacePurchase = {
    url: string;
    type: string;
    id: number;
    login: string;
    organization_billing_email?: undefined | string;
    marketplace_pending_change?:
      | undefined
      | {
          is_installed?: undefined | boolean;
          effective_date?: undefined | string;
          unit_count?: undefined | number;
          id?: undefined | number;
          plan?: undefined | GithubApiMarketplaceListingPlan;
        };
    marketplace_purchase: {
      billing_cycle?: undefined | string;
      next_billing_date?: undefined | string;
      is_installed?: undefined | boolean;
      unit_count?: undefined | number;
      on_free_trial?: undefined | boolean;
      free_trial_ends_on?: undefined | string;
      updated_at?: undefined | string;
      plan?: undefined | GithubApiMarketplaceListingPlan;
    };
  };
  type GithubApiMarketplaceListingPlan = {
    url: string;
    accounts_url: string;
    id: number;
    number: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: string;
    state: string;
    bullets: string[];
  };
  type AppsAppsGetSubscriptionPlanForAccountStubbed =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetSubscriptionPlanForAccountStubbedPath =
    AppsAppsGetSubscriptionPlanForAccountPath;
  type AppsAppsGetSubscriptionPlanForAccountStubbedResponse =
    AppsAppsGetSubscriptionPlanForAccountResponse;
  type AppsAppsGetUserInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetUserInstallationPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type AppsAppsGetUserInstallationResponse = AppsAppsGetInstallationResponse;
  type AppsAppsGetWebhookConfigForApp =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsGetWebhookConfigForAppResponse = GithubApiWebhookConfig;
  type GithubApiWebhookConfig = {
    url?: undefined | GithubApiWebhookConfigUrl;
    content_type?: undefined | GithubApiWebhookConfigContentType;
    secret?: undefined | GithubApiWebhookConfigSecret;
    insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
  };
  type GithubApiWebhookConfigUrl = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigContentType = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigSecret = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigInsecureSsl = GithubApiSelectedActionsUrl;
  type AppsAppsListAccountsForPlan =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListAccountsForPlanPath = { plan_id: number };
  type AppsAppsListAccountsForPlanQuery = {
    sort: "created" | "updated";
    direction?: undefined | "asc" | "desc";
    per_page: number;
    page: number;
  };
  type AppsAppsListAccountsForPlanResponse = GithubApiMarketplacePurchase[];
  type AppsAppsListAccountsForPlanStubbed =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListAccountsForPlanStubbedPath = AppsAppsListAccountsForPlanPath;
  type AppsAppsListAccountsForPlanStubbedQuery =
    AppsAppsListAccountsForPlanQuery;
  type AppsAppsListAccountsForPlanStubbedResponse =
    AppsAppsListAccountsForPlanResponse;
  type AppsAppsListInstallationReposForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListInstallationReposForAuthenticatedUserPath =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsListInstallationReposForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListInstallationReposForAuthenticatedUserResponse = {
    total_count?: undefined | number;
    repository_selection?: undefined | string;
    repositories?: undefined | GithubApiRepository[];
  };
  type AppsAppsListInstallations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListInstallationsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListInstallationsForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListInstallationsForAuthenticatedUserResponse = {
    total_count?: undefined | number;
    installations?: undefined | GithubApiInstallation[];
  };
  type AppsAppsListInstallationsQuery = {
    per_page: number;
    page: number;
    since?: undefined | string;
    outdated?: undefined | string;
  };
  type AppsAppsListInstallationsResponse = GithubApiInstallation[];
  type AppsAppsListPlans =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListPlansQuery = ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListPlansResponse = GithubApiMarketplaceListingPlan[];
  type AppsAppsListPlansStubbed =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListPlansStubbedQuery = ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListPlansStubbedResponse = AppsAppsListPlansResponse;
  type AppsAppsListReposAccessibleToInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListReposAccessibleToInstallationQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListReposAccessibleToInstallationResponse = {
    total_count?: undefined | number;
    repositories?: undefined | GithubApiRepository[];
    repository_selection?: undefined | string;
  };
  type AppsAppsListSubscriptionsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListSubscriptionsForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListSubscriptionsForAuthenticatedUserResponse =
    GithubApiUserMarketplacePurchase[];
  type GithubApiUserMarketplacePurchase = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    account: GithubApiMarketplaceAccount;
    plan: GithubApiMarketplaceListingPlan;
  };
  type GithubApiMarketplaceAccount = {
    url: string;
    id: number;
    type: string;
    node_id?: undefined | string;
    login: string;
    email?: undefined | string;
    organization_billing_email?: undefined | string;
  };
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbed =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbedQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbedResponse =
    AppsAppsListSubscriptionsForAuthenticatedUserResponse;
  type AppsAppsRemoveRepoFromInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsRemoveRepoFromInstallationPath =
    AppsAppsAddRepoToInstallationPath;
  type AppsAppsRemoveRepoFromInstallationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsResetAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsResetAuthorizationPath = AppsAppsCheckAuthorizationPath;
  type AppsAppsResetAuthorizationResponse = AppsAppsCheckAuthorizationResponse;
  type AppsAppsResetToken =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsResetTokenBody = AppsAppsCheckTokenBody;
  type AppsAppsResetTokenPath = AppsAppsCheckTokenPath;
  type AppsAppsResetTokenResponse = AppsAppsCheckAuthorizationResponse;
  type AppsAppsRevokeAuthorizationForApplication =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsRevokeAuthorizationForApplicationPath =
    AppsAppsCheckAuthorizationPath;
  type AppsAppsRevokeAuthorizationForApplicationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsRevokeGrantForApplication =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsRevokeGrantForApplicationPath = AppsAppsCheckAuthorizationPath;
  type AppsAppsRevokeGrantForApplicationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsRevokeInstallationAccessToken =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsRevokeInstallationAccessTokenResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsSuspendInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsSuspendInstallationPath =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsSuspendInstallationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsUnsuspendInstallation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsUnsuspendInstallationPath =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsUnsuspendInstallationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsUpdateWebhookConfigForApp =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AppsAppsUpdateWebhookConfigForAppBody =
    | undefined
    | {
        url?: undefined | GithubApiWebhookConfigUrl;
        content_type?: undefined | GithubApiWebhookConfigContentType;
        secret?: undefined | GithubApiWebhookConfigSecret;
        insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
      };
  type AppsAppsUpdateWebhookConfigForAppResponse =
    AppsAppsGetWebhookConfigForAppResponse;
  type AuditLogAuditLogGetAuditLog =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type AuditLogAuditLogGetAuditLogPath = { enterprise: string };
  type AuditLogAuditLogGetAuditLogQuery = {
    phrase?: undefined | string;
    include?: undefined | "web" | "git" | "all";
    after?: undefined | string;
    before?: undefined | string;
    per_page: number;
  };
  type AuditLogAuditLogGetAuditLogResponse = GithubApiAuditLogEvent[];
  type GithubApiAuditLogEvent = {
    "@timestamp"?: undefined | number;
    action?: undefined | string;
    active?: undefined | boolean;
    active_was?: undefined | boolean;
    actor?: undefined | string;
    blocked_user?: undefined | string;
    business?: undefined | string;
    config?: undefined | any[];
    config_was?: undefined | any[];
    content_type?: undefined | string;
    created_at?: undefined | number;
    deploy_key_fingerprint?: undefined | string;
    emoji?: undefined | string;
    events?: undefined | any[];
    events_were?: undefined | any[];
    explanation?: undefined | string;
    fingerprint?: undefined | string;
    hook_id?: undefined | number;
    limited_availability?: undefined | boolean;
    message?: undefined | string;
    name?: undefined | string;
    old_user?: undefined | string;
    openssh_public_key?: undefined | string;
    org?: undefined | string;
    previous_visibility?: undefined | string;
    read_only?: undefined | boolean;
    repo?: undefined | string;
    repository?: undefined | string;
    repository_public?: undefined | boolean;
    target_login?: undefined | string;
    team?: undefined | string;
    transport_protocol?: undefined | number;
    transport_protocol_name?: undefined | string;
    user?: undefined | string;
    visibility?: undefined | string;
  };
  type BenchNested = { foo: true; bar: 5; nest: BenchSimple[] };
  type BenchSimple = { foo: boolean; bar: number; baz: string };
  type BillingBillingGetGithubActionsBillingGhe =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetGithubActionsBillingGhePath =
    AuditLogAuditLogGetAuditLogPath;
  type BillingBillingGetGithubActionsBillingGheResponse =
    GithubApiActionsBillingUsage;
  type GithubApiActionsBillingUsage = {
    total_minutes_used?: undefined | number;
    total_paid_minutes_used?: undefined | number;
    included_minutes?: undefined | number;
    minutes_used_breakdown?:
      | undefined
      | {
          UBUNTU?: undefined | number;
          MACOS?: undefined | number;
          WINDOWS?: undefined | number;
        };
  };
  type BillingBillingGetGithubActionsBillingOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetGithubActionsBillingOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type BillingBillingGetGithubActionsBillingOrgResponse =
    BillingBillingGetGithubActionsBillingGheResponse;
  type BillingBillingGetGithubActionsBillingUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetGithubActionsBillingUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type BillingBillingGetGithubActionsBillingUserResponse =
    BillingBillingGetGithubActionsBillingGheResponse;
  type BillingBillingGetGithubPackagesBillingGhe =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetGithubPackagesBillingGhePath =
    AuditLogAuditLogGetAuditLogPath;
  type BillingBillingGetGithubPackagesBillingGheResponse =
    GithubApiPackagesBillingUsage;
  type GithubApiPackagesBillingUsage = {
    total_gigabytes_bandwidth_used?: undefined | number;
    total_paid_gigabytes_bandwidth_used?: undefined | number;
    included_gigabytes_bandwidth?: undefined | number;
  };
  type BillingBillingGetGithubPackagesBillingOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetGithubPackagesBillingOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type BillingBillingGetGithubPackagesBillingOrgResponse =
    BillingBillingGetGithubPackagesBillingGheResponse;
  type BillingBillingGetGithubPackagesBillingUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetGithubPackagesBillingUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type BillingBillingGetGithubPackagesBillingUserResponse =
    BillingBillingGetGithubPackagesBillingGheResponse;
  type BillingBillingGetSharedStorageBillingGhe =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetSharedStorageBillingGhePath =
    AuditLogAuditLogGetAuditLogPath;
  type BillingBillingGetSharedStorageBillingGheResponse =
    GithubApiCombinedBillingUsage;
  type GithubApiCombinedBillingUsage = {
    days_left_in_billing_cycle?: undefined | number;
    estimated_paid_storage_for_month?: undefined | number;
    estimated_storage_for_month?: undefined | number;
  };
  type BillingBillingGetSharedStorageBillingOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetSharedStorageBillingOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type BillingBillingGetSharedStorageBillingOrgResponse =
    BillingBillingGetSharedStorageBillingGheResponse;
  type BillingBillingGetSharedStorageBillingUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type BillingBillingGetSharedStorageBillingUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type BillingBillingGetSharedStorageBillingUserResponse =
    BillingBillingGetSharedStorageBillingGheResponse;
  type ChecksChecksCreate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksCreateBody =
    | undefined
    | {
        name: string;
        head_sha: string;
        details_url?: undefined | string;
        external_id?: undefined | string;
        status: "queued" | "in_progress" | "completed";
        started_at?: undefined | string;
        conclusion?:
          | undefined
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "skipped"
          | "timed_out"
          | "action_required";
        completed_at?: undefined | string;
        output?:
          | undefined
          | {
              title: string;
              summary: string;
              text?: undefined | string;
              annotations?:
                | undefined
                | {
                    path: string;
                    start_line: number;
                    end_line: number;
                    start_column?: undefined | number;
                    end_column?: undefined | number;
                    annotation_level: "notice" | "warning" | "failure";
                    message: string;
                    title?: undefined | string;
                    raw_details?: undefined | string;
                  }[];
              images?:
                | undefined
                | {
                    alt: string;
                    image_url: string;
                    caption?: undefined | string;
                  }[];
            };
        actions?:
          | undefined
          | { label: string; description: string; identifier: string }[];
      };
  type ChecksChecksCreatePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ChecksChecksCreateResponse = GithubApiCheckRun;
  type GithubApiCheckRun = {
    id: number;
    head_sha: string;
    node_id: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "skipped"
      | "timed_out"
      | "action_required";
    started_at: string;
    completed_at: string;
    output: {
      title: string;
      summary: string;
      text: string;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: { id: number };
    app: GithubApiIntegration;
    pull_requests: any;
  };
  type ChecksChecksCreateSuite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksCreateSuiteBody = undefined | { head_sha: string };
  type ChecksChecksCreateSuitePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ChecksChecksCreateSuiteResponse = GithubApiCheckSuite;
  type GithubApiCheckSuite = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "skipped"
      | "timed_out"
      | "action_required";
    url: string;
    before: string;
    after: string;
    pull_requests: GithubApiPullRequestMinimal[];
    app: GithubApiIntegration;
    repository: GithubApiMinimalRepository;
    created_at: string;
    updated_at: string;
    head_commit: GithubApiSimpleCommit;
    latest_check_runs_count: number;
    check_runs_url: string;
  };
  type ChecksChecksGet =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksGetPath = {
    owner: string;
    repo: string;
    check_run_id: number;
  };
  type ChecksChecksGetResponse = ChecksChecksCreateResponse;
  type ChecksChecksGetSuite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksGetSuitePath = {
    owner: string;
    repo: string;
    check_suite_id: number;
  };
  type ChecksChecksGetSuiteResponse = ChecksChecksCreateSuiteResponse;
  type ChecksChecksListAnnotations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksListAnnotationsPath = ChecksChecksGetPath;
  type ChecksChecksListAnnotationsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ChecksChecksListAnnotationsResponse = GithubApiCheckAnnotation[];
  type GithubApiCheckAnnotation = {
    path: string;
    start_line: number;
    end_line: number;
    start_column: number;
    end_column: number;
    annotation_level: string;
    title: string;
    message: string;
    raw_details: string;
    blob_href: string;
  };
  type ChecksChecksListForRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksListForRefPath = {
    owner: string;
    repo: string;
    ref: string;
  };
  type ChecksChecksListForRefQuery = {
    check_name?: undefined | string;
    status?: undefined | "queued" | "in_progress" | "completed";
    filter: "latest" | "all";
    per_page: number;
    page: number;
  };
  type ChecksChecksListForRefResponse = {
    total_count?: undefined | number;
    check_runs?: undefined | GithubApiCheckRun[];
  };
  type ChecksChecksListForSuite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksListForSuitePath = ChecksChecksGetSuitePath;
  type ChecksChecksListForSuiteQuery = ChecksChecksListForRefQuery;
  type ChecksChecksListForSuiteResponse = ChecksChecksListForRefResponse;
  type ChecksChecksListSuitesForRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksListSuitesForRefPath = ChecksChecksListForRefPath;
  type ChecksChecksListSuitesForRefQuery = {
    app_id?: undefined | number;
    check_name?: undefined | string;
    per_page: number;
    page: number;
  };
  type ChecksChecksListSuitesForRefResponse = {
    total_count?: undefined | number;
    check_suites?: undefined | GithubApiCheckSuite[];
  };
  type ChecksChecksRerequestSuite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksRerequestSuitePath = ChecksChecksGetSuitePath;
  type ChecksChecksRerequestSuiteResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ChecksChecksSetSuitesPreferences =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksSetSuitesPreferencesBody =
    | undefined
    | {
        auto_trigger_checks?:
          | undefined
          | { app_id: number; setting: boolean }[];
      };
  type ChecksChecksSetSuitesPreferencesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ChecksChecksSetSuitesPreferencesResponse = GithubApiCheckSuitePreference;
  type GithubApiCheckSuitePreference = {
    preferences?:
      | undefined
      | {
          auto_trigger_checks?:
            | undefined
            | { app_id: number; setting: boolean }[];
        };
    repository?: undefined | GithubApiRepository;
  };
  type ChecksChecksUpdate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ChecksChecksUpdateBody =
    | undefined
    | {
        name?: undefined | string;
        details_url?: undefined | string;
        external_id?: undefined | string;
        started_at?: undefined | string;
        status?: undefined | "queued" | "in_progress" | "completed";
        conclusion?:
          | undefined
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "skipped"
          | "timed_out"
          | "action_required";
        completed_at?: undefined | string;
        output?:
          | undefined
          | {
              title?: undefined | string;
              summary: string;
              text?: undefined | string;
              annotations?:
                | undefined
                | {
                    path: string;
                    start_line: number;
                    end_line: number;
                    start_column?: undefined | number;
                    end_column?: undefined | number;
                    annotation_level: "notice" | "warning" | "failure";
                    message: string;
                    title?: undefined | string;
                    raw_details?: undefined | string;
                  }[];
              images?:
                | undefined
                | {
                    alt: string;
                    image_url: string;
                    caption?: undefined | string;
                  }[];
            };
        actions?:
          | undefined
          | { label: string; description: string; identifier: string }[];
      };
  type ChecksChecksUpdatePath = ChecksChecksGetPath;
  type ChecksChecksUpdateResponse = ChecksChecksCreateResponse;
  type CodeScanningCodeScanningGetAlert =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodeScanningCodeScanningGetAlertPath = {
    owner: string;
    repo: string;
    alert_number: number;
  };
  type CodeScanningCodeScanningGetAlertResponse =
    GithubApiCodeScanningAlertCodeScanningAlert;
  type GithubApiCodeScanningAlertCodeScanningAlert = {
    number?: undefined | GithubApiAlertNumber;
    created_at?: undefined | GithubApiAlertCreatedAt;
    url?: undefined | GithubApiAlertUrl;
    html_url?: undefined | GithubApiAlertHtmlUrl;
    instances?: undefined | GithubApiCodeScanningAlertInstances;
    state?: undefined | GithubApiCodeScanningAlertState;
    dismissed_by?: undefined | GithubApiSimpleUser;
    dismissed_at?: undefined | GithubApiCodeScanningAlertDismissedAt;
    dismissed_reason?: undefined | GithubApiCodeScanningAlertDismissedReason;
    rule?: undefined | GithubApiCodeScanningAlertRule;
    tool?: undefined | GithubApiCodeScanningAnalysisTool;
  };
  type GithubApiAlertNumber = number;
  type GithubApiAlertCreatedAt = GithubApiSelectedActionsUrl;
  type GithubApiAlertUrl = GithubApiSelectedActionsUrl;
  type GithubApiAlertHtmlUrl = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAlertInstances = any[];
  type GithubApiCodeScanningAlertState = "open" | "dismissed" | "fixed";
  type GithubApiCodeScanningAlertDismissedAt = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAlertDismissedReason = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAlertRule = {
    id?: undefined | string;
    severity?: undefined | "none" | "note" | "warning" | "error";
    description?: undefined | string;
  };
  type GithubApiCodeScanningAnalysisTool = {
    name?: undefined | GithubApiCodeScanningAnalysisToolName;
    version?: undefined | string;
  };
  type GithubApiCodeScanningAnalysisToolName = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningListAlertsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodeScanningCodeScanningListAlertsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodeScanningCodeScanningListAlertsForRepoQuery = {
    state?: undefined | GithubApiCodeScanningAlertState;
    ref?: undefined | GithubApiCodeScanningAlertRef;
  };
  type GithubApiCodeScanningAlertRef = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningListAlertsForRepoResponse =
    GithubApiCodeScanningAlertCodeScanningAlertItems[];
  type GithubApiCodeScanningAlertCodeScanningAlertItems = {
    number?: undefined | GithubApiAlertNumber;
    created_at?: undefined | GithubApiAlertCreatedAt;
    url?: undefined | GithubApiAlertUrl;
    html_url?: undefined | GithubApiAlertHtmlUrl;
    state?: undefined | GithubApiCodeScanningAlertState;
    dismissed_by?: undefined | GithubApiSimpleUser;
    dismissed_at?: undefined | GithubApiCodeScanningAlertDismissedAt;
    dismissed_reason?: undefined | GithubApiCodeScanningAlertDismissedReason;
    rule?: undefined | GithubApiCodeScanningAlertRule;
    tool?: undefined | GithubApiCodeScanningAnalysisTool;
  };
  type CodeScanningCodeScanningListRecentAnalyses =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodeScanningCodeScanningListRecentAnalysesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodeScanningCodeScanningListRecentAnalysesQuery = {
    ref?: undefined | GithubApiCodeScanningAnalysisRef;
    tool_name?: undefined | GithubApiCodeScanningAnalysisToolName;
  };
  type GithubApiCodeScanningAnalysisRef = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningListRecentAnalysesResponse =
    GithubApiCodeScanningAnalysisCodeScanningAnalysis[];
  type GithubApiCodeScanningAnalysisCodeScanningAnalysis = {
    commit_sha?: undefined | GithubApiCodeScanningAnalysisCommitSha;
    ref?: undefined | GithubApiCodeScanningAnalysisRef;
    analysis_key?: undefined | GithubApiCodeScanningAnalysisAnalysisKey;
    created_at?: undefined | GithubApiCodeScanningAnalysisCreatedAt;
    tool_name?: undefined | GithubApiCodeScanningAnalysisToolName;
    error?: undefined | string;
    environment?: undefined | GithubApiCodeScanningAnalysisEnvironment;
  };
  type GithubApiCodeScanningAnalysisCommitSha = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisAnalysisKey = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisCreatedAt = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisEnvironment = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningUpdateAlert =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodeScanningCodeScanningUpdateAlertBody =
    | undefined
    | {
        state: GithubApiCodeScanningAlertSetState;
        dismissed_reason?:
          | undefined
          | GithubApiCodeScanningAlertDismissedReason;
      };
  type GithubApiCodeScanningAlertSetState = "open" | "dismissed";
  type CodeScanningCodeScanningUpdateAlertPath = {
    owner: string;
    repo: string;
    alert_number: GithubApiAlertNumber;
  };
  type CodeScanningCodeScanningUpdateAlertResponse =
    CodeScanningCodeScanningGetAlertResponse;
  type CodeScanningCodeScanningUploadSarif =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodeScanningCodeScanningUploadSarifBody =
    | undefined
    | {
        commit_sha: GithubApiCodeScanningAnalysisCommitSha;
        ref: GithubApiCodeScanningAnalysisRef;
        sarif: GithubApiCodeScanningAnalysisSarifFile;
        checkout_uri?: undefined | string;
        started_at?: undefined | string;
        tool_name: GithubApiCodeScanningAnalysisToolName;
      };
  type GithubApiCodeScanningAnalysisSarifFile = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningUploadSarifPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodeScanningCodeScanningUploadSarifResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type CodesOfConductCodesOfConductGetAllCodesOfConduct =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodesOfConductCodesOfConductGetAllCodesOfConductResponse =
    GithubApiCodeOfConduct[];
  type GithubApiCodeOfConduct = {
    key: string;
    name: string;
    url: string;
    body?: undefined | string;
    html_url: string;
  };
  type CodesOfConductCodesOfConductGetConductCode =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodesOfConductCodesOfConductGetConductCodePath = { key: string };
  type CodesOfConductCodesOfConductGetConductCodeResponse =
    GithubApiCodeOfConduct;
  type CodesOfConductCodesOfConductGetForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CodesOfConductCodesOfConductGetForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodesOfConductCodesOfConductGetForRepoResponse =
    CodesOfConductCodesOfConductGetConductCodeResponse;
  type CompasStructure =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type CompasStructureResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EmojisEmojisGet =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EmojisEmojisGetResponse = { [key: string]: string };
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePath =
    { enterprise: string; runner_group_id: number; org_id: number };
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePath =
    { enterprise: string; runner_group_id: number; runner_id: number };
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponse;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterpriseResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponse;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBody =

      | undefined
      | {
          name: string;
          visibility?: undefined | "selected" | "all";
          selected_organization_ids?: undefined | number[];
          runners?: undefined | number[];
        };
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse =
    GithubApiRunnerGroupsEnterprise;
  type GithubApiRunnerGroupsEnterprise = {
    id?: undefined | number;
    name?: undefined | string;
    visibility?: undefined | string;
    default?: undefined | boolean;
    selected_organizations_url?: undefined | string;
    runners_url?: undefined | string;
  };
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath = {
    enterprise: string;
    scim_group_id: string;
  };
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePath =
    { enterprise: string; runner_id: number };
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath =
    { enterprise: string; runner_group_id: number };
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath = {
    enterprise: string;
    scim_user_id: string;
  };
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePath =
    { enterprise: string; org_id: number };
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePath =
    EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePath;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterpriseResponse =
    ActionsActionsGetAllowedActionsOrganizationResponse;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse =
    GithubApiActionsEnterprisePermissions;
  type GithubApiActionsEnterprisePermissions = {
    enabled_organizations?: undefined | GithubApiEnabledOrganizations;
    selected_organizations_url?: undefined | string;
    allowed_actions?: undefined | GithubApiAllowedActions;
    selected_actions_url?: undefined | GithubApiSelectedActionsUrl;
  };
  type GithubApiEnabledOrganizations = GithubApiEnabledRepositories;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroup =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupPath =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse =
    GithubApiScimEnterpriseGroup;
  type GithubApiScimEnterpriseGroup = {
    schemas?: undefined | string[];
    id?: undefined | string;
    externalId?: undefined | string;
    displayName?: undefined | string;
    members?:
      | undefined
      | {
          value?: undefined | string;
          $ref?: undefined | string;
          display?: undefined | string;
        }[];
    meta?:
      | undefined
      | {
          resourceType?: undefined | string;
          created?: undefined | string;
          lastModified?: undefined | string;
          location?: undefined | string;
        };
  };
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserPath =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse =
    GithubApiScimEnterpriseUser;
  type GithubApiScimEnterpriseUser = {
    schemas?: undefined | string[];
    id?: undefined | string;
    externalId?: undefined | string;
    userName?: undefined | string;
    name?:
      | undefined
      | { givenName?: undefined | string; familyName?: undefined | string };
    emails?:
      | undefined
      | {
          value?: undefined | string;
          type?: undefined | string;
          primary?: undefined | boolean;
        }[];
    groups?: undefined | { value?: undefined | string }[];
    active?: undefined | boolean;
    meta?:
      | undefined
      | {
          resourceType?: undefined | string;
          created?: undefined | string;
          lastModified?: undefined | string;
          location?: undefined | string;
        };
  };
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse =
    ActionsActionsGetSelfHostedRunnerForOrgResponse;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse =
    EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse =
    {
      total_count?: undefined | number;
      organizations?: undefined | GithubApiOrganizationSimple[];
    };
  type GithubApiOrganizationSimple = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseQuery = {
    startIndex?: undefined | number;
    count?: undefined | number;
  };
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseResponse =
    GithubApiScimGroupListEnterprise;
  type GithubApiScimGroupListEnterprise = {
    schemas?: undefined | string[];
    totalResults?: undefined | number;
    itemsPerPage?: undefined | number;
    startIndex?: undefined | number;
    Resources?:
      | undefined
      | {
          schemas?: undefined | string[];
          id?: undefined | string;
          externalId?: undefined | string;
          displayName?: undefined | string;
          members?:
            | undefined
            | {
                value?: undefined | string;
                $ref?: undefined | string;
                display?: undefined | string;
              }[];
          meta?:
            | undefined
            | {
                resourceType?: undefined | string;
                created?: undefined | string;
                lastModified?: undefined | string;
                location?: undefined | string;
              };
        }[];
  };
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseQuery =
    EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseQuery;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse =
    GithubApiScimUserListEnterprise;
  type GithubApiScimUserListEnterprise = {
    schemas?: undefined | string[];
    totalResults?: undefined | number;
    itemsPerPage?: undefined | number;
    startIndex?: undefined | number;
    Resources?:
      | undefined
      | {
          schemas?: undefined | string[];
          id?: undefined | string;
          externalId?: undefined | string;
          userName?: undefined | string;
          name?:
            | undefined
            | {
                givenName?: undefined | string;
                familyName?: undefined | string;
              };
          emails?:
            | undefined
            | {
                value?: undefined | string;
                primary?: undefined | boolean;
                type?: undefined | string;
              }[];
          groups?: undefined | { value?: undefined | string }[];
          active?: undefined | boolean;
          meta?:
            | undefined
            | {
                resourceType?: undefined | string;
                created?: undefined | string;
                lastModified?: undefined | string;
                location?: undefined | string;
              };
        }[];
  };
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterpriseResponse =
    ActionsActionsListRunnerApplicationsForOrgResponse;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse =
    EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse =
    {
      total_count?: undefined | number;
      runner_groups?: undefined | GithubApiRunnerGroupsEnterprise[];
    };
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponse;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponse;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroup =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupBody =
    | undefined
    | {
        schemas: string[];
        displayName: string;
        members?: undefined | { value: string }[];
      };
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupPath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserBody =
    | undefined
    | {
        schemas: string[];
        userName: string;
        name: { givenName: string; familyName: string };
        emails: { value: string; type: string; primary: boolean }[];
        groups?: undefined | { value?: undefined | string }[];
      };
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserPath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePath =
    EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePath =
    EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePath;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseBody =
    ActionsActionsSetAllowedActionsOrganizationBody;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseBody =

      | undefined
      | {
          enabled_organizations: GithubApiEnabledOrganizations;
          allowed_actions?: undefined | GithubApiAllowedActions;
        };
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroup =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupBody =
    EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupBody;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupPath =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserBody =
    EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserBody;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserPath =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBody =
    undefined | { selected_organization_ids: number[] };
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseBody =
    EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBody;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePath =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseBody =
    ActionsActionsSetSelfHostedRunnersInGroupForOrgBody;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroup =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupBody =
    | undefined
    | { schemas: string[]; Operations: { [key: string]: any }[] };
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupPath =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserBody =
    EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupBody;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserPath =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBody =
    undefined | { name?: undefined | string; visibility: "selected" | "all" };
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePath =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse =
    EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse;
  type GistsGistsCheckIsStarred =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsCheckIsStarredPath = { gist_id: string };
  type GistsGistsCheckIsStarredResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsCreate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsCreateBody =
    | undefined
    | {
        description?: undefined | string;
        files: { [key: string]: { content: string } };
        public?: undefined | boolean | "true" | "false";
      };
  type GistsGistsCreateComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsCreateCommentBody = undefined | { body: string };
  type GistsGistsCreateCommentPath = GistsGistsCheckIsStarredPath;
  type GistsGistsCreateCommentResponse = GithubApiGistComment;
  type GithubApiGistComment = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: GithubApiSimpleUser;
    created_at: string;
    updated_at: string;
    author_association: string;
  };
  type GistsGistsCreateResponse = GithubApiGistFull;
  type GithubApiGistFull =
    | GithubApiGistSimple
    | {
        forks?:
          | undefined
          | {
              user?:
                | undefined
                | {
                    login?: undefined | string;
                    id?: undefined | number;
                    node_id?: undefined | string;
                    avatar_url?: undefined | string;
                    gravatar_id?: undefined | string;
                    url?: undefined | string;
                    html_url?: undefined | string;
                    followers_url?: undefined | string;
                    following_url?: undefined | string;
                    gists_url?: undefined | string;
                    starred_url?: undefined | string;
                    subscriptions_url?: undefined | string;
                    organizations_url?: undefined | string;
                    repos_url?: undefined | string;
                    events_url?: undefined | string;
                    received_events_url?: undefined | string;
                    type?: undefined | string;
                    site_admin?: undefined | boolean;
                  };
              url?: undefined | string;
              id?: undefined | string;
              created_at?: undefined | string;
              updated_at?: undefined | string;
            }[];
        history?:
          | undefined
          | {
              url?: undefined | string;
              version?: undefined | string;
              user?:
                | undefined
                | {
                    login?: undefined | string;
                    id?: undefined | number;
                    node_id?: undefined | string;
                    avatar_url?: undefined | string;
                    gravatar_id?: undefined | string;
                    url?: undefined | string;
                    html_url?: undefined | string;
                    followers_url?: undefined | string;
                    following_url?: undefined | string;
                    gists_url?: undefined | string;
                    starred_url?: undefined | string;
                    subscriptions_url?: undefined | string;
                    organizations_url?: undefined | string;
                    repos_url?: undefined | string;
                    events_url?: undefined | string;
                    received_events_url?: undefined | string;
                    type?: undefined | string;
                    site_admin?: undefined | boolean;
                  };
              change_status?:
                | undefined
                | {
                    deletions?: undefined | number;
                    additions?: undefined | number;
                    total?: undefined | number;
                  };
              committed_at?: undefined | string;
            }[];
        fork_of?: undefined | GithubApiGistSimple;
        url?: undefined | string;
        forks_url?: undefined | string;
        commits_url?: undefined | string;
        id?: undefined | string;
        node_id?: undefined | string;
        git_pull_url?: undefined | string;
        git_push_url?: undefined | string;
        html_url?: undefined | string;
        created_at?: undefined | string;
        updated_at?: undefined | string;
        description?: undefined | string;
        comments?: undefined | number;
        comments_url?: undefined | string;
      };
  type GithubApiGistSimple = {
    url?: undefined | string;
    forks_url?: undefined | string;
    commits_url?: undefined | string;
    id?: undefined | string;
    node_id?: undefined | string;
    git_pull_url?: undefined | string;
    git_push_url?: undefined | string;
    html_url?: undefined | string;
    files?:
      | undefined
      | {
          [key: string]: {
            filename?: undefined | string;
            type?: undefined | string;
            language?: undefined | string;
            raw_url?: undefined | string;
            size?: undefined | number;
            truncated?: undefined | boolean;
            content?: undefined | string;
          };
        };
    public?: undefined | boolean;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    description?: undefined | string;
    comments?: undefined | number;
    user?: undefined | string;
    comments_url?: undefined | string;
    owner?: undefined | GithubApiSimpleUser;
    truncated?: undefined | boolean;
  };
  type GistsGistsDelete =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsDeleteComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsDeleteCommentPath = { gist_id: string; comment_id: number };
  type GistsGistsDeleteCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsDeletePath = GistsGistsCheckIsStarredPath;
  type GistsGistsDeleteResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsFork = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsForkPath = GistsGistsCheckIsStarredPath;
  type GistsGistsForkResponse = GithubApiBaseGist;
  type GithubApiBaseGist = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: {
      [key: string]: {
        filename?: undefined | string;
        type?: undefined | string;
        language?: undefined | string;
        raw_url?: undefined | string;
        size?: undefined | number;
      };
    };
    public: boolean;
    created_at: string;
    updated_at: string;
    description: string;
    comments: number;
    user: GithubApiSimpleUser;
    comments_url: string;
    owner?: undefined | GithubApiSimpleUser;
    truncated?: undefined | boolean;
    forks?: undefined | any[];
    history?: undefined | any[];
  };
  type GistsGistsGet = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsGetComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsGetCommentPath = GistsGistsDeleteCommentPath;
  type GistsGistsGetCommentResponse = GistsGistsCreateCommentResponse;
  type GistsGistsGetPath = GistsGistsCheckIsStarredPath;
  type GistsGistsGetResponse = GistsGistsCreateResponse;
  type GistsGistsGetRevision =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsGetRevisionPath = { gist_id: string; sha: string };
  type GistsGistsGetRevisionResponse = GistsGistsCreateResponse;
  type GistsGistsList = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListComments =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListCommentsPath = GistsGistsCheckIsStarredPath;
  type GistsGistsListCommentsQuery = ActionsActionsListArtifactsForRepoQuery;
  type GistsGistsListCommentsResponse = GithubApiGistComment[];
  type GistsGistsListCommits =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListCommitsPath = GistsGistsCheckIsStarredPath;
  type GistsGistsListCommitsQuery = ActionsActionsListArtifactsForRepoQuery;
  type GistsGistsListCommitsResponse = GithubApiGistCommit[];
  type GithubApiGistCommit = {
    url: string;
    version: string;
    user: GithubApiSimpleUser;
    change_status: {
      total?: undefined | number;
      additions?: undefined | number;
      deletions?: undefined | number;
    };
    committed_at: string;
  };
  type GistsGistsListForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type GistsGistsListForUserQuery = {
    since?: undefined | string;
    per_page: number;
    page: number;
  };
  type GistsGistsListForUserResponse = GithubApiBaseGist[];
  type GistsGistsListForks =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListForksPath = GistsGistsCheckIsStarredPath;
  type GistsGistsListForksQuery = ActionsActionsListArtifactsForRepoQuery;
  type GistsGistsListForksResponse = GithubApiGistFull[];
  type GistsGistsListPublic =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListPublicQuery = GistsGistsListForUserQuery;
  type GistsGistsListPublicResponse = GistsGistsListForUserResponse;
  type GistsGistsListQuery = GistsGistsListForUserQuery;
  type GistsGistsListResponse = GistsGistsListForUserResponse;
  type GistsGistsListStarred =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsListStarredQuery = GistsGistsListForUserQuery;
  type GistsGistsListStarredResponse = GistsGistsListForUserResponse;
  type GistsGistsStar = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsStarPath = GistsGistsCheckIsStarredPath;
  type GistsGistsStarResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsUnstar =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsUnstarPath = GistsGistsCheckIsStarredPath;
  type GistsGistsUnstarResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsUpdate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsUpdateBody =
    | undefined
    | {
        description?: undefined | string;
        files?:
          | undefined
          | {
              [key: string]: {
                content?: undefined | string;
                filename?: undefined | string;
              };
            };
      };
  type GistsGistsUpdateComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GistsGistsUpdateCommentBody = GistsGistsCreateCommentBody;
  type GistsGistsUpdateCommentPath = GistsGistsDeleteCommentPath;
  type GistsGistsUpdateCommentResponse = GistsGistsCreateCommentResponse;
  type GistsGistsUpdatePath = GistsGistsCheckIsStarredPath;
  type GistsGistsUpdateResponse = GistsGistsCreateResponse;
  type GitGitCreateBlob =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitCreateBlobBody = undefined | { content: string; encoding: string };
  type GitGitCreateBlobPath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateBlobResponse = GithubApiShortBlob;
  type GithubApiShortBlob = {
    url?: undefined | string;
    sha?: undefined | string;
  };
  type GitGitCreateCommit =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitCreateCommitBody =
    | undefined
    | {
        message: string;
        tree: string;
        parents?: undefined | string[];
        author?:
          | undefined
          | {
              name?: undefined | string;
              email?: undefined | string;
              date?: undefined | string;
            };
        committer?:
          | undefined
          | {
              name?: undefined | string;
              email?: undefined | string;
              date?: undefined | string;
            };
        signature?: undefined | string;
      };
  type GitGitCreateCommitPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateCommitResponse = GithubApiGitCommit;
  type GithubApiGitCommit = {
    sha?: undefined | string;
    node_id?: undefined | string;
    url?: undefined | string;
    author?:
      | undefined
      | { date?: undefined | string; email: string; name: string };
    committer?:
      | undefined
      | { date?: undefined | string; email: string; name: string };
    message?: undefined | string;
    tree?: undefined | { sha?: undefined | string; url?: undefined | string };
    parents?:
      | undefined
      | {
          sha?: undefined | string;
          url?: undefined | string;
          html_url?: undefined | string;
        }[];
    verification?:
      | undefined
      | {
          verified?: undefined | boolean;
          reason?: undefined | string;
          signature?: undefined | string;
          payload?: undefined | string;
        };
    html_url?: undefined | string;
  };
  type GitGitCreateRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitCreateRefBody =
    | undefined
    | { ref: string; sha: string; key?: undefined | string };
  type GitGitCreateRefPath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateRefResponse = GithubApiGitRef;
  type GithubApiGitRef = {
    ref?: undefined | string;
    node_id?: undefined | string;
    url?: undefined | string;
    object?:
      | undefined
      | {
          type?: undefined | string;
          sha?: undefined | string;
          url?: undefined | string;
        };
  };
  type GitGitCreateTag =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitCreateTagBody =
    | undefined
    | {
        tag: string;
        message: string;
        object: string;
        type: "commit" | "tree" | "blob";
        tagger?:
          | undefined
          | {
              name?: undefined | string;
              email?: undefined | string;
              date?: undefined | string;
            };
      };
  type GitGitCreateTagPath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateTagResponse = GithubApiGitTag;
  type GithubApiGitTag = {
    node_id: string;
    tag: string;
    sha: string;
    url: string;
    message: string;
    tagger: { date: string; email: string; name: string };
    object: { sha: string; type: string; url: string };
    verification?: undefined | GithubApiVerification;
  };
  type GithubApiVerification = {
    verified: boolean;
    reason: string;
    payload: string;
    signature: string;
  };
  type GitGitCreateTree =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitCreateTreeBody =
    | undefined
    | {
        tree: {
          path?: undefined | string;
          mode?:
            | undefined
            | "100644"
            | "100755"
            | "040000"
            | "160000"
            | "120000";
          type?: undefined | "blob" | "tree" | "commit";
          sha?: undefined | string;
          content?: undefined | string;
        }[];
        base_tree?: undefined | string;
      };
  type GitGitCreateTreePath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateTreeResponse = GithubApiGitTree;
  type GithubApiGitTree = {
    sha: string;
    url: string;
    truncated: boolean;
    tree: {
      path?: undefined | string;
      mode?: undefined | string;
      type?: undefined | string;
      sha?: undefined | string;
      size?: undefined | number;
      url?: undefined | string;
    }[];
  };
  type GitGitDeleteRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitDeleteRefPath = ChecksChecksListForRefPath;
  type GitGitDeleteRefResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GitGitGetBlob = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitGetBlobPath = { owner: string; repo: string; file_sha: string };
  type GitGitGetBlobResponse = GithubApiBlob;
  type GithubApiBlob = {
    content: string;
    encoding: string;
    url: string;
    sha: string;
    size: number;
    node_id: string;
    highlighted_content?: undefined | string;
  };
  type GitGitGetCommit =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitGetCommitPath = {
    owner: string;
    repo: string;
    commit_sha: string;
  };
  type GitGitGetCommitResponse = GitGitCreateCommitResponse;
  type GitGitGetRef = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitGetRefPath = ChecksChecksListForRefPath;
  type GitGitGetRefResponse = GitGitCreateRefResponse;
  type GitGitGetTag = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitGetTagPath = { owner: string; repo: string; tag_sha: string };
  type GitGitGetTagResponse = GitGitCreateTagResponse;
  type GitGitGetTree = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitGetTreePath = { owner: string; repo: string; tree_sha: string };
  type GitGitGetTreeQuery = { recursive?: undefined | string };
  type GitGitGetTreeResponse = GitGitCreateTreeResponse;
  type GitGitListMatchingRefs =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitListMatchingRefsPath = ChecksChecksListForRefPath;
  type GitGitListMatchingRefsQuery = ActionsActionsListArtifactsForRepoQuery;
  type GitGitListMatchingRefsResponse = GithubApiGitRef[];
  type GitGitUpdateRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitGitUpdateRefBody = undefined | { sha: string; force: boolean };
  type GitGitUpdateRefPath = ChecksChecksListForRefPath;
  type GitGitUpdateRefResponse = GitGitCreateRefResponse;
  type GithubApiApiOverview = {
    verifiable_password_authentication: boolean;
    ssh_key_fingerprints?:
      | undefined
      | { SHA256_RSA?: undefined | string; SHA256_DSA?: undefined | string };
    hooks?: undefined | string[];
    web?: undefined | string[];
    api?: undefined | string[];
    git?: undefined | string[];
    pages?: undefined | string[];
    importer?: undefined | string[];
    github_services_sha?: undefined | string;
    installed_version?: undefined | string;
  };
  type GithubApiApplicationGrant = {
    id: number;
    url: string;
    app: { client_id: string; name: string; url: string };
    created_at: string;
    updated_at: string;
    scopes: string[];
    user?: undefined | GithubApiSimpleUser;
  };
  type GithubApiBranchProtection = {
    url?: undefined | string;
    required_status_checks: {
      url?: undefined | string;
      enforcement_level: string;
      contexts: string[];
      contexts_url?: undefined | string;
    };
    enforce_admins?: undefined | GithubApiProtectedBranchAdminEnforced;
    required_pull_request_reviews?:
      | undefined
      | GithubApiProtectedBranchPullRequestReview;
    restrictions?: undefined | GithubApiBranchRestrictionPolicy;
    required_linear_history?: undefined | { enabled?: undefined | boolean };
    allow_force_pushes?: undefined | { enabled?: undefined | boolean };
    allow_deletions?: undefined | { enabled?: undefined | boolean };
    enabled: boolean;
    name?: undefined | string;
    protection_url?: undefined | string;
  };
  type GithubApiProtectedBranchAdminEnforced = {
    url: string;
    enabled: boolean;
  };
  type GithubApiProtectedBranchPullRequestReview = {
    url?: undefined | string;
    dismissal_restrictions?:
      | undefined
      | {
          users?: undefined | GithubApiSimpleUser[];
          teams?: undefined | GithubApiTeam[];
          url?: undefined | string;
          users_url?: undefined | string;
          teams_url?: undefined | string;
        };
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count?: undefined | number;
  };
  type GithubApiTeam = {
    id: number;
    node_id: string;
    name: string;
    slug: string;
    description: string;
    privacy?: undefined | string;
    permission: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    parent?: undefined | GithubApiTeamSimple;
  };
  type GithubApiTeamSimple = {
    id: number;
    node_id: string;
    url: string;
    members_url: string;
    name: string;
    description: string;
    permission: string;
    privacy?: undefined | string;
    html_url: string;
    repositories_url: string;
    slug: string;
    ldap_dn?: undefined | string;
  };
  type GithubApiBranchRestrictionPolicy = {
    url: string;
    users_url: string;
    teams_url: string;
    apps_url: string;
    users: {
      login?: undefined | string;
      id?: undefined | number;
      node_id?: undefined | string;
      avatar_url?: undefined | string;
      gravatar_id?: undefined | string;
      url?: undefined | string;
      html_url?: undefined | string;
      followers_url?: undefined | string;
      following_url?: undefined | string;
      gists_url?: undefined | string;
      starred_url?: undefined | string;
      subscriptions_url?: undefined | string;
      organizations_url?: undefined | string;
      repos_url?: undefined | string;
      events_url?: undefined | string;
      received_events_url?: undefined | string;
      type?: undefined | string;
      site_admin?: undefined | boolean;
    }[];
    teams: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      html_url?: undefined | string;
      name?: undefined | string;
      slug?: undefined | string;
      description?: undefined | string;
      privacy?: undefined | string;
      permission?: undefined | string;
      members_url?: undefined | string;
      repositories_url?: undefined | string;
      parent?: undefined | string;
    }[];
    apps: {
      id?: undefined | number;
      slug?: undefined | string;
      node_id?: undefined | string;
      owner?:
        | undefined
        | {
            login?: undefined | string;
            id?: undefined | number;
            node_id?: undefined | string;
            url?: undefined | string;
            repos_url?: undefined | string;
            events_url?: undefined | string;
            hooks_url?: undefined | string;
            issues_url?: undefined | string;
            members_url?: undefined | string;
            public_members_url?: undefined | string;
            avatar_url?: undefined | string;
            description?: undefined | string;
            gravatar_id?: undefined | string;
            html_url?: undefined | string;
            followers_url?: undefined | string;
            following_url?: undefined | string;
            gists_url?: undefined | string;
            starred_url?: undefined | string;
            subscriptions_url?: undefined | string;
            organizations_url?: undefined | string;
            received_events_url?: undefined | string;
            type?: undefined | string;
          };
      name?: undefined | string;
      description?: undefined | string;
      external_url?: undefined | string;
      html_url?: undefined | string;
      created_at?: undefined | string;
      updated_at?: undefined | string;
      permissions?:
        | undefined
        | {
            metadata?: undefined | string;
            contents?: undefined | string;
            issues?: undefined | string;
            single_file?: undefined | string;
          };
      events?: undefined | string[];
    }[];
  };
  type GithubApiBranchShort = {
    name?: undefined | string;
    commit?: undefined | { sha?: undefined | string; url?: undefined | string };
    protected?: undefined | boolean;
  };
  type GithubApiBranchWithProtection = {
    name: string;
    commit: GithubApiCommit;
    _links: { html: string; self: string };
    protected: boolean;
    protection: GithubApiBranchProtection;
    protection_url: string;
    pattern?: undefined | string;
    required_approving_review_count?: undefined | number;
  };
  type GithubApiCommit = {
    url: string;
    sha: string;
    node_id: string;
    html_url: string;
    comments_url: string;
    commit: {
      url: string;
      author: GithubApiGitUser;
      committer: GithubApiGitUser;
      message: string;
      comment_count: number;
      tree: { sha: string; url: string };
      verification?: undefined | GithubApiVerification;
    };
    author: GithubApiSimpleUser;
    committer: GithubApiSimpleUser;
    parents: { sha: string; url: string; html_url?: undefined | string }[];
    stats?:
      | undefined
      | {
          additions?: undefined | number;
          deletions?: undefined | number;
          total?: undefined | number;
        };
    files?:
      | undefined
      | {
          filename?: undefined | string;
          additions?: undefined | number;
          deletions?: undefined | number;
          changes?: undefined | number;
          status?: undefined | string;
          raw_url?: undefined | string;
          blob_url?: undefined | string;
          patch?: undefined | string;
          sha?: undefined | string;
          contents_url?: undefined | string;
          previous_filename?: undefined | string;
        }[];
  };
  type GithubApiGitUser = {
    name?: undefined | string;
    email?: undefined | string;
    date?: undefined | string;
  };
  type GithubApiCloneTraffic = {
    count: number;
    uniques: number;
    clones: GithubApiTraffic[];
  };
  type GithubApiTraffic = { timestamp: string; uniques: number; count: number };
  type GithubApiCodeFrequencyStat = number[];
  type GithubApiCodeOfConductSimple = {
    url: string;
    key: string;
    name: string;
    html_url: string;
  };
  type GithubApiCodeSearchResultItem = {
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    repository: GithubApiMinimalRepository;
    score: number;
    file_size?: undefined | number;
    language?: undefined | string;
    last_modified_at?: undefined | string;
    line_numbers?: undefined | string[];
    text_matches?: undefined | GithubApiSearchResultTextMatches;
  };
  type GithubApiSearchResultTextMatches = {
    object_url?: undefined | string;
    object_type?: undefined | string;
    property?: undefined | string;
    fragment?: undefined | string;
    matches?:
      | undefined
      | { text?: undefined | string; indices?: undefined | number[] }[];
  }[];
  type GithubApiCollaborator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    permissions?: undefined | { pull: boolean; push: boolean; admin: boolean };
  };
  type GithubApiCombinedCommitStatus = {
    state: string;
    statuses: GithubApiSimpleCommitStatus[];
    sha: string;
    total_count: number;
    repository: GithubApiMinimalRepository;
    commit_url: string;
    url: string;
  };
  type GithubApiSimpleCommitStatus = {
    description: string;
    id: number;
    node_id: string;
    state: string;
    context: string;
    target_url: string;
    required?: undefined | boolean;
    avatar_url: string;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type GithubApiCommitActivity = {
    days: number[];
    total: number;
    week: number;
  };
  type GithubApiCommitComment = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: GithubApiSimpleUser;
    created_at: string;
    updated_at: string;
    author_association: string;
    reactions?: undefined | GithubApiReactionRollup;
  };
  type GithubApiCommitComparison = {
    url: string;
    html_url: string;
    permalink_url: string;
    diff_url: string;
    patch_url: string;
    base_commit: GithubApiCommit;
    merge_base_commit: GithubApiCommit;
    status: "diverged" | "ahead" | "behind" | "identical";
    ahead_by: number;
    behind_by: number;
    total_commits: number;
    commits: GithubApiCommit[];
    files: GithubApiDiffEntry[];
  };
  type GithubApiDiffEntry = {
    sha: string;
    filename: string;
    status: string;
    additions: number;
    deletions: number;
    changes: number;
    blob_url: string;
    raw_url: string;
    contents_url: string;
    patch?: undefined | string;
    previous_filename?: undefined | string;
  };
  type GithubApiCommitSearchResultItem = {
    url: string;
    sha: string;
    html_url: string;
    comments_url: string;
    commit: {
      author: { name: string; email: string; date: string };
      committer: GithubApiGitUser;
      comment_count: number;
      message: string;
      tree: { sha: string; url: string };
      url: string;
      verification?: undefined | GithubApiVerification;
    };
    author: GithubApiSimpleUser;
    committer: GithubApiGitUser;
    parents: {
      url?: undefined | string;
      html_url?: undefined | string;
      sha?: undefined | string;
    }[];
    repository: GithubApiMinimalRepository;
    score: number;
    node_id: string;
    text_matches?: undefined | GithubApiSearchResultTextMatches;
  };
  type GithubApiCommunityHealthFile = { url: string; html_url: string };
  type GithubApiCommunityProfile = {
    health_percentage: number;
    description: string;
    documentation: string;
    files: {
      code_of_conduct: GithubApiCodeOfConductSimple;
      license: GithubApiLicenseSimple;
      contributing: GithubApiCommunityHealthFile;
      readme: GithubApiCommunityHealthFile;
      issue_template: GithubApiCommunityHealthFile;
      pull_request_template: GithubApiCommunityHealthFile;
    };
    updated_at: string;
    content_reports_enabled?: undefined | boolean;
  };
  type GithubApiContentDirectory = {
    type: string;
    size: number;
    name: string;
    path: string;
    content?: undefined | string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    download_url: string;
    _links: { git: string; html: string; self: string };
  }[];
  type GithubApiContentFile = {
    type: string;
    encoding: string;
    size: number;
    name: string;
    path: string;
    content: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    download_url: string;
    _links: { git: string; html: string; self: string };
    target?: undefined | string;
    submodule_git_url?: undefined | string;
  };
  type GithubApiContentSubmodule = {
    type: string;
    submodule_git_url: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    download_url: string;
    _links: { git: string; html: string; self: string };
  };
  type GithubApiContentSymlink = {
    type: string;
    target: string;
    size: number;
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    download_url: string;
    _links: { git: string; html: string; self: string };
  };
  type GithubApiContentTraffic = {
    path: string;
    title: string;
    count: number;
    uniques: number;
  };
  type GithubApiContributor = {
    login?: undefined | string;
    id?: undefined | number;
    node_id?: undefined | string;
    avatar_url?: undefined | string;
    gravatar_id?: undefined | string;
    url?: undefined | string;
    html_url?: undefined | string;
    followers_url?: undefined | string;
    following_url?: undefined | string;
    gists_url?: undefined | string;
    starred_url?: undefined | string;
    subscriptions_url?: undefined | string;
    organizations_url?: undefined | string;
    repos_url?: undefined | string;
    events_url?: undefined | string;
    received_events_url?: undefined | string;
    type: string;
    site_admin?: undefined | boolean;
    contributions: number;
    email?: undefined | string;
    name?: undefined | string;
  };
  type GithubApiContributorActivity = {
    author: GithubApiSimpleUser;
    total: number;
    weeks: {
      w?: undefined | string;
      a?: undefined | number;
      d?: undefined | number;
      c?: undefined | number;
    }[];
  };
  type GithubApiCredentialAuthorization = {
    login: string;
    credential_id: number;
    credential_type: string;
    token_last_eight?: undefined | string;
    credential_authorized_at: string;
    scopes?: undefined | string[];
    fingerprint?: undefined | string;
    credential_accessed_at?: undefined | string;
  };
  type GithubApiDeployKey = {
    id?: undefined | number;
    key?: undefined | string;
    url?: undefined | string;
    title?: undefined | string;
    verified?: undefined | boolean;
    created_at?: undefined | string;
    read_only?: undefined | boolean;
  };
  type GithubApiDeployment = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: {};
    original_environment?: undefined | string;
    environment: string;
    description: string;
    creator: GithubApiSimpleUser;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    transient_environment?: undefined | boolean;
    production_environment?: undefined | boolean;
    performed_via_github_app?: undefined | GithubApiIntegration;
  };
  type GithubApiDeploymentStatus = {
    url: string;
    id: number;
    node_id: string;
    state:
      | "error"
      | "failure"
      | "inactive"
      | "pending"
      | "success"
      | "queued"
      | "in_progress";
    creator: GithubApiSimpleUser;
    description: string;
    environment: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
    environment_url: string;
    log_url: string;
    performed_via_github_app?: undefined | GithubApiIntegration;
  };
  type GithubApiEmail =
    | { email: string; primary: boolean; verified: boolean; visibility: string }
    | string;
  type GithubApiFileCommit = {
    content?:
      | undefined
      | {
          name?: undefined | string;
          path?: undefined | string;
          sha?: undefined | string;
          size?: undefined | number;
          url?: undefined | string;
          html_url?: undefined | string;
          git_url?: undefined | string;
          download_url?: undefined | string;
          type?: undefined | string;
          _links?:
            | undefined
            | {
                self?: undefined | string;
                git?: undefined | string;
                html?: undefined | string;
              };
        };
    commit?:
      | undefined
      | {
          sha?: undefined | string;
          node_id?: undefined | string;
          url?: undefined | string;
          html_url?: undefined | string;
          author?:
            | undefined
            | {
                date?: undefined | string;
                name?: undefined | string;
                email?: undefined | string;
              };
          committer?:
            | undefined
            | {
                date?: undefined | string;
                name?: undefined | string;
                email?: undefined | string;
              };
          message?: undefined | string;
          tree?:
            | undefined
            | { url?: undefined | string; sha?: undefined | string };
          parents?:
            | undefined
            | {
                url?: undefined | string;
                html_url?: undefined | string;
                sha?: undefined | string;
              }[];
          verification?:
            | undefined
            | {
                verified?: undefined | boolean;
                reason?: undefined | string;
                signature?: undefined | string;
                payload?: undefined | string;
              };
        };
  };
  type GithubApiFullRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GithubApiSimpleUser;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: undefined | boolean;
    topics?: undefined | string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility?: undefined | string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions?: undefined | { admin: boolean; pull: boolean; push: boolean };
    allow_rebase_merge?: undefined | boolean;
    template_repository?: undefined | { [key: string]: any };
    temp_clone_token?: undefined | string;
    allow_squash_merge?: undefined | boolean;
    delete_branch_on_merge?: undefined | boolean;
    allow_merge_commit?: undefined | boolean;
    subscribers_count: number;
    network_count: number;
    license: GithubApiLicenseSimple;
    organization?: undefined | GithubApiSimpleUser;
    parent?: undefined | GithubApiRepository;
    source?: undefined | GithubApiRepository;
    forks: number;
    master_branch?: undefined | string;
    open_issues: number;
    watchers: number;
    anonymous_access_enabled: boolean;
  };
  type GithubApiGitignoreTemplate = { name: string; source: string };
  type GithubApiGpgKey = {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: { email?: undefined | string; verified?: undefined | boolean }[];
    subkeys: {
      id?: undefined | number;
      primary_key_id?: undefined | number;
      key_id?: undefined | string;
      public_key?: undefined | string;
      emails?: undefined | any[];
      subkeys?: undefined | any[];
      can_sign?: undefined | boolean;
      can_encrypt_comms?: undefined | boolean;
      can_encrypt_storage?: undefined | boolean;
      can_certify?: undefined | boolean;
      created_at?: undefined | string;
      expires_at?: undefined | string;
      raw_key?: undefined | string;
    }[];
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: string;
    raw_key: string;
  };
  type GithubApiGroupMapping = {
    groups?:
      | undefined
      | { group_id: string; group_name: string; group_description: string }[];
    group_id?: undefined | string;
    group_name?: undefined | string;
    group_description?: undefined | string;
    status?: undefined | string;
    synced_at?: undefined | string;
  };
  type GithubApiHook = {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: string[];
    config: {
      email?: undefined | string;
      password?: undefined | string;
      room?: undefined | string;
      subdomain?: undefined | string;
      url?: undefined | GithubApiWebhookConfigUrl;
      insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
      content_type?: undefined | GithubApiWebhookConfigContentType;
      digest?: undefined | string;
      secret?: undefined | GithubApiWebhookConfigSecret;
      token?: undefined | string;
    };
    updated_at: string;
    created_at: string;
    url: string;
    test_url: string;
    ping_url: string;
    last_response: GithubApiHookResponse;
  };
  type GithubApiHookResponse = {
    code: number;
    status: string;
    message: string;
  };
  type GithubApiHovercard = {
    contexts: { message: string; octicon: string }[];
  };
  type GithubApiImport = {
    vcs: string;
    use_lfs?: undefined | string;
    vcs_url: string;
    svc_root?: undefined | string;
    tfvc_project?: undefined | string;
    status:
      | "auth"
      | "error"
      | "none"
      | "detecting"
      | "choose"
      | "auth_failed"
      | "importing"
      | "mapping"
      | "waiting_to_push"
      | "pushing"
      | "complete"
      | "setup"
      | "unknown"
      | "detection_found_multiple"
      | "detection_found_nothing"
      | "detection_needs_auth";
    status_text?: undefined | string;
    failed_step?: undefined | string;
    error_message?: undefined | string;
    import_percent?: undefined | number;
    commit_count?: undefined | number;
    push_percent?: undefined | number;
    has_large_files?: undefined | boolean;
    large_files_size?: undefined | number;
    large_files_count?: undefined | number;
    project_choices?:
      | undefined
      | {
          vcs?: undefined | string;
          tfvc_project?: undefined | string;
          human_name?: undefined | string;
        }[];
    message?: undefined | string;
    authors_count?: undefined | number;
    url: string;
    html_url: string;
    authors_url: string;
    repository_url: string;
    svn_root?: undefined | string;
  };
  type GithubApiInteractionExpiry =
    | "one_day"
    | "three_days"
    | "one_week"
    | "one_month"
    | "six_months";
  type GithubApiInteractionGroup =
    | "existing_users"
    | "contributors_only"
    | "collaborators_only";
  type GithubApiInteractionLimit = {
    limit: GithubApiInteractionGroup;
    expiry?: undefined | GithubApiInteractionExpiry;
  };
  type GithubApiInteractionLimitResponse = {
    limit: GithubApiInteractionGroup;
    origin: string;
    expires_at: string;
  };
  type GithubApiIssue = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body?: undefined | string;
    user: GithubApiSimpleUser;
    labels: (
      | string
      | {
          id?: undefined | number;
          node_id?: undefined | string;
          url?: undefined | string;
          name?: undefined | string;
          description?: undefined | string;
          color?: undefined | string;
          default?: undefined | boolean;
        }
    )[];
    assignee: GithubApiSimpleUser;
    assignees?: undefined | GithubApiSimpleUser[];
    milestone: GithubApiMilestone;
    locked: boolean;
    active_lock_reason?: undefined | string;
    comments: number;
    pull_request?:
      | undefined
      | {
          merged_at?: undefined | string;
          diff_url: string;
          html_url: string;
          patch_url: string;
          url: string;
        };
    closed_at: string;
    created_at: string;
    updated_at: string;
    closed_by?: undefined | GithubApiSimpleUser;
    body_html?: undefined | string;
    body_text?: undefined | string;
    timeline_url?: undefined | string;
    repository?: undefined | GithubApiRepository;
    performed_via_github_app?: undefined | GithubApiIntegration;
    author_association: string;
    reactions?: undefined | GithubApiReactionRollup;
  };
  type GithubApiIssueEvent = {
    id: number;
    node_id: string;
    url: string;
    actor: GithubApiSimpleUser;
    event: string;
    commit_id: string;
    commit_url: string;
    created_at: string;
    issue?: undefined | GithubApiIssueSimple;
    label?: undefined | GithubApiIssueEventLabel;
    assignee?: undefined | GithubApiSimpleUser;
    assigner?: undefined | GithubApiSimpleUser;
    review_requester?: undefined | GithubApiSimpleUser;
    requested_reviewer?: undefined | GithubApiSimpleUser;
    requested_team?: undefined | GithubApiTeam;
    dismissed_review?: undefined | GithubApiIssueEventDismissedReview;
    milestone?: undefined | GithubApiIssueEventMilestone;
    project_card?: undefined | GithubApiIssueEventProjectCard;
    rename?: undefined | GithubApiIssueEventRename;
    author_association?: undefined | string;
    lock_reason?: undefined | string;
  };
  type GithubApiIssueEventLabel = { name: string; color: string };
  type GithubApiIssueEventDismissedReview = {
    state: string;
    review_id: number;
    dismissal_message: string;
    dismissal_commit_id?: undefined | string;
  };
  type GithubApiIssueEventMilestone = { title: string };
  type GithubApiIssueEventProjectCard = {
    url: string;
    id: number;
    project_url: string;
    project_id: number;
    column_name: string;
    previous_column_name?: undefined | string;
  };
  type GithubApiIssueEventRename = { from: string; to: string };
  type GithubApiIssueEventForIssue = {
    id?: undefined | number;
    node_id?: undefined | string;
    url?: undefined | string;
    actor?: undefined | GithubApiSimpleUser;
    event?: undefined | string;
    commit_id?: undefined | string;
    commit_url?: undefined | string;
    created_at?: undefined | string;
    sha?: undefined | string;
    html_url?: undefined | string;
    message?: undefined | string;
    issue_url?: undefined | string;
    updated_at?: undefined | string;
    author_association?: undefined | string;
    body?: undefined | string;
    lock_reason?: undefined | string;
    submitted_at?: undefined | string;
    state?: undefined | string;
    pull_request_url?: undefined | string;
    body_html?: undefined | string;
    body_text?: undefined | string;
  };
  type GithubApiIssueSearchResultItem = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    locked: boolean;
    active_lock_reason?: undefined | string;
    assignees?: undefined | GithubApiSimpleUser[];
    user: GithubApiSimpleUser;
    labels: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      name?: undefined | string;
      color?: undefined | string;
      default?: undefined | boolean;
      description?: undefined | string;
    }[];
    state: string;
    assignee: GithubApiSimpleUser;
    milestone: GithubApiMilestone;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    text_matches?: undefined | GithubApiSearchResultTextMatches;
    pull_request?:
      | undefined
      | {
          merged_at?: undefined | string;
          diff_url: string;
          html_url: string;
          patch_url: string;
          url: string;
        };
    body?: undefined | string;
    score: number;
    author_association: string;
    draft?: undefined | boolean;
    repository?: undefined | GithubApiRepository;
    body_html?: undefined | string;
    body_text?: undefined | string;
    timeline_url?: undefined | string;
    performed_via_github_app?: undefined | GithubApiIntegration;
  };
  type GithubApiKey = {
    key_id?: undefined | string;
    key?: undefined | string;
    id?: undefined | number;
    url?: undefined | string;
    title?: undefined | string;
    created_at?: undefined | string;
    verified?: undefined | boolean;
    read_only?: undefined | boolean;
  };
  type GithubApiKeySimple = { id: number; key: string };
  type GithubApiLabelSearchResultItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description: string;
    score: number;
    text_matches?: undefined | GithubApiSearchResultTextMatches;
  };
  type GithubApiLanguage = { [key: string]: number };
  type GithubApiLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
    html_url: string;
    description: string;
    implementation: string;
    permissions: string[];
    conditions: string[];
    limitations: string[];
    body: string;
    featured: boolean;
  };
  type GithubApiLicenseContent = {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    content: string;
    encoding: string;
    _links: { git: string; html: string; self: string };
    license: GithubApiLicenseSimple;
  };
  type GithubApiLink = { href: string };
  type GithubApiMigration = {
    id: number;
    owner: GithubApiSimpleUser;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: GithubApiRepository[];
    url: string;
    created_at: string;
    updated_at: string;
    node_id: string;
    archive_url?: undefined | string;
    exclude?: undefined | any[];
  };
  type GithubApiOrgHook = {
    id: number;
    url: string;
    ping_url: string;
    name: string;
    events: string[];
    active: boolean;
    config: {
      url?: undefined | string;
      insecure_ssl?: undefined | string;
      content_type?: undefined | string;
      secret?: undefined | string;
    };
    updated_at: string;
    created_at: string;
    type: string;
  };
  type GithubApiOrgMembership = {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    organization: GithubApiOrganizationSimple;
    user: GithubApiSimpleUser;
    permissions?: undefined | { can_create_repository: boolean };
  };
  type GithubApiOrganizationFull = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
    name?: undefined | string;
    company?: undefined | string;
    blog?: undefined | string;
    location?: undefined | string;
    email?: undefined | string;
    twitter_username?: undefined | string;
    is_verified?: undefined | boolean;
    has_organization_projects: boolean;
    has_repository_projects: boolean;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    html_url: string;
    created_at: string;
    type: string;
    total_private_repos?: undefined | number;
    owned_private_repos?: undefined | number;
    private_gists?: undefined | number;
    disk_usage?: undefined | number;
    collaborators?: undefined | number;
    billing_email?: undefined | string;
    plan?:
      | undefined
      | {
          name: string;
          space: number;
          private_repos: number;
          filled_seats?: undefined | number;
          seats?: undefined | number;
        };
    default_repository_permission?: undefined | string;
    members_can_create_repositories?: undefined | boolean;
    two_factor_requirement_enabled?: undefined | boolean;
    members_allowed_repository_creation_type?: undefined | string;
    members_can_create_public_repositories?: undefined | boolean;
    members_can_create_private_repositories?: undefined | boolean;
    members_can_create_internal_repositories?: undefined | boolean;
    members_can_create_pages?: undefined | boolean;
    updated_at: string;
  };
  type GithubApiOrganizationInvitation = {
    id?: undefined | number;
    login?: undefined | string;
    email?: undefined | string;
    role?: undefined | string;
    created_at?: undefined | string;
    inviter?: undefined | GithubApiSimpleUser;
    team_count?: undefined | number;
    invitation_team_url?: undefined | string;
    node_id?: undefined | string;
    invitation_teams_url?: undefined | string;
  };
  type GithubApiPage = {
    url: string;
    status: "built" | "building" | "errored";
    cname: string;
    custom_404: boolean;
    html_url?: undefined | string;
    source?: undefined | GithubApiPagesSourceHash;
  };
  type GithubApiPagesSourceHash = { branch: string; path: string };
  type GithubApiPageBuild = {
    url: string;
    status: string;
    error: { message: string };
    pusher: GithubApiSimpleUser;
    commit: string;
    duration: number;
    created_at: string;
    updated_at: string;
  };
  type GithubApiPageBuildStatus = { url: string; status: string };
  type GithubApiParticipationStats = {
    all?: undefined | number[];
    owner?: undefined | number[];
  };
  type GithubApiPorterAuthor = {
    id: number;
    remote_id: string;
    remote_name: string;
    email: string;
    name: string;
    url: string;
    import_url: string;
  };
  type GithubApiPorterLargeFile = {
    ref_name: string;
    path: string;
    oid: string;
    size: number;
  };
  type GithubApiPrivateUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string;
    company: string;
    blog: string;
    location: string;
    email: string;
    hireable: boolean;
    bio: string;
    twitter_username?: undefined | string;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    private_gists: number;
    total_private_repos: number;
    owned_private_repos: number;
    disk_usage: number;
    collaborators: number;
    two_factor_authentication: boolean;
    plan?:
      | undefined
      | {
          collaborators: number;
          name: string;
          space: number;
          private_repos: number;
        };
    suspended_at?: undefined | string;
    business_plus?: undefined | boolean;
    ldap_dn?: undefined | string;
  };
  type GithubApiProject = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: GithubApiSimpleUser;
    created_at: string;
    updated_at: string;
    organization_permission?: undefined | "read" | "write" | "admin" | "none";
    private?: undefined | boolean;
    cards_url?: undefined | string;
    permissions?: undefined | { read: boolean; write: boolean; admin: boolean };
  };
  type GithubApiProjectCard = {
    url: string;
    id: number;
    node_id: string;
    note: string;
    creator: GithubApiSimpleUser;
    created_at: string;
    updated_at: string;
    archived?: undefined | boolean;
    column_url: string;
    content_url?: undefined | string;
    project_url: string;
  };
  type GithubApiProjectColumn = {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  type GithubApiProtectedBranch = {
    url: string;
    required_status_checks?: undefined | GithubApiStatusCheckPolicy;
    required_pull_request_reviews?:
      | undefined
      | {
          url: string;
          dismiss_stale_reviews?: undefined | boolean;
          require_code_owner_reviews?: undefined | boolean;
          required_approving_review_count?: undefined | number;
          dismissal_restrictions?:
            | undefined
            | {
                url: string;
                users_url: string;
                teams_url: string;
                users: GithubApiSimpleUser[];
                teams: GithubApiTeam[];
              };
        };
    required_signatures?: undefined | { url: string; enabled: boolean };
    enforce_admins?: undefined | { url: string; enabled: boolean };
    required_linear_history?: undefined | { enabled: boolean };
    allow_force_pushes?: undefined | { enabled: boolean };
    allow_deletions?: undefined | { enabled: boolean };
    restrictions?: undefined | GithubApiBranchRestrictionPolicy;
  };
  type GithubApiStatusCheckPolicy = {
    url: string;
    strict: boolean;
    contexts: string[];
    contexts_url: string;
  };
  type GithubApiPublicUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    name: string;
    company: string;
    blog: string;
    location: string;
    email: string;
    hireable: boolean;
    bio: string;
    twitter_username?: undefined | string;
    public_repos: number;
    public_gists: number;
    followers: number;
    following: number;
    created_at: string;
    updated_at: string;
    plan?:
      | undefined
      | {
          collaborators: number;
          name: string;
          space: number;
          private_repos: number;
        };
    suspended_at?: undefined | string;
    private_gists?: undefined | number;
    total_private_repos?: undefined | number;
    owned_private_repos?: undefined | number;
    disk_usage?: undefined | number;
    collaborators?: undefined | number;
  };
  type GithubApiPullRequest = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: GithubApiSimpleUser;
    body: string;
    labels: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      name?: undefined | string;
      description?: undefined | string;
      color?: undefined | string;
      default?: undefined | boolean;
    }[];
    milestone: GithubApiMilestone;
    active_lock_reason?: undefined | string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string;
    merge_commit_sha: string;
    assignee: GithubApiSimpleUser;
    assignees?: undefined | GithubApiSimpleUser[];
    requested_reviewers?: undefined | GithubApiSimpleUser[];
    requested_teams?: undefined | GithubApiTeamSimple[];
    head: {
      label: string;
      ref: string;
      repo: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        node_id: string;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        notifications_url: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
        clone_url: string;
        default_branch: string;
        forks: number;
        forks_count: number;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        homepage: string;
        language: string;
        master_branch?: undefined | string;
        archived: boolean;
        disabled: boolean;
        mirror_url: string;
        open_issues: number;
        open_issues_count: number;
        permissions?:
          | undefined
          | { admin: boolean; pull: boolean; push: boolean };
        temp_clone_token?: undefined | string;
        allow_merge_commit?: undefined | boolean;
        allow_squash_merge?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        license: {
          key: string;
          name: string;
          url: string;
          spdx_id: string;
          node_id: string;
        };
        pushed_at: string;
        size: number;
        ssh_url: string;
        stargazers_count: number;
        svn_url: string;
        topics?: undefined | string[];
        watchers: number;
        watchers_count: number;
        created_at: string;
        updated_at: string;
      };
      sha: string;
      user: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
    };
    base: {
      label: string;
      ref: string;
      repo: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        node_id: string;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        notifications_url: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
        clone_url: string;
        default_branch: string;
        forks: number;
        forks_count: number;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        homepage: string;
        language: string;
        master_branch?: undefined | string;
        archived: boolean;
        disabled: boolean;
        mirror_url: string;
        open_issues: number;
        open_issues_count: number;
        permissions?:
          | undefined
          | { admin: boolean; pull: boolean; push: boolean };
        temp_clone_token?: undefined | string;
        allow_merge_commit?: undefined | boolean;
        allow_squash_merge?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        license: GithubApiLicenseSimple;
        pushed_at: string;
        size: number;
        ssh_url: string;
        stargazers_count: number;
        svn_url: string;
        topics?: undefined | string[];
        watchers: number;
        watchers_count: number;
        created_at: string;
        updated_at: string;
      };
      sha: string;
      user: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
    };
    _links: {
      comments: GithubApiLink;
      commits: GithubApiLink;
      statuses: GithubApiLink;
      html: GithubApiLink;
      issue: GithubApiLink;
      review_comments: GithubApiLink;
      review_comment: GithubApiLink;
      self: GithubApiLink;
    };
    author_association: string;
    draft?: undefined | boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable?: undefined | boolean;
    mergeable_state: string;
    merged_by: GithubApiSimpleUser;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type GithubApiPullRequestMergeResult = {
    sha: string;
    merged: boolean;
    message: string;
  };
  type GithubApiPullRequestReview = {
    id: number;
    node_id: string;
    user: GithubApiSimpleUser;
    body: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: { html: { href: string }; pull_request: { href: string } };
    submitted_at?: undefined | string;
    commit_id: string;
    body_html?: undefined | string;
    body_text?: undefined | string;
    author_association: string;
  };
  type GithubApiPullRequestReviewComment = {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: undefined | number;
    user: GithubApiSimpleUser;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: string;
    _links: {
      self: { href: string };
      html: { href: string };
      pull_request: { href: string };
    };
    start_line?: undefined | number;
    original_start_line?: undefined | number;
    start_side: "LEFT" | "RIGHT";
    line?: undefined | number;
    original_line?: undefined | number;
    side: "LEFT" | "RIGHT";
    reactions?: undefined | GithubApiReactionRollup;
    body_html?: undefined | string;
    body_text?: undefined | string;
  };
  type GithubApiPullRequestReviewRequest = {
    users?:
      | undefined
      | {
          login?: undefined | string;
          id?: undefined | number;
          node_id?: undefined | string;
          avatar_url?: undefined | string;
          gravatar_id?: undefined | string;
          url?: undefined | string;
          html_url?: undefined | string;
          followers_url?: undefined | string;
          following_url?: undefined | string;
          gists_url?: undefined | string;
          starred_url?: undefined | string;
          subscriptions_url?: undefined | string;
          organizations_url?: undefined | string;
          repos_url?: undefined | string;
          events_url?: undefined | string;
          received_events_url?: undefined | string;
          type?: undefined | string;
          site_admin?: undefined | boolean;
        }[];
    teams?:
      | undefined
      | {
          id?: undefined | number;
          node_id?: undefined | string;
          url?: undefined | string;
          html_url?: undefined | string;
          name?: undefined | string;
          slug?: undefined | string;
          description?: undefined | string;
          privacy?: undefined | string;
          permission?: undefined | string;
          members_url?: undefined | string;
          repositories_url?: undefined | string;
          parent?: undefined | string;
        }[];
  };
  type GithubApiPullRequestSimple = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: GithubApiSimpleUser;
    body: string;
    labels: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      name?: undefined | string;
      description?: undefined | string;
      color?: undefined | string;
      default?: undefined | boolean;
    }[];
    milestone: GithubApiMilestone;
    active_lock_reason?: undefined | string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string;
    merge_commit_sha: string;
    assignee: GithubApiSimpleUser;
    assignees?: undefined | GithubApiSimpleUser[];
    requested_reviewers?: undefined | GithubApiSimpleUser[];
    requested_teams?: undefined | GithubApiTeamSimple[];
    head: {
      label: string;
      ref: string;
      repo: GithubApiRepository;
      sha: string;
      user: GithubApiSimpleUser;
    };
    base: {
      label: string;
      ref: string;
      repo: GithubApiRepository;
      sha: string;
      user: GithubApiSimpleUser;
    };
    _links: {
      comments: GithubApiLink;
      commits: GithubApiLink;
      statuses: GithubApiLink;
      html: GithubApiLink;
      issue: GithubApiLink;
      review_comments: GithubApiLink;
      review_comment: GithubApiLink;
      self: GithubApiLink;
    };
    author_association: string;
    draft?: undefined | boolean;
  };
  type GithubApiRateLimit = { limit: number; remaining: number; reset: number };
  type GithubApiRateLimitOverview = {
    resources: {
      core: GithubApiRateLimit;
      graphql?: undefined | GithubApiRateLimit;
      search: GithubApiRateLimit;
      source_import?: undefined | GithubApiRateLimit;
      integration_manifest?: undefined | GithubApiRateLimit;
      code_scanning_upload?: undefined | GithubApiRateLimit;
    };
    rate: GithubApiRateLimit;
  };
  type GithubApiReaction = {
    id: number;
    node_id: string;
    user: GithubApiSimpleUser;
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    created_at: string;
  };
  type GithubApiReferrerTraffic = {
    referrer: string;
    count: number;
    uniques: number;
  };
  type GithubApiRelease = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body?: undefined | string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GithubApiSimpleUser;
    assets: GithubApiReleaseAsset[];
    body_html?: undefined | string;
    body_text?: undefined | string;
  };
  type GithubApiReleaseAsset = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: "uploaded" | "open";
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GithubApiSimpleUser;
  };
  type GithubApiRepoSearchResultItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GithubApiSimpleUser;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    homepage: string;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    forks_count: number;
    open_issues_count: number;
    master_branch?: undefined | string;
    default_branch: string;
    score: number;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    forks: number;
    open_issues: number;
    watchers: number;
    topics?: undefined | string[];
    mirror_url: string;
    has_issues: boolean;
    has_projects: boolean;
    has_pages: boolean;
    has_wiki: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    license: GithubApiLicenseSimple;
    permissions?: undefined | { admin: boolean; pull: boolean; push: boolean };
    text_matches?: undefined | GithubApiSearchResultTextMatches;
    temp_clone_token?: undefined | string;
    allow_merge_commit?: undefined | boolean;
    allow_squash_merge?: undefined | boolean;
    allow_rebase_merge?: undefined | boolean;
    delete_branch_on_merge?: undefined | boolean;
  };
  type GithubApiRepositoryCollaboratorPermission = {
    permission: string;
    user: GithubApiSimpleUser;
  };
  type GithubApiRepositoryInvitation = {
    id: number;
    repository: GithubApiMinimalRepository;
    invitee: GithubApiSimpleUser;
    inviter: GithubApiSimpleUser;
    permissions: "read" | "write" | "admin";
    created_at: string;
    url: string;
    html_url: string;
    node_id: string;
  };
  type GithubApiReviewComment = {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: undefined | number;
    user: GithubApiSimpleUser;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: string;
    _links: {
      self: GithubApiLink;
      html: GithubApiLink;
      pull_request: GithubApiLink;
    };
    body_text?: undefined | string;
    body_html?: undefined | string;
    side: "LEFT" | "RIGHT";
    start_side: "LEFT" | "RIGHT";
    line?: undefined | number;
    original_line?: undefined | number;
    start_line?: undefined | number;
    original_start_line?: undefined | number;
  };
  type GithubApiSecretScanningAlert = {
    number?: undefined | GithubApiAlertNumber;
    created_at?: undefined | GithubApiAlertCreatedAt;
    url?: undefined | GithubApiAlertUrl;
    html_url?: undefined | GithubApiAlertHtmlUrl;
    state?: undefined | GithubApiSecretScanningAlertState;
    resolution?: undefined | GithubApiSecretScanningAlertResolution;
    resolved_at?: undefined | string;
    resolved_by?: undefined | GithubApiSimpleUser;
    secret_type?: undefined | string;
    secret?: undefined | string;
  };
  type GithubApiSecretScanningAlertState = "open" | "resolved";
  type GithubApiSecretScanningAlertResolution = GithubApiSelectedActionsUrl;
  type GithubApiShortBranch = {
    name: string;
    commit: { sha: string; url: string };
    protected: boolean;
    protection?: undefined | GithubApiBranchProtection;
    protection_url?: undefined | string;
  };
  type GithubApiStatus = {
    url?: undefined | string;
    avatar_url?: undefined | string;
    id?: undefined | number;
    node_id?: undefined | string;
    state?: undefined | string;
    description?: undefined | string;
    target_url?: undefined | string;
    context?: undefined | string;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    creator?: undefined | GithubApiSimpleUser;
  };
  type GithubApiTag = {
    name: string;
    commit: { sha: string; url: string };
    zipball_url: string;
    tarball_url: string;
    node_id: string;
  };
  type GithubApiTeamDiscussion = {
    author: GithubApiSimpleUser;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    last_edited_at: string;
    html_url: string;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
    reactions?: undefined | GithubApiReactionRollup;
  };
  type GithubApiTeamDiscussionComment = {
    author: GithubApiSimpleUser;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    last_edited_at: string;
    discussion_url: string;
    html_url: string;
    node_id: string;
    number: number;
    updated_at: string;
    url: string;
    reactions?: undefined | GithubApiReactionRollup;
  };
  type GithubApiTeamFull = {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy?: undefined | "closed" | "secret";
    permission: string;
    members_url: string;
    repositories_url: string;
    parent?: undefined | GithubApiTeamSimple;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: GithubApiOrganizationFull;
    ldap_dn?: undefined | string;
  };
  type GithubApiTeamMembership = {
    url: string;
    role: "member" | "maintainer";
    state: string;
  };
  type GithubApiTeamProject = {
    owner_url?: undefined | string;
    url?: undefined | string;
    html_url?: undefined | string;
    columns_url?: undefined | string;
    id?: undefined | number;
    node_id?: undefined | string;
    name?: undefined | string;
    body?: undefined | string;
    number?: undefined | number;
    state?: undefined | string;
    creator?: undefined | GithubApiSimpleUser;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    organization_permission?: undefined | string;
    private?: undefined | boolean;
    permissions?:
      | undefined
      | {
          read?: undefined | boolean;
          write?: undefined | boolean;
          admin?: undefined | boolean;
        };
  };
  type GithubApiTopic = { names?: undefined | string[] };
  type GithubApiTopicSearchResultItem = {
    name: string;
    display_name: string;
    short_description: string;
    description: string;
    created_by: string;
    released: string;
    created_at: string;
    updated_at: string;
    featured: boolean;
    curated: boolean;
    score: number;
    repository_count?: undefined | number;
    logo_url?: undefined | string;
    text_matches?: undefined | GithubApiSearchResultTextMatches;
    related?:
      | undefined
      | {
          topic_relation?:
            | undefined
            | {
                id?: undefined | number;
                name?: undefined | string;
                topic_id?: undefined | number;
                relation_type?: undefined | string;
              };
        }[];
    aliases?:
      | undefined
      | {
          topic_relation?:
            | undefined
            | {
                id?: undefined | number;
                name?: undefined | string;
                topic_id?: undefined | number;
                relation_type?: undefined | string;
              };
        }[];
  };
  type GithubApiUserSearchResultItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    received_events_url: string;
    type: string;
    score: number;
    following_url: string;
    gists_url: string;
    starred_url: string;
    events_url: string;
    public_repos?: undefined | number;
    public_gists?: undefined | number;
    followers?: undefined | number;
    following?: undefined | number;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    name?: undefined | string;
    bio?: undefined | string;
    email?: undefined | string;
    location?: undefined | string;
    site_admin: boolean;
    hireable?: undefined | boolean;
    text_matches?: undefined | GithubApiSearchResultTextMatches;
    blog?: undefined | string;
    company?: undefined | string;
    suspended_at?: undefined | string;
  };
  type GithubApiViewTraffic = {
    count: number;
    uniques: number;
    views: GithubApiTraffic[];
  };
  type GitignoreGitignoreGetAllTemplates =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitignoreGitignoreGetAllTemplatesResponse = string[];
  type GitignoreGitignoreGetTemplate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GitignoreGitignoreGetTemplatePath = { name: string };
  type GitignoreGitignoreGetTemplateResponse = GithubApiGitignoreTemplate;
  type GroupFullRoute = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GroupFullRouteBody = { foo: string; bar: ServerOptions };
  type ServerOptions = "A" | "B" | "C";
  type GroupFullRouteParams = { full: string; color: number };
  type GroupFullRouteResponse = { items: { foo: string; bar: ServerItem }[] };
  type ServerItem = { A: string; B: number; C: number; D: boolean; E: Date };
  type GroupRefRoute = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GroupRefRouteParams = { id: ServerInput };
  type ServerInput = GithubApiAlertNumber;
  type GroupRefRouteQuery = { ref: string; ref2: string };
  type GroupRefRouteResponse = BenchNested;
  type GroupUpload = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type GroupUploadFiles = { input1: ReadableStream };
  type GroupUploadResponse = ReadableStream;
  type InteractionsInteractionsGetRestrictionsForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsGetRestrictionsForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type InteractionsInteractionsGetRestrictionsForOrgResponse =
    GithubApiInteractionLimitResponse;
  type InteractionsInteractionsGetRestrictionsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsGetRestrictionsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type InteractionsInteractionsGetRestrictionsForRepoResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponse;
  type InteractionsInteractionsGetRestrictionsForYourPublicRepos =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsGetRestrictionsForYourPublicReposResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponse;
  type InteractionsInteractionsRemoveRestrictionsForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsRemoveRestrictionsForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type InteractionsInteractionsRemoveRestrictionsForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type InteractionsInteractionsRemoveRestrictionsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsRemoveRestrictionsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type InteractionsInteractionsRemoveRestrictionsForRepoResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type InteractionsInteractionsRemoveRestrictionsForYourPublicRepos =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsRemoveRestrictionsForYourPublicReposResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type InteractionsInteractionsSetRestrictionsForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsSetRestrictionsForOrgBody =
    | undefined
    | GithubApiInteractionLimit;
  type InteractionsInteractionsSetRestrictionsForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type InteractionsInteractionsSetRestrictionsForOrgResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponse;
  type InteractionsInteractionsSetRestrictionsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsSetRestrictionsForRepoBody =
    InteractionsInteractionsSetRestrictionsForOrgBody;
  type InteractionsInteractionsSetRestrictionsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type InteractionsInteractionsSetRestrictionsForRepoResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponse;
  type InteractionsInteractionsSetRestrictionsForYourPublicRepos =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type InteractionsInteractionsSetRestrictionsForYourPublicReposBody =
    InteractionsInteractionsSetRestrictionsForOrgBody;
  type InteractionsInteractionsSetRestrictionsForYourPublicReposResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponse;
  type IssuesIssuesAddAssignees =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesAddAssigneesBody =
    | undefined
    | { assignees?: undefined | string[] };
  type IssuesIssuesAddAssigneesPath = {
    owner: string;
    repo: string;
    issue_number: number;
  };
  type IssuesIssuesAddAssigneesResponse = GithubApiIssueSimple;
  type IssuesIssuesAddLabels =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesAddLabelsBody = undefined | { labels: string[] };
  type IssuesIssuesAddLabelsPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesAddLabelsResponse = GithubApiLabel[];
  type IssuesIssuesCheckUserCanBeAssigned =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesCheckUserCanBeAssignedPath = {
    owner: string;
    repo: string;
    assignee: string;
  };
  type IssuesIssuesCheckUserCanBeAssignedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesCreate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesCreateBody =
    | undefined
    | {
        title: string;
        body?: undefined | string;
        assignee?: undefined | string;
        milestone?: undefined | number;
        labels?:
          | undefined
          | (
              | string
              | {
                  id?: undefined | number;
                  name?: undefined | string;
                  description?: undefined | string;
                  color?: undefined | string;
                }
            )[];
        assignees?: undefined | string[];
      };
  type IssuesIssuesCreateComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesCreateCommentBody = GistsGistsCreateCommentBody;
  type IssuesIssuesCreateCommentPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesCreateCommentResponse = GithubApiIssueComment;
  type IssuesIssuesCreateLabel =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesCreateLabelBody =
    | undefined
    | {
        name: string;
        color?: undefined | string;
        description?: undefined | string;
      };
  type IssuesIssuesCreateLabelPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesCreateLabelResponse = GithubApiLabel;
  type IssuesIssuesCreateMilestone =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesCreateMilestoneBody =
    | undefined
    | {
        title: string;
        state: "open" | "closed";
        description?: undefined | string;
        due_on?: undefined | string;
      };
  type IssuesIssuesCreateMilestonePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesCreateMilestoneResponse = GithubApiMilestone;
  type IssuesIssuesCreatePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesCreateResponse = GithubApiIssue;
  type IssuesIssuesDeleteComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesDeleteCommentPath = {
    owner: string;
    repo: string;
    comment_id: number;
  };
  type IssuesIssuesDeleteCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesDeleteLabel =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesDeleteLabelPath = {
    owner: string;
    repo: string;
    name: string;
  };
  type IssuesIssuesDeleteLabelResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesDeleteMilestone =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesDeleteMilestonePath = {
    owner: string;
    repo: string;
    milestone_number: number;
  };
  type IssuesIssuesDeleteMilestoneResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesGet =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesGetComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesGetCommentPath = IssuesIssuesDeleteCommentPath;
  type IssuesIssuesGetCommentResponse = IssuesIssuesCreateCommentResponse;
  type IssuesIssuesGetEvent =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesGetEventPath = {
    owner: string;
    repo: string;
    event_id: number;
  };
  type IssuesIssuesGetEventResponse = GithubApiIssueEvent;
  type IssuesIssuesGetLabel =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesGetLabelPath = IssuesIssuesDeleteLabelPath;
  type IssuesIssuesGetLabelResponse = IssuesIssuesCreateLabelResponse;
  type IssuesIssuesGetMilestone =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesGetMilestonePath = IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesGetMilestoneResponse = IssuesIssuesCreateMilestoneResponse;
  type IssuesIssuesGetPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesGetResponse = IssuesIssuesCreateResponse;
  type IssuesIssuesList =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListAssignees =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListAssigneesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListAssigneesQuery = ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListAssigneesResponse =
    ActivityActivityListStargazersForRepoResponse;
  type IssuesIssuesListComments =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListCommentsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListCommentsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListCommentsForRepoQuery = {
    sort: "created" | "updated";
    direction?: undefined | "asc" | "desc";
    since?: undefined | string;
    per_page: number;
    page: number;
  };
  type IssuesIssuesListCommentsForRepoResponse = GithubApiIssueComment[];
  type IssuesIssuesListCommentsPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListCommentsQuery = GistsGistsListForUserQuery;
  type IssuesIssuesListCommentsResponse =
    IssuesIssuesListCommentsForRepoResponse;
  type IssuesIssuesListEvents =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListEventsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListEventsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListEventsForRepoQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListEventsForRepoResponse = GithubApiIssueEvent[];
  type IssuesIssuesListEventsForTimeline =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListEventsForTimelinePath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListEventsForTimelineQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListEventsForTimelineResponse =
    GithubApiIssueEventForIssue[];
  type IssuesIssuesListEventsPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListEventsQuery = ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListEventsResponse =
    IssuesIssuesListEventsForTimelineResponse;
  type IssuesIssuesListForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListForAuthenticatedUserQuery = {
    filter: "assigned" | "created" | "mentioned" | "subscribed" | "all";
    state: "open" | "closed" | "all";
    labels?: undefined | string;
    sort: "created" | "updated" | "comments";
    direction: "asc" | "desc";
    since?: undefined | string;
    per_page: number;
    page: number;
  };
  type IssuesIssuesListForAuthenticatedUserResponse = GithubApiIssue[];
  type IssuesIssuesListForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type IssuesIssuesListForOrgQuery = IssuesIssuesListForAuthenticatedUserQuery;
  type IssuesIssuesListForOrgResponse =
    IssuesIssuesListForAuthenticatedUserResponse;
  type IssuesIssuesListForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListForRepoQuery = {
    milestone?: undefined | string;
    state: "open" | "closed" | "all";
    assignee?: undefined | string;
    creator?: undefined | string;
    mentioned?: undefined | string;
    labels?: undefined | string;
    sort: "created" | "updated" | "comments";
    direction: "asc" | "desc";
    since?: undefined | string;
    per_page: number;
    page: number;
  };
  type IssuesIssuesListForRepoResponse = GithubApiIssueSimple[];
  type IssuesIssuesListLabelsForMilestone =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListLabelsForMilestonePath = IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesListLabelsForMilestoneQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListLabelsForMilestoneResponse =
    IssuesIssuesAddLabelsResponse;
  type IssuesIssuesListLabelsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListLabelsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListLabelsForRepoQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListLabelsForRepoResponse = IssuesIssuesAddLabelsResponse;
  type IssuesIssuesListLabelsOnIssue =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListLabelsOnIssuePath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListLabelsOnIssueQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type IssuesIssuesListLabelsOnIssueResponse = IssuesIssuesAddLabelsResponse;
  type IssuesIssuesListMilestones =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesListMilestonesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListMilestonesQuery = {
    state: "open" | "closed" | "all";
    sort: "due_on" | "completeness";
    direction: "asc" | "desc";
    per_page: number;
    page: number;
  };
  type IssuesIssuesListMilestonesResponse = GithubApiMilestone[];
  type IssuesIssuesListQuery = {
    filter: "assigned" | "created" | "mentioned" | "subscribed" | "all";
    state: "open" | "closed" | "all";
    labels?: undefined | string;
    sort: "created" | "updated" | "comments";
    direction: "asc" | "desc";
    since?: undefined | string;
    collab?: undefined | boolean;
    orgs?: undefined | boolean;
    owned?: undefined | boolean;
    pulls?: undefined | boolean;
    per_page: number;
    page: number;
  };
  type IssuesIssuesListResponse = IssuesIssuesListForAuthenticatedUserResponse;
  type IssuesIssuesLock =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesLockBody =
    | undefined
    | {
        lock_reason?:
          | undefined
          | "off-topic"
          | "too heated"
          | "resolved"
          | "spam";
      };
  type IssuesIssuesLockPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesLockResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesRemoveAllLabels =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesRemoveAllLabelsPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesRemoveAllLabelsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesRemoveAssignees =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesRemoveAssigneesBody = IssuesIssuesAddAssigneesBody;
  type IssuesIssuesRemoveAssigneesPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesRemoveAssigneesResponse = IssuesIssuesAddAssigneesResponse;
  type IssuesIssuesRemoveLabel =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesRemoveLabelPath = {
    owner: string;
    repo: string;
    issue_number: number;
    name: string;
  };
  type IssuesIssuesRemoveLabelResponse = IssuesIssuesAddLabelsResponse;
  type IssuesIssuesSetLabels =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesSetLabelsBody =
    | undefined
    | { labels?: undefined | string[] };
  type IssuesIssuesSetLabelsPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesSetLabelsResponse = IssuesIssuesAddLabelsResponse;
  type IssuesIssuesUnlock =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesUnlockPath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesUnlockResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesUpdate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesUpdateBody =
    | undefined
    | {
        title?: undefined | string;
        body?: undefined | string;
        assignee?: undefined | string;
        state?: undefined | "open" | "closed";
        milestone?: undefined | number;
        labels?:
          | undefined
          | (
              | string
              | {
                  id?: undefined | number;
                  name?: undefined | string;
                  description?: undefined | string;
                  color?: undefined | string;
                }
            )[];
        assignees?: undefined | string[];
      };
  type IssuesIssuesUpdateComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesUpdateCommentBody = GistsGistsCreateCommentBody;
  type IssuesIssuesUpdateCommentPath = IssuesIssuesDeleteCommentPath;
  type IssuesIssuesUpdateCommentResponse = IssuesIssuesCreateCommentResponse;
  type IssuesIssuesUpdateLabel =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesUpdateLabelBody =
    | undefined
    | {
        new_name?: undefined | string;
        color?: undefined | string;
        description?: undefined | string;
      };
  type IssuesIssuesUpdateLabelPath = IssuesIssuesDeleteLabelPath;
  type IssuesIssuesUpdateLabelResponse = IssuesIssuesCreateLabelResponse;
  type IssuesIssuesUpdateMilestone =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type IssuesIssuesUpdateMilestoneBody =
    | undefined
    | {
        title?: undefined | string;
        state: "open" | "closed";
        description?: undefined | string;
        due_on?: undefined | string;
      };
  type IssuesIssuesUpdateMilestonePath = IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesUpdateMilestoneResponse =
    IssuesIssuesCreateMilestoneResponse;
  type IssuesIssuesUpdatePath = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesUpdateResponse = IssuesIssuesCreateResponse;
  type LicensesLicensesGet =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type LicensesLicensesGetAllCommonlyUsed =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type LicensesLicensesGetAllCommonlyUsedQuery = {
    featured?: undefined | boolean;
    per_page: number;
  };
  type LicensesLicensesGetAllCommonlyUsedResponse = GithubApiLicenseSimple[];
  type LicensesLicensesGetForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type LicensesLicensesGetForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type LicensesLicensesGetForRepoResponse = GithubApiLicenseContent;
  type LicensesLicensesGetPath = { license: string };
  type LicensesLicensesGetResponse = GithubApiLicense;
  type MarkdownMarkdownRender =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MarkdownMarkdownRenderBody =
    | undefined
    | { text: string; mode: "markdown" | "gfm"; context?: undefined | string };
  type MarkdownMarkdownRenderRaw =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MarkdownMarkdownRenderRawResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MarkdownMarkdownRenderResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MetaMetaGet = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MetaMetaGetOctocat =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MetaMetaGetOctocatQuery = { s?: undefined | string };
  type MetaMetaGetOctocatResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MetaMetaGetResponse = GithubApiApiOverview;
  type MetaMetaGetZen = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MetaMetaGetZenResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MetaMetaRoot = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MetaMetaRootResponse = {
    current_user_url: string;
    current_user_authorizations_html_url: string;
    authorizations_url: string;
    code_search_url: string;
    commit_search_url: string;
    emails_url: string;
    emojis_url: string;
    events_url: string;
    feeds_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    hub_url: string;
    issue_search_url: string;
    issues_url: string;
    keys_url: string;
    label_search_url: string;
    notifications_url: string;
    organization_url: string;
    organization_repositories_url: string;
    organization_teams_url: string;
    public_gists_url: string;
    rate_limit_url: string;
    repository_url: string;
    repository_search_url: string;
    current_user_repositories_url: string;
    starred_url: string;
    starred_gists_url: string;
    topic_search_url?: undefined | string;
    user_url: string;
    user_organizations_url: string;
    user_repositories_url: string;
    user_search_url: string;
  };
  type MigrationsMigrationsCancelImport =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsCancelImportPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsCancelImportResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath = {
    migration_id: number;
  };
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsDeleteArchiveForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsDeleteArchiveForOrgPath = {
    org: string;
    migration_id: number;
  };
  type MigrationsMigrationsDeleteArchiveForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsDownloadArchiveForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsDownloadArchiveForOrgPath =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsDownloadArchiveForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsGetArchiveForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsGetArchiveForAuthenticatedUserPath =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsGetArchiveForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsGetCommitAuthors =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsGetCommitAuthorsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsGetCommitAuthorsQuery = {
    since?: undefined | number;
  };
  type MigrationsMigrationsGetCommitAuthorsResponse = GithubApiPorterAuthor[];
  type MigrationsMigrationsGetImportStatus =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsGetImportStatusPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsGetImportStatusResponse = GithubApiImport;
  type MigrationsMigrationsGetLargeFiles =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsGetLargeFilesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsGetLargeFilesResponse = GithubApiPorterLargeFile[];
  type MigrationsMigrationsGetStatusForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsGetStatusForAuthenticatedUserPath =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsGetStatusForAuthenticatedUserQuery = {
    exclude?: undefined | string[];
  };
  type MigrationsMigrationsGetStatusForAuthenticatedUserResponse =
    GithubApiMigration;
  type MigrationsMigrationsGetStatusForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsGetStatusForOrgPath =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsGetStatusForOrgResponse =
    MigrationsMigrationsGetStatusForAuthenticatedUserResponse;
  type MigrationsMigrationsListForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsListForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type MigrationsMigrationsListForAuthenticatedUserResponse =
    GithubApiMigration[];
  type MigrationsMigrationsListForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsListForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type MigrationsMigrationsListForOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type MigrationsMigrationsListForOrgResponse =
    MigrationsMigrationsListForAuthenticatedUserResponse;
  type MigrationsMigrationsListReposForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsListReposForOrgPath =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsListReposForOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type MigrationsMigrationsListReposForOrgResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type MigrationsMigrationsListReposForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsListReposForUserPath =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsListReposForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type MigrationsMigrationsListReposForUserResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type MigrationsMigrationsMapCommitAuthor =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsMapCommitAuthorBody =
    | undefined
    | {
        email?: undefined | string;
        name?: undefined | string;
        remote_id?: undefined | string;
      };
  type MigrationsMigrationsMapCommitAuthorPath = {
    owner: string;
    repo: string;
    author_id: number;
  };
  type MigrationsMigrationsMapCommitAuthorResponse = GithubApiPorterAuthor;
  type MigrationsMigrationsSetLfsPreference =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsSetLfsPreferenceBody =
    | undefined
    | { use_lfs: "opt_in" | "opt_out" };
  type MigrationsMigrationsSetLfsPreferencePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsSetLfsPreferenceResponse =
    MigrationsMigrationsGetImportStatusResponse;
  type MigrationsMigrationsStartForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsStartForAuthenticatedUserBody =
    | undefined
    | {
        lock_repositories?: undefined | boolean;
        exclude_attachments?: undefined | boolean;
        exclude?: undefined | "repositories"[];
        repositories: string[];
      };
  type MigrationsMigrationsStartForAuthenticatedUserResponse =
    MigrationsMigrationsGetStatusForAuthenticatedUserResponse;
  type MigrationsMigrationsStartForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsStartForOrgBody =
    | undefined
    | {
        repositories: string[];
        lock_repositories: boolean;
        exclude_attachments: boolean;
        exclude?: undefined | string[];
      };
  type MigrationsMigrationsStartForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type MigrationsMigrationsStartForOrgResponse =
    MigrationsMigrationsGetStatusForAuthenticatedUserResponse;
  type MigrationsMigrationsStartImport =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsStartImportBody =
    | undefined
    | {
        vcs_url: string;
        vcs?: undefined | "subversion" | "git" | "mercurial" | "tfvc";
        vcs_username?: undefined | string;
        vcs_password?: undefined | string;
        tfvc_project?: undefined | string;
      };
  type MigrationsMigrationsStartImportPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsStartImportResponse =
    MigrationsMigrationsGetImportStatusResponse;
  type MigrationsMigrationsUnlockRepoForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsUnlockRepoForAuthenticatedUserPath = {
    migration_id: number;
    repo_name: string;
  };
  type MigrationsMigrationsUnlockRepoForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsUnlockRepoForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsUnlockRepoForOrgPath = {
    org: string;
    migration_id: number;
    repo_name: string;
  };
  type MigrationsMigrationsUnlockRepoForOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsUpdateImport =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type MigrationsMigrationsUpdateImportBody =
    | undefined
    | {
        vcs_username?: undefined | string;
        vcs_password?: undefined | string;
        vcs?: undefined | string;
        tfvc_project?: undefined | string;
      };
  type MigrationsMigrationsUpdateImportPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsUpdateImportResponse =
    MigrationsMigrationsGetImportStatusResponse;
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorizationBody =
    | undefined
    | {
        scopes?: undefined | string[];
        note?: undefined | string;
        note_url?: undefined | string;
        client_id?: undefined | string;
        client_secret?: undefined | string;
        fingerprint?: undefined | string;
      };
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorizationResponse =
    AppsAppsCheckAuthorizationResponse;
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath = {
    authorization_id: number;
  };
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OauthAuthorizationsOauthAuthorizationsDeleteGrant =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsDeleteGrantPath = {
    grant_id: number;
  };
  type OauthAuthorizationsOauthAuthorizationsDeleteGrantResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorizationPath =
    OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorizationResponse =
    AppsAppsCheckAuthorizationResponse;
  type OauthAuthorizationsOauthAuthorizationsGetGrant =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsGetGrantPath =
    OauthAuthorizationsOauthAuthorizationsDeleteGrantPath;
  type OauthAuthorizationsOauthAuthorizationsGetGrantResponse =
    GithubApiApplicationGrant;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForApp =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBody =

      | undefined
      | {
          client_secret: string;
          scopes?: undefined | string[];
          note?: undefined | string;
          note_url?: undefined | string;
        };
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPath =
    { client_id: string; fingerprint: string };
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse =
    AppsAppsCheckAuthorizationResponse;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppBody =

      | undefined
      | {
          client_secret: string;
          scopes?: undefined | string[];
          note?: undefined | string;
          note_url?: undefined | string;
          fingerprint?: undefined | string;
        };
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppPath =
    AppsAppsCheckTokenPath;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppResponse =
    AppsAppsCheckAuthorizationResponse;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizationsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizationsResponse =
    GithubApiAuthorization[];
  type OauthAuthorizationsOauthAuthorizationsListGrants =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsListGrantsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type OauthAuthorizationsOauthAuthorizationsListGrantsResponse =
    GithubApiApplicationGrant[];
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationBody =
    | undefined
    | {
        scopes?: undefined | string[];
        add_scopes?: undefined | string[];
        remove_scopes?: undefined | string[];
        note?: undefined | string;
        note_url?: undefined | string;
        fingerprint?: undefined | string;
      };
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationPath =
    OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath;
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationResponse =
    AppsAppsCheckAuthorizationResponse;
  type OrgsOrgsBlockUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsBlockUserPath = { org: string; username: string };
  type OrgsOrgsBlockUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCheckBlockedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsCheckBlockedUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsCheckBlockedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCheckMembershipForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsCheckMembershipForUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsCheckMembershipForUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCheckPublicMembershipForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsCheckPublicMembershipForUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsCheckPublicMembershipForUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsConvertMemberToOutsideCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsConvertMemberToOutsideCollaboratorPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsConvertMemberToOutsideCollaboratorResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCreateInvitation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsCreateInvitationBody =
    | undefined
    | {
        invitee_id?: undefined | number;
        email?: undefined | string;
        role: "admin" | "direct_member" | "billing_manager";
        team_ids?: undefined | number[];
      };
  type OrgsOrgsCreateInvitationPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsCreateInvitationResponse = GithubApiOrganizationInvitation;
  type OrgsOrgsCreateWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsCreateWebhookBody =
    | undefined
    | {
        name: string;
        config: {
          url: GithubApiWebhookConfigUrl;
          content_type?: undefined | GithubApiWebhookConfigContentType;
          secret?: undefined | GithubApiWebhookConfigSecret;
          insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
          username?: undefined | string;
          password?: undefined | string;
        };
        events: string[];
        active: boolean;
      };
  type OrgsOrgsCreateWebhookPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsCreateWebhookResponse = GithubApiOrgHook;
  type OrgsOrgsDeleteWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsDeleteWebhookPath = { org: string; hook_id: number };
  type OrgsOrgsDeleteWebhookResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsGet = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsGetAuditLog =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsGetAuditLogPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsGetAuditLogQuery = AuditLogAuditLogGetAuditLogQuery;
  type OrgsOrgsGetAuditLogResponse = AuditLogAuditLogGetAuditLogResponse;
  type OrgsOrgsGetMembershipForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsGetMembershipForAuthenticatedUserPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsGetMembershipForAuthenticatedUserResponse =
    GithubApiOrgMembership;
  type OrgsOrgsGetMembershipForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsGetMembershipForUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsGetMembershipForUserResponse =
    OrgsOrgsGetMembershipForAuthenticatedUserResponse;
  type OrgsOrgsGetPath = ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsGetResponse = GithubApiOrganizationFull;
  type OrgsOrgsGetWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsGetWebhookConfigForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsGetWebhookConfigForOrgPath = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsGetWebhookConfigForOrgResponse =
    AppsAppsGetWebhookConfigForAppResponse;
  type OrgsOrgsGetWebhookPath = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsGetWebhookResponse = OrgsOrgsCreateWebhookResponse;
  type OrgsOrgsList = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListAppInstallations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListAppInstallationsPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListAppInstallationsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListAppInstallationsResponse =
    AppsAppsListInstallationsForAuthenticatedUserResponse;
  type OrgsOrgsListBlockedUsers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListBlockedUsersPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListBlockedUsersResponse =
    ActivityActivityListStargazersForRepoResponse;
  type OrgsOrgsListForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListForAuthenticatedUserResponse = GithubApiOrganizationSimple[];
  type OrgsOrgsListForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type OrgsOrgsListForUserQuery = ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListForUserResponse = OrgsOrgsListForAuthenticatedUserResponse;
  type OrgsOrgsListInvitationTeams =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListInvitationTeamsPath = { org: string; invitation_id: number };
  type OrgsOrgsListInvitationTeamsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListInvitationTeamsResponse = GithubApiTeam[];
  type OrgsOrgsListMembers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListMembersPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListMembersQuery = {
    filter: "2fa_disabled" | "all";
    role: "all" | "admin" | "member";
    per_page: number;
    page: number;
  };
  type OrgsOrgsListMembersResponse =
    ActivityActivityListStargazersForRepoResponse;
  type OrgsOrgsListMembershipsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListMembershipsForAuthenticatedUserQuery = {
    state?: undefined | "active" | "pending";
    per_page: number;
    page: number;
  };
  type OrgsOrgsListMembershipsForAuthenticatedUserResponse =
    GithubApiOrgMembership[];
  type OrgsOrgsListOutsideCollaborators =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListOutsideCollaboratorsPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListOutsideCollaboratorsQuery = {
    filter: "2fa_disabled" | "all";
    per_page: number;
    page: number;
  };
  type OrgsOrgsListOutsideCollaboratorsResponse =
    ActivityActivityListStargazersForRepoResponse;
  type OrgsOrgsListPendingInvitations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListPendingInvitationsPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListPendingInvitationsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListPendingInvitationsResponse =
    GithubApiOrganizationInvitation[];
  type OrgsOrgsListPublicMembers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListPublicMembersPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListPublicMembersQuery = ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListPublicMembersResponse =
    ActivityActivityListStargazersForRepoResponse;
  type OrgsOrgsListQuery = { since?: undefined | number; per_page: number };
  type OrgsOrgsListResponse = OrgsOrgsListForAuthenticatedUserResponse;
  type OrgsOrgsListSamlSsoAuthorizations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListSamlSsoAuthorizationsPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListSamlSsoAuthorizationsResponse =
    GithubApiCredentialAuthorization[];
  type OrgsOrgsListWebhooks =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsListWebhooksPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListWebhooksQuery = ActionsActionsListArtifactsForRepoQuery;
  type OrgsOrgsListWebhooksResponse = GithubApiOrgHook[];
  type OrgsOrgsPingWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsPingWebhookPath = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsPingWebhookResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveMember =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsRemoveMemberPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsRemoveMemberResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveMembershipForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsRemoveMembershipForUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsRemoveMembershipForUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveOutsideCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsRemoveOutsideCollaboratorPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsRemoveOutsideCollaboratorResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUserPath =
    OrgsOrgsBlockUserPath;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveSamlSsoAuthorization =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsRemoveSamlSsoAuthorizationPath = {
    org: string;
    credential_id: number;
  };
  type OrgsOrgsRemoveSamlSsoAuthorizationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsSetMembershipForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsSetMembershipForUserBody =
    | undefined
    | { role: "admin" | "member" };
  type OrgsOrgsSetMembershipForUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsSetMembershipForUserResponse =
    OrgsOrgsGetMembershipForAuthenticatedUserResponse;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUserPath =
    OrgsOrgsBlockUserPath;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsUnblockUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsUnblockUserPath = OrgsOrgsBlockUserPath;
  type OrgsOrgsUnblockUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsUpdate = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsUpdateBody =
    | undefined
    | {
        billing_email?: undefined | string;
        company?: undefined | string;
        email?: undefined | string;
        twitter_username?: undefined | string;
        location?: undefined | string;
        name?: undefined | string;
        description?: undefined | string;
        has_organization_projects?: undefined | boolean;
        has_repository_projects?: undefined | boolean;
        default_repository_permission: "read" | "write" | "admin" | "none";
        members_can_create_repositories: boolean;
        members_can_create_internal_repositories?: undefined | boolean;
        members_can_create_private_repositories?: undefined | boolean;
        members_can_create_public_repositories?: undefined | boolean;
        members_allowed_repository_creation_type?:
          | undefined
          | "all"
          | "private"
          | "none";
        members_can_create_pages?: undefined | boolean;
        blog?: undefined | string;
      };
  type OrgsOrgsUpdateMembershipForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserBody =
    | undefined
    | { state: "active" };
  type OrgsOrgsUpdateMembershipForAuthenticatedUserPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserResponse =
    OrgsOrgsGetMembershipForAuthenticatedUserResponse;
  type OrgsOrgsUpdatePath = ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsUpdateResponse = OrgsOrgsGetResponse;
  type OrgsOrgsUpdateWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsUpdateWebhookBody =
    | undefined
    | {
        config?:
          | undefined
          | {
              url: GithubApiWebhookConfigUrl;
              content_type?: undefined | GithubApiWebhookConfigContentType;
              secret?: undefined | GithubApiWebhookConfigSecret;
              insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
            };
        events: string[];
        active: boolean;
        name?: undefined | string;
      };
  type OrgsOrgsUpdateWebhookConfigForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type OrgsOrgsUpdateWebhookConfigForOrgBody =
    AppsAppsUpdateWebhookConfigForAppBody;
  type OrgsOrgsUpdateWebhookConfigForOrgPath = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsUpdateWebhookConfigForOrgResponse =
    AppsAppsGetWebhookConfigForAppResponse;
  type OrgsOrgsUpdateWebhookPath = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsUpdateWebhookResponse = OrgsOrgsCreateWebhookResponse;
  type ProjectsProjectsAddCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsAddCollaboratorBody =
    | undefined
    | { permission: "read" | "write" | "admin" };
  type ProjectsProjectsAddCollaboratorPath = {
    project_id: number;
    username: string;
  };
  type ProjectsProjectsAddCollaboratorResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsCreateCard =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsCreateCardBody =
    | undefined
    | { note: string }
    | { content_id: number; content_type: string };
  type ProjectsProjectsCreateCardPath = { column_id: number };
  type ProjectsProjectsCreateCardResponse = GithubApiProjectCard;
  type ProjectsProjectsCreateColumn =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsCreateColumnBody = undefined | { name: string };
  type ProjectsProjectsCreateColumnPath = { project_id: number };
  type ProjectsProjectsCreateColumnResponse = GithubApiProjectColumn;
  type ProjectsProjectsCreateForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsCreateForAuthenticatedUserBody =
    | undefined
    | { name: string; body?: undefined | string };
  type ProjectsProjectsCreateForAuthenticatedUserResponse = GithubApiProject;
  type ProjectsProjectsCreateForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsCreateForOrgBody =
    ProjectsProjectsCreateForAuthenticatedUserBody;
  type ProjectsProjectsCreateForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ProjectsProjectsCreateForOrgResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponse;
  type ProjectsProjectsCreateForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsCreateForRepoBody =
    ProjectsProjectsCreateForAuthenticatedUserBody;
  type ProjectsProjectsCreateForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ProjectsProjectsCreateForRepoResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponse;
  type ProjectsProjectsDelete =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsDeleteCard =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsDeleteCardPath = { card_id: number };
  type ProjectsProjectsDeleteCardResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsDeleteColumn =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsDeleteColumnPath = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsDeleteColumnResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsDeletePath = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsDeleteResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsGet =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsGetCard =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsGetCardPath = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsGetCardResponse = ProjectsProjectsCreateCardResponse;
  type ProjectsProjectsGetColumn =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsGetColumnPath = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsGetColumnResponse = ProjectsProjectsCreateColumnResponse;
  type ProjectsProjectsGetPath = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsGetPermissionForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsGetPermissionForUserPath =
    ProjectsProjectsAddCollaboratorPath;
  type ProjectsProjectsGetPermissionForUserResponse =
    GithubApiRepositoryCollaboratorPermission;
  type ProjectsProjectsGetResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponse;
  type ProjectsProjectsListCards =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsListCardsPath = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsListCardsQuery = {
    archived_state: "all" | "archived" | "not_archived";
    per_page: number;
    page: number;
  };
  type ProjectsProjectsListCardsResponse = GithubApiProjectCard[];
  type ProjectsProjectsListCollaborators =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsListCollaboratorsPath = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsListCollaboratorsQuery = {
    affiliation: "outside" | "direct" | "all";
    per_page: number;
    page: number;
  };
  type ProjectsProjectsListCollaboratorsResponse =
    ActivityActivityListStargazersForRepoResponse;
  type ProjectsProjectsListColumns =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsListColumnsPath = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsListColumnsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ProjectsProjectsListColumnsResponse = GithubApiProjectColumn[];
  type ProjectsProjectsListForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsListForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ProjectsProjectsListForOrgQuery = {
    state: "open" | "closed" | "all";
    per_page: number;
    page: number;
  };
  type ProjectsProjectsListForOrgResponse = GithubApiProject[];
  type ProjectsProjectsListForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsListForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ProjectsProjectsListForRepoQuery = ProjectsProjectsListForOrgQuery;
  type ProjectsProjectsListForRepoResponse = ProjectsProjectsListForOrgResponse;
  type ProjectsProjectsListForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsListForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ProjectsProjectsListForUserQuery = ProjectsProjectsListForOrgQuery;
  type ProjectsProjectsListForUserResponse = ProjectsProjectsListForOrgResponse;
  type ProjectsProjectsMoveCard =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsMoveCardBody =
    | undefined
    | { position: string; column_id?: undefined | number };
  type ProjectsProjectsMoveCardPath = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsMoveCardResponse = {};
  type ProjectsProjectsMoveColumn =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsMoveColumnBody = undefined | { position: string };
  type ProjectsProjectsMoveColumnPath = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsMoveColumnResponse = ProjectsProjectsMoveCardResponse;
  type ProjectsProjectsRemoveCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsRemoveCollaboratorPath =
    ProjectsProjectsAddCollaboratorPath;
  type ProjectsProjectsRemoveCollaboratorResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsUpdate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsUpdateBody =
    | undefined
    | {
        name?: undefined | string;
        body?: undefined | string;
        state?: undefined | string;
        organization_permission?:
          | undefined
          | "read"
          | "write"
          | "admin"
          | "none";
        private?: undefined | boolean;
      };
  type ProjectsProjectsUpdateCard =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsUpdateCardBody =
    | undefined
    | { note?: undefined | string; archived?: undefined | boolean };
  type ProjectsProjectsUpdateCardPath = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsUpdateCardResponse = ProjectsProjectsCreateCardResponse;
  type ProjectsProjectsUpdateColumn =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ProjectsProjectsUpdateColumnBody = ProjectsProjectsCreateColumnBody;
  type ProjectsProjectsUpdateColumnPath = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsUpdateColumnResponse =
    ProjectsProjectsCreateColumnResponse;
  type ProjectsProjectsUpdatePath = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsUpdateResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponse;
  type PullsPullsCheckIfMerged =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsCheckIfMergedPath = {
    owner: string;
    repo: string;
    pull_number: number;
  };
  type PullsPullsCheckIfMergedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsCreate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsCreateBody =
    | undefined
    | {
        title?: undefined | string;
        head: string;
        base: string;
        body?: undefined | string;
        maintainer_can_modify?: undefined | boolean;
        draft?: undefined | boolean;
        issue?: undefined | number;
      };
  type PullsPullsCreatePath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type PullsPullsCreateReplyForReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsCreateReplyForReviewCommentBody = GistsGistsCreateCommentBody;
  type PullsPullsCreateReplyForReviewCommentPath = {
    owner: string;
    repo: string;
    pull_number: number;
    comment_id: number;
  };
  type PullsPullsCreateReplyForReviewCommentResponse =
    GithubApiPullRequestReviewComment;
  type PullsPullsCreateResponse = GithubApiPullRequest;
  type PullsPullsCreateReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsCreateReviewBody =
    | undefined
    | {
        commit_id?: undefined | string;
        body?: undefined | string;
        event?: undefined | "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
        comments?:
          | undefined
          | {
              path: string;
              position?: undefined | number;
              body: string;
              line?: undefined | number;
              side?: undefined | string;
              start_line?: undefined | number;
              start_side?: undefined | string;
            }[];
      };
  type PullsPullsCreateReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsCreateReviewCommentBody =
    | undefined
    | {
        body: string;
        commit_id?: undefined | string;
        path: string;
        position?: undefined | number;
        side?: undefined | "LEFT" | "RIGHT";
        line?: undefined | number;
        start_line?: undefined | number;
        start_side?: undefined | "LEFT" | "RIGHT" | "side";
        in_reply_to?: undefined | number;
      };
  type PullsPullsCreateReviewCommentPath = PullsPullsCheckIfMergedPath;
  type PullsPullsCreateReviewCommentResponse =
    PullsPullsCreateReplyForReviewCommentResponse;
  type PullsPullsCreateReviewPath = PullsPullsCheckIfMergedPath;
  type PullsPullsCreateReviewResponse = GithubApiPullRequestReview;
  type PullsPullsDeletePendingReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsDeletePendingReviewPath = {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  };
  type PullsPullsDeletePendingReviewResponse = PullsPullsCreateReviewResponse;
  type PullsPullsDeleteReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsDeleteReviewCommentPath = IssuesIssuesDeleteCommentPath;
  type PullsPullsDeleteReviewCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsDismissReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsDismissReviewBody =
    | undefined
    | { message: string; event?: undefined | string };
  type PullsPullsDismissReviewPath = PullsPullsDeletePendingReviewPath;
  type PullsPullsDismissReviewResponse = PullsPullsCreateReviewResponse;
  type PullsPullsGet = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsGetPath = PullsPullsCheckIfMergedPath;
  type PullsPullsGetResponse = PullsPullsCreateResponse;
  type PullsPullsGetReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsGetReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsGetReviewCommentPath = IssuesIssuesDeleteCommentPath;
  type PullsPullsGetReviewCommentResponse =
    PullsPullsCreateReplyForReviewCommentResponse;
  type PullsPullsGetReviewPath = PullsPullsDeletePendingReviewPath;
  type PullsPullsGetReviewResponse = PullsPullsCreateReviewResponse;
  type PullsPullsList = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListCommentsForReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListCommentsForReviewPath = PullsPullsDeletePendingReviewPath;
  type PullsPullsListCommentsForReviewQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type PullsPullsListCommentsForReviewResponse = GithubApiReviewComment[];
  type PullsPullsListCommits =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListCommitsPath = PullsPullsCheckIfMergedPath;
  type PullsPullsListCommitsQuery = ActionsActionsListArtifactsForRepoQuery;
  type PullsPullsListCommitsResponse = GithubApiCommit[];
  type PullsPullsListFiles =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListFilesPath = PullsPullsCheckIfMergedPath;
  type PullsPullsListFilesQuery = ActionsActionsListArtifactsForRepoQuery;
  type PullsPullsListFilesResponse = GithubApiDiffEntry[];
  type PullsPullsListPath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type PullsPullsListQuery = {
    state: "open" | "closed" | "all";
    head?: undefined | string;
    base?: undefined | string;
    sort: "created" | "updated" | "popularity" | "long-running";
    direction?: undefined | "asc" | "desc";
    per_page: number;
    page: number;
  };
  type PullsPullsListRequestedReviewers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListRequestedReviewersPath = PullsPullsCheckIfMergedPath;
  type PullsPullsListRequestedReviewersQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type PullsPullsListRequestedReviewersResponse =
    GithubApiPullRequestReviewRequest;
  type PullsPullsListResponse = GithubApiPullRequestSimple[];
  type PullsPullsListReviewComments =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListReviewCommentsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListReviewCommentsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type PullsPullsListReviewCommentsForRepoQuery =
    IssuesIssuesListCommentsForRepoQuery;
  type PullsPullsListReviewCommentsForRepoResponse =
    GithubApiPullRequestReviewComment[];
  type PullsPullsListReviewCommentsPath = PullsPullsCheckIfMergedPath;
  type PullsPullsListReviewCommentsQuery = IssuesIssuesListCommentsForRepoQuery;
  type PullsPullsListReviewCommentsResponse =
    PullsPullsListReviewCommentsForRepoResponse;
  type PullsPullsListReviews =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsListReviewsPath = PullsPullsCheckIfMergedPath;
  type PullsPullsListReviewsQuery = ActionsActionsListArtifactsForRepoQuery;
  type PullsPullsListReviewsResponse = GithubApiPullRequestReview[];
  type PullsPullsMerge =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsMergeBody =
    | undefined
    | {
        commit_title?: undefined | string;
        commit_message?: undefined | string;
        sha?: undefined | string;
        merge_method?: undefined | "merge" | "squash" | "rebase";
      };
  type PullsPullsMergePath = PullsPullsCheckIfMergedPath;
  type PullsPullsMergeResponse = GithubApiPullRequestMergeResult;
  type PullsPullsRemoveRequestedReviewers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsRemoveRequestedReviewersBody =
    | undefined
    | {
        reviewers?: undefined | string[];
        team_reviewers?: undefined | string[];
      };
  type PullsPullsRemoveRequestedReviewersPath = PullsPullsCheckIfMergedPath;
  type PullsPullsRemoveRequestedReviewersResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsRequestReviewers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsRequestReviewersBody = PullsPullsRemoveRequestedReviewersBody;
  type PullsPullsRequestReviewersPath = PullsPullsCheckIfMergedPath;
  type PullsPullsRequestReviewersResponse = GithubApiPullRequestSimple;
  type PullsPullsSubmitReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsSubmitReviewBody =
    | undefined
    | {
        body?: undefined | string;
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
      };
  type PullsPullsSubmitReviewPath = PullsPullsDeletePendingReviewPath;
  type PullsPullsSubmitReviewResponse = PullsPullsCreateReviewResponse;
  type PullsPullsUpdate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsUpdateBody =
    | undefined
    | {
        title?: undefined | string;
        body?: undefined | string;
        state?: undefined | "open" | "closed";
        base?: undefined | string;
        maintainer_can_modify?: undefined | boolean;
      };
  type PullsPullsUpdateBranch =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsUpdateBranchBody =
    | undefined
    | { expected_head_sha?: undefined | string };
  type PullsPullsUpdateBranchPath = PullsPullsCheckIfMergedPath;
  type PullsPullsUpdateBranchResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsUpdatePath = PullsPullsCheckIfMergedPath;
  type PullsPullsUpdateResponse = PullsPullsCreateResponse;
  type PullsPullsUpdateReview =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsUpdateReviewBody = GistsGistsCreateCommentBody;
  type PullsPullsUpdateReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type PullsPullsUpdateReviewCommentBody = GistsGistsCreateCommentBody;
  type PullsPullsUpdateReviewCommentPath = IssuesIssuesDeleteCommentPath;
  type PullsPullsUpdateReviewCommentResponse =
    PullsPullsCreateReplyForReviewCommentResponse;
  type PullsPullsUpdateReviewPath = PullsPullsDeletePendingReviewPath;
  type PullsPullsUpdateReviewResponse = PullsPullsCreateReviewResponse;
  type RateLimitRateLimitGet =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type RateLimitRateLimitGetResponse = GithubApiRateLimitOverview;
  type ReactionsReactionsCreateForCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForCommitCommentBody =
    | undefined
    | {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
      };
  type ReactionsReactionsCreateForCommitCommentPath =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsCreateForCommitCommentResponse = GithubApiReaction;
  type ReactionsReactionsCreateForIssue =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForIssueBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForIssueComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForIssueCommentBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForIssueCommentPath =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsCreateForIssueCommentResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsCreateForIssuePath = IssuesIssuesAddAssigneesPath;
  type ReactionsReactionsCreateForIssueResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsCreateForPullRequestReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForPullRequestReviewCommentBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForPullRequestReviewCommentPath =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsCreateForPullRequestReviewCommentResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath = {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  };
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath = {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  };
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsCreateForTeamDiscussionInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForTeamDiscussionInOrgBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionInOrgPath = {
    org: string;
    team_slug: string;
    discussion_number: number;
  };
  type ReactionsReactionsCreateForTeamDiscussionInOrgResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsCreateForTeamDiscussionLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsCreateForTeamDiscussionLegacyBody =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionLegacyPath = {
    team_id: number;
    discussion_number: number;
  };
  type ReactionsReactionsCreateForTeamDiscussionLegacyResponse =
    ReactionsReactionsCreateForCommitCommentResponse;
  type ReactionsReactionsDeleteForCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteForCommitCommentPath = {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  };
  type ReactionsReactionsDeleteForCommitCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForIssue =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteForIssueComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteForIssueCommentPath =
    ReactionsReactionsDeleteForCommitCommentPath;
  type ReactionsReactionsDeleteForIssueCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForIssuePath = {
    owner: string;
    repo: string;
    issue_number: number;
    reaction_id: number;
  };
  type ReactionsReactionsDeleteForIssueResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForPullRequestComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteForPullRequestCommentPath =
    ReactionsReactionsDeleteForCommitCommentPath;
  type ReactionsReactionsDeleteForPullRequestCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForTeamDiscussion =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteForTeamDiscussionComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteForTeamDiscussionCommentPath = {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
    reaction_id: number;
  };
  type ReactionsReactionsDeleteForTeamDiscussionCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForTeamDiscussionPath = {
    org: string;
    team_slug: string;
    discussion_number: number;
    reaction_id: number;
  };
  type ReactionsReactionsDeleteForTeamDiscussionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsDeleteLegacyPath = { reaction_id: number };
  type ReactionsReactionsDeleteLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsListForCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForCommitCommentPath =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsListForCommitCommentQuery = {
    content?:
      | undefined
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    per_page: number;
    page: number;
  };
  type ReactionsReactionsListForCommitCommentResponse = GithubApiReaction[];
  type ReactionsReactionsListForIssue =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForIssueComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForIssueCommentPath =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsListForIssueCommentQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForIssueCommentResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReactionsReactionsListForIssuePath = IssuesIssuesAddAssigneesPath;
  type ReactionsReactionsListForIssueQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForIssueResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReactionsReactionsListForPullRequestReviewComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForPullRequestReviewCommentPath =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsListForPullRequestReviewCommentQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForPullRequestReviewCommentResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReactionsReactionsListForTeamDiscussionCommentInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReactionsReactionsListForTeamDiscussionCommentLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReactionsReactionsListForTeamDiscussionInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForTeamDiscussionInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type ReactionsReactionsListForTeamDiscussionInOrgQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForTeamDiscussionInOrgResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReactionsReactionsListForTeamDiscussionLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReactionsReactionsListForTeamDiscussionLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type ReactionsReactionsListForTeamDiscussionLegacyQuery =
    ReactionsReactionsListForCommitCommentQuery;
  type ReactionsReactionsListForTeamDiscussionLegacyResponse =
    ReactionsReactionsListForCommitCommentResponse;
  type ReposReposAcceptInvitation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposAcceptInvitationPath = { invitation_id: number };
  type ReposReposAcceptInvitationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposAddAppAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposAddAppAccessRestrictionsBody = undefined | { apps: string[] };
  type ReposReposAddAppAccessRestrictionsPath = {
    owner: string;
    repo: string;
    branch: string;
  };
  type ReposReposAddAppAccessRestrictionsResponse = GithubApiIntegration[];
  type ReposReposAddCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposAddCollaboratorBody =
    | undefined
    | {
        permission: "pull" | "push" | "admin" | "maintain" | "triage";
        permissions?: undefined | string;
      };
  type ReposReposAddCollaboratorPath = {
    owner: string;
    repo: string;
    username: string;
  };
  type ReposReposAddCollaboratorResponse = GithubApiRepositoryInvitation;
  type ReposReposAddStatusCheckContexts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposAddStatusCheckContextsBody =
    | undefined
    | { contexts: string[] };
  type ReposReposAddStatusCheckContextsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddStatusCheckContextsResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposAddTeamAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposAddTeamAccessRestrictionsBody =
    | undefined
    | { teams: string[] };
  type ReposReposAddTeamAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddTeamAccessRestrictionsResponse =
    OrgsOrgsListInvitationTeamsResponse;
  type ReposReposAddUserAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposAddUserAccessRestrictionsBody =
    | undefined
    | { users: string[] };
  type ReposReposAddUserAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddUserAccessRestrictionsResponse =
    ActivityActivityListStargazersForRepoResponse;
  type ReposReposCheckCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCheckCollaboratorPath = ReposReposAddCollaboratorPath;
  type ReposReposCheckCollaboratorResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCheckVulnerabilityAlerts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCheckVulnerabilityAlertsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCheckVulnerabilityAlertsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCompareCommits =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCompareCommitsPath = {
    owner: string;
    repo: string;
    base: string;
    head: string;
  };
  type ReposReposCompareCommitsResponse = GithubApiCommitComparison;
  type ReposReposCreateCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateCommitCommentBody =
    | undefined
    | {
        body: string;
        path?: undefined | string;
        position?: undefined | number;
        line?: undefined | number;
      };
  type ReposReposCreateCommitCommentPath = GitGitGetCommitPath;
  type ReposReposCreateCommitCommentResponse = GithubApiCommitComment;
  type ReposReposCreateCommitSignatureProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateCommitSignatureProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposCreateCommitSignatureProtectionResponse =
    GithubApiProtectedBranchAdminEnforced;
  type ReposReposCreateCommitStatus =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateCommitStatusBody =
    | undefined
    | {
        state: "error" | "failure" | "pending" | "success";
        target_url?: undefined | string;
        description?: undefined | string;
        context: string;
      };
  type ReposReposCreateCommitStatusPath = {
    owner: string;
    repo: string;
    sha: string;
  };
  type ReposReposCreateCommitStatusResponse = GithubApiStatus;
  type ReposReposCreateDeployKey =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateDeployKeyBody =
    | undefined
    | {
        title?: undefined | string;
        key: string;
        read_only?: undefined | boolean;
      };
  type ReposReposCreateDeployKeyPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateDeployKeyResponse = GithubApiDeployKey;
  type ReposReposCreateDeployment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateDeploymentBody =
    | undefined
    | {
        ref: string;
        task: string;
        auto_merge: boolean;
        required_contexts?: undefined | string[];
        payload: string;
        environment: string;
        description: string;
        transient_environment: boolean;
        production_environment?: undefined | boolean;
        created_at?: undefined | string;
      };
  type ReposReposCreateDeploymentPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateDeploymentResponse = GithubApiDeployment;
  type ReposReposCreateDeploymentStatus =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateDeploymentStatusBody =
    | undefined
    | {
        state:
          | "error"
          | "failure"
          | "inactive"
          | "in_progress"
          | "queued"
          | "pending"
          | "success";
        target_url: string;
        log_url: string;
        description: string;
        environment?: undefined | "production" | "staging" | "qa";
        environment_url: string;
        auto_inactive?: undefined | boolean;
      };
  type ReposReposCreateDeploymentStatusPath = {
    owner: string;
    repo: string;
    deployment_id: number;
  };
  type ReposReposCreateDeploymentStatusResponse = GithubApiDeploymentStatus;
  type ReposReposCreateDispatchEvent =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateDispatchEventBody =
    | undefined
    | {
        event_type: string;
        client_payload?: undefined | { [key: string]: any };
      };
  type ReposReposCreateDispatchEventPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateDispatchEventResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCreateForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateForAuthenticatedUserBody =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        homepage?: undefined | string;
        private: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        team_id?: undefined | number;
        auto_init: boolean;
        gitignore_template?: undefined | string;
        license_template?: undefined | string;
        allow_squash_merge: boolean;
        allow_merge_commit: boolean;
        allow_rebase_merge: boolean;
        delete_branch_on_merge: boolean;
        has_downloads: boolean;
        is_template: boolean;
      };
  type ReposReposCreateForAuthenticatedUserResponse = GithubApiRepository;
  type ReposReposCreateFork =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateForkBody =
    | undefined
    | { organization?: undefined | string };
  type ReposReposCreateForkPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateForkResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCreateInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateInOrgBody =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        homepage?: undefined | string;
        private: boolean;
        visibility?:
          | undefined
          | "public"
          | "private"
          | "visibility"
          | "internal";
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        is_template: boolean;
        team_id?: undefined | number;
        auto_init: boolean;
        gitignore_template?: undefined | string;
        license_template?: undefined | string;
        allow_squash_merge: boolean;
        allow_merge_commit: boolean;
        allow_rebase_merge: boolean;
        delete_branch_on_merge: boolean;
      };
  type ReposReposCreateInOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ReposReposCreateInOrgResponse =
    ReposReposCreateForAuthenticatedUserResponse;
  type ReposReposCreateOrUpdateFileContents =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateOrUpdateFileContentsBody =
    | undefined
    | {
        message: string;
        content: string;
        sha?: undefined | string;
        branch?: undefined | string;
        committer?:
          | undefined
          | { name: string; email: string; date?: undefined | string };
        author?:
          | undefined
          | { name: string; email: string; date?: undefined | string };
      };
  type ReposReposCreateOrUpdateFileContentsPath = {
    owner: string;
    repo: string;
    path: string;
  };
  type ReposReposCreateOrUpdateFileContentsResponse = GithubApiFileCommit;
  type ReposReposCreatePagesSite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreatePagesSiteBody =
    | undefined
    | { source: { branch: string; path: "/" | "/docs" } };
  type ReposReposCreatePagesSitePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreatePagesSiteResponse = GithubApiPage;
  type ReposReposCreateRelease =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateReleaseBody =
    | undefined
    | {
        tag_name: string;
        target_commitish?: undefined | string;
        name?: undefined | string;
        body?: undefined | string;
        draft: boolean;
        prerelease: boolean;
      };
  type ReposReposCreateReleasePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateReleaseResponse = GithubApiRelease;
  type ReposReposCreateUsingTemplate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateUsingTemplateBody =
    | undefined
    | {
        owner?: undefined | string;
        name: string;
        description?: undefined | string;
        include_all_branches: boolean;
        private: boolean;
      };
  type ReposReposCreateUsingTemplatePath = {
    template_owner: string;
    template_repo: string;
  };
  type ReposReposCreateUsingTemplateResponse =
    ReposReposCreateForAuthenticatedUserResponse;
  type ReposReposCreateWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposCreateWebhookBody =
    | undefined
    | {
        name?: undefined | string;
        config: {
          url: GithubApiWebhookConfigUrl;
          content_type?: undefined | GithubApiWebhookConfigContentType;
          secret?: undefined | GithubApiWebhookConfigSecret;
          insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
          token?: undefined | string;
          digest?: undefined | string;
        };
        events: string[];
        active: boolean;
      };
  type ReposReposCreateWebhookPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateWebhookResponse = GithubApiHook;
  type ReposReposDeclineInvitation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeclineInvitationPath = ReposReposAcceptInvitationPath;
  type ReposReposDeclineInvitationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDelete =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteAccessRestrictionsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteAdminBranchProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteAdminBranchProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteAdminBranchProtectionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteBranchProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteBranchProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteBranchProtectionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteCommitCommentPath = IssuesIssuesDeleteCommentPath;
  type ReposReposDeleteCommitCommentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteCommitSignatureProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteCommitSignatureProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteCommitSignatureProtectionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteDeployKey =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteDeployKeyPath = {
    owner: string;
    repo: string;
    key_id: number;
  };
  type ReposReposDeleteDeployKeyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteDeployment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteDeploymentPath = ReposReposCreateDeploymentStatusPath;
  type ReposReposDeleteDeploymentResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteFile =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteFileBody =
    | undefined
    | {
        message: string;
        sha: string;
        branch?: undefined | string;
        committer?:
          | undefined
          | { name?: undefined | string; email?: undefined | string };
        author?:
          | undefined
          | { name?: undefined | string; email?: undefined | string };
      };
  type ReposReposDeleteFilePath = ReposReposCreateOrUpdateFileContentsPath;
  type ReposReposDeleteFileResponse =
    ReposReposCreateOrUpdateFileContentsResponse;
  type ReposReposDeleteInvitation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteInvitationPath = {
    owner: string;
    repo: string;
    invitation_id: number;
  };
  type ReposReposDeleteInvitationResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeletePagesSite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeletePagesSitePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDeletePagesSiteResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeletePath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDeletePullRequestReviewProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeletePullRequestReviewProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeletePullRequestReviewProtectionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteRelease =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteReleaseAsset =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteReleaseAssetPath = {
    owner: string;
    repo: string;
    asset_id: number;
  };
  type ReposReposDeleteReleaseAssetResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteReleasePath = {
    owner: string;
    repo: string;
    release_id: number;
  };
  type ReposReposDeleteReleaseResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDeleteWebhookPath = {
    owner: string;
    repo: string;
    hook_id: number;
  };
  type ReposReposDeleteWebhookResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDisableAutomatedSecurityFixes =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDisableAutomatedSecurityFixesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDisableAutomatedSecurityFixesResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDisableVulnerabilityAlerts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDisableVulnerabilityAlertsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDisableVulnerabilityAlertsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDownloadTarballArchive =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDownloadTarballArchivePath = ChecksChecksListForRefPath;
  type ReposReposDownloadTarballArchiveResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDownloadZipballArchive =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposDownloadZipballArchivePath = ChecksChecksListForRefPath;
  type ReposReposDownloadZipballArchiveResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposEnableAutomatedSecurityFixes =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposEnableAutomatedSecurityFixesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposEnableAutomatedSecurityFixesResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposEnableVulnerabilityAlerts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposEnableVulnerabilityAlertsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposEnableVulnerabilityAlertsResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposGet = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAccessRestrictionsResponse =
    GithubApiBranchRestrictionPolicy;
  type ReposReposGetAdminBranchProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetAdminBranchProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAdminBranchProtectionResponse =
    ReposReposCreateCommitSignatureProtectionResponse;
  type ReposReposGetAllStatusCheckContexts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetAllStatusCheckContextsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAllStatusCheckContextsResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposGetAllTopics =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetAllTopicsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetAllTopicsResponse = GithubApiTopic;
  type ReposReposGetAppsWithAccessToProtectedBranch =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetAppsWithAccessToProtectedBranchPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAppsWithAccessToProtectedBranchResponse =
    ReposReposAddAppAccessRestrictionsResponse;
  type ReposReposGetBranch =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetBranchPath = ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetBranchProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetBranchProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetBranchProtectionResponse = GithubApiBranchProtection;
  type ReposReposGetBranchResponse = GithubApiBranchWithProtection;
  type ReposReposGetClones =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetClonesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetClonesQuery = { per: "day" | "week" };
  type ReposReposGetClonesResponse = GithubApiCloneTraffic;
  type ReposReposGetCodeFrequencyStats =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCodeFrequencyStatsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetCodeFrequencyStatsResponse = GithubApiCodeFrequencyStat[];
  type ReposReposGetCollaboratorPermissionLevel =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCollaboratorPermissionLevelPath =
    ReposReposAddCollaboratorPath;
  type ReposReposGetCollaboratorPermissionLevelResponse =
    ProjectsProjectsGetPermissionForUserResponse;
  type ReposReposGetCombinedStatusForRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCombinedStatusForRefPath = ChecksChecksListForRefPath;
  type ReposReposGetCombinedStatusForRefResponse =
    GithubApiCombinedCommitStatus;
  type ReposReposGetCommit =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCommitActivityStats =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCommitActivityStatsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetCommitActivityStatsResponse = GithubApiCommitActivity[];
  type ReposReposGetCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCommitCommentPath = IssuesIssuesDeleteCommentPath;
  type ReposReposGetCommitCommentResponse =
    ReposReposCreateCommitCommentResponse;
  type ReposReposGetCommitPath = ChecksChecksListForRefPath;
  type ReposReposGetCommitResponse = GithubApiCommit;
  type ReposReposGetCommitSignatureProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCommitSignatureProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetCommitSignatureProtectionResponse =
    ReposReposCreateCommitSignatureProtectionResponse;
  type ReposReposGetCommunityProfileMetrics =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetCommunityProfileMetricsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetCommunityProfileMetricsResponse = GithubApiCommunityProfile;
  type ReposReposGetContent =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetContentPath = ReposReposCreateOrUpdateFileContentsPath;
  type ReposReposGetContentQuery = { ref?: undefined | string };
  type ReposReposGetContentResponse =
    | GithubApiContentDirectory
    | GithubApiContentFile
    | GithubApiContentSymlink
    | GithubApiContentSubmodule;
  type ReposReposGetContributorsStats =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetContributorsStatsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetContributorsStatsResponse = GithubApiContributorActivity[];
  type ReposReposGetDeployKey =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetDeployKeyPath = ReposReposDeleteDeployKeyPath;
  type ReposReposGetDeployKeyResponse = ReposReposCreateDeployKeyResponse;
  type ReposReposGetDeployment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetDeploymentPath = ReposReposCreateDeploymentStatusPath;
  type ReposReposGetDeploymentResponse = ReposReposCreateDeploymentResponse;
  type ReposReposGetDeploymentStatus =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetDeploymentStatusPath = {
    owner: string;
    repo: string;
    deployment_id: number;
    status_id: number;
  };
  type ReposReposGetDeploymentStatusResponse =
    ReposReposCreateDeploymentStatusResponse;
  type ReposReposGetLatestPagesBuild =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetLatestPagesBuildPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetLatestPagesBuildResponse = GithubApiPageBuild;
  type ReposReposGetLatestRelease =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetLatestReleasePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetLatestReleaseResponse = ReposReposCreateReleaseResponse;
  type ReposReposGetPages =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetPagesBuild =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetPagesBuildPath = {
    owner: string;
    repo: string;
    build_id: number;
  };
  type ReposReposGetPagesBuildResponse = ReposReposGetLatestPagesBuildResponse;
  type ReposReposGetPagesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetPagesResponse = ReposReposCreatePagesSiteResponse;
  type ReposReposGetParticipationStats =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetParticipationStatsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetParticipationStatsResponse = GithubApiParticipationStats;
  type ReposReposGetPath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetPullRequestReviewProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetPullRequestReviewProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetPullRequestReviewProtectionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposGetPunchCardStats =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetPunchCardStatsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetPunchCardStatsResponse =
    ReposReposGetCodeFrequencyStatsResponse;
  type ReposReposGetReadme =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetReadmePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetReadmeQuery = ReposReposGetContentQuery;
  type ReposReposGetReadmeResponse = GithubApiContentFile;
  type ReposReposGetRelease =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetReleaseAsset =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetReleaseAssetPath = ReposReposDeleteReleaseAssetPath;
  type ReposReposGetReleaseAssetResponse = GithubApiReleaseAsset;
  type ReposReposGetReleaseByTag =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetReleaseByTagPath = {
    owner: string;
    repo: string;
    tag: string;
  };
  type ReposReposGetReleaseByTagResponse = ReposReposCreateReleaseResponse;
  type ReposReposGetReleasePath = ReposReposDeleteReleasePath;
  type ReposReposGetReleaseResponse = ReposReposCreateReleaseResponse;
  type ReposReposGetResponse = GithubApiFullRepository;
  type ReposReposGetStatusChecksProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetStatusChecksProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetStatusChecksProtectionResponse = GithubApiStatusCheckPolicy;
  type ReposReposGetTeamsWithAccessToProtectedBranch =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetTeamsWithAccessToProtectedBranchPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetTeamsWithAccessToProtectedBranchResponse =
    OrgsOrgsListInvitationTeamsResponse;
  type ReposReposGetTopPaths =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetTopPathsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetTopPathsResponse = GithubApiContentTraffic[];
  type ReposReposGetTopReferrers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetTopReferrersPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetTopReferrersResponse = GithubApiReferrerTraffic[];
  type ReposReposGetUsersWithAccessToProtectedBranch =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetUsersWithAccessToProtectedBranchPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetUsersWithAccessToProtectedBranchResponse =
    ActivityActivityListStargazersForRepoResponse;
  type ReposReposGetViews =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetViewsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetViewsQuery = ReposReposGetClonesQuery;
  type ReposReposGetViewsResponse = GithubApiViewTraffic;
  type ReposReposGetWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetWebhookConfigForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposGetWebhookConfigForRepoPath = ReposReposDeleteWebhookPath;
  type ReposReposGetWebhookConfigForRepoResponse =
    AppsAppsGetWebhookConfigForAppResponse;
  type ReposReposGetWebhookPath = ReposReposDeleteWebhookPath;
  type ReposReposGetWebhookResponse = ReposReposCreateWebhookResponse;
  type ReposReposListBranches =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListBranchesForHeadCommit =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListBranchesForHeadCommitPath = GitGitGetCommitPath;
  type ReposReposListBranchesForHeadCommitResponse = GithubApiBranchShort[];
  type ReposReposListBranchesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListBranchesQuery = {
    protected?: undefined | boolean;
    per_page: number;
    page: number;
  };
  type ReposReposListBranchesResponse = GithubApiShortBranch[];
  type ReposReposListCollaborators =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListCollaboratorsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListCollaboratorsQuery =
    ProjectsProjectsListCollaboratorsQuery;
  type ReposReposListCollaboratorsResponse = GithubApiCollaborator[];
  type ReposReposListCommentsForCommit =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListCommentsForCommitPath = GitGitGetCommitPath;
  type ReposReposListCommentsForCommitQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListCommentsForCommitResponse = GithubApiCommitComment[];
  type ReposReposListCommitCommentsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListCommitCommentsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListCommitCommentsForRepoQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListCommitCommentsForRepoResponse =
    ReposReposListCommentsForCommitResponse;
  type ReposReposListCommitStatusesForRef =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListCommitStatusesForRefPath = ChecksChecksListForRefPath;
  type ReposReposListCommitStatusesForRefQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListCommitStatusesForRefResponse = GithubApiStatus[];
  type ReposReposListCommits =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListCommitsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListCommitsQuery = {
    sha?: undefined | string;
    path?: undefined | string;
    author?: undefined | string;
    since?: undefined | string;
    until?: undefined | string;
    per_page: number;
    page: number;
  };
  type ReposReposListCommitsResponse = PullsPullsListCommitsResponse;
  type ReposReposListContributors =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListContributorsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListContributorsQuery = {
    anon?: undefined | string;
    per_page: number;
    page: number;
  };
  type ReposReposListContributorsResponse = GithubApiContributor[];
  type ReposReposListDeployKeys =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListDeployKeysPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListDeployKeysQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListDeployKeysResponse = GithubApiDeployKey[];
  type ReposReposListDeploymentStatuses =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListDeploymentStatusesPath =
    ReposReposCreateDeploymentStatusPath;
  type ReposReposListDeploymentStatusesQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListDeploymentStatusesResponse = GithubApiDeploymentStatus[];
  type ReposReposListDeployments =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListDeploymentsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListDeploymentsQuery = {
    sha: string;
    ref: string;
    task: string;
    environment: string;
    per_page: number;
    page: number;
  };
  type ReposReposListDeploymentsResponse = GithubApiDeployment[];
  type ReposReposListForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListForAuthenticatedUserQuery = {
    visibility: "all" | "public" | "private";
    affiliation: string;
    type: "all" | "owner" | "public" | "private" | "member";
    sort: "created" | "updated" | "pushed" | "full_name";
    direction?: undefined | "asc" | "desc";
    per_page: number;
    page: number;
    since?: undefined | string;
    before?: undefined | string;
  };
  type ReposReposListForAuthenticatedUserResponse =
    ActivityActivityListReposStarredByAuthenticatedUserResponse;
  type ReposReposListForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ReposReposListForOrgQuery = {
    type?:
      | undefined
      | "all"
      | "public"
      | "private"
      | "forks"
      | "sources"
      | "member"
      | "internal";
    sort: "created" | "updated" | "pushed" | "full_name";
    direction?: undefined | "asc" | "desc";
    per_page: number;
    page: number;
  };
  type ReposReposListForOrgResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type ReposReposListForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ReposReposListForUserQuery = {
    type: "all" | "owner" | "member";
    sort: "created" | "updated" | "pushed" | "full_name";
    direction?: undefined | "asc" | "desc";
    per_page: number;
    page: number;
  };
  type ReposReposListForUserResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type ReposReposListForks =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListForksPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListForksQuery = {
    sort: "newest" | "oldest" | "stargazers";
    per_page: number;
    page: number;
  };
  type ReposReposListForksResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type ReposReposListInvitations =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListInvitationsForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListInvitationsForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListInvitationsForAuthenticatedUserResponse =
    GithubApiRepositoryInvitation[];
  type ReposReposListInvitationsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListInvitationsQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListInvitationsResponse =
    ReposReposListInvitationsForAuthenticatedUserResponse;
  type ReposReposListLanguages =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListLanguagesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListLanguagesResponse = GithubApiLanguage;
  type ReposReposListPagesBuilds =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListPagesBuildsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListPagesBuildsQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListPagesBuildsResponse = GithubApiPageBuild[];
  type ReposReposListPublic =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListPublicQuery = MigrationsMigrationsGetCommitAuthorsQuery;
  type ReposReposListPublicResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type ReposReposListPullRequestsAssociatedWithCommit =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListPullRequestsAssociatedWithCommitPath = GitGitGetCommitPath;
  type ReposReposListPullRequestsAssociatedWithCommitQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListPullRequestsAssociatedWithCommitResponse =
    PullsPullsListResponse;
  type ReposReposListReleaseAssets =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListReleaseAssetsPath = ReposReposDeleteReleasePath;
  type ReposReposListReleaseAssetsQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListReleaseAssetsResponse = GithubApiReleaseAsset[];
  type ReposReposListReleases =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListReleasesPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListReleasesQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListReleasesResponse = GithubApiRelease[];
  type ReposReposListTags =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListTagsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListTagsQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListTagsResponse = GithubApiTag[];
  type ReposReposListTeams =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListTeamsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListTeamsQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListTeamsResponse = OrgsOrgsListInvitationTeamsResponse;
  type ReposReposListWebhooks =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposListWebhooksPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListWebhooksQuery = ActionsActionsListArtifactsForRepoQuery;
  type ReposReposListWebhooksResponse = GithubApiHook[];
  type ReposReposMerge =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposMergeBody =
    | undefined
    | { base: string; head: string; commit_message?: undefined | string };
  type ReposReposMergePath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposMergeResponse = ReposReposGetCommitResponse;
  type ReposReposPingWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposPingWebhookPath = ReposReposDeleteWebhookPath;
  type ReposReposPingWebhookResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposRemoveAppAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRemoveAppAccessRestrictionsBody =
    ReposReposAddAppAccessRestrictionsBody;
  type ReposReposRemoveAppAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveAppAccessRestrictionsResponse =
    ReposReposAddAppAccessRestrictionsResponse;
  type ReposReposRemoveCollaborator =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRemoveCollaboratorPath = ReposReposAddCollaboratorPath;
  type ReposReposRemoveCollaboratorResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposRemoveStatusCheckContexts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRemoveStatusCheckContextsBody =
    ReposReposAddStatusCheckContextsBody;
  type ReposReposRemoveStatusCheckContextsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveStatusCheckContextsResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposRemoveStatusCheckProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRemoveStatusCheckProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveStatusCheckProtectionResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposRemoveTeamAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRemoveTeamAccessRestrictionsBody =
    ReposReposAddTeamAccessRestrictionsBody;
  type ReposReposRemoveTeamAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveTeamAccessRestrictionsResponse =
    OrgsOrgsListInvitationTeamsResponse;
  type ReposReposRemoveUserAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRemoveUserAccessRestrictionsBody =
    ReposReposAddUserAccessRestrictionsBody;
  type ReposReposRemoveUserAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveUserAccessRestrictionsResponse =
    ActivityActivityListStargazersForRepoResponse;
  type ReposReposReplaceAllTopics =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposReplaceAllTopicsBody = undefined | { names: string[] };
  type ReposReposReplaceAllTopicsPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposReplaceAllTopicsResponse = ReposReposGetAllTopicsResponse;
  type ReposReposRequestPagesBuild =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposRequestPagesBuildPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposRequestPagesBuildResponse = GithubApiPageBuildStatus;
  type ReposReposSetAdminBranchProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposSetAdminBranchProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetAdminBranchProtectionResponse =
    ReposReposCreateCommitSignatureProtectionResponse;
  type ReposReposSetAppAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposSetAppAccessRestrictionsBody =
    ReposReposAddAppAccessRestrictionsBody;
  type ReposReposSetAppAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetAppAccessRestrictionsResponse =
    ReposReposAddAppAccessRestrictionsResponse;
  type ReposReposSetStatusCheckContexts =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposSetStatusCheckContextsBody =
    ReposReposAddStatusCheckContextsBody;
  type ReposReposSetStatusCheckContextsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetStatusCheckContextsResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposSetTeamAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposSetTeamAccessRestrictionsBody =
    ReposReposAddTeamAccessRestrictionsBody;
  type ReposReposSetTeamAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetTeamAccessRestrictionsResponse =
    OrgsOrgsListInvitationTeamsResponse;
  type ReposReposSetUserAccessRestrictions =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposSetUserAccessRestrictionsBody =
    ReposReposAddUserAccessRestrictionsBody;
  type ReposReposSetUserAccessRestrictionsPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetUserAccessRestrictionsResponse =
    ActivityActivityListStargazersForRepoResponse;
  type ReposReposTestPushWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposTestPushWebhookPath = ReposReposDeleteWebhookPath;
  type ReposReposTestPushWebhookResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposTransfer =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposTransferBody =
    | undefined
    | { new_owner?: undefined | string; team_ids?: undefined | number[] };
  type ReposReposTransferPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposTransferResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposUpdate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateBody =
    | undefined
    | {
        name?: undefined | string;
        description?: undefined | string;
        homepage?: undefined | string;
        private: boolean;
        visibility?:
          | undefined
          | "public"
          | "private"
          | "visibility"
          | "internal";
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        is_template: boolean;
        default_branch?: undefined | string;
        allow_squash_merge: boolean;
        allow_merge_commit: boolean;
        allow_rebase_merge: boolean;
        delete_branch_on_merge: boolean;
        archived: boolean;
      };
  type ReposReposUpdateBranchProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateBranchProtectionBody =
    | undefined
    | {
        required_status_checks: { strict: boolean; contexts: string[] };
        enforce_admins: boolean;
        required_pull_request_reviews: {
          dismissal_restrictions?:
            | undefined
            | { users?: undefined | string[]; teams?: undefined | string[] };
          dismiss_stale_reviews?: undefined | boolean;
          require_code_owner_reviews?: undefined | boolean;
          required_approving_review_count?: undefined | number;
        };
        restrictions: {
          users: string[];
          teams: string[];
          apps?: undefined | string[];
        };
        required_linear_history?: undefined | boolean;
        allow_force_pushes?: undefined | boolean;
        allow_deletions?: undefined | boolean;
      };
  type ReposReposUpdateBranchProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposUpdateBranchProtectionResponse = GithubApiProtectedBranch;
  type ReposReposUpdateCommitComment =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateCommitCommentBody = GistsGistsCreateCommentBody;
  type ReposReposUpdateCommitCommentPath = IssuesIssuesDeleteCommentPath;
  type ReposReposUpdateCommitCommentResponse =
    ReposReposCreateCommitCommentResponse;
  type ReposReposUpdateInformationAboutPagesSite =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateInformationAboutPagesSiteBody =
    | undefined
    | {
        cname?: undefined | string;
        source:
          | "gh-pages"
          | "master"
          | "master /docs"
          | { branch: string; path: "/" | "/docs" };
      };
  type ReposReposUpdateInformationAboutPagesSitePath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposUpdateInformationAboutPagesSiteResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposUpdateInvitation =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateInvitationBody =
    | undefined
    | {
        permissions?:
          | undefined
          | "read"
          | "write"
          | "maintain"
          | "triage"
          | "admin";
      };
  type ReposReposUpdateInvitationPath = ReposReposDeleteInvitationPath;
  type ReposReposUpdateInvitationResponse = ReposReposAddCollaboratorResponse;
  type ReposReposUpdatePath = ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposUpdatePullRequestReviewProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdatePullRequestReviewProtectionBody =
    | undefined
    | {
        dismissal_restrictions?:
          | undefined
          | { users?: undefined | string[]; teams?: undefined | string[] };
        dismiss_stale_reviews?: undefined | boolean;
        require_code_owner_reviews?: undefined | boolean;
        required_approving_review_count?: undefined | number;
      };
  type ReposReposUpdatePullRequestReviewProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposUpdatePullRequestReviewProtectionResponse =
    GithubApiProtectedBranchPullRequestReview;
  type ReposReposUpdateRelease =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateReleaseAsset =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateReleaseAssetBody =
    | undefined
    | {
        name?: undefined | string;
        label?: undefined | string;
        state?: undefined | string;
      };
  type ReposReposUpdateReleaseAssetPath = ReposReposDeleteReleaseAssetPath;
  type ReposReposUpdateReleaseAssetResponse = ReposReposGetReleaseAssetResponse;
  type ReposReposUpdateReleaseBody =
    | undefined
    | {
        tag_name?: undefined | string;
        target_commitish?: undefined | string;
        name?: undefined | string;
        body?: undefined | string;
        draft?: undefined | boolean;
        prerelease?: undefined | boolean;
      };
  type ReposReposUpdateReleasePath = ReposReposDeleteReleasePath;
  type ReposReposUpdateReleaseResponse = ReposReposCreateReleaseResponse;
  type ReposReposUpdateResponse = ReposReposGetResponse;
  type ReposReposUpdateStatusCheckProtection =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateStatusCheckProtectionBody =
    | undefined
    | { strict?: undefined | boolean; contexts?: undefined | string[] };
  type ReposReposUpdateStatusCheckProtectionPath =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposUpdateStatusCheckProtectionResponse =
    ReposReposGetStatusChecksProtectionResponse;
  type ReposReposUpdateWebhook =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateWebhookBody =
    | undefined
    | {
        config?:
          | undefined
          | {
              url: GithubApiWebhookConfigUrl;
              content_type?: undefined | GithubApiWebhookConfigContentType;
              secret?: undefined | GithubApiWebhookConfigSecret;
              insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSsl;
              address?: undefined | string;
              room?: undefined | string;
            };
        events: string[];
        add_events?: undefined | string[];
        remove_events?: undefined | string[];
        active: boolean;
      };
  type ReposReposUpdateWebhookConfigForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUpdateWebhookConfigForRepoBody =
    AppsAppsUpdateWebhookConfigForAppBody;
  type ReposReposUpdateWebhookConfigForRepoPath = ReposReposDeleteWebhookPath;
  type ReposReposUpdateWebhookConfigForRepoResponse =
    AppsAppsGetWebhookConfigForAppResponse;
  type ReposReposUpdateWebhookPath = ReposReposDeleteWebhookPath;
  type ReposReposUpdateWebhookResponse = ReposReposCreateWebhookResponse;
  type ReposReposUploadReleaseAsset =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ReposReposUploadReleaseAssetPath = ReposReposDeleteReleasePath;
  type ReposReposUploadReleaseAssetQuery = {
    name?: undefined | string;
    label?: undefined | string;
  };
  type ReposReposUploadReleaseAssetResponse = ReposReposGetReleaseAssetResponse;
  type ScimScimDeleteUserFromOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ScimScimDeleteUserFromOrgPath = { org: string; scim_user_id: string };
  type ScimScimDeleteUserFromOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimGetProvisioningInformationForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ScimScimGetProvisioningInformationForUserPath =
    ScimScimDeleteUserFromOrgPath;
  type ScimScimGetProvisioningInformationForUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimListProvisionedIdentities =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ScimScimListProvisionedIdentitiesPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ScimScimListProvisionedIdentitiesQuery = {
    startIndex?: undefined | number;
    count?: undefined | number;
    filter?: undefined | string;
  };
  type ScimScimListProvisionedIdentitiesResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimProvisionAndInviteUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ScimScimProvisionAndInviteUserBody =
    | undefined
    | {
        userName: string;
        displayName?: undefined | string;
        name: {
          givenName: string;
          familyName: string;
          formatted?: undefined | string;
        };
        emails: {
          value: string;
          primary?: undefined | boolean;
          type?: undefined | string;
        }[];
        schemas?: undefined | string[];
        externalId?: undefined | string;
        groups?: undefined | string[];
        active?: undefined | boolean;
      };
  type ScimScimProvisionAndInviteUserPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ScimScimProvisionAndInviteUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimSetInformationForProvisionedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ScimScimSetInformationForProvisionedUserBody =
    | undefined
    | {
        schemas?: undefined | string[];
        displayName?: undefined | string;
        externalId?: undefined | string;
        groups?: undefined | string[];
        active?: undefined | boolean;
        userName: string;
        name: {
          givenName: string;
          familyName: string;
          formatted?: undefined | string;
        };
        emails: {
          type?: undefined | string;
          value: string;
          primary?: undefined | boolean;
        }[];
      };
  type ScimScimSetInformationForProvisionedUserPath =
    ScimScimDeleteUserFromOrgPath;
  type ScimScimSetInformationForProvisionedUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimUpdateAttributeForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ScimScimUpdateAttributeForUserBody =
    | undefined
    | {
        schemas?: undefined | string[];
        Operations: {
          op: "add" | "remove" | "replace";
          path?: undefined | string;
          value?:
            | undefined
            | {
                active?: undefined | boolean;
                userName?: undefined | string;
                externalId?: undefined | string;
                givenName?: undefined | string;
                familyName?: undefined | string;
              }
            | { value?: undefined | string; primary?: undefined | boolean }[]
            | string;
        }[];
      };
  type ScimScimUpdateAttributeForUserPath = ScimScimDeleteUserFromOrgPath;
  type ScimScimUpdateAttributeForUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type SearchSearchCode =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchCodeQuery = {
    q: string;
    sort?: undefined | "indexed";
    order: "desc" | "asc";
    per_page: number;
    page: number;
  };
  type SearchSearchCodeResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiCodeSearchResultItem[];
  };
  type SearchSearchCommits =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchCommitsQuery = {
    q: string;
    sort?: undefined | "author-date" | "committer-date";
    order: "desc" | "asc";
    per_page: number;
    page: number;
  };
  type SearchSearchCommitsResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiCommitSearchResultItem[];
  };
  type SearchSearchIssuesAndPullRequests =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchIssuesAndPullRequestsQuery = {
    q: string;
    sort?:
      | undefined
      | "comments"
      | "reactions"
      | "reactions-+1"
      | "reactions--1"
      | "reactions-smile"
      | "reactions-thinking_face"
      | "reactions-heart"
      | "reactions-tada"
      | "interactions"
      | "created"
      | "updated";
    order: "desc" | "asc";
    per_page: number;
    page: number;
  };
  type SearchSearchIssuesAndPullRequestsResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiIssueSearchResultItem[];
  };
  type SearchSearchLabels =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchLabelsQuery = {
    repository_id: number;
    q: string;
    sort?: undefined | "created" | "updated";
    order: "desc" | "asc";
  };
  type SearchSearchLabelsResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiLabelSearchResultItem[];
  };
  type SearchSearchRepos =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchReposQuery = {
    q: string;
    sort?: undefined | "stars" | "forks" | "help-wanted-issues" | "updated";
    order: "desc" | "asc";
    per_page: number;
    page: number;
  };
  type SearchSearchReposResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiRepoSearchResultItem[];
  };
  type SearchSearchTopics =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchTopicsQuery = { q: string };
  type SearchSearchTopicsResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiTopicSearchResultItem[];
  };
  type SearchSearchUsers =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SearchSearchUsersQuery = {
    q: string;
    sort?: undefined | "followers" | "repositories" | "joined";
    order: "desc" | "asc";
    per_page: number;
    page: number;
  };
  type SearchSearchUsersResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiUserSearchResultItem[];
  };
  type SecretScanningSecretScanningGetAlert =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SecretScanningSecretScanningGetAlertPath =
    CodeScanningCodeScanningUpdateAlertPath;
  type SecretScanningSecretScanningGetAlertResponse =
    GithubApiSecretScanningAlert;
  type SecretScanningSecretScanningListAlertsForRepo =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SecretScanningSecretScanningListAlertsForRepoPath =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type SecretScanningSecretScanningListAlertsForRepoQuery = {
    state?: undefined | "open" | "resolved";
    page: number;
    per_page: number;
  };
  type SecretScanningSecretScanningListAlertsForRepoResponse =
    GithubApiSecretScanningAlert[];
  type SecretScanningSecretScanningUpdateAlert =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type SecretScanningSecretScanningUpdateAlertBody =
    | undefined
    | {
        state: GithubApiSecretScanningAlertState;
        resolution?: undefined | GithubApiSecretScanningAlertResolution;
      };
  type SecretScanningSecretScanningUpdateAlertPath =
    CodeScanningCodeScanningUpdateAlertPath;
  type SecretScanningSecretScanningUpdateAlertResponse =
    SecretScanningSecretScanningGetAlertResponse;
  type ServerAnswers = { [K in ServerOptions]: string };
  type ServerCreate = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerCreateBody = { foo: boolean; string?: undefined | null | string };
  type ServerCreateQuery = { alwaysTrue?: undefined | boolean };
  type ServerCreateResponse = { foo: boolean };
  type ServerEmptyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerEmptyResponseQuery = { foo?: undefined | string };
  type ServerGetFile = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerGetFileQuery = { throwError?: undefined | boolean };
  type ServerGetFileResponse = GroupUploadResponse;
  type ServerGetId = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerGetIdParams = { id: number };
  type ServerGetIdResponse = ServerGetIdParams;
  type ServerInvalidResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerInvalidResponseResponse = { id: string };
  type ServerPatchTest =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerPatchTestResponse = ProjectsProjectsMoveCardResponse;
  type ServerSearch = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerSearchBody = ServerCreateResponse;
  type ServerSearchResponse = { bar: boolean };
  type ServerServerError =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerServerErrorResponse = ProjectsProjectsMoveCardResponse;
  type ServerSetFile = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerSetFileFiles = { myFile: ReadableStream };
  type ServerSetFileResponse = { success: true };
  type ServerSetMimeCheckedFile =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerSetMimeCheckedFileFiles = ServerSetFileFiles;
  type ServerSetMimeCheckedFileResponse = ServerSetFileResponse;
  type ServerValidatorShim =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type ServerValidatorShimBody = { anyOf: boolean | string };
  type ServerValidatorShimResponse = ServerSetFileResponse;
  type SqlCategory = {
    id: string;
    label: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type SqlCoolString = undefined | "true" | "false";
  type SqlPost = {
    title: string;
    body: string;
    id: string;
    writer: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  type SqlPostCategory = {
    id: string;
    post: string;
    category: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type SqlPostage = {
    value: number;
    id: string;
    post: string;
    images: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  type SqlUser = {
    nickName: string;
    email: string;
    authKey: string;
    isCool?: SqlCoolString;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  type StoreFile = {
    bucketName: string;
    contentLength: number;
    contentType: string;
    name: string;
    meta: StoreFileMeta;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  // User definable, optional object to store whatever you want
  type StoreFileMeta = {
    transforms?: undefined | any;
    transformedFromOriginal?: undefined | string;
  };
  type StoreFileGroup = {
    name?: undefined | string;
    order: number;
    meta: StoreFileGroupMeta;
    id: string;
    file?: undefined | string;
    parent?: undefined | string;
    createdAt: Date;
    updatedAt: Date;
    deletedAt?: undefined | Date;
  };
  // User definable, optional object to store whatever you want
  type StoreFileGroupMeta = ProjectsProjectsMoveCardResponse;
  type StoreJob = {
    id: number;
    isComplete: boolean;
    priority: number;
    scheduledAt: Date;
    name: string;
    data: any;
    retryCount: number;
    handlerTimeout?: undefined | number;
    createdAt: Date;
    updatedAt: Date;
  };
  type TeamsTeamsAddMemberLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddMemberLegacyPath = { team_id: number; username: string };
  type TeamsTeamsAddMemberLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateMembershipForUserInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgBody =
    | undefined
    | { role: "member" | "maintainer" };
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgPath = {
    org: string;
    team_slug: string;
    username: string;
  };
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgResponse =
    GithubApiTeamMembership;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyBody =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgBody;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyPath =
    TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyResponse =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponse;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgBody =
    | undefined
    | { permission?: undefined | "read" | "write" | "admin" };
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath = {
    org: string;
    team_slug: string;
    project_id: number;
  };
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyBody =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgBody;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath = {
    team_id: number;
    project_id: number;
  };
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgBody =
    | undefined
    | {
        permission?:
          | undefined
          | "pull"
          | "push"
          | "admin"
          | "maintain"
          | "triage";
      };
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath = {
    org: string;
    team_slug: string;
    owner: string;
    repo: string;
  };
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyBody =
    | undefined
    | { permission?: undefined | "pull" | "push" | "admin" };
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath = {
    team_id: number;
    owner: string;
    repo: string;
  };
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsCheckPermissionsForProjectInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCheckPermissionsForProjectInOrgPath =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath;
  type TeamsTeamsCheckPermissionsForProjectInOrgResponse = GithubApiTeamProject;
  type TeamsTeamsCheckPermissionsForProjectLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCheckPermissionsForProjectLegacyPath =
    TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath;
  type TeamsTeamsCheckPermissionsForProjectLegacyResponse =
    TeamsTeamsCheckPermissionsForProjectInOrgResponse;
  type TeamsTeamsCheckPermissionsForRepoInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCheckPermissionsForRepoInOrgPath =
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath;
  type TeamsTeamsCheckPermissionsForRepoInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsCheckPermissionsForRepoLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCheckPermissionsForRepoLegacyPath =
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath;
  type TeamsTeamsCheckPermissionsForRepoLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsCreate =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateBody =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        maintainers?: undefined | string[];
        repo_names?: undefined | string[];
        privacy?: undefined | "secret" | "closed";
        permission: "pull" | "push" | "admin";
        parent_team_id?: undefined | number;
      };
  type TeamsTeamsCreateDiscussionCommentInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateDiscussionCommentInOrgBody = GistsGistsCreateCommentBody;
  type TeamsTeamsCreateDiscussionCommentInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsCreateDiscussionCommentInOrgResponse =
    GithubApiTeamDiscussionComment;
  type TeamsTeamsCreateDiscussionCommentLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateDiscussionCommentLegacyBody =
    GistsGistsCreateCommentBody;
  type TeamsTeamsCreateDiscussionCommentLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsCreateDiscussionCommentLegacyResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponse;
  type TeamsTeamsCreateDiscussionInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateDiscussionInOrgBody =
    | undefined
    | { title: string; body: string; private: boolean };
  type TeamsTeamsCreateDiscussionInOrgPath = { org: string; team_slug: string };
  type TeamsTeamsCreateDiscussionInOrgResponse = GithubApiTeamDiscussion;
  type TeamsTeamsCreateDiscussionLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateDiscussionLegacyBody =
    TeamsTeamsCreateDiscussionInOrgBody;
  type TeamsTeamsCreateDiscussionLegacyPath = { team_id: number };
  type TeamsTeamsCreateDiscussionLegacyResponse =
    TeamsTeamsCreateDiscussionInOrgResponse;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgBody =
    | undefined
    | {
        groups: {
          group_id: string;
          group_name: string;
          group_description: string;
        }[];
      };
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgPath =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse =
    GithubApiGroupMapping;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyBody =
    | undefined
    | {
        groups: {
          group_id: string;
          group_name: string;
          group_description: string;
          id?: undefined | string;
          name?: undefined | string;
          description?: undefined | string;
        }[];
        synced_at?: undefined | string;
      };
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyPath =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse;
  type TeamsTeamsCreatePath = ActionsActionsCreateRegistrationTokenForOrgPath;
  type TeamsTeamsCreateResponse = GithubApiTeamFull;
  type TeamsTeamsDeleteDiscussionCommentInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsDeleteDiscussionCommentInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type TeamsTeamsDeleteDiscussionCommentInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteDiscussionCommentLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsDeleteDiscussionCommentLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type TeamsTeamsDeleteDiscussionCommentLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteDiscussionInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsDeleteDiscussionInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsDeleteDiscussionInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteDiscussionLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsDeleteDiscussionLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsDeleteDiscussionLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsDeleteInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsDeleteInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsDeleteLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsDeleteLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsGetByName =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetByNamePath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsGetByNameResponse = TeamsTeamsCreateResponse;
  type TeamsTeamsGetDiscussionCommentInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetDiscussionCommentInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type TeamsTeamsGetDiscussionCommentInOrgResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponse;
  type TeamsTeamsGetDiscussionCommentLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetDiscussionCommentLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type TeamsTeamsGetDiscussionCommentLegacyResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponse;
  type TeamsTeamsGetDiscussionInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetDiscussionInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsGetDiscussionInOrgResponse =
    TeamsTeamsCreateDiscussionInOrgResponse;
  type TeamsTeamsGetDiscussionLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetDiscussionLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsGetDiscussionLegacyResponse =
    TeamsTeamsCreateDiscussionInOrgResponse;
  type TeamsTeamsGetLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsGetLegacyResponse = TeamsTeamsCreateResponse;
  type TeamsTeamsGetMemberLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetMemberLegacyPath = TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsGetMemberLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsGetMembershipForUserInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetMembershipForUserInOrgPath =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgPath;
  type TeamsTeamsGetMembershipForUserInOrgResponse =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponse;
  type TeamsTeamsGetMembershipForUserLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsGetMembershipForUserLegacyPath = TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsGetMembershipForUserLegacyResponse =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponse;
  type TeamsTeamsList = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListChildInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListChildInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListChildInOrgQuery = ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListChildInOrgResponse = OrgsOrgsListInvitationTeamsResponse;
  type TeamsTeamsListChildLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListChildLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListChildLegacyQuery = ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListChildLegacyResponse = OrgsOrgsListInvitationTeamsResponse;
  type TeamsTeamsListDiscussionCommentsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListDiscussionCommentsInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsListDiscussionCommentsInOrgQuery = {
    direction: "asc" | "desc";
    per_page: number;
    page: number;
  };
  type TeamsTeamsListDiscussionCommentsInOrgResponse =
    GithubApiTeamDiscussionComment[];
  type TeamsTeamsListDiscussionCommentsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListDiscussionCommentsLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsListDiscussionCommentsLegacyQuery =
    TeamsTeamsListDiscussionCommentsInOrgQuery;
  type TeamsTeamsListDiscussionCommentsLegacyResponse =
    TeamsTeamsListDiscussionCommentsInOrgResponse;
  type TeamsTeamsListDiscussionsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListDiscussionsInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListDiscussionsInOrgQuery =
    TeamsTeamsListDiscussionCommentsInOrgQuery;
  type TeamsTeamsListDiscussionsInOrgResponse = GithubApiTeamDiscussion[];
  type TeamsTeamsListDiscussionsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListDiscussionsLegacyPath =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListDiscussionsLegacyQuery =
    TeamsTeamsListDiscussionCommentsInOrgQuery;
  type TeamsTeamsListDiscussionsLegacyResponse =
    TeamsTeamsListDiscussionsInOrgResponse;
  type TeamsTeamsListForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListForAuthenticatedUserResponse = GithubApiTeamFull[];
  type TeamsTeamsListIdpGroupsForLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListIdpGroupsForLegacyPath =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListIdpGroupsForLegacyResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse;
  type TeamsTeamsListIdpGroupsForOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListIdpGroupsForOrgPath =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type TeamsTeamsListIdpGroupsForOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListIdpGroupsForOrgResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse;
  type TeamsTeamsListIdpGroupsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListIdpGroupsInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListIdpGroupsInOrgResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse;
  type TeamsTeamsListMembersInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListMembersInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListMembersInOrgQuery = {
    role: "member" | "maintainer" | "all";
    per_page: number;
    page: number;
  };
  type TeamsTeamsListMembersInOrgResponse =
    ActivityActivityListStargazersForRepoResponse;
  type TeamsTeamsListMembersLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListMembersLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListMembersLegacyQuery = TeamsTeamsListMembersInOrgQuery;
  type TeamsTeamsListMembersLegacyResponse =
    ActivityActivityListStargazersForRepoResponse;
  type TeamsTeamsListPath = ActionsActionsCreateRegistrationTokenForOrgPath;
  type TeamsTeamsListPendingInvitationsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListPendingInvitationsInOrgPath =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListPendingInvitationsInOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListPendingInvitationsInOrgResponse =
    OrgsOrgsListPendingInvitationsResponse;
  type TeamsTeamsListPendingInvitationsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListPendingInvitationsLegacyPath =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListPendingInvitationsLegacyQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListPendingInvitationsLegacyResponse =
    OrgsOrgsListPendingInvitationsResponse;
  type TeamsTeamsListProjectsInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListProjectsInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListProjectsInOrgQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListProjectsInOrgResponse = GithubApiTeamProject[];
  type TeamsTeamsListProjectsLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListProjectsLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListProjectsLegacyQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListProjectsLegacyResponse =
    TeamsTeamsListProjectsInOrgResponse;
  type TeamsTeamsListQuery = ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListReposInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListReposInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListReposInOrgQuery = ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListReposInOrgResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type TeamsTeamsListReposLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsListReposLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListReposLegacyQuery = ActionsActionsListArtifactsForRepoQuery;
  type TeamsTeamsListReposLegacyResponse =
    ActivityActivityListReposWatchedByUserResponse;
  type TeamsTeamsListResponse = OrgsOrgsListInvitationTeamsResponse;
  type TeamsTeamsRemoveMemberLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveMemberLegacyPath = TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsRemoveMemberLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveMembershipForUserInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveMembershipForUserInOrgPath =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgPath;
  type TeamsTeamsRemoveMembershipForUserInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveMembershipForUserLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveMembershipForUserLegacyPath =
    TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsRemoveMembershipForUserLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveProjectInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveProjectInOrgPath =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath;
  type TeamsTeamsRemoveProjectInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveProjectLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveProjectLegacyPath =
    TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath;
  type TeamsTeamsRemoveProjectLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveRepoInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveRepoInOrgPath =
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath;
  type TeamsTeamsRemoveRepoInOrgResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveRepoLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsRemoveRepoLegacyPath =
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath;
  type TeamsTeamsRemoveRepoLegacyResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsUpdateDiscussionCommentInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsUpdateDiscussionCommentInOrgBody = GistsGistsCreateCommentBody;
  type TeamsTeamsUpdateDiscussionCommentInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type TeamsTeamsUpdateDiscussionCommentInOrgResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponse;
  type TeamsTeamsUpdateDiscussionCommentLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsUpdateDiscussionCommentLegacyBody =
    GistsGistsCreateCommentBody;
  type TeamsTeamsUpdateDiscussionCommentLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type TeamsTeamsUpdateDiscussionCommentLegacyResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponse;
  type TeamsTeamsUpdateDiscussionInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsUpdateDiscussionInOrgBody =
    | undefined
    | { title?: undefined | string; body?: undefined | string };
  type TeamsTeamsUpdateDiscussionInOrgPath =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsUpdateDiscussionInOrgResponse =
    TeamsTeamsCreateDiscussionInOrgResponse;
  type TeamsTeamsUpdateDiscussionLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsUpdateDiscussionLegacyBody =
    TeamsTeamsUpdateDiscussionInOrgBody;
  type TeamsTeamsUpdateDiscussionLegacyPath =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsUpdateDiscussionLegacyResponse =
    TeamsTeamsCreateDiscussionInOrgResponse;
  type TeamsTeamsUpdateInOrg =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsUpdateInOrgBody =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        privacy?: undefined | "secret" | "closed";
        permission: "pull" | "push" | "admin";
        parent_team_id?: undefined | number;
      };
  type TeamsTeamsUpdateInOrgPath = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsUpdateInOrgResponse = TeamsTeamsCreateResponse;
  type TeamsTeamsUpdateLegacy =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type TeamsTeamsUpdateLegacyBody = TeamsTeamsUpdateInOrgBody;
  type TeamsTeamsUpdateLegacyPath = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsUpdateLegacyResponse = TeamsTeamsCreateResponse;
  type UsersUsersAddEmailForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersAddEmailForAuthenticatedBody =
    | undefined
    | { emails: string[] }
    | string[]
    | string;
  type UsersUsersAddEmailForAuthenticatedResponse = GithubApiEmail[];
  type UsersUsersBlock =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersBlockPath = ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersBlockResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCheckBlocked =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersCheckBlockedPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersCheckBlockedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCheckFollowingForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersCheckFollowingForUserPath = {
    username: string;
    target_user: string;
  };
  type UsersUsersCheckFollowingForUserResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCheckPersonIsFollowedByAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersCheckPersonIsFollowedByAuthenticatedPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersCheckPersonIsFollowedByAuthenticatedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCreateGpgKeyForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersCreateGpgKeyForAuthenticatedBody =
    | undefined
    | { armored_public_key: string };
  type UsersUsersCreateGpgKeyForAuthenticatedResponse = GithubApiGpgKey;
  type UsersUsersCreatePublicSshKeyForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersCreatePublicSshKeyForAuthenticatedBody =
    | undefined
    | { title?: undefined | string; key: string };
  type UsersUsersCreatePublicSshKeyForAuthenticatedResponse = GithubApiKey;
  type UsersUsersDeleteEmailForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersDeleteEmailForAuthenticatedBody =
    UsersUsersAddEmailForAuthenticatedBody;
  type UsersUsersDeleteEmailForAuthenticatedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersDeleteGpgKeyForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersDeleteGpgKeyForAuthenticatedPath = { gpg_key_id: number };
  type UsersUsersDeleteGpgKeyForAuthenticatedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersDeletePublicSshKeyForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersDeletePublicSshKeyForAuthenticatedPath = { key_id: number };
  type UsersUsersDeletePublicSshKeyForAuthenticatedResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersFollow =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersFollowPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersFollowResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersGetAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersGetAuthenticatedResponse =
    | GithubApiPrivateUser
    | GithubApiPublicUser;
  type UsersUsersGetByUsername =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersGetByUsernamePath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersGetByUsernameResponse = UsersUsersGetAuthenticatedResponse;
  type UsersUsersGetContextForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersGetContextForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersGetContextForUserQuery = {
    subject_type?:
      | undefined
      | "organization"
      | "repository"
      | "issue"
      | "pull_request";
    subject_id?: undefined | string;
  };
  type UsersUsersGetContextForUserResponse = GithubApiHovercard;
  type UsersUsersGetGpgKeyForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersGetGpgKeyForAuthenticatedPath =
    UsersUsersDeleteGpgKeyForAuthenticatedPath;
  type UsersUsersGetGpgKeyForAuthenticatedResponse =
    UsersUsersCreateGpgKeyForAuthenticatedResponse;
  type UsersUsersGetPublicSshKeyForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersGetPublicSshKeyForAuthenticatedPath =
    UsersUsersDeletePublicSshKeyForAuthenticatedPath;
  type UsersUsersGetPublicSshKeyForAuthenticatedResponse =
    UsersUsersCreatePublicSshKeyForAuthenticatedResponse;
  type UsersUsersList = ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListBlockedByAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListBlockedByAuthenticatedResponse =
    ActivityActivityListStargazersForRepoResponse;
  type UsersUsersListEmailsForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListEmailsForAuthenticatedQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListEmailsForAuthenticatedResponse =
    UsersUsersAddEmailForAuthenticatedResponse;
  type UsersUsersListFollowedByAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListFollowedByAuthenticatedQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListFollowedByAuthenticatedResponse =
    ActivityActivityListStargazersForRepoResponse;
  type UsersUsersListFollowersForAuthenticatedUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListFollowersForAuthenticatedUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListFollowersForAuthenticatedUserResponse =
    ActivityActivityListStargazersForRepoResponse;
  type UsersUsersListFollowersForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListFollowersForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListFollowersForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListFollowersForUserResponse =
    ActivityActivityListStargazersForRepoResponse;
  type UsersUsersListFollowingForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListFollowingForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListFollowingForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListFollowingForUserResponse =
    ActivityActivityListStargazersForRepoResponse;
  type UsersUsersListGpgKeysForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListGpgKeysForAuthenticatedQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListGpgKeysForAuthenticatedResponse = GithubApiGpgKey[];
  type UsersUsersListGpgKeysForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListGpgKeysForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListGpgKeysForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListGpgKeysForUserResponse =
    UsersUsersListGpgKeysForAuthenticatedResponse;
  type UsersUsersListPublicEmailsForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListPublicEmailsForAuthenticatedQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListPublicEmailsForAuthenticatedResponse =
    UsersUsersAddEmailForAuthenticatedResponse;
  type UsersUsersListPublicKeysForUser =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListPublicKeysForUserPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListPublicKeysForUserQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListPublicKeysForUserResponse = GithubApiKeySimple[];
  type UsersUsersListPublicSshKeysForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersListPublicSshKeysForAuthenticatedQuery =
    ActionsActionsListArtifactsForRepoQuery;
  type UsersUsersListPublicSshKeysForAuthenticatedResponse = GithubApiKey[];
  type UsersUsersListQuery = OrgsOrgsListQuery;
  type UsersUsersListResponse = ActivityActivityListStargazersForRepoResponse;
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticatedBody =
    | undefined
    | { email: string; visibility: "public" | "private" };
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticatedResponse =
    UsersUsersAddEmailForAuthenticatedResponse;
  type UsersUsersUnblock =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersUnblockPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersUnblockResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersUnfollow =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersUnfollowPath =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersUnfollowResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersUpdateAuthenticated =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrg;
  type UsersUsersUpdateAuthenticatedBody =
    | undefined
    | {
        name?: undefined | string;
        email?: undefined | string;
        blog?: undefined | string;
        twitter_username?: undefined | string;
        company?: undefined | string;
        location?: undefined | string;
        hireable?: undefined | boolean;
        bio?: undefined | string;
      };
  type UsersUsersUpdateAuthenticatedResponse = GithubApiPrivateUser;
  type ValidatorNamedLevelOne = { levelOne: ValidatorNamedLevelTwo };
  type ValidatorNamedLevelTwo = { two: ValidatorNamedLevelThree };
  type ValidatorNamedLevelThree = { foo?: undefined | ValidatorNamedLevelOne };
  type ValidatorObjectOptional = undefined | { bool: boolean; string: string };
  type ValidatorRecursive = { recursive?: undefined | ValidatorRecursive };
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPath;
    },
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse
  >;
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgFn = (
    ctx: ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsAddSelectedRepoToOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsAddSelectedRepoToOrgSecretPath;
    },
    ActionsActionsAddSelectedRepoToOrgSecretResponse
  >;
  type ActionsActionsAddSelectedRepoToOrgSecretFn = (
    ctx: ActionsActionsAddSelectedRepoToOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsAddSelfHostedRunnerToGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsAddSelfHostedRunnerToGroupForOrgPath;
    },
    ActionsActionsAddSelfHostedRunnerToGroupForOrgResponse
  >;
  type ActionsActionsAddSelfHostedRunnerToGroupForOrgFn = (
    ctx: ActionsActionsAddSelfHostedRunnerToGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCancelWorkflowRunCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCancelWorkflowRunPath;
    },
    ActionsActionsCancelWorkflowRunResponse
  >;
  type ActionsActionsCancelWorkflowRunFn = (
    ctx: ActionsActionsCancelWorkflowRunCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateOrUpdateOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateOrUpdateOrgSecretPath;
      validatedBody: ActionsActionsCreateOrUpdateOrgSecretBody;
    },
    ActionsActionsCreateOrUpdateOrgSecretResponse
  >;
  type ActionsActionsCreateOrUpdateOrgSecretFn = (
    ctx: ActionsActionsCreateOrUpdateOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateOrUpdateRepoSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateOrUpdateRepoSecretPath;
      validatedBody: ActionsActionsCreateOrUpdateRepoSecretBody;
    },
    ActionsActionsCreateOrUpdateRepoSecretResponse
  >;
  type ActionsActionsCreateOrUpdateRepoSecretFn = (
    ctx: ActionsActionsCreateOrUpdateRepoSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateRegistrationTokenForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateRegistrationTokenForOrgPath;
    },
    ActionsActionsCreateRegistrationTokenForOrgResponse
  >;
  type ActionsActionsCreateRegistrationTokenForOrgFn = (
    ctx: ActionsActionsCreateRegistrationTokenForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateRegistrationTokenForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateRegistrationTokenForRepoPath;
    },
    ActionsActionsCreateRegistrationTokenForRepoResponse
  >;
  type ActionsActionsCreateRegistrationTokenForRepoFn = (
    ctx: ActionsActionsCreateRegistrationTokenForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateRemoveTokenForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateRemoveTokenForOrgPath;
    },
    ActionsActionsCreateRemoveTokenForOrgResponse
  >;
  type ActionsActionsCreateRemoveTokenForOrgFn = (
    ctx: ActionsActionsCreateRemoveTokenForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateRemoveTokenForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateRemoveTokenForRepoPath;
    },
    ActionsActionsCreateRemoveTokenForRepoResponse
  >;
  type ActionsActionsCreateRemoveTokenForRepoFn = (
    ctx: ActionsActionsCreateRemoveTokenForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateSelfHostedRunnerGroupForOrgPath;
      validatedBody: ActionsActionsCreateSelfHostedRunnerGroupForOrgBody;
    },
    ActionsActionsCreateSelfHostedRunnerGroupForOrgResponse
  >;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgFn = (
    ctx: ActionsActionsCreateSelfHostedRunnerGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsCreateWorkflowDispatchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsCreateWorkflowDispatchPath;
      validatedBody: ActionsActionsCreateWorkflowDispatchBody;
    },
    ActionsActionsCreateWorkflowDispatchResponse
  >;
  type ActionsActionsCreateWorkflowDispatchFn = (
    ctx: ActionsActionsCreateWorkflowDispatchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteArtifactCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteArtifactPath;
    },
    ActionsActionsDeleteArtifactResponse
  >;
  type ActionsActionsDeleteArtifactFn = (
    ctx: ActionsActionsDeleteArtifactCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteOrgSecretPath;
    },
    ActionsActionsDeleteOrgSecretResponse
  >;
  type ActionsActionsDeleteOrgSecretFn = (
    ctx: ActionsActionsDeleteOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteRepoSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteRepoSecretPath;
    },
    ActionsActionsDeleteRepoSecretResponse
  >;
  type ActionsActionsDeleteRepoSecretFn = (
    ctx: ActionsActionsDeleteRepoSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteSelfHostedRunnerFromOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteSelfHostedRunnerFromOrgPath;
    },
    ActionsActionsDeleteSelfHostedRunnerFromOrgResponse
  >;
  type ActionsActionsDeleteSelfHostedRunnerFromOrgFn = (
    ctx: ActionsActionsDeleteSelfHostedRunnerFromOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteSelfHostedRunnerFromRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteSelfHostedRunnerFromRepoPath;
    },
    ActionsActionsDeleteSelfHostedRunnerFromRepoResponse
  >;
  type ActionsActionsDeleteSelfHostedRunnerFromRepoFn = (
    ctx: ActionsActionsDeleteSelfHostedRunnerFromRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
    },
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgResponse
  >;
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrgFn = (
    ctx: ActionsActionsDeleteSelfHostedRunnerGroupFromOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteWorkflowRunCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteWorkflowRunPath;
    },
    ActionsActionsDeleteWorkflowRunResponse
  >;
  type ActionsActionsDeleteWorkflowRunFn = (
    ctx: ActionsActionsDeleteWorkflowRunCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDeleteWorkflowRunLogsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDeleteWorkflowRunLogsPath;
    },
    ActionsActionsDeleteWorkflowRunLogsResponse
  >;
  type ActionsActionsDeleteWorkflowRunLogsFn = (
    ctx: ActionsActionsDeleteWorkflowRunLogsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationPath;
      },
      ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationResponse
    >;
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationFn = (
    ctx: ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDisableWorkflowCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDisableWorkflowPath;
    },
    ActionsActionsDisableWorkflowResponse
  >;
  type ActionsActionsDisableWorkflowFn = (
    ctx: ActionsActionsDisableWorkflowCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDownloadArtifactCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDownloadArtifactPath;
    },
    ActionsActionsDownloadArtifactResponse
  >;
  type ActionsActionsDownloadArtifactFn = (
    ctx: ActionsActionsDownloadArtifactCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDownloadJobLogsForWorkflowRunCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDownloadJobLogsForWorkflowRunPath;
    },
    ActionsActionsDownloadJobLogsForWorkflowRunResponse
  >;
  type ActionsActionsDownloadJobLogsForWorkflowRunFn = (
    ctx: ActionsActionsDownloadJobLogsForWorkflowRunCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsDownloadWorkflowRunLogsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsDownloadWorkflowRunLogsPath;
    },
    ActionsActionsDownloadWorkflowRunLogsResponse
  >;
  type ActionsActionsDownloadWorkflowRunLogsFn = (
    ctx: ActionsActionsDownloadWorkflowRunLogsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationPath;
      },
      ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationResponse
    >;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationFn = (
    ctx: ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsEnableWorkflowCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsEnableWorkflowPath;
    },
    ActionsActionsEnableWorkflowResponse
  >;
  type ActionsActionsEnableWorkflowFn = (
    ctx: ActionsActionsEnableWorkflowCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetAllowedActionsOrganizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetAllowedActionsOrganizationPath;
    },
    ActionsActionsGetAllowedActionsOrganizationResponse
  >;
  type ActionsActionsGetAllowedActionsOrganizationFn = (
    ctx: ActionsActionsGetAllowedActionsOrganizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetAllowedActionsRepositoryCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetAllowedActionsRepositoryPath;
    },
    ActionsActionsGetAllowedActionsRepositoryResponse
  >;
  type ActionsActionsGetAllowedActionsRepositoryFn = (
    ctx: ActionsActionsGetAllowedActionsRepositoryCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetArtifactCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetArtifactPath;
    },
    ActionsActionsGetArtifactResponse
  >;
  type ActionsActionsGetArtifactFn = (
    ctx: ActionsActionsGetArtifactCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetGithubActionsPermissionsOrganizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetGithubActionsPermissionsOrganizationPath;
    },
    ActionsActionsGetGithubActionsPermissionsOrganizationResponse
  >;
  type ActionsActionsGetGithubActionsPermissionsOrganizationFn = (
    ctx: ActionsActionsGetGithubActionsPermissionsOrganizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetGithubActionsPermissionsRepositoryCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetGithubActionsPermissionsRepositoryPath;
    },
    ActionsActionsGetGithubActionsPermissionsRepositoryResponse
  >;
  type ActionsActionsGetGithubActionsPermissionsRepositoryFn = (
    ctx: ActionsActionsGetGithubActionsPermissionsRepositoryCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetJobForWorkflowRunCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetJobForWorkflowRunPath;
    },
    ActionsActionsGetJobForWorkflowRunResponse
  >;
  type ActionsActionsGetJobForWorkflowRunFn = (
    ctx: ActionsActionsGetJobForWorkflowRunCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetOrgPublicKeyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetOrgPublicKeyPath;
    },
    ActionsActionsGetOrgPublicKeyResponse
  >;
  type ActionsActionsGetOrgPublicKeyFn = (
    ctx: ActionsActionsGetOrgPublicKeyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetOrgSecretPath;
    },
    ActionsActionsGetOrgSecretResponse
  >;
  type ActionsActionsGetOrgSecretFn = (
    ctx: ActionsActionsGetOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetRepoPublicKeyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetRepoPublicKeyPath;
    },
    ActionsActionsGetRepoPublicKeyResponse
  >;
  type ActionsActionsGetRepoPublicKeyFn = (
    ctx: ActionsActionsGetRepoPublicKeyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetRepoSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetRepoSecretPath;
    },
    ActionsActionsGetRepoSecretResponse
  >;
  type ActionsActionsGetRepoSecretFn = (
    ctx: ActionsActionsGetRepoSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetSelfHostedRunnerForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetSelfHostedRunnerForOrgPath;
    },
    ActionsActionsGetSelfHostedRunnerForOrgResponse
  >;
  type ActionsActionsGetSelfHostedRunnerForOrgFn = (
    ctx: ActionsActionsGetSelfHostedRunnerForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetSelfHostedRunnerForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetSelfHostedRunnerForRepoPath;
    },
    ActionsActionsGetSelfHostedRunnerForRepoResponse
  >;
  type ActionsActionsGetSelfHostedRunnerForRepoFn = (
    ctx: ActionsActionsGetSelfHostedRunnerForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetSelfHostedRunnerGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetSelfHostedRunnerGroupForOrgPath;
    },
    ActionsActionsGetSelfHostedRunnerGroupForOrgResponse
  >;
  type ActionsActionsGetSelfHostedRunnerGroupForOrgFn = (
    ctx: ActionsActionsGetSelfHostedRunnerGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetWorkflowCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetWorkflowPath;
    },
    ActionsActionsGetWorkflowResponse
  >;
  type ActionsActionsGetWorkflowFn = (
    ctx: ActionsActionsGetWorkflowCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetWorkflowRunCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetWorkflowRunPath;
    },
    ActionsActionsGetWorkflowRunResponse
  >;
  type ActionsActionsGetWorkflowRunFn = (
    ctx: ActionsActionsGetWorkflowRunCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetWorkflowRunUsageCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetWorkflowRunUsagePath;
    },
    ActionsActionsGetWorkflowRunUsageResponse
  >;
  type ActionsActionsGetWorkflowRunUsageFn = (
    ctx: ActionsActionsGetWorkflowRunUsageCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsGetWorkflowUsageCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsGetWorkflowUsagePath;
    },
    ActionsActionsGetWorkflowUsageResponse
  >;
  type ActionsActionsGetWorkflowUsageFn = (
    ctx: ActionsActionsGetWorkflowUsageCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListArtifactsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListArtifactsForRepoQuery;
      validatedParams: ActionsActionsListArtifactsForRepoPath;
    },
    ActionsActionsListArtifactsForRepoResponse
  >;
  type ActionsActionsListArtifactsForRepoFn = (
    ctx: ActionsActionsListArtifactsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListJobsForWorkflowRunCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListJobsForWorkflowRunQuery;
      validatedParams: ActionsActionsListJobsForWorkflowRunPath;
    },
    ActionsActionsListJobsForWorkflowRunResponse
  >;
  type ActionsActionsListJobsForWorkflowRunFn = (
    ctx: ActionsActionsListJobsForWorkflowRunCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListOrgSecretsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListOrgSecretsQuery;
      validatedParams: ActionsActionsListOrgSecretsPath;
    },
    ActionsActionsListOrgSecretsResponse
  >;
  type ActionsActionsListOrgSecretsFn = (
    ctx: ActionsActionsListOrgSecretsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgPath;
    },
    ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponse
  >;
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgFn = (
    ctx: ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListRepoSecretsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListRepoSecretsQuery;
      validatedParams: ActionsActionsListRepoSecretsPath;
    },
    ActionsActionsListRepoSecretsResponse
  >;
  type ActionsActionsListRepoSecretsFn = (
    ctx: ActionsActionsListRepoSecretsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListRepoWorkflowsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListRepoWorkflowsQuery;
      validatedParams: ActionsActionsListRepoWorkflowsPath;
    },
    ActionsActionsListRepoWorkflowsResponse
  >;
  type ActionsActionsListRepoWorkflowsFn = (
    ctx: ActionsActionsListRepoWorkflowsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListRunnerApplicationsForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsListRunnerApplicationsForOrgPath;
    },
    ActionsActionsListRunnerApplicationsForOrgResponse
  >;
  type ActionsActionsListRunnerApplicationsForOrgFn = (
    ctx: ActionsActionsListRunnerApplicationsForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListRunnerApplicationsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsListRunnerApplicationsForRepoPath;
    },
    ActionsActionsListRunnerApplicationsForRepoResponse
  >;
  type ActionsActionsListRunnerApplicationsForRepoFn = (
    ctx: ActionsActionsListRunnerApplicationsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListSelectedReposForOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsListSelectedReposForOrgSecretPath;
    },
    ActionsActionsListSelectedReposForOrgSecretResponse
  >;
  type ActionsActionsListSelectedReposForOrgSecretFn = (
    ctx: ActionsActionsListSelectedReposForOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuery;
        validatedParams: ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPath;
      },
      ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse
    >;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationFn =
    (
      ctx: ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationCtx,
      next: Next,
    ) => void | Promise<void>;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListSelfHostedRunnerGroupsForOrgQuery;
      validatedParams: ActionsActionsListSelfHostedRunnerGroupsForOrgPath;
    },
    ActionsActionsListSelfHostedRunnerGroupsForOrgResponse
  >;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgFn = (
    ctx: ActionsActionsListSelfHostedRunnerGroupsForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListSelfHostedRunnersForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListSelfHostedRunnersForOrgQuery;
      validatedParams: ActionsActionsListSelfHostedRunnersForOrgPath;
    },
    ActionsActionsListSelfHostedRunnersForOrgResponse
  >;
  type ActionsActionsListSelfHostedRunnersForOrgFn = (
    ctx: ActionsActionsListSelfHostedRunnersForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListSelfHostedRunnersForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListSelfHostedRunnersForRepoQuery;
      validatedParams: ActionsActionsListSelfHostedRunnersForRepoPath;
    },
    ActionsActionsListSelfHostedRunnersForRepoResponse
  >;
  type ActionsActionsListSelfHostedRunnersForRepoFn = (
    ctx: ActionsActionsListSelfHostedRunnersForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListSelfHostedRunnersInGroupForOrgQuery;
      validatedParams: ActionsActionsListSelfHostedRunnersInGroupForOrgPath;
    },
    ActionsActionsListSelfHostedRunnersInGroupForOrgResponse
  >;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgFn = (
    ctx: ActionsActionsListSelfHostedRunnersInGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListWorkflowRunArtifactsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListWorkflowRunArtifactsQuery;
      validatedParams: ActionsActionsListWorkflowRunArtifactsPath;
    },
    ActionsActionsListWorkflowRunArtifactsResponse
  >;
  type ActionsActionsListWorkflowRunArtifactsFn = (
    ctx: ActionsActionsListWorkflowRunArtifactsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListWorkflowRunsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListWorkflowRunsQuery;
      validatedParams: ActionsActionsListWorkflowRunsPath;
    },
    ActionsActionsListWorkflowRunsResponse
  >;
  type ActionsActionsListWorkflowRunsFn = (
    ctx: ActionsActionsListWorkflowRunsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsListWorkflowRunsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActionsActionsListWorkflowRunsForRepoQuery;
      validatedParams: ActionsActionsListWorkflowRunsForRepoPath;
    },
    ActionsActionsListWorkflowRunsForRepoResponse
  >;
  type ActionsActionsListWorkflowRunsForRepoFn = (
    ctx: ActionsActionsListWorkflowRunsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsReRunWorkflowCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsReRunWorkflowPath;
    },
    ActionsActionsReRunWorkflowResponse
  >;
  type ActionsActionsReRunWorkflowFn = (
    ctx: ActionsActionsReRunWorkflowCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPath;
    },
    ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponse
  >;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgFn = (
    ctx: ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsRemoveSelectedRepoFromOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsRemoveSelectedRepoFromOrgSecretPath;
    },
    ActionsActionsRemoveSelectedRepoFromOrgSecretResponse
  >;
  type ActionsActionsRemoveSelectedRepoFromOrgSecretFn = (
    ctx: ActionsActionsRemoveSelectedRepoFromOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgPath;
    },
    ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgResponse
  >;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgFn = (
    ctx: ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetAllowedActionsOrganizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetAllowedActionsOrganizationPath;
      validatedBody: ActionsActionsSetAllowedActionsOrganizationBody;
    },
    ActionsActionsSetAllowedActionsOrganizationResponse
  >;
  type ActionsActionsSetAllowedActionsOrganizationFn = (
    ctx: ActionsActionsSetAllowedActionsOrganizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetAllowedActionsRepositoryCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetAllowedActionsRepositoryPath;
      validatedBody: ActionsActionsSetAllowedActionsRepositoryBody;
    },
    ActionsActionsSetAllowedActionsRepositoryResponse
  >;
  type ActionsActionsSetAllowedActionsRepositoryFn = (
    ctx: ActionsActionsSetAllowedActionsRepositoryCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetGithubActionsPermissionsOrganizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetGithubActionsPermissionsOrganizationPath;
      validatedBody: ActionsActionsSetGithubActionsPermissionsOrganizationBody;
    },
    ActionsActionsSetGithubActionsPermissionsOrganizationResponse
  >;
  type ActionsActionsSetGithubActionsPermissionsOrganizationFn = (
    ctx: ActionsActionsSetGithubActionsPermissionsOrganizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetGithubActionsPermissionsRepositoryCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetGithubActionsPermissionsRepositoryPath;
      validatedBody: ActionsActionsSetGithubActionsPermissionsRepositoryBody;
    },
    ActionsActionsSetGithubActionsPermissionsRepositoryResponse
  >;
  type ActionsActionsSetGithubActionsPermissionsRepositoryFn = (
    ctx: ActionsActionsSetGithubActionsPermissionsRepositoryCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPath;
      validatedBody: ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBody;
    },
    ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponse
  >;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgFn = (
    ctx: ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetSelectedReposForOrgSecretCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetSelectedReposForOrgSecretPath;
      validatedBody: ActionsActionsSetSelectedReposForOrgSecretBody;
    },
    ActionsActionsSetSelectedReposForOrgSecretResponse
  >;
  type ActionsActionsSetSelectedReposForOrgSecretFn = (
    ctx: ActionsActionsSetSelectedReposForOrgSecretCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPath;
        validatedBody: ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBody;
      },
      ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse
    >;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationFn =
    (
      ctx: ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCtx,
      next: Next,
    ) => void | Promise<void>;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsSetSelfHostedRunnersInGroupForOrgPath;
      validatedBody: ActionsActionsSetSelfHostedRunnersInGroupForOrgBody;
    },
    ActionsActionsSetSelfHostedRunnersInGroupForOrgResponse
  >;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgFn = (
    ctx: ActionsActionsSetSelfHostedRunnersInGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActionsActionsUpdateSelfHostedRunnerGroupForOrgPath;
      validatedBody: ActionsActionsUpdateSelfHostedRunnerGroupForOrgBody;
    },
    ActionsActionsUpdateSelfHostedRunnerGroupForOrgResponse
  >;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgFn = (
    ctx: ActionsActionsUpdateSelfHostedRunnerGroupForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityCheckRepoIsStarredByAuthenticatedUserPath;
    },
    ActivityActivityCheckRepoIsStarredByAuthenticatedUserResponse
  >;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUserFn = (
    ctx: ActivityActivityCheckRepoIsStarredByAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityDeleteRepoSubscriptionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityDeleteRepoSubscriptionPath;
    },
    ActivityActivityDeleteRepoSubscriptionResponse
  >;
  type ActivityActivityDeleteRepoSubscriptionFn = (
    ctx: ActivityActivityDeleteRepoSubscriptionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityDeleteThreadSubscriptionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityDeleteThreadSubscriptionPath;
    },
    ActivityActivityDeleteThreadSubscriptionResponse
  >;
  type ActivityActivityDeleteThreadSubscriptionFn = (
    ctx: ActivityActivityDeleteThreadSubscriptionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityGetFeedsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ActivityActivityGetFeedsResponse
  >;
  type ActivityActivityGetFeedsFn = (
    ctx: ActivityActivityGetFeedsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityGetRepoSubscriptionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityGetRepoSubscriptionPath;
    },
    ActivityActivityGetRepoSubscriptionResponse
  >;
  type ActivityActivityGetRepoSubscriptionFn = (
    ctx: ActivityActivityGetRepoSubscriptionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityGetThreadCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityGetThreadPath;
    },
    ActivityActivityGetThreadResponse
  >;
  type ActivityActivityGetThreadFn = (
    ctx: ActivityActivityGetThreadCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityGetThreadSubscriptionForAuthenticatedUserPath;
    },
    ActivityActivityGetThreadSubscriptionForAuthenticatedUserResponse
  >;
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUserFn = (
    ctx: ActivityActivityGetThreadSubscriptionForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListEventsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListEventsForAuthenticatedUserQuery;
      validatedParams: ActivityActivityListEventsForAuthenticatedUserPath;
    },
    ActivityActivityListEventsForAuthenticatedUserResponse
  >;
  type ActivityActivityListEventsForAuthenticatedUserFn = (
    ctx: ActivityActivityListEventsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListNotificationsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListNotificationsForAuthenticatedUserQuery;
    },
    ActivityActivityListNotificationsForAuthenticatedUserResponse
  >;
  type ActivityActivityListNotificationsForAuthenticatedUserFn = (
    ctx: ActivityActivityListNotificationsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListOrgEventsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListOrgEventsForAuthenticatedUserQuery;
      validatedParams: ActivityActivityListOrgEventsForAuthenticatedUserPath;
    },
    ActivityActivityListOrgEventsForAuthenticatedUserResponse
  >;
  type ActivityActivityListOrgEventsForAuthenticatedUserFn = (
    ctx: ActivityActivityListOrgEventsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListPublicEventsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListPublicEventsQuery;
    },
    ActivityActivityListPublicEventsResponse
  >;
  type ActivityActivityListPublicEventsFn = (
    ctx: ActivityActivityListPublicEventsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListPublicEventsForRepoNetworkCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListPublicEventsForRepoNetworkQuery;
      validatedParams: ActivityActivityListPublicEventsForRepoNetworkPath;
    },
    ActivityActivityListPublicEventsForRepoNetworkResponse
  >;
  type ActivityActivityListPublicEventsForRepoNetworkFn = (
    ctx: ActivityActivityListPublicEventsForRepoNetworkCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListPublicEventsForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListPublicEventsForUserQuery;
      validatedParams: ActivityActivityListPublicEventsForUserPath;
    },
    ActivityActivityListPublicEventsForUserResponse
  >;
  type ActivityActivityListPublicEventsForUserFn = (
    ctx: ActivityActivityListPublicEventsForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListPublicOrgEventsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListPublicOrgEventsQuery;
      validatedParams: ActivityActivityListPublicOrgEventsPath;
    },
    ActivityActivityListPublicOrgEventsResponse
  >;
  type ActivityActivityListPublicOrgEventsFn = (
    ctx: ActivityActivityListPublicOrgEventsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListReceivedEventsForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListReceivedEventsForUserQuery;
      validatedParams: ActivityActivityListReceivedEventsForUserPath;
    },
    ActivityActivityListReceivedEventsForUserResponse
  >;
  type ActivityActivityListReceivedEventsForUserFn = (
    ctx: ActivityActivityListReceivedEventsForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListReceivedPublicEventsForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListReceivedPublicEventsForUserQuery;
      validatedParams: ActivityActivityListReceivedPublicEventsForUserPath;
    },
    ActivityActivityListReceivedPublicEventsForUserResponse
  >;
  type ActivityActivityListReceivedPublicEventsForUserFn = (
    ctx: ActivityActivityListReceivedPublicEventsForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListRepoEventsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListRepoEventsQuery;
      validatedParams: ActivityActivityListRepoEventsPath;
    },
    ActivityActivityListRepoEventsResponse
  >;
  type ActivityActivityListRepoEventsFn = (
    ctx: ActivityActivityListRepoEventsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListRepoNotificationsForAuthenticatedUserQuery;
      validatedParams: ActivityActivityListRepoNotificationsForAuthenticatedUserPath;
    },
    ActivityActivityListRepoNotificationsForAuthenticatedUserResponse
  >;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserFn = (
    ctx: ActivityActivityListRepoNotificationsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListReposStarredByAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListReposStarredByAuthenticatedUserQuery;
    },
    ActivityActivityListReposStarredByAuthenticatedUserResponse
  >;
  type ActivityActivityListReposStarredByAuthenticatedUserFn = (
    ctx: ActivityActivityListReposStarredByAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListReposStarredByUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListReposStarredByUserQuery;
      validatedParams: ActivityActivityListReposStarredByUserPath;
    },
    ActivityActivityListReposStarredByUserResponse
  >;
  type ActivityActivityListReposStarredByUserFn = (
    ctx: ActivityActivityListReposStarredByUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListReposWatchedByUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListReposWatchedByUserQuery;
      validatedParams: ActivityActivityListReposWatchedByUserPath;
    },
    ActivityActivityListReposWatchedByUserResponse
  >;
  type ActivityActivityListReposWatchedByUserFn = (
    ctx: ActivityActivityListReposWatchedByUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListStargazersForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListStargazersForRepoQuery;
      validatedParams: ActivityActivityListStargazersForRepoPath;
    },
    ActivityActivityListStargazersForRepoResponse
  >;
  type ActivityActivityListStargazersForRepoFn = (
    ctx: ActivityActivityListStargazersForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListWatchedReposForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListWatchedReposForAuthenticatedUserQuery;
    },
    ActivityActivityListWatchedReposForAuthenticatedUserResponse
  >;
  type ActivityActivityListWatchedReposForAuthenticatedUserFn = (
    ctx: ActivityActivityListWatchedReposForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityListWatchersForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ActivityActivityListWatchersForRepoQuery;
      validatedParams: ActivityActivityListWatchersForRepoPath;
    },
    ActivityActivityListWatchersForRepoResponse
  >;
  type ActivityActivityListWatchersForRepoFn = (
    ctx: ActivityActivityListWatchersForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityMarkNotificationsAsReadCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ActivityActivityMarkNotificationsAsReadBody;
    },
    ActivityActivityMarkNotificationsAsReadResponse
  >;
  type ActivityActivityMarkNotificationsAsReadFn = (
    ctx: ActivityActivityMarkNotificationsAsReadCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityMarkRepoNotificationsAsReadCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityMarkRepoNotificationsAsReadPath;
      validatedBody: ActivityActivityMarkRepoNotificationsAsReadBody;
    },
    ActivityActivityMarkRepoNotificationsAsReadResponse
  >;
  type ActivityActivityMarkRepoNotificationsAsReadFn = (
    ctx: ActivityActivityMarkRepoNotificationsAsReadCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityMarkThreadAsReadCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityMarkThreadAsReadPath;
    },
    ActivityActivityMarkThreadAsReadResponse
  >;
  type ActivityActivityMarkThreadAsReadFn = (
    ctx: ActivityActivityMarkThreadAsReadCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivitySetRepoSubscriptionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivitySetRepoSubscriptionPath;
      validatedBody: ActivityActivitySetRepoSubscriptionBody;
    },
    ActivityActivitySetRepoSubscriptionResponse
  >;
  type ActivityActivitySetRepoSubscriptionFn = (
    ctx: ActivityActivitySetRepoSubscriptionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivitySetThreadSubscriptionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivitySetThreadSubscriptionPath;
      validatedBody: ActivityActivitySetThreadSubscriptionBody;
    },
    ActivityActivitySetThreadSubscriptionResponse
  >;
  type ActivityActivitySetThreadSubscriptionFn = (
    ctx: ActivityActivitySetThreadSubscriptionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityStarRepoForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityStarRepoForAuthenticatedUserPath;
    },
    ActivityActivityStarRepoForAuthenticatedUserResponse
  >;
  type ActivityActivityStarRepoForAuthenticatedUserFn = (
    ctx: ActivityActivityStarRepoForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ActivityActivityUnstarRepoForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ActivityActivityUnstarRepoForAuthenticatedUserPath;
    },
    ActivityActivityUnstarRepoForAuthenticatedUserResponse
  >;
  type ActivityActivityUnstarRepoForAuthenticatedUserFn = (
    ctx: ActivityActivityUnstarRepoForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsAddRepoToInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsAddRepoToInstallationPath;
    },
    AppsAppsAddRepoToInstallationResponse
  >;
  type AppsAppsAddRepoToInstallationFn = (
    ctx: AppsAppsAddRepoToInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsCheckAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsCheckAuthorizationPath;
    },
    AppsAppsCheckAuthorizationResponse
  >;
  type AppsAppsCheckAuthorizationFn = (
    ctx: AppsAppsCheckAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsCheckTokenCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsCheckTokenPath;
      validatedBody: AppsAppsCheckTokenBody;
    },
    AppsAppsCheckTokenResponse
  >;
  type AppsAppsCheckTokenFn = (
    ctx: AppsAppsCheckTokenCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsCreateContentAttachmentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsCreateContentAttachmentPath;
      validatedBody: AppsAppsCreateContentAttachmentBody;
    },
    AppsAppsCreateContentAttachmentResponse
  >;
  type AppsAppsCreateContentAttachmentFn = (
    ctx: AppsAppsCreateContentAttachmentCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsCreateFromManifestCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsCreateFromManifestPath;
    },
    AppsAppsCreateFromManifestResponse
  >;
  type AppsAppsCreateFromManifestFn = (
    ctx: AppsAppsCreateFromManifestCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsCreateInstallationAccessTokenCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsCreateInstallationAccessTokenPath;
      validatedBody: AppsAppsCreateInstallationAccessTokenBody;
    },
    AppsAppsCreateInstallationAccessTokenResponse
  >;
  type AppsAppsCreateInstallationAccessTokenFn = (
    ctx: AppsAppsCreateInstallationAccessTokenCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsDeleteAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsDeleteAuthorizationPath;
      validatedBody: AppsAppsDeleteAuthorizationBody;
    },
    AppsAppsDeleteAuthorizationResponse
  >;
  type AppsAppsDeleteAuthorizationFn = (
    ctx: AppsAppsDeleteAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsDeleteInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsDeleteInstallationPath;
    },
    AppsAppsDeleteInstallationResponse
  >;
  type AppsAppsDeleteInstallationFn = (
    ctx: AppsAppsDeleteInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsDeleteTokenCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsDeleteTokenPath;
      validatedBody: AppsAppsDeleteTokenBody;
    },
    AppsAppsDeleteTokenResponse
  >;
  type AppsAppsDeleteTokenFn = (
    ctx: AppsAppsDeleteTokenCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    AppsAppsGetAuthenticatedResponse
  >;
  type AppsAppsGetAuthenticatedFn = (
    ctx: AppsAppsGetAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetBySlugCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetBySlugPath;
    },
    AppsAppsGetBySlugResponse
  >;
  type AppsAppsGetBySlugFn = (
    ctx: AppsAppsGetBySlugCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetInstallationPath;
    },
    AppsAppsGetInstallationResponse
  >;
  type AppsAppsGetInstallationFn = (
    ctx: AppsAppsGetInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetOrgInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetOrgInstallationPath;
    },
    AppsAppsGetOrgInstallationResponse
  >;
  type AppsAppsGetOrgInstallationFn = (
    ctx: AppsAppsGetOrgInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetRepoInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetRepoInstallationPath;
    },
    AppsAppsGetRepoInstallationResponse
  >;
  type AppsAppsGetRepoInstallationFn = (
    ctx: AppsAppsGetRepoInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetSubscriptionPlanForAccountCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetSubscriptionPlanForAccountPath;
    },
    AppsAppsGetSubscriptionPlanForAccountResponse
  >;
  type AppsAppsGetSubscriptionPlanForAccountFn = (
    ctx: AppsAppsGetSubscriptionPlanForAccountCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetSubscriptionPlanForAccountStubbedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetSubscriptionPlanForAccountStubbedPath;
    },
    AppsAppsGetSubscriptionPlanForAccountStubbedResponse
  >;
  type AppsAppsGetSubscriptionPlanForAccountStubbedFn = (
    ctx: AppsAppsGetSubscriptionPlanForAccountStubbedCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetUserInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsGetUserInstallationPath;
    },
    AppsAppsGetUserInstallationResponse
  >;
  type AppsAppsGetUserInstallationFn = (
    ctx: AppsAppsGetUserInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsGetWebhookConfigForAppCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    AppsAppsGetWebhookConfigForAppResponse
  >;
  type AppsAppsGetWebhookConfigForAppFn = (
    ctx: AppsAppsGetWebhookConfigForAppCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListAccountsForPlanCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListAccountsForPlanQuery;
      validatedParams: AppsAppsListAccountsForPlanPath;
    },
    AppsAppsListAccountsForPlanResponse
  >;
  type AppsAppsListAccountsForPlanFn = (
    ctx: AppsAppsListAccountsForPlanCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListAccountsForPlanStubbedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListAccountsForPlanStubbedQuery;
      validatedParams: AppsAppsListAccountsForPlanStubbedPath;
    },
    AppsAppsListAccountsForPlanStubbedResponse
  >;
  type AppsAppsListAccountsForPlanStubbedFn = (
    ctx: AppsAppsListAccountsForPlanStubbedCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListInstallationReposForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListInstallationReposForAuthenticatedUserQuery;
      validatedParams: AppsAppsListInstallationReposForAuthenticatedUserPath;
    },
    AppsAppsListInstallationReposForAuthenticatedUserResponse
  >;
  type AppsAppsListInstallationReposForAuthenticatedUserFn = (
    ctx: AppsAppsListInstallationReposForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListInstallationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListInstallationsQuery;
    },
    AppsAppsListInstallationsResponse
  >;
  type AppsAppsListInstallationsFn = (
    ctx: AppsAppsListInstallationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListInstallationsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListInstallationsForAuthenticatedUserQuery;
    },
    AppsAppsListInstallationsForAuthenticatedUserResponse
  >;
  type AppsAppsListInstallationsForAuthenticatedUserFn = (
    ctx: AppsAppsListInstallationsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListPlansCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListPlansQuery;
    },
    AppsAppsListPlansResponse
  >;
  type AppsAppsListPlansFn = (
    ctx: AppsAppsListPlansCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListPlansStubbedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListPlansStubbedQuery;
    },
    AppsAppsListPlansStubbedResponse
  >;
  type AppsAppsListPlansStubbedFn = (
    ctx: AppsAppsListPlansStubbedCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListReposAccessibleToInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListReposAccessibleToInstallationQuery;
    },
    AppsAppsListReposAccessibleToInstallationResponse
  >;
  type AppsAppsListReposAccessibleToInstallationFn = (
    ctx: AppsAppsListReposAccessibleToInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListSubscriptionsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListSubscriptionsForAuthenticatedUserQuery;
    },
    AppsAppsListSubscriptionsForAuthenticatedUserResponse
  >;
  type AppsAppsListSubscriptionsForAuthenticatedUserFn = (
    ctx: AppsAppsListSubscriptionsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AppsAppsListSubscriptionsForAuthenticatedUserStubbedQuery;
    },
    AppsAppsListSubscriptionsForAuthenticatedUserStubbedResponse
  >;
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbedFn = (
    ctx: AppsAppsListSubscriptionsForAuthenticatedUserStubbedCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsRemoveRepoFromInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsRemoveRepoFromInstallationPath;
    },
    AppsAppsRemoveRepoFromInstallationResponse
  >;
  type AppsAppsRemoveRepoFromInstallationFn = (
    ctx: AppsAppsRemoveRepoFromInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsResetAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsResetAuthorizationPath;
    },
    AppsAppsResetAuthorizationResponse
  >;
  type AppsAppsResetAuthorizationFn = (
    ctx: AppsAppsResetAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsResetTokenCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsResetTokenPath;
      validatedBody: AppsAppsResetTokenBody;
    },
    AppsAppsResetTokenResponse
  >;
  type AppsAppsResetTokenFn = (
    ctx: AppsAppsResetTokenCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsRevokeAuthorizationForApplicationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsRevokeAuthorizationForApplicationPath;
    },
    AppsAppsRevokeAuthorizationForApplicationResponse
  >;
  type AppsAppsRevokeAuthorizationForApplicationFn = (
    ctx: AppsAppsRevokeAuthorizationForApplicationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsRevokeGrantForApplicationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsRevokeGrantForApplicationPath;
    },
    AppsAppsRevokeGrantForApplicationResponse
  >;
  type AppsAppsRevokeGrantForApplicationFn = (
    ctx: AppsAppsRevokeGrantForApplicationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsRevokeInstallationAccessTokenCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    AppsAppsRevokeInstallationAccessTokenResponse
  >;
  type AppsAppsRevokeInstallationAccessTokenFn = (
    ctx: AppsAppsRevokeInstallationAccessTokenCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsSuspendInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsSuspendInstallationPath;
    },
    AppsAppsSuspendInstallationResponse
  >;
  type AppsAppsSuspendInstallationFn = (
    ctx: AppsAppsSuspendInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsUnsuspendInstallationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: AppsAppsUnsuspendInstallationPath;
    },
    AppsAppsUnsuspendInstallationResponse
  >;
  type AppsAppsUnsuspendInstallationFn = (
    ctx: AppsAppsUnsuspendInstallationCtx,
    next: Next,
  ) => void | Promise<void>;
  type AppsAppsUpdateWebhookConfigForAppCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: AppsAppsUpdateWebhookConfigForAppBody;
    },
    AppsAppsUpdateWebhookConfigForAppResponse
  >;
  type AppsAppsUpdateWebhookConfigForAppFn = (
    ctx: AppsAppsUpdateWebhookConfigForAppCtx,
    next: Next,
  ) => void | Promise<void>;
  type AuditLogAuditLogGetAuditLogCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: AuditLogAuditLogGetAuditLogQuery;
      validatedParams: AuditLogAuditLogGetAuditLogPath;
    },
    AuditLogAuditLogGetAuditLogResponse
  >;
  type AuditLogAuditLogGetAuditLogFn = (
    ctx: AuditLogAuditLogGetAuditLogCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetGithubActionsBillingGheCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetGithubActionsBillingGhePath;
    },
    BillingBillingGetGithubActionsBillingGheResponse
  >;
  type BillingBillingGetGithubActionsBillingGheFn = (
    ctx: BillingBillingGetGithubActionsBillingGheCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetGithubActionsBillingOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetGithubActionsBillingOrgPath;
    },
    BillingBillingGetGithubActionsBillingOrgResponse
  >;
  type BillingBillingGetGithubActionsBillingOrgFn = (
    ctx: BillingBillingGetGithubActionsBillingOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetGithubActionsBillingUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetGithubActionsBillingUserPath;
    },
    BillingBillingGetGithubActionsBillingUserResponse
  >;
  type BillingBillingGetGithubActionsBillingUserFn = (
    ctx: BillingBillingGetGithubActionsBillingUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetGithubPackagesBillingGheCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetGithubPackagesBillingGhePath;
    },
    BillingBillingGetGithubPackagesBillingGheResponse
  >;
  type BillingBillingGetGithubPackagesBillingGheFn = (
    ctx: BillingBillingGetGithubPackagesBillingGheCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetGithubPackagesBillingOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetGithubPackagesBillingOrgPath;
    },
    BillingBillingGetGithubPackagesBillingOrgResponse
  >;
  type BillingBillingGetGithubPackagesBillingOrgFn = (
    ctx: BillingBillingGetGithubPackagesBillingOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetGithubPackagesBillingUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetGithubPackagesBillingUserPath;
    },
    BillingBillingGetGithubPackagesBillingUserResponse
  >;
  type BillingBillingGetGithubPackagesBillingUserFn = (
    ctx: BillingBillingGetGithubPackagesBillingUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetSharedStorageBillingGheCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetSharedStorageBillingGhePath;
    },
    BillingBillingGetSharedStorageBillingGheResponse
  >;
  type BillingBillingGetSharedStorageBillingGheFn = (
    ctx: BillingBillingGetSharedStorageBillingGheCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetSharedStorageBillingOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetSharedStorageBillingOrgPath;
    },
    BillingBillingGetSharedStorageBillingOrgResponse
  >;
  type BillingBillingGetSharedStorageBillingOrgFn = (
    ctx: BillingBillingGetSharedStorageBillingOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type BillingBillingGetSharedStorageBillingUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: BillingBillingGetSharedStorageBillingUserPath;
    },
    BillingBillingGetSharedStorageBillingUserResponse
  >;
  type BillingBillingGetSharedStorageBillingUserFn = (
    ctx: BillingBillingGetSharedStorageBillingUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksCreatePath;
      validatedBody: ChecksChecksCreateBody;
    },
    ChecksChecksCreateResponse
  >;
  type ChecksChecksCreateFn = (
    ctx: ChecksChecksCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksCreateSuiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksCreateSuitePath;
      validatedBody: ChecksChecksCreateSuiteBody;
    },
    ChecksChecksCreateSuiteResponse
  >;
  type ChecksChecksCreateSuiteFn = (
    ctx: ChecksChecksCreateSuiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksGetPath;
    },
    ChecksChecksGetResponse
  >;
  type ChecksChecksGetFn = (
    ctx: ChecksChecksGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksGetSuiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksGetSuitePath;
    },
    ChecksChecksGetSuiteResponse
  >;
  type ChecksChecksGetSuiteFn = (
    ctx: ChecksChecksGetSuiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksListAnnotationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ChecksChecksListAnnotationsQuery;
      validatedParams: ChecksChecksListAnnotationsPath;
    },
    ChecksChecksListAnnotationsResponse
  >;
  type ChecksChecksListAnnotationsFn = (
    ctx: ChecksChecksListAnnotationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksListForRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ChecksChecksListForRefQuery;
      validatedParams: ChecksChecksListForRefPath;
    },
    ChecksChecksListForRefResponse
  >;
  type ChecksChecksListForRefFn = (
    ctx: ChecksChecksListForRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksListForSuiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ChecksChecksListForSuiteQuery;
      validatedParams: ChecksChecksListForSuitePath;
    },
    ChecksChecksListForSuiteResponse
  >;
  type ChecksChecksListForSuiteFn = (
    ctx: ChecksChecksListForSuiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksListSuitesForRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ChecksChecksListSuitesForRefQuery;
      validatedParams: ChecksChecksListSuitesForRefPath;
    },
    ChecksChecksListSuitesForRefResponse
  >;
  type ChecksChecksListSuitesForRefFn = (
    ctx: ChecksChecksListSuitesForRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksRerequestSuiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksRerequestSuitePath;
    },
    ChecksChecksRerequestSuiteResponse
  >;
  type ChecksChecksRerequestSuiteFn = (
    ctx: ChecksChecksRerequestSuiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksSetSuitesPreferencesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksSetSuitesPreferencesPath;
      validatedBody: ChecksChecksSetSuitesPreferencesBody;
    },
    ChecksChecksSetSuitesPreferencesResponse
  >;
  type ChecksChecksSetSuitesPreferencesFn = (
    ctx: ChecksChecksSetSuitesPreferencesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ChecksChecksUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ChecksChecksUpdatePath;
      validatedBody: ChecksChecksUpdateBody;
    },
    ChecksChecksUpdateResponse
  >;
  type ChecksChecksUpdateFn = (
    ctx: ChecksChecksUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodeScanningCodeScanningGetAlertCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: CodeScanningCodeScanningGetAlertPath;
    },
    CodeScanningCodeScanningGetAlertResponse
  >;
  type CodeScanningCodeScanningGetAlertFn = (
    ctx: CodeScanningCodeScanningGetAlertCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodeScanningCodeScanningListAlertsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: CodeScanningCodeScanningListAlertsForRepoQuery;
      validatedParams: CodeScanningCodeScanningListAlertsForRepoPath;
    },
    CodeScanningCodeScanningListAlertsForRepoResponse
  >;
  type CodeScanningCodeScanningListAlertsForRepoFn = (
    ctx: CodeScanningCodeScanningListAlertsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodeScanningCodeScanningListRecentAnalysesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: CodeScanningCodeScanningListRecentAnalysesQuery;
      validatedParams: CodeScanningCodeScanningListRecentAnalysesPath;
    },
    CodeScanningCodeScanningListRecentAnalysesResponse
  >;
  type CodeScanningCodeScanningListRecentAnalysesFn = (
    ctx: CodeScanningCodeScanningListRecentAnalysesCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodeScanningCodeScanningUpdateAlertCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: CodeScanningCodeScanningUpdateAlertPath;
      validatedBody: CodeScanningCodeScanningUpdateAlertBody;
    },
    CodeScanningCodeScanningUpdateAlertResponse
  >;
  type CodeScanningCodeScanningUpdateAlertFn = (
    ctx: CodeScanningCodeScanningUpdateAlertCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodeScanningCodeScanningUploadSarifCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: CodeScanningCodeScanningUploadSarifPath;
      validatedBody: CodeScanningCodeScanningUploadSarifBody;
    },
    CodeScanningCodeScanningUploadSarifResponse
  >;
  type CodeScanningCodeScanningUploadSarifFn = (
    ctx: CodeScanningCodeScanningUploadSarifCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodesOfConductCodesOfConductGetAllCodesOfConductCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    CodesOfConductCodesOfConductGetAllCodesOfConductResponse
  >;
  type CodesOfConductCodesOfConductGetAllCodesOfConductFn = (
    ctx: CodesOfConductCodesOfConductGetAllCodesOfConductCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodesOfConductCodesOfConductGetConductCodeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: CodesOfConductCodesOfConductGetConductCodePath;
    },
    CodesOfConductCodesOfConductGetConductCodeResponse
  >;
  type CodesOfConductCodesOfConductGetConductCodeFn = (
    ctx: CodesOfConductCodesOfConductGetConductCodeCtx,
    next: Next,
  ) => void | Promise<void>;
  type CodesOfConductCodesOfConductGetForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: CodesOfConductCodesOfConductGetForRepoPath;
    },
    CodesOfConductCodesOfConductGetForRepoResponse
  >;
  type CodesOfConductCodesOfConductGetForRepoFn = (
    ctx: CodesOfConductCodesOfConductGetForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type CompasStructureCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    CompasStructureResponse
  >;
  type CompasStructureFn = (
    ctx: CompasStructureCtx,
    next: Next,
  ) => void | Promise<void>;
  type EmojisEmojisGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    EmojisEmojisGetResponse
  >;
  type EmojisEmojisGetFn = (
    ctx: EmojisEmojisGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePath;
        validatedBody: EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBody;
      },
      EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterpriseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
    },
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterpriseResponse
  >;
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterpriseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
    },
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterpriseResponse
  >;
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminDeleteUserFromEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterpriseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterprisePath;
    },
    EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterpriseResponse
  >;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupPath;
      },
      EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponse
    >;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserPath;
      },
      EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponse
    >;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedQuery: EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQuery;
        validatedParams: EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupPath;
        validatedBody: EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupBody;
      },
      EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupResponse
    >;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupFn = (
    ctx: EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserPath;
        validatedBody: EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserBody;
      },
      EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserResponse
    >;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserFn = (
    ctx: EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePath;
      },
      EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterprisePath;
      validatedBody: EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseBody;
    },
    EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseResponse
  >;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterprisePath;
        validatedBody: EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseBody;
      },
      EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseFn = (
    ctx: EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupPath;
        validatedBody: EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupBody;
      },
      EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponse
    >;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserPath;
        validatedBody: EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserBody;
      },
      EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponse
    >;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
        validatedBody: EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBody;
      },
      EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePath;
        validatedBody: EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseBody;
      },
      EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePath;
        validatedBody: EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseBody;
      },
      EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupPath;
        validatedBody: EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupBody;
      },
      EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupResponse
    >;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupFn = (
    ctx: EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserPath;
        validatedBody: EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserBody;
      },
      EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserResponse
    >;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserFn = (
    ctx: EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePath;
        validatedBody: EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBody;
      },
      EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse
    >;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseFn =
    (
      ctx: EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseCtx,
      next: Next,
    ) => void | Promise<void>;
  type GistsGistsCheckIsStarredCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsCheckIsStarredPath;
    },
    GistsGistsCheckIsStarredResponse
  >;
  type GistsGistsCheckIsStarredFn = (
    ctx: GistsGistsCheckIsStarredCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: GistsGistsCreateBody;
    },
    GistsGistsCreateResponse
  >;
  type GistsGistsCreateFn = (
    ctx: GistsGistsCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsCreateCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsCreateCommentPath;
      validatedBody: GistsGistsCreateCommentBody;
    },
    GistsGistsCreateCommentResponse
  >;
  type GistsGistsCreateCommentFn = (
    ctx: GistsGistsCreateCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsDeleteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsDeletePath;
    },
    GistsGistsDeleteResponse
  >;
  type GistsGistsDeleteFn = (
    ctx: GistsGistsDeleteCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsDeleteCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsDeleteCommentPath;
    },
    GistsGistsDeleteCommentResponse
  >;
  type GistsGistsDeleteCommentFn = (
    ctx: GistsGistsDeleteCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsForkCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsForkPath;
    },
    GistsGistsForkResponse
  >;
  type GistsGistsForkFn = (
    ctx: GistsGistsForkCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsGetPath;
    },
    GistsGistsGetResponse
  >;
  type GistsGistsGetFn = (
    ctx: GistsGistsGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsGetCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsGetCommentPath;
    },
    GistsGistsGetCommentResponse
  >;
  type GistsGistsGetCommentFn = (
    ctx: GistsGistsGetCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsGetRevisionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsGetRevisionPath;
    },
    GistsGistsGetRevisionResponse
  >;
  type GistsGistsGetRevisionFn = (
    ctx: GistsGistsGetRevisionCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListQuery;
    },
    GistsGistsListResponse
  >;
  type GistsGistsListFn = (
    ctx: GistsGistsListCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListCommentsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListCommentsQuery;
      validatedParams: GistsGistsListCommentsPath;
    },
    GistsGistsListCommentsResponse
  >;
  type GistsGistsListCommentsFn = (
    ctx: GistsGistsListCommentsCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListCommitsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListCommitsQuery;
      validatedParams: GistsGistsListCommitsPath;
    },
    GistsGistsListCommitsResponse
  >;
  type GistsGistsListCommitsFn = (
    ctx: GistsGistsListCommitsCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListForUserQuery;
      validatedParams: GistsGistsListForUserPath;
    },
    GistsGistsListForUserResponse
  >;
  type GistsGistsListForUserFn = (
    ctx: GistsGistsListForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListForksCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListForksQuery;
      validatedParams: GistsGistsListForksPath;
    },
    GistsGistsListForksResponse
  >;
  type GistsGistsListForksFn = (
    ctx: GistsGistsListForksCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListPublicCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListPublicQuery;
    },
    GistsGistsListPublicResponse
  >;
  type GistsGistsListPublicFn = (
    ctx: GistsGistsListPublicCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsListStarredCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GistsGistsListStarredQuery;
    },
    GistsGistsListStarredResponse
  >;
  type GistsGistsListStarredFn = (
    ctx: GistsGistsListStarredCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsStarCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsStarPath;
    },
    GistsGistsStarResponse
  >;
  type GistsGistsStarFn = (
    ctx: GistsGistsStarCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsUnstarCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsUnstarPath;
    },
    GistsGistsUnstarResponse
  >;
  type GistsGistsUnstarFn = (
    ctx: GistsGistsUnstarCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsUpdatePath;
      validatedBody: GistsGistsUpdateBody;
    },
    GistsGistsUpdateResponse
  >;
  type GistsGistsUpdateFn = (
    ctx: GistsGistsUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type GistsGistsUpdateCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GistsGistsUpdateCommentPath;
      validatedBody: GistsGistsUpdateCommentBody;
    },
    GistsGistsUpdateCommentResponse
  >;
  type GistsGistsUpdateCommentFn = (
    ctx: GistsGistsUpdateCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitCreateBlobCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitCreateBlobPath;
      validatedBody: GitGitCreateBlobBody;
    },
    GitGitCreateBlobResponse
  >;
  type GitGitCreateBlobFn = (
    ctx: GitGitCreateBlobCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitCreateCommitCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitCreateCommitPath;
      validatedBody: GitGitCreateCommitBody;
    },
    GitGitCreateCommitResponse
  >;
  type GitGitCreateCommitFn = (
    ctx: GitGitCreateCommitCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitCreateRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitCreateRefPath;
      validatedBody: GitGitCreateRefBody;
    },
    GitGitCreateRefResponse
  >;
  type GitGitCreateRefFn = (
    ctx: GitGitCreateRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitCreateTagCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitCreateTagPath;
      validatedBody: GitGitCreateTagBody;
    },
    GitGitCreateTagResponse
  >;
  type GitGitCreateTagFn = (
    ctx: GitGitCreateTagCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitCreateTreeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitCreateTreePath;
      validatedBody: GitGitCreateTreeBody;
    },
    GitGitCreateTreeResponse
  >;
  type GitGitCreateTreeFn = (
    ctx: GitGitCreateTreeCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitDeleteRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitDeleteRefPath;
    },
    GitGitDeleteRefResponse
  >;
  type GitGitDeleteRefFn = (
    ctx: GitGitDeleteRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitGetBlobCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitGetBlobPath;
    },
    GitGitGetBlobResponse
  >;
  type GitGitGetBlobFn = (
    ctx: GitGitGetBlobCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitGetCommitCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitGetCommitPath;
    },
    GitGitGetCommitResponse
  >;
  type GitGitGetCommitFn = (
    ctx: GitGitGetCommitCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitGetRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitGetRefPath;
    },
    GitGitGetRefResponse
  >;
  type GitGitGetRefFn = (
    ctx: GitGitGetRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitGetTagCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitGetTagPath;
    },
    GitGitGetTagResponse
  >;
  type GitGitGetTagFn = (
    ctx: GitGitGetTagCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitGetTreeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GitGitGetTreeQuery;
      validatedParams: GitGitGetTreePath;
    },
    GitGitGetTreeResponse
  >;
  type GitGitGetTreeFn = (
    ctx: GitGitGetTreeCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitListMatchingRefsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GitGitListMatchingRefsQuery;
      validatedParams: GitGitListMatchingRefsPath;
    },
    GitGitListMatchingRefsResponse
  >;
  type GitGitListMatchingRefsFn = (
    ctx: GitGitListMatchingRefsCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitGitUpdateRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitGitUpdateRefPath;
      validatedBody: GitGitUpdateRefBody;
    },
    GitGitUpdateRefResponse
  >;
  type GitGitUpdateRefFn = (
    ctx: GitGitUpdateRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitignoreGitignoreGetAllTemplatesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    GitignoreGitignoreGetAllTemplatesResponse
  >;
  type GitignoreGitignoreGetAllTemplatesFn = (
    ctx: GitignoreGitignoreGetAllTemplatesCtx,
    next: Next,
  ) => void | Promise<void>;
  type GitignoreGitignoreGetTemplateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GitignoreGitignoreGetTemplatePath;
    },
    GitignoreGitignoreGetTemplateResponse
  >;
  type GitignoreGitignoreGetTemplateFn = (
    ctx: GitignoreGitignoreGetTemplateCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupFullRouteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: GroupFullRouteParams;
      validatedBody: GroupFullRouteBody;
    },
    GroupFullRouteResponse
  >;
  type GroupFullRouteFn = (
    ctx: GroupFullRouteCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupRefRouteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: GroupRefRouteQuery;
      validatedParams: GroupRefRouteParams;
    },
    GroupRefRouteResponse
  >;
  type GroupRefRouteFn = (
    ctx: GroupRefRouteCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupUploadCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedFiles: GroupUploadFiles;
    },
    GroupUploadResponse
  >;
  type GroupUploadFn = (
    ctx: GroupUploadCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsGetRestrictionsForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: InteractionsInteractionsGetRestrictionsForOrgPath;
    },
    InteractionsInteractionsGetRestrictionsForOrgResponse
  >;
  type InteractionsInteractionsGetRestrictionsForOrgFn = (
    ctx: InteractionsInteractionsGetRestrictionsForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsGetRestrictionsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: InteractionsInteractionsGetRestrictionsForRepoPath;
    },
    InteractionsInteractionsGetRestrictionsForRepoResponse
  >;
  type InteractionsInteractionsGetRestrictionsForRepoFn = (
    ctx: InteractionsInteractionsGetRestrictionsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsGetRestrictionsForYourPublicReposCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    InteractionsInteractionsGetRestrictionsForYourPublicReposResponse
  >;
  type InteractionsInteractionsGetRestrictionsForYourPublicReposFn = (
    ctx: InteractionsInteractionsGetRestrictionsForYourPublicReposCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsRemoveRestrictionsForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: InteractionsInteractionsRemoveRestrictionsForOrgPath;
    },
    InteractionsInteractionsRemoveRestrictionsForOrgResponse
  >;
  type InteractionsInteractionsRemoveRestrictionsForOrgFn = (
    ctx: InteractionsInteractionsRemoveRestrictionsForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsRemoveRestrictionsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: InteractionsInteractionsRemoveRestrictionsForRepoPath;
    },
    InteractionsInteractionsRemoveRestrictionsForRepoResponse
  >;
  type InteractionsInteractionsRemoveRestrictionsForRepoFn = (
    ctx: InteractionsInteractionsRemoveRestrictionsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsRemoveRestrictionsForYourPublicReposCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
      },
      InteractionsInteractionsRemoveRestrictionsForYourPublicReposResponse
    >;
  type InteractionsInteractionsRemoveRestrictionsForYourPublicReposFn = (
    ctx: InteractionsInteractionsRemoveRestrictionsForYourPublicReposCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsSetRestrictionsForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: InteractionsInteractionsSetRestrictionsForOrgPath;
      validatedBody: InteractionsInteractionsSetRestrictionsForOrgBody;
    },
    InteractionsInteractionsSetRestrictionsForOrgResponse
  >;
  type InteractionsInteractionsSetRestrictionsForOrgFn = (
    ctx: InteractionsInteractionsSetRestrictionsForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsSetRestrictionsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: InteractionsInteractionsSetRestrictionsForRepoPath;
      validatedBody: InteractionsInteractionsSetRestrictionsForRepoBody;
    },
    InteractionsInteractionsSetRestrictionsForRepoResponse
  >;
  type InteractionsInteractionsSetRestrictionsForRepoFn = (
    ctx: InteractionsInteractionsSetRestrictionsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type InteractionsInteractionsSetRestrictionsForYourPublicReposCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: InteractionsInteractionsSetRestrictionsForYourPublicReposBody;
    },
    InteractionsInteractionsSetRestrictionsForYourPublicReposResponse
  >;
  type InteractionsInteractionsSetRestrictionsForYourPublicReposFn = (
    ctx: InteractionsInteractionsSetRestrictionsForYourPublicReposCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesAddAssigneesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesAddAssigneesPath;
      validatedBody: IssuesIssuesAddAssigneesBody;
    },
    IssuesIssuesAddAssigneesResponse
  >;
  type IssuesIssuesAddAssigneesFn = (
    ctx: IssuesIssuesAddAssigneesCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesAddLabelsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesAddLabelsPath;
      validatedBody: IssuesIssuesAddLabelsBody;
    },
    IssuesIssuesAddLabelsResponse
  >;
  type IssuesIssuesAddLabelsFn = (
    ctx: IssuesIssuesAddLabelsCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesCheckUserCanBeAssignedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesCheckUserCanBeAssignedPath;
    },
    IssuesIssuesCheckUserCanBeAssignedResponse
  >;
  type IssuesIssuesCheckUserCanBeAssignedFn = (
    ctx: IssuesIssuesCheckUserCanBeAssignedCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesCreatePath;
      validatedBody: IssuesIssuesCreateBody;
    },
    IssuesIssuesCreateResponse
  >;
  type IssuesIssuesCreateFn = (
    ctx: IssuesIssuesCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesCreateCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesCreateCommentPath;
      validatedBody: IssuesIssuesCreateCommentBody;
    },
    IssuesIssuesCreateCommentResponse
  >;
  type IssuesIssuesCreateCommentFn = (
    ctx: IssuesIssuesCreateCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesCreateLabelCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesCreateLabelPath;
      validatedBody: IssuesIssuesCreateLabelBody;
    },
    IssuesIssuesCreateLabelResponse
  >;
  type IssuesIssuesCreateLabelFn = (
    ctx: IssuesIssuesCreateLabelCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesCreateMilestoneCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesCreateMilestonePath;
      validatedBody: IssuesIssuesCreateMilestoneBody;
    },
    IssuesIssuesCreateMilestoneResponse
  >;
  type IssuesIssuesCreateMilestoneFn = (
    ctx: IssuesIssuesCreateMilestoneCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesDeleteCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesDeleteCommentPath;
    },
    IssuesIssuesDeleteCommentResponse
  >;
  type IssuesIssuesDeleteCommentFn = (
    ctx: IssuesIssuesDeleteCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesDeleteLabelCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesDeleteLabelPath;
    },
    IssuesIssuesDeleteLabelResponse
  >;
  type IssuesIssuesDeleteLabelFn = (
    ctx: IssuesIssuesDeleteLabelCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesDeleteMilestoneCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesDeleteMilestonePath;
    },
    IssuesIssuesDeleteMilestoneResponse
  >;
  type IssuesIssuesDeleteMilestoneFn = (
    ctx: IssuesIssuesDeleteMilestoneCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesGetPath;
    },
    IssuesIssuesGetResponse
  >;
  type IssuesIssuesGetFn = (
    ctx: IssuesIssuesGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesGetCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesGetCommentPath;
    },
    IssuesIssuesGetCommentResponse
  >;
  type IssuesIssuesGetCommentFn = (
    ctx: IssuesIssuesGetCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesGetEventCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesGetEventPath;
    },
    IssuesIssuesGetEventResponse
  >;
  type IssuesIssuesGetEventFn = (
    ctx: IssuesIssuesGetEventCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesGetLabelCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesGetLabelPath;
    },
    IssuesIssuesGetLabelResponse
  >;
  type IssuesIssuesGetLabelFn = (
    ctx: IssuesIssuesGetLabelCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesGetMilestoneCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesGetMilestonePath;
    },
    IssuesIssuesGetMilestoneResponse
  >;
  type IssuesIssuesGetMilestoneFn = (
    ctx: IssuesIssuesGetMilestoneCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListQuery;
    },
    IssuesIssuesListResponse
  >;
  type IssuesIssuesListFn = (
    ctx: IssuesIssuesListCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListAssigneesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListAssigneesQuery;
      validatedParams: IssuesIssuesListAssigneesPath;
    },
    IssuesIssuesListAssigneesResponse
  >;
  type IssuesIssuesListAssigneesFn = (
    ctx: IssuesIssuesListAssigneesCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListCommentsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListCommentsQuery;
      validatedParams: IssuesIssuesListCommentsPath;
    },
    IssuesIssuesListCommentsResponse
  >;
  type IssuesIssuesListCommentsFn = (
    ctx: IssuesIssuesListCommentsCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListCommentsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListCommentsForRepoQuery;
      validatedParams: IssuesIssuesListCommentsForRepoPath;
    },
    IssuesIssuesListCommentsForRepoResponse
  >;
  type IssuesIssuesListCommentsForRepoFn = (
    ctx: IssuesIssuesListCommentsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListEventsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListEventsQuery;
      validatedParams: IssuesIssuesListEventsPath;
    },
    IssuesIssuesListEventsResponse
  >;
  type IssuesIssuesListEventsFn = (
    ctx: IssuesIssuesListEventsCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListEventsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListEventsForRepoQuery;
      validatedParams: IssuesIssuesListEventsForRepoPath;
    },
    IssuesIssuesListEventsForRepoResponse
  >;
  type IssuesIssuesListEventsForRepoFn = (
    ctx: IssuesIssuesListEventsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListEventsForTimelineCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListEventsForTimelineQuery;
      validatedParams: IssuesIssuesListEventsForTimelinePath;
    },
    IssuesIssuesListEventsForTimelineResponse
  >;
  type IssuesIssuesListEventsForTimelineFn = (
    ctx: IssuesIssuesListEventsForTimelineCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListForAuthenticatedUserQuery;
    },
    IssuesIssuesListForAuthenticatedUserResponse
  >;
  type IssuesIssuesListForAuthenticatedUserFn = (
    ctx: IssuesIssuesListForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListForOrgQuery;
      validatedParams: IssuesIssuesListForOrgPath;
    },
    IssuesIssuesListForOrgResponse
  >;
  type IssuesIssuesListForOrgFn = (
    ctx: IssuesIssuesListForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListForRepoQuery;
      validatedParams: IssuesIssuesListForRepoPath;
    },
    IssuesIssuesListForRepoResponse
  >;
  type IssuesIssuesListForRepoFn = (
    ctx: IssuesIssuesListForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListLabelsForMilestoneCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListLabelsForMilestoneQuery;
      validatedParams: IssuesIssuesListLabelsForMilestonePath;
    },
    IssuesIssuesListLabelsForMilestoneResponse
  >;
  type IssuesIssuesListLabelsForMilestoneFn = (
    ctx: IssuesIssuesListLabelsForMilestoneCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListLabelsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListLabelsForRepoQuery;
      validatedParams: IssuesIssuesListLabelsForRepoPath;
    },
    IssuesIssuesListLabelsForRepoResponse
  >;
  type IssuesIssuesListLabelsForRepoFn = (
    ctx: IssuesIssuesListLabelsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListLabelsOnIssueCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListLabelsOnIssueQuery;
      validatedParams: IssuesIssuesListLabelsOnIssuePath;
    },
    IssuesIssuesListLabelsOnIssueResponse
  >;
  type IssuesIssuesListLabelsOnIssueFn = (
    ctx: IssuesIssuesListLabelsOnIssueCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesListMilestonesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: IssuesIssuesListMilestonesQuery;
      validatedParams: IssuesIssuesListMilestonesPath;
    },
    IssuesIssuesListMilestonesResponse
  >;
  type IssuesIssuesListMilestonesFn = (
    ctx: IssuesIssuesListMilestonesCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesLockCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesLockPath;
      validatedBody: IssuesIssuesLockBody;
    },
    IssuesIssuesLockResponse
  >;
  type IssuesIssuesLockFn = (
    ctx: IssuesIssuesLockCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesRemoveAllLabelsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesRemoveAllLabelsPath;
    },
    IssuesIssuesRemoveAllLabelsResponse
  >;
  type IssuesIssuesRemoveAllLabelsFn = (
    ctx: IssuesIssuesRemoveAllLabelsCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesRemoveAssigneesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesRemoveAssigneesPath;
      validatedBody: IssuesIssuesRemoveAssigneesBody;
    },
    IssuesIssuesRemoveAssigneesResponse
  >;
  type IssuesIssuesRemoveAssigneesFn = (
    ctx: IssuesIssuesRemoveAssigneesCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesRemoveLabelCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesRemoveLabelPath;
    },
    IssuesIssuesRemoveLabelResponse
  >;
  type IssuesIssuesRemoveLabelFn = (
    ctx: IssuesIssuesRemoveLabelCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesSetLabelsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesSetLabelsPath;
      validatedBody: IssuesIssuesSetLabelsBody;
    },
    IssuesIssuesSetLabelsResponse
  >;
  type IssuesIssuesSetLabelsFn = (
    ctx: IssuesIssuesSetLabelsCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesUnlockCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesUnlockPath;
    },
    IssuesIssuesUnlockResponse
  >;
  type IssuesIssuesUnlockFn = (
    ctx: IssuesIssuesUnlockCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesUpdatePath;
      validatedBody: IssuesIssuesUpdateBody;
    },
    IssuesIssuesUpdateResponse
  >;
  type IssuesIssuesUpdateFn = (
    ctx: IssuesIssuesUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesUpdateCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesUpdateCommentPath;
      validatedBody: IssuesIssuesUpdateCommentBody;
    },
    IssuesIssuesUpdateCommentResponse
  >;
  type IssuesIssuesUpdateCommentFn = (
    ctx: IssuesIssuesUpdateCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesUpdateLabelCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesUpdateLabelPath;
      validatedBody: IssuesIssuesUpdateLabelBody;
    },
    IssuesIssuesUpdateLabelResponse
  >;
  type IssuesIssuesUpdateLabelFn = (
    ctx: IssuesIssuesUpdateLabelCtx,
    next: Next,
  ) => void | Promise<void>;
  type IssuesIssuesUpdateMilestoneCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: IssuesIssuesUpdateMilestonePath;
      validatedBody: IssuesIssuesUpdateMilestoneBody;
    },
    IssuesIssuesUpdateMilestoneResponse
  >;
  type IssuesIssuesUpdateMilestoneFn = (
    ctx: IssuesIssuesUpdateMilestoneCtx,
    next: Next,
  ) => void | Promise<void>;
  type LicensesLicensesGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: LicensesLicensesGetPath;
    },
    LicensesLicensesGetResponse
  >;
  type LicensesLicensesGetFn = (
    ctx: LicensesLicensesGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type LicensesLicensesGetAllCommonlyUsedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: LicensesLicensesGetAllCommonlyUsedQuery;
    },
    LicensesLicensesGetAllCommonlyUsedResponse
  >;
  type LicensesLicensesGetAllCommonlyUsedFn = (
    ctx: LicensesLicensesGetAllCommonlyUsedCtx,
    next: Next,
  ) => void | Promise<void>;
  type LicensesLicensesGetForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: LicensesLicensesGetForRepoPath;
    },
    LicensesLicensesGetForRepoResponse
  >;
  type LicensesLicensesGetForRepoFn = (
    ctx: LicensesLicensesGetForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type MarkdownMarkdownRenderCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: MarkdownMarkdownRenderBody;
    },
    MarkdownMarkdownRenderResponse
  >;
  type MarkdownMarkdownRenderFn = (
    ctx: MarkdownMarkdownRenderCtx,
    next: Next,
  ) => void | Promise<void>;
  type MarkdownMarkdownRenderRawCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    MarkdownMarkdownRenderRawResponse
  >;
  type MarkdownMarkdownRenderRawFn = (
    ctx: MarkdownMarkdownRenderRawCtx,
    next: Next,
  ) => void | Promise<void>;
  type MetaMetaGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    MetaMetaGetResponse
  >;
  type MetaMetaGetFn = (
    ctx: MetaMetaGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type MetaMetaGetOctocatCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MetaMetaGetOctocatQuery;
    },
    MetaMetaGetOctocatResponse
  >;
  type MetaMetaGetOctocatFn = (
    ctx: MetaMetaGetOctocatCtx,
    next: Next,
  ) => void | Promise<void>;
  type MetaMetaGetZenCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    MetaMetaGetZenResponse
  >;
  type MetaMetaGetZenFn = (
    ctx: MetaMetaGetZenCtx,
    next: Next,
  ) => void | Promise<void>;
  type MetaMetaRootCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    MetaMetaRootResponse
  >;
  type MetaMetaRootFn = (
    ctx: MetaMetaRootCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsCancelImportCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsCancelImportPath;
    },
    MigrationsMigrationsCancelImportResponse
  >;
  type MigrationsMigrationsCancelImportFn = (
    ctx: MigrationsMigrationsCancelImportCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
    },
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserResponse
  >;
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUserFn = (
    ctx: MigrationsMigrationsDeleteArchiveForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsDeleteArchiveForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsDeleteArchiveForOrgPath;
    },
    MigrationsMigrationsDeleteArchiveForOrgResponse
  >;
  type MigrationsMigrationsDeleteArchiveForOrgFn = (
    ctx: MigrationsMigrationsDeleteArchiveForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsDownloadArchiveForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsDownloadArchiveForOrgPath;
    },
    MigrationsMigrationsDownloadArchiveForOrgResponse
  >;
  type MigrationsMigrationsDownloadArchiveForOrgFn = (
    ctx: MigrationsMigrationsDownloadArchiveForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsGetArchiveForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsGetArchiveForAuthenticatedUserPath;
    },
    MigrationsMigrationsGetArchiveForAuthenticatedUserResponse
  >;
  type MigrationsMigrationsGetArchiveForAuthenticatedUserFn = (
    ctx: MigrationsMigrationsGetArchiveForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsGetCommitAuthorsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MigrationsMigrationsGetCommitAuthorsQuery;
      validatedParams: MigrationsMigrationsGetCommitAuthorsPath;
    },
    MigrationsMigrationsGetCommitAuthorsResponse
  >;
  type MigrationsMigrationsGetCommitAuthorsFn = (
    ctx: MigrationsMigrationsGetCommitAuthorsCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsGetImportStatusCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsGetImportStatusPath;
    },
    MigrationsMigrationsGetImportStatusResponse
  >;
  type MigrationsMigrationsGetImportStatusFn = (
    ctx: MigrationsMigrationsGetImportStatusCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsGetLargeFilesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsGetLargeFilesPath;
    },
    MigrationsMigrationsGetLargeFilesResponse
  >;
  type MigrationsMigrationsGetLargeFilesFn = (
    ctx: MigrationsMigrationsGetLargeFilesCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsGetStatusForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MigrationsMigrationsGetStatusForAuthenticatedUserQuery;
      validatedParams: MigrationsMigrationsGetStatusForAuthenticatedUserPath;
    },
    MigrationsMigrationsGetStatusForAuthenticatedUserResponse
  >;
  type MigrationsMigrationsGetStatusForAuthenticatedUserFn = (
    ctx: MigrationsMigrationsGetStatusForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsGetStatusForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsGetStatusForOrgPath;
    },
    MigrationsMigrationsGetStatusForOrgResponse
  >;
  type MigrationsMigrationsGetStatusForOrgFn = (
    ctx: MigrationsMigrationsGetStatusForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsListForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MigrationsMigrationsListForAuthenticatedUserQuery;
    },
    MigrationsMigrationsListForAuthenticatedUserResponse
  >;
  type MigrationsMigrationsListForAuthenticatedUserFn = (
    ctx: MigrationsMigrationsListForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsListForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MigrationsMigrationsListForOrgQuery;
      validatedParams: MigrationsMigrationsListForOrgPath;
    },
    MigrationsMigrationsListForOrgResponse
  >;
  type MigrationsMigrationsListForOrgFn = (
    ctx: MigrationsMigrationsListForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsListReposForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MigrationsMigrationsListReposForOrgQuery;
      validatedParams: MigrationsMigrationsListReposForOrgPath;
    },
    MigrationsMigrationsListReposForOrgResponse
  >;
  type MigrationsMigrationsListReposForOrgFn = (
    ctx: MigrationsMigrationsListReposForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsListReposForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: MigrationsMigrationsListReposForUserQuery;
      validatedParams: MigrationsMigrationsListReposForUserPath;
    },
    MigrationsMigrationsListReposForUserResponse
  >;
  type MigrationsMigrationsListReposForUserFn = (
    ctx: MigrationsMigrationsListReposForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsMapCommitAuthorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsMapCommitAuthorPath;
      validatedBody: MigrationsMigrationsMapCommitAuthorBody;
    },
    MigrationsMigrationsMapCommitAuthorResponse
  >;
  type MigrationsMigrationsMapCommitAuthorFn = (
    ctx: MigrationsMigrationsMapCommitAuthorCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsSetLfsPreferenceCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsSetLfsPreferencePath;
      validatedBody: MigrationsMigrationsSetLfsPreferenceBody;
    },
    MigrationsMigrationsSetLfsPreferenceResponse
  >;
  type MigrationsMigrationsSetLfsPreferenceFn = (
    ctx: MigrationsMigrationsSetLfsPreferenceCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsStartForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: MigrationsMigrationsStartForAuthenticatedUserBody;
    },
    MigrationsMigrationsStartForAuthenticatedUserResponse
  >;
  type MigrationsMigrationsStartForAuthenticatedUserFn = (
    ctx: MigrationsMigrationsStartForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsStartForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsStartForOrgPath;
      validatedBody: MigrationsMigrationsStartForOrgBody;
    },
    MigrationsMigrationsStartForOrgResponse
  >;
  type MigrationsMigrationsStartForOrgFn = (
    ctx: MigrationsMigrationsStartForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsStartImportCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsStartImportPath;
      validatedBody: MigrationsMigrationsStartImportBody;
    },
    MigrationsMigrationsStartImportResponse
  >;
  type MigrationsMigrationsStartImportFn = (
    ctx: MigrationsMigrationsStartImportCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsUnlockRepoForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsUnlockRepoForAuthenticatedUserPath;
    },
    MigrationsMigrationsUnlockRepoForAuthenticatedUserResponse
  >;
  type MigrationsMigrationsUnlockRepoForAuthenticatedUserFn = (
    ctx: MigrationsMigrationsUnlockRepoForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsUnlockRepoForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsUnlockRepoForOrgPath;
    },
    MigrationsMigrationsUnlockRepoForOrgResponse
  >;
  type MigrationsMigrationsUnlockRepoForOrgFn = (
    ctx: MigrationsMigrationsUnlockRepoForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type MigrationsMigrationsUpdateImportCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: MigrationsMigrationsUpdateImportPath;
      validatedBody: MigrationsMigrationsUpdateImportBody;
    },
    MigrationsMigrationsUpdateImportResponse
  >;
  type MigrationsMigrationsUpdateImportFn = (
    ctx: MigrationsMigrationsUpdateImportCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: OauthAuthorizationsOauthAuthorizationsCreateAuthorizationBody;
    },
    OauthAuthorizationsOauthAuthorizationsCreateAuthorizationResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorizationFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsCreateAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath;
    },
    OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsDeleteGrantCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OauthAuthorizationsOauthAuthorizationsDeleteGrantPath;
    },
    OauthAuthorizationsOauthAuthorizationsDeleteGrantResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsDeleteGrantFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsDeleteGrantCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OauthAuthorizationsOauthAuthorizationsGetAuthorizationPath;
    },
    OauthAuthorizationsOauthAuthorizationsGetAuthorizationResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorizationFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsGetAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsGetGrantCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OauthAuthorizationsOauthAuthorizationsGetGrantPath;
    },
    OauthAuthorizationsOauthAuthorizationsGetGrantResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsGetGrantFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsGetGrantCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppPath;
        validatedBody: OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppBody;
      },
      OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppResponse
    >;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppFn =
    (
      ctx: OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppCtx,
      next: Next,
    ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCtx =
    Context<
      {},
      {
        event: InsightEvent;
        log: Logger;
        validatedParams: OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPath;
        validatedBody: OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBody;
      },
      OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponse
    >;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintFn =
    (
      ctx: OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintCtx,
      next: Next,
    ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OauthAuthorizationsOauthAuthorizationsListAuthorizationsQuery;
    },
    OauthAuthorizationsOauthAuthorizationsListAuthorizationsResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizationsFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsListAuthorizationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsListGrantsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OauthAuthorizationsOauthAuthorizationsListGrantsQuery;
    },
    OauthAuthorizationsOauthAuthorizationsListGrantsResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsListGrantsFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsListGrantsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationPath;
      validatedBody: OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationBody;
    },
    OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationResponse
  >;
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationFn = (
    ctx: OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsBlockUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsBlockUserPath;
    },
    OrgsOrgsBlockUserResponse
  >;
  type OrgsOrgsBlockUserFn = (
    ctx: OrgsOrgsBlockUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsCheckBlockedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsCheckBlockedUserPath;
    },
    OrgsOrgsCheckBlockedUserResponse
  >;
  type OrgsOrgsCheckBlockedUserFn = (
    ctx: OrgsOrgsCheckBlockedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsCheckMembershipForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsCheckMembershipForUserPath;
    },
    OrgsOrgsCheckMembershipForUserResponse
  >;
  type OrgsOrgsCheckMembershipForUserFn = (
    ctx: OrgsOrgsCheckMembershipForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsCheckPublicMembershipForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsCheckPublicMembershipForUserPath;
    },
    OrgsOrgsCheckPublicMembershipForUserResponse
  >;
  type OrgsOrgsCheckPublicMembershipForUserFn = (
    ctx: OrgsOrgsCheckPublicMembershipForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsConvertMemberToOutsideCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsConvertMemberToOutsideCollaboratorPath;
    },
    OrgsOrgsConvertMemberToOutsideCollaboratorResponse
  >;
  type OrgsOrgsConvertMemberToOutsideCollaboratorFn = (
    ctx: OrgsOrgsConvertMemberToOutsideCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsCreateInvitationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsCreateInvitationPath;
      validatedBody: OrgsOrgsCreateInvitationBody;
    },
    OrgsOrgsCreateInvitationResponse
  >;
  type OrgsOrgsCreateInvitationFn = (
    ctx: OrgsOrgsCreateInvitationCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsCreateWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsCreateWebhookPath;
      validatedBody: OrgsOrgsCreateWebhookBody;
    },
    OrgsOrgsCreateWebhookResponse
  >;
  type OrgsOrgsCreateWebhookFn = (
    ctx: OrgsOrgsCreateWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsDeleteWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsDeleteWebhookPath;
    },
    OrgsOrgsDeleteWebhookResponse
  >;
  type OrgsOrgsDeleteWebhookFn = (
    ctx: OrgsOrgsDeleteWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsGetPath;
    },
    OrgsOrgsGetResponse
  >;
  type OrgsOrgsGetFn = (
    ctx: OrgsOrgsGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsGetAuditLogCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsGetAuditLogQuery;
      validatedParams: OrgsOrgsGetAuditLogPath;
    },
    OrgsOrgsGetAuditLogResponse
  >;
  type OrgsOrgsGetAuditLogFn = (
    ctx: OrgsOrgsGetAuditLogCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsGetMembershipForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsGetMembershipForAuthenticatedUserPath;
    },
    OrgsOrgsGetMembershipForAuthenticatedUserResponse
  >;
  type OrgsOrgsGetMembershipForAuthenticatedUserFn = (
    ctx: OrgsOrgsGetMembershipForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsGetMembershipForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsGetMembershipForUserPath;
    },
    OrgsOrgsGetMembershipForUserResponse
  >;
  type OrgsOrgsGetMembershipForUserFn = (
    ctx: OrgsOrgsGetMembershipForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsGetWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsGetWebhookPath;
    },
    OrgsOrgsGetWebhookResponse
  >;
  type OrgsOrgsGetWebhookFn = (
    ctx: OrgsOrgsGetWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsGetWebhookConfigForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsGetWebhookConfigForOrgPath;
    },
    OrgsOrgsGetWebhookConfigForOrgResponse
  >;
  type OrgsOrgsGetWebhookConfigForOrgFn = (
    ctx: OrgsOrgsGetWebhookConfigForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListQuery;
    },
    OrgsOrgsListResponse
  >;
  type OrgsOrgsListFn = (
    ctx: OrgsOrgsListCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListAppInstallationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListAppInstallationsQuery;
      validatedParams: OrgsOrgsListAppInstallationsPath;
    },
    OrgsOrgsListAppInstallationsResponse
  >;
  type OrgsOrgsListAppInstallationsFn = (
    ctx: OrgsOrgsListAppInstallationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListBlockedUsersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsListBlockedUsersPath;
    },
    OrgsOrgsListBlockedUsersResponse
  >;
  type OrgsOrgsListBlockedUsersFn = (
    ctx: OrgsOrgsListBlockedUsersCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListForAuthenticatedUserQuery;
    },
    OrgsOrgsListForAuthenticatedUserResponse
  >;
  type OrgsOrgsListForAuthenticatedUserFn = (
    ctx: OrgsOrgsListForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListForUserQuery;
      validatedParams: OrgsOrgsListForUserPath;
    },
    OrgsOrgsListForUserResponse
  >;
  type OrgsOrgsListForUserFn = (
    ctx: OrgsOrgsListForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListInvitationTeamsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListInvitationTeamsQuery;
      validatedParams: OrgsOrgsListInvitationTeamsPath;
    },
    OrgsOrgsListInvitationTeamsResponse
  >;
  type OrgsOrgsListInvitationTeamsFn = (
    ctx: OrgsOrgsListInvitationTeamsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListMembersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListMembersQuery;
      validatedParams: OrgsOrgsListMembersPath;
    },
    OrgsOrgsListMembersResponse
  >;
  type OrgsOrgsListMembersFn = (
    ctx: OrgsOrgsListMembersCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListMembershipsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListMembershipsForAuthenticatedUserQuery;
    },
    OrgsOrgsListMembershipsForAuthenticatedUserResponse
  >;
  type OrgsOrgsListMembershipsForAuthenticatedUserFn = (
    ctx: OrgsOrgsListMembershipsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListOutsideCollaboratorsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListOutsideCollaboratorsQuery;
      validatedParams: OrgsOrgsListOutsideCollaboratorsPath;
    },
    OrgsOrgsListOutsideCollaboratorsResponse
  >;
  type OrgsOrgsListOutsideCollaboratorsFn = (
    ctx: OrgsOrgsListOutsideCollaboratorsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListPendingInvitationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListPendingInvitationsQuery;
      validatedParams: OrgsOrgsListPendingInvitationsPath;
    },
    OrgsOrgsListPendingInvitationsResponse
  >;
  type OrgsOrgsListPendingInvitationsFn = (
    ctx: OrgsOrgsListPendingInvitationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListPublicMembersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListPublicMembersQuery;
      validatedParams: OrgsOrgsListPublicMembersPath;
    },
    OrgsOrgsListPublicMembersResponse
  >;
  type OrgsOrgsListPublicMembersFn = (
    ctx: OrgsOrgsListPublicMembersCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListSamlSsoAuthorizationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsListSamlSsoAuthorizationsPath;
    },
    OrgsOrgsListSamlSsoAuthorizationsResponse
  >;
  type OrgsOrgsListSamlSsoAuthorizationsFn = (
    ctx: OrgsOrgsListSamlSsoAuthorizationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsListWebhooksCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: OrgsOrgsListWebhooksQuery;
      validatedParams: OrgsOrgsListWebhooksPath;
    },
    OrgsOrgsListWebhooksResponse
  >;
  type OrgsOrgsListWebhooksFn = (
    ctx: OrgsOrgsListWebhooksCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsPingWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsPingWebhookPath;
    },
    OrgsOrgsPingWebhookResponse
  >;
  type OrgsOrgsPingWebhookFn = (
    ctx: OrgsOrgsPingWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsRemoveMemberCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsRemoveMemberPath;
    },
    OrgsOrgsRemoveMemberResponse
  >;
  type OrgsOrgsRemoveMemberFn = (
    ctx: OrgsOrgsRemoveMemberCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsRemoveMembershipForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsRemoveMembershipForUserPath;
    },
    OrgsOrgsRemoveMembershipForUserResponse
  >;
  type OrgsOrgsRemoveMembershipForUserFn = (
    ctx: OrgsOrgsRemoveMembershipForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsRemoveOutsideCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsRemoveOutsideCollaboratorPath;
    },
    OrgsOrgsRemoveOutsideCollaboratorResponse
  >;
  type OrgsOrgsRemoveOutsideCollaboratorFn = (
    ctx: OrgsOrgsRemoveOutsideCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsRemovePublicMembershipForAuthenticatedUserPath;
    },
    OrgsOrgsRemovePublicMembershipForAuthenticatedUserResponse
  >;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUserFn = (
    ctx: OrgsOrgsRemovePublicMembershipForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsRemoveSamlSsoAuthorizationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsRemoveSamlSsoAuthorizationPath;
    },
    OrgsOrgsRemoveSamlSsoAuthorizationResponse
  >;
  type OrgsOrgsRemoveSamlSsoAuthorizationFn = (
    ctx: OrgsOrgsRemoveSamlSsoAuthorizationCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsSetMembershipForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsSetMembershipForUserPath;
      validatedBody: OrgsOrgsSetMembershipForUserBody;
    },
    OrgsOrgsSetMembershipForUserResponse
  >;
  type OrgsOrgsSetMembershipForUserFn = (
    ctx: OrgsOrgsSetMembershipForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsSetPublicMembershipForAuthenticatedUserPath;
    },
    OrgsOrgsSetPublicMembershipForAuthenticatedUserResponse
  >;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUserFn = (
    ctx: OrgsOrgsSetPublicMembershipForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsUnblockUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsUnblockUserPath;
    },
    OrgsOrgsUnblockUserResponse
  >;
  type OrgsOrgsUnblockUserFn = (
    ctx: OrgsOrgsUnblockUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsUpdatePath;
      validatedBody: OrgsOrgsUpdateBody;
    },
    OrgsOrgsUpdateResponse
  >;
  type OrgsOrgsUpdateFn = (
    ctx: OrgsOrgsUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsUpdateMembershipForAuthenticatedUserPath;
      validatedBody: OrgsOrgsUpdateMembershipForAuthenticatedUserBody;
    },
    OrgsOrgsUpdateMembershipForAuthenticatedUserResponse
  >;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserFn = (
    ctx: OrgsOrgsUpdateMembershipForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsUpdateWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsUpdateWebhookPath;
      validatedBody: OrgsOrgsUpdateWebhookBody;
    },
    OrgsOrgsUpdateWebhookResponse
  >;
  type OrgsOrgsUpdateWebhookFn = (
    ctx: OrgsOrgsUpdateWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type OrgsOrgsUpdateWebhookConfigForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: OrgsOrgsUpdateWebhookConfigForOrgPath;
      validatedBody: OrgsOrgsUpdateWebhookConfigForOrgBody;
    },
    OrgsOrgsUpdateWebhookConfigForOrgResponse
  >;
  type OrgsOrgsUpdateWebhookConfigForOrgFn = (
    ctx: OrgsOrgsUpdateWebhookConfigForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsAddCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsAddCollaboratorPath;
      validatedBody: ProjectsProjectsAddCollaboratorBody;
    },
    ProjectsProjectsAddCollaboratorResponse
  >;
  type ProjectsProjectsAddCollaboratorFn = (
    ctx: ProjectsProjectsAddCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsCreateCardCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsCreateCardPath;
      validatedBody: ProjectsProjectsCreateCardBody;
    },
    ProjectsProjectsCreateCardResponse
  >;
  type ProjectsProjectsCreateCardFn = (
    ctx: ProjectsProjectsCreateCardCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsCreateColumnCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsCreateColumnPath;
      validatedBody: ProjectsProjectsCreateColumnBody;
    },
    ProjectsProjectsCreateColumnResponse
  >;
  type ProjectsProjectsCreateColumnFn = (
    ctx: ProjectsProjectsCreateColumnCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsCreateForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ProjectsProjectsCreateForAuthenticatedUserBody;
    },
    ProjectsProjectsCreateForAuthenticatedUserResponse
  >;
  type ProjectsProjectsCreateForAuthenticatedUserFn = (
    ctx: ProjectsProjectsCreateForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsCreateForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsCreateForOrgPath;
      validatedBody: ProjectsProjectsCreateForOrgBody;
    },
    ProjectsProjectsCreateForOrgResponse
  >;
  type ProjectsProjectsCreateForOrgFn = (
    ctx: ProjectsProjectsCreateForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsCreateForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsCreateForRepoPath;
      validatedBody: ProjectsProjectsCreateForRepoBody;
    },
    ProjectsProjectsCreateForRepoResponse
  >;
  type ProjectsProjectsCreateForRepoFn = (
    ctx: ProjectsProjectsCreateForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsDeleteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsDeletePath;
    },
    ProjectsProjectsDeleteResponse
  >;
  type ProjectsProjectsDeleteFn = (
    ctx: ProjectsProjectsDeleteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsDeleteCardCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsDeleteCardPath;
    },
    ProjectsProjectsDeleteCardResponse
  >;
  type ProjectsProjectsDeleteCardFn = (
    ctx: ProjectsProjectsDeleteCardCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsDeleteColumnCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsDeleteColumnPath;
    },
    ProjectsProjectsDeleteColumnResponse
  >;
  type ProjectsProjectsDeleteColumnFn = (
    ctx: ProjectsProjectsDeleteColumnCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsGetPath;
    },
    ProjectsProjectsGetResponse
  >;
  type ProjectsProjectsGetFn = (
    ctx: ProjectsProjectsGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsGetCardCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsGetCardPath;
    },
    ProjectsProjectsGetCardResponse
  >;
  type ProjectsProjectsGetCardFn = (
    ctx: ProjectsProjectsGetCardCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsGetColumnCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsGetColumnPath;
    },
    ProjectsProjectsGetColumnResponse
  >;
  type ProjectsProjectsGetColumnFn = (
    ctx: ProjectsProjectsGetColumnCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsGetPermissionForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsGetPermissionForUserPath;
    },
    ProjectsProjectsGetPermissionForUserResponse
  >;
  type ProjectsProjectsGetPermissionForUserFn = (
    ctx: ProjectsProjectsGetPermissionForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsListCardsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ProjectsProjectsListCardsQuery;
      validatedParams: ProjectsProjectsListCardsPath;
    },
    ProjectsProjectsListCardsResponse
  >;
  type ProjectsProjectsListCardsFn = (
    ctx: ProjectsProjectsListCardsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsListCollaboratorsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ProjectsProjectsListCollaboratorsQuery;
      validatedParams: ProjectsProjectsListCollaboratorsPath;
    },
    ProjectsProjectsListCollaboratorsResponse
  >;
  type ProjectsProjectsListCollaboratorsFn = (
    ctx: ProjectsProjectsListCollaboratorsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsListColumnsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ProjectsProjectsListColumnsQuery;
      validatedParams: ProjectsProjectsListColumnsPath;
    },
    ProjectsProjectsListColumnsResponse
  >;
  type ProjectsProjectsListColumnsFn = (
    ctx: ProjectsProjectsListColumnsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsListForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ProjectsProjectsListForOrgQuery;
      validatedParams: ProjectsProjectsListForOrgPath;
    },
    ProjectsProjectsListForOrgResponse
  >;
  type ProjectsProjectsListForOrgFn = (
    ctx: ProjectsProjectsListForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsListForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ProjectsProjectsListForRepoQuery;
      validatedParams: ProjectsProjectsListForRepoPath;
    },
    ProjectsProjectsListForRepoResponse
  >;
  type ProjectsProjectsListForRepoFn = (
    ctx: ProjectsProjectsListForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsListForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ProjectsProjectsListForUserQuery;
      validatedParams: ProjectsProjectsListForUserPath;
    },
    ProjectsProjectsListForUserResponse
  >;
  type ProjectsProjectsListForUserFn = (
    ctx: ProjectsProjectsListForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsMoveCardCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsMoveCardPath;
      validatedBody: ProjectsProjectsMoveCardBody;
    },
    ProjectsProjectsMoveCardResponse
  >;
  type ProjectsProjectsMoveCardFn = (
    ctx: ProjectsProjectsMoveCardCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsMoveColumnCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsMoveColumnPath;
      validatedBody: ProjectsProjectsMoveColumnBody;
    },
    ProjectsProjectsMoveColumnResponse
  >;
  type ProjectsProjectsMoveColumnFn = (
    ctx: ProjectsProjectsMoveColumnCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsRemoveCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsRemoveCollaboratorPath;
    },
    ProjectsProjectsRemoveCollaboratorResponse
  >;
  type ProjectsProjectsRemoveCollaboratorFn = (
    ctx: ProjectsProjectsRemoveCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsUpdatePath;
      validatedBody: ProjectsProjectsUpdateBody;
    },
    ProjectsProjectsUpdateResponse
  >;
  type ProjectsProjectsUpdateFn = (
    ctx: ProjectsProjectsUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsUpdateCardCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsUpdateCardPath;
      validatedBody: ProjectsProjectsUpdateCardBody;
    },
    ProjectsProjectsUpdateCardResponse
  >;
  type ProjectsProjectsUpdateCardFn = (
    ctx: ProjectsProjectsUpdateCardCtx,
    next: Next,
  ) => void | Promise<void>;
  type ProjectsProjectsUpdateColumnCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ProjectsProjectsUpdateColumnPath;
      validatedBody: ProjectsProjectsUpdateColumnBody;
    },
    ProjectsProjectsUpdateColumnResponse
  >;
  type ProjectsProjectsUpdateColumnFn = (
    ctx: ProjectsProjectsUpdateColumnCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsCheckIfMergedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsCheckIfMergedPath;
    },
    PullsPullsCheckIfMergedResponse
  >;
  type PullsPullsCheckIfMergedFn = (
    ctx: PullsPullsCheckIfMergedCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsCreatePath;
      validatedBody: PullsPullsCreateBody;
    },
    PullsPullsCreateResponse
  >;
  type PullsPullsCreateFn = (
    ctx: PullsPullsCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsCreateReplyForReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsCreateReplyForReviewCommentPath;
      validatedBody: PullsPullsCreateReplyForReviewCommentBody;
    },
    PullsPullsCreateReplyForReviewCommentResponse
  >;
  type PullsPullsCreateReplyForReviewCommentFn = (
    ctx: PullsPullsCreateReplyForReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsCreateReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsCreateReviewPath;
      validatedBody: PullsPullsCreateReviewBody;
    },
    PullsPullsCreateReviewResponse
  >;
  type PullsPullsCreateReviewFn = (
    ctx: PullsPullsCreateReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsCreateReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsCreateReviewCommentPath;
      validatedBody: PullsPullsCreateReviewCommentBody;
    },
    PullsPullsCreateReviewCommentResponse
  >;
  type PullsPullsCreateReviewCommentFn = (
    ctx: PullsPullsCreateReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsDeletePendingReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsDeletePendingReviewPath;
    },
    PullsPullsDeletePendingReviewResponse
  >;
  type PullsPullsDeletePendingReviewFn = (
    ctx: PullsPullsDeletePendingReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsDeleteReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsDeleteReviewCommentPath;
    },
    PullsPullsDeleteReviewCommentResponse
  >;
  type PullsPullsDeleteReviewCommentFn = (
    ctx: PullsPullsDeleteReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsDismissReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsDismissReviewPath;
      validatedBody: PullsPullsDismissReviewBody;
    },
    PullsPullsDismissReviewResponse
  >;
  type PullsPullsDismissReviewFn = (
    ctx: PullsPullsDismissReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsGetPath;
    },
    PullsPullsGetResponse
  >;
  type PullsPullsGetFn = (
    ctx: PullsPullsGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsGetReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsGetReviewPath;
    },
    PullsPullsGetReviewResponse
  >;
  type PullsPullsGetReviewFn = (
    ctx: PullsPullsGetReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsGetReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsGetReviewCommentPath;
    },
    PullsPullsGetReviewCommentResponse
  >;
  type PullsPullsGetReviewCommentFn = (
    ctx: PullsPullsGetReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListQuery;
      validatedParams: PullsPullsListPath;
    },
    PullsPullsListResponse
  >;
  type PullsPullsListFn = (
    ctx: PullsPullsListCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListCommentsForReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListCommentsForReviewQuery;
      validatedParams: PullsPullsListCommentsForReviewPath;
    },
    PullsPullsListCommentsForReviewResponse
  >;
  type PullsPullsListCommentsForReviewFn = (
    ctx: PullsPullsListCommentsForReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListCommitsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListCommitsQuery;
      validatedParams: PullsPullsListCommitsPath;
    },
    PullsPullsListCommitsResponse
  >;
  type PullsPullsListCommitsFn = (
    ctx: PullsPullsListCommitsCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListFilesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListFilesQuery;
      validatedParams: PullsPullsListFilesPath;
    },
    PullsPullsListFilesResponse
  >;
  type PullsPullsListFilesFn = (
    ctx: PullsPullsListFilesCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListRequestedReviewersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListRequestedReviewersQuery;
      validatedParams: PullsPullsListRequestedReviewersPath;
    },
    PullsPullsListRequestedReviewersResponse
  >;
  type PullsPullsListRequestedReviewersFn = (
    ctx: PullsPullsListRequestedReviewersCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListReviewCommentsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListReviewCommentsQuery;
      validatedParams: PullsPullsListReviewCommentsPath;
    },
    PullsPullsListReviewCommentsResponse
  >;
  type PullsPullsListReviewCommentsFn = (
    ctx: PullsPullsListReviewCommentsCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListReviewCommentsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListReviewCommentsForRepoQuery;
      validatedParams: PullsPullsListReviewCommentsForRepoPath;
    },
    PullsPullsListReviewCommentsForRepoResponse
  >;
  type PullsPullsListReviewCommentsForRepoFn = (
    ctx: PullsPullsListReviewCommentsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsListReviewsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: PullsPullsListReviewsQuery;
      validatedParams: PullsPullsListReviewsPath;
    },
    PullsPullsListReviewsResponse
  >;
  type PullsPullsListReviewsFn = (
    ctx: PullsPullsListReviewsCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsMergeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsMergePath;
      validatedBody: PullsPullsMergeBody;
    },
    PullsPullsMergeResponse
  >;
  type PullsPullsMergeFn = (
    ctx: PullsPullsMergeCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsRemoveRequestedReviewersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsRemoveRequestedReviewersPath;
      validatedBody: PullsPullsRemoveRequestedReviewersBody;
    },
    PullsPullsRemoveRequestedReviewersResponse
  >;
  type PullsPullsRemoveRequestedReviewersFn = (
    ctx: PullsPullsRemoveRequestedReviewersCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsRequestReviewersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsRequestReviewersPath;
      validatedBody: PullsPullsRequestReviewersBody;
    },
    PullsPullsRequestReviewersResponse
  >;
  type PullsPullsRequestReviewersFn = (
    ctx: PullsPullsRequestReviewersCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsSubmitReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsSubmitReviewPath;
      validatedBody: PullsPullsSubmitReviewBody;
    },
    PullsPullsSubmitReviewResponse
  >;
  type PullsPullsSubmitReviewFn = (
    ctx: PullsPullsSubmitReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsUpdatePath;
      validatedBody: PullsPullsUpdateBody;
    },
    PullsPullsUpdateResponse
  >;
  type PullsPullsUpdateFn = (
    ctx: PullsPullsUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsUpdateBranchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsUpdateBranchPath;
      validatedBody: PullsPullsUpdateBranchBody;
    },
    PullsPullsUpdateBranchResponse
  >;
  type PullsPullsUpdateBranchFn = (
    ctx: PullsPullsUpdateBranchCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsUpdateReviewCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsUpdateReviewPath;
      validatedBody: PullsPullsUpdateReviewBody;
    },
    PullsPullsUpdateReviewResponse
  >;
  type PullsPullsUpdateReviewFn = (
    ctx: PullsPullsUpdateReviewCtx,
    next: Next,
  ) => void | Promise<void>;
  type PullsPullsUpdateReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: PullsPullsUpdateReviewCommentPath;
      validatedBody: PullsPullsUpdateReviewCommentBody;
    },
    PullsPullsUpdateReviewCommentResponse
  >;
  type PullsPullsUpdateReviewCommentFn = (
    ctx: PullsPullsUpdateReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type RateLimitRateLimitGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    RateLimitRateLimitGetResponse
  >;
  type RateLimitRateLimitGetFn = (
    ctx: RateLimitRateLimitGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForCommitCommentPath;
      validatedBody: ReactionsReactionsCreateForCommitCommentBody;
    },
    ReactionsReactionsCreateForCommitCommentResponse
  >;
  type ReactionsReactionsCreateForCommitCommentFn = (
    ctx: ReactionsReactionsCreateForCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForIssueCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForIssuePath;
      validatedBody: ReactionsReactionsCreateForIssueBody;
    },
    ReactionsReactionsCreateForIssueResponse
  >;
  type ReactionsReactionsCreateForIssueFn = (
    ctx: ReactionsReactionsCreateForIssueCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForIssueCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForIssueCommentPath;
      validatedBody: ReactionsReactionsCreateForIssueCommentBody;
    },
    ReactionsReactionsCreateForIssueCommentResponse
  >;
  type ReactionsReactionsCreateForIssueCommentFn = (
    ctx: ReactionsReactionsCreateForIssueCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForPullRequestReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForPullRequestReviewCommentPath;
      validatedBody: ReactionsReactionsCreateForPullRequestReviewCommentBody;
    },
    ReactionsReactionsCreateForPullRequestReviewCommentResponse
  >;
  type ReactionsReactionsCreateForPullRequestReviewCommentFn = (
    ctx: ReactionsReactionsCreateForPullRequestReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
      validatedBody: ReactionsReactionsCreateForTeamDiscussionCommentInOrgBody;
    },
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgResponse
  >;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgFn = (
    ctx: ReactionsReactionsCreateForTeamDiscussionCommentInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
      validatedBody: ReactionsReactionsCreateForTeamDiscussionCommentLegacyBody;
    },
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyResponse
  >;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyFn = (
    ctx: ReactionsReactionsCreateForTeamDiscussionCommentLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForTeamDiscussionInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForTeamDiscussionInOrgPath;
      validatedBody: ReactionsReactionsCreateForTeamDiscussionInOrgBody;
    },
    ReactionsReactionsCreateForTeamDiscussionInOrgResponse
  >;
  type ReactionsReactionsCreateForTeamDiscussionInOrgFn = (
    ctx: ReactionsReactionsCreateForTeamDiscussionInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsCreateForTeamDiscussionLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsCreateForTeamDiscussionLegacyPath;
      validatedBody: ReactionsReactionsCreateForTeamDiscussionLegacyBody;
    },
    ReactionsReactionsCreateForTeamDiscussionLegacyResponse
  >;
  type ReactionsReactionsCreateForTeamDiscussionLegacyFn = (
    ctx: ReactionsReactionsCreateForTeamDiscussionLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteForCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteForCommitCommentPath;
    },
    ReactionsReactionsDeleteForCommitCommentResponse
  >;
  type ReactionsReactionsDeleteForCommitCommentFn = (
    ctx: ReactionsReactionsDeleteForCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteForIssueCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteForIssuePath;
    },
    ReactionsReactionsDeleteForIssueResponse
  >;
  type ReactionsReactionsDeleteForIssueFn = (
    ctx: ReactionsReactionsDeleteForIssueCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteForIssueCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteForIssueCommentPath;
    },
    ReactionsReactionsDeleteForIssueCommentResponse
  >;
  type ReactionsReactionsDeleteForIssueCommentFn = (
    ctx: ReactionsReactionsDeleteForIssueCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteForPullRequestCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteForPullRequestCommentPath;
    },
    ReactionsReactionsDeleteForPullRequestCommentResponse
  >;
  type ReactionsReactionsDeleteForPullRequestCommentFn = (
    ctx: ReactionsReactionsDeleteForPullRequestCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteForTeamDiscussionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteForTeamDiscussionPath;
    },
    ReactionsReactionsDeleteForTeamDiscussionResponse
  >;
  type ReactionsReactionsDeleteForTeamDiscussionFn = (
    ctx: ReactionsReactionsDeleteForTeamDiscussionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteForTeamDiscussionCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteForTeamDiscussionCommentPath;
    },
    ReactionsReactionsDeleteForTeamDiscussionCommentResponse
  >;
  type ReactionsReactionsDeleteForTeamDiscussionCommentFn = (
    ctx: ReactionsReactionsDeleteForTeamDiscussionCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsDeleteLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReactionsReactionsDeleteLegacyPath;
    },
    ReactionsReactionsDeleteLegacyResponse
  >;
  type ReactionsReactionsDeleteLegacyFn = (
    ctx: ReactionsReactionsDeleteLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForCommitCommentQuery;
      validatedParams: ReactionsReactionsListForCommitCommentPath;
    },
    ReactionsReactionsListForCommitCommentResponse
  >;
  type ReactionsReactionsListForCommitCommentFn = (
    ctx: ReactionsReactionsListForCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForIssueCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForIssueQuery;
      validatedParams: ReactionsReactionsListForIssuePath;
    },
    ReactionsReactionsListForIssueResponse
  >;
  type ReactionsReactionsListForIssueFn = (
    ctx: ReactionsReactionsListForIssueCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForIssueCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForIssueCommentQuery;
      validatedParams: ReactionsReactionsListForIssueCommentPath;
    },
    ReactionsReactionsListForIssueCommentResponse
  >;
  type ReactionsReactionsListForIssueCommentFn = (
    ctx: ReactionsReactionsListForIssueCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForPullRequestReviewCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForPullRequestReviewCommentQuery;
      validatedParams: ReactionsReactionsListForPullRequestReviewCommentPath;
    },
    ReactionsReactionsListForPullRequestReviewCommentResponse
  >;
  type ReactionsReactionsListForPullRequestReviewCommentFn = (
    ctx: ReactionsReactionsListForPullRequestReviewCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForTeamDiscussionCommentInOrgQuery;
      validatedParams: ReactionsReactionsListForTeamDiscussionCommentInOrgPath;
    },
    ReactionsReactionsListForTeamDiscussionCommentInOrgResponse
  >;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgFn = (
    ctx: ReactionsReactionsListForTeamDiscussionCommentInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForTeamDiscussionCommentLegacyQuery;
      validatedParams: ReactionsReactionsListForTeamDiscussionCommentLegacyPath;
    },
    ReactionsReactionsListForTeamDiscussionCommentLegacyResponse
  >;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyFn = (
    ctx: ReactionsReactionsListForTeamDiscussionCommentLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForTeamDiscussionInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForTeamDiscussionInOrgQuery;
      validatedParams: ReactionsReactionsListForTeamDiscussionInOrgPath;
    },
    ReactionsReactionsListForTeamDiscussionInOrgResponse
  >;
  type ReactionsReactionsListForTeamDiscussionInOrgFn = (
    ctx: ReactionsReactionsListForTeamDiscussionInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReactionsReactionsListForTeamDiscussionLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReactionsReactionsListForTeamDiscussionLegacyQuery;
      validatedParams: ReactionsReactionsListForTeamDiscussionLegacyPath;
    },
    ReactionsReactionsListForTeamDiscussionLegacyResponse
  >;
  type ReactionsReactionsListForTeamDiscussionLegacyFn = (
    ctx: ReactionsReactionsListForTeamDiscussionLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposAcceptInvitationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposAcceptInvitationPath;
    },
    ReposReposAcceptInvitationResponse
  >;
  type ReposReposAcceptInvitationFn = (
    ctx: ReposReposAcceptInvitationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposAddAppAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposAddAppAccessRestrictionsPath;
      validatedBody: ReposReposAddAppAccessRestrictionsBody;
    },
    ReposReposAddAppAccessRestrictionsResponse
  >;
  type ReposReposAddAppAccessRestrictionsFn = (
    ctx: ReposReposAddAppAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposAddCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposAddCollaboratorPath;
      validatedBody: ReposReposAddCollaboratorBody;
    },
    ReposReposAddCollaboratorResponse
  >;
  type ReposReposAddCollaboratorFn = (
    ctx: ReposReposAddCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposAddStatusCheckContextsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposAddStatusCheckContextsPath;
      validatedBody: ReposReposAddStatusCheckContextsBody;
    },
    ReposReposAddStatusCheckContextsResponse
  >;
  type ReposReposAddStatusCheckContextsFn = (
    ctx: ReposReposAddStatusCheckContextsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposAddTeamAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposAddTeamAccessRestrictionsPath;
      validatedBody: ReposReposAddTeamAccessRestrictionsBody;
    },
    ReposReposAddTeamAccessRestrictionsResponse
  >;
  type ReposReposAddTeamAccessRestrictionsFn = (
    ctx: ReposReposAddTeamAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposAddUserAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposAddUserAccessRestrictionsPath;
      validatedBody: ReposReposAddUserAccessRestrictionsBody;
    },
    ReposReposAddUserAccessRestrictionsResponse
  >;
  type ReposReposAddUserAccessRestrictionsFn = (
    ctx: ReposReposAddUserAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCheckCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCheckCollaboratorPath;
    },
    ReposReposCheckCollaboratorResponse
  >;
  type ReposReposCheckCollaboratorFn = (
    ctx: ReposReposCheckCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCheckVulnerabilityAlertsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCheckVulnerabilityAlertsPath;
    },
    ReposReposCheckVulnerabilityAlertsResponse
  >;
  type ReposReposCheckVulnerabilityAlertsFn = (
    ctx: ReposReposCheckVulnerabilityAlertsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCompareCommitsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCompareCommitsPath;
    },
    ReposReposCompareCommitsResponse
  >;
  type ReposReposCompareCommitsFn = (
    ctx: ReposReposCompareCommitsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateCommitCommentPath;
      validatedBody: ReposReposCreateCommitCommentBody;
    },
    ReposReposCreateCommitCommentResponse
  >;
  type ReposReposCreateCommitCommentFn = (
    ctx: ReposReposCreateCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateCommitSignatureProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateCommitSignatureProtectionPath;
    },
    ReposReposCreateCommitSignatureProtectionResponse
  >;
  type ReposReposCreateCommitSignatureProtectionFn = (
    ctx: ReposReposCreateCommitSignatureProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateCommitStatusCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateCommitStatusPath;
      validatedBody: ReposReposCreateCommitStatusBody;
    },
    ReposReposCreateCommitStatusResponse
  >;
  type ReposReposCreateCommitStatusFn = (
    ctx: ReposReposCreateCommitStatusCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateDeployKeyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateDeployKeyPath;
      validatedBody: ReposReposCreateDeployKeyBody;
    },
    ReposReposCreateDeployKeyResponse
  >;
  type ReposReposCreateDeployKeyFn = (
    ctx: ReposReposCreateDeployKeyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateDeploymentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateDeploymentPath;
      validatedBody: ReposReposCreateDeploymentBody;
    },
    ReposReposCreateDeploymentResponse
  >;
  type ReposReposCreateDeploymentFn = (
    ctx: ReposReposCreateDeploymentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateDeploymentStatusCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateDeploymentStatusPath;
      validatedBody: ReposReposCreateDeploymentStatusBody;
    },
    ReposReposCreateDeploymentStatusResponse
  >;
  type ReposReposCreateDeploymentStatusFn = (
    ctx: ReposReposCreateDeploymentStatusCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateDispatchEventCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateDispatchEventPath;
      validatedBody: ReposReposCreateDispatchEventBody;
    },
    ReposReposCreateDispatchEventResponse
  >;
  type ReposReposCreateDispatchEventFn = (
    ctx: ReposReposCreateDispatchEventCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ReposReposCreateForAuthenticatedUserBody;
    },
    ReposReposCreateForAuthenticatedUserResponse
  >;
  type ReposReposCreateForAuthenticatedUserFn = (
    ctx: ReposReposCreateForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateForkCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateForkPath;
      validatedBody: ReposReposCreateForkBody;
    },
    ReposReposCreateForkResponse
  >;
  type ReposReposCreateForkFn = (
    ctx: ReposReposCreateForkCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateInOrgPath;
      validatedBody: ReposReposCreateInOrgBody;
    },
    ReposReposCreateInOrgResponse
  >;
  type ReposReposCreateInOrgFn = (
    ctx: ReposReposCreateInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateOrUpdateFileContentsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateOrUpdateFileContentsPath;
      validatedBody: ReposReposCreateOrUpdateFileContentsBody;
    },
    ReposReposCreateOrUpdateFileContentsResponse
  >;
  type ReposReposCreateOrUpdateFileContentsFn = (
    ctx: ReposReposCreateOrUpdateFileContentsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreatePagesSiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreatePagesSitePath;
      validatedBody: ReposReposCreatePagesSiteBody;
    },
    ReposReposCreatePagesSiteResponse
  >;
  type ReposReposCreatePagesSiteFn = (
    ctx: ReposReposCreatePagesSiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateReleaseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateReleasePath;
      validatedBody: ReposReposCreateReleaseBody;
    },
    ReposReposCreateReleaseResponse
  >;
  type ReposReposCreateReleaseFn = (
    ctx: ReposReposCreateReleaseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateUsingTemplateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateUsingTemplatePath;
      validatedBody: ReposReposCreateUsingTemplateBody;
    },
    ReposReposCreateUsingTemplateResponse
  >;
  type ReposReposCreateUsingTemplateFn = (
    ctx: ReposReposCreateUsingTemplateCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposCreateWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposCreateWebhookPath;
      validatedBody: ReposReposCreateWebhookBody;
    },
    ReposReposCreateWebhookResponse
  >;
  type ReposReposCreateWebhookFn = (
    ctx: ReposReposCreateWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeclineInvitationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeclineInvitationPath;
    },
    ReposReposDeclineInvitationResponse
  >;
  type ReposReposDeclineInvitationFn = (
    ctx: ReposReposDeclineInvitationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeletePath;
    },
    ReposReposDeleteResponse
  >;
  type ReposReposDeleteFn = (
    ctx: ReposReposDeleteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteAccessRestrictionsPath;
    },
    ReposReposDeleteAccessRestrictionsResponse
  >;
  type ReposReposDeleteAccessRestrictionsFn = (
    ctx: ReposReposDeleteAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteAdminBranchProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteAdminBranchProtectionPath;
    },
    ReposReposDeleteAdminBranchProtectionResponse
  >;
  type ReposReposDeleteAdminBranchProtectionFn = (
    ctx: ReposReposDeleteAdminBranchProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteBranchProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteBranchProtectionPath;
    },
    ReposReposDeleteBranchProtectionResponse
  >;
  type ReposReposDeleteBranchProtectionFn = (
    ctx: ReposReposDeleteBranchProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteCommitCommentPath;
    },
    ReposReposDeleteCommitCommentResponse
  >;
  type ReposReposDeleteCommitCommentFn = (
    ctx: ReposReposDeleteCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteCommitSignatureProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteCommitSignatureProtectionPath;
    },
    ReposReposDeleteCommitSignatureProtectionResponse
  >;
  type ReposReposDeleteCommitSignatureProtectionFn = (
    ctx: ReposReposDeleteCommitSignatureProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteDeployKeyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteDeployKeyPath;
    },
    ReposReposDeleteDeployKeyResponse
  >;
  type ReposReposDeleteDeployKeyFn = (
    ctx: ReposReposDeleteDeployKeyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteDeploymentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteDeploymentPath;
    },
    ReposReposDeleteDeploymentResponse
  >;
  type ReposReposDeleteDeploymentFn = (
    ctx: ReposReposDeleteDeploymentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteFilePath;
      validatedBody: ReposReposDeleteFileBody;
    },
    ReposReposDeleteFileResponse
  >;
  type ReposReposDeleteFileFn = (
    ctx: ReposReposDeleteFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteInvitationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteInvitationPath;
    },
    ReposReposDeleteInvitationResponse
  >;
  type ReposReposDeleteInvitationFn = (
    ctx: ReposReposDeleteInvitationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeletePagesSiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeletePagesSitePath;
    },
    ReposReposDeletePagesSiteResponse
  >;
  type ReposReposDeletePagesSiteFn = (
    ctx: ReposReposDeletePagesSiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeletePullRequestReviewProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeletePullRequestReviewProtectionPath;
    },
    ReposReposDeletePullRequestReviewProtectionResponse
  >;
  type ReposReposDeletePullRequestReviewProtectionFn = (
    ctx: ReposReposDeletePullRequestReviewProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteReleaseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteReleasePath;
    },
    ReposReposDeleteReleaseResponse
  >;
  type ReposReposDeleteReleaseFn = (
    ctx: ReposReposDeleteReleaseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteReleaseAssetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteReleaseAssetPath;
    },
    ReposReposDeleteReleaseAssetResponse
  >;
  type ReposReposDeleteReleaseAssetFn = (
    ctx: ReposReposDeleteReleaseAssetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDeleteWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDeleteWebhookPath;
    },
    ReposReposDeleteWebhookResponse
  >;
  type ReposReposDeleteWebhookFn = (
    ctx: ReposReposDeleteWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDisableAutomatedSecurityFixesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDisableAutomatedSecurityFixesPath;
    },
    ReposReposDisableAutomatedSecurityFixesResponse
  >;
  type ReposReposDisableAutomatedSecurityFixesFn = (
    ctx: ReposReposDisableAutomatedSecurityFixesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDisableVulnerabilityAlertsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDisableVulnerabilityAlertsPath;
    },
    ReposReposDisableVulnerabilityAlertsResponse
  >;
  type ReposReposDisableVulnerabilityAlertsFn = (
    ctx: ReposReposDisableVulnerabilityAlertsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDownloadTarballArchiveCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDownloadTarballArchivePath;
    },
    ReposReposDownloadTarballArchiveResponse
  >;
  type ReposReposDownloadTarballArchiveFn = (
    ctx: ReposReposDownloadTarballArchiveCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposDownloadZipballArchiveCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposDownloadZipballArchivePath;
    },
    ReposReposDownloadZipballArchiveResponse
  >;
  type ReposReposDownloadZipballArchiveFn = (
    ctx: ReposReposDownloadZipballArchiveCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposEnableAutomatedSecurityFixesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposEnableAutomatedSecurityFixesPath;
    },
    ReposReposEnableAutomatedSecurityFixesResponse
  >;
  type ReposReposEnableAutomatedSecurityFixesFn = (
    ctx: ReposReposEnableAutomatedSecurityFixesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposEnableVulnerabilityAlertsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposEnableVulnerabilityAlertsPath;
    },
    ReposReposEnableVulnerabilityAlertsResponse
  >;
  type ReposReposEnableVulnerabilityAlertsFn = (
    ctx: ReposReposEnableVulnerabilityAlertsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetPath;
    },
    ReposReposGetResponse
  >;
  type ReposReposGetFn = (
    ctx: ReposReposGetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetAccessRestrictionsPath;
    },
    ReposReposGetAccessRestrictionsResponse
  >;
  type ReposReposGetAccessRestrictionsFn = (
    ctx: ReposReposGetAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetAdminBranchProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetAdminBranchProtectionPath;
    },
    ReposReposGetAdminBranchProtectionResponse
  >;
  type ReposReposGetAdminBranchProtectionFn = (
    ctx: ReposReposGetAdminBranchProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetAllStatusCheckContextsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetAllStatusCheckContextsPath;
    },
    ReposReposGetAllStatusCheckContextsResponse
  >;
  type ReposReposGetAllStatusCheckContextsFn = (
    ctx: ReposReposGetAllStatusCheckContextsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetAllTopicsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetAllTopicsPath;
    },
    ReposReposGetAllTopicsResponse
  >;
  type ReposReposGetAllTopicsFn = (
    ctx: ReposReposGetAllTopicsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetAppsWithAccessToProtectedBranchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetAppsWithAccessToProtectedBranchPath;
    },
    ReposReposGetAppsWithAccessToProtectedBranchResponse
  >;
  type ReposReposGetAppsWithAccessToProtectedBranchFn = (
    ctx: ReposReposGetAppsWithAccessToProtectedBranchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetBranchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetBranchPath;
    },
    ReposReposGetBranchResponse
  >;
  type ReposReposGetBranchFn = (
    ctx: ReposReposGetBranchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetBranchProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetBranchProtectionPath;
    },
    ReposReposGetBranchProtectionResponse
  >;
  type ReposReposGetBranchProtectionFn = (
    ctx: ReposReposGetBranchProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetClonesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposGetClonesQuery;
      validatedParams: ReposReposGetClonesPath;
    },
    ReposReposGetClonesResponse
  >;
  type ReposReposGetClonesFn = (
    ctx: ReposReposGetClonesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCodeFrequencyStatsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCodeFrequencyStatsPath;
    },
    ReposReposGetCodeFrequencyStatsResponse
  >;
  type ReposReposGetCodeFrequencyStatsFn = (
    ctx: ReposReposGetCodeFrequencyStatsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCollaboratorPermissionLevelCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCollaboratorPermissionLevelPath;
    },
    ReposReposGetCollaboratorPermissionLevelResponse
  >;
  type ReposReposGetCollaboratorPermissionLevelFn = (
    ctx: ReposReposGetCollaboratorPermissionLevelCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCombinedStatusForRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCombinedStatusForRefPath;
    },
    ReposReposGetCombinedStatusForRefResponse
  >;
  type ReposReposGetCombinedStatusForRefFn = (
    ctx: ReposReposGetCombinedStatusForRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCommitCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCommitPath;
    },
    ReposReposGetCommitResponse
  >;
  type ReposReposGetCommitFn = (
    ctx: ReposReposGetCommitCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCommitActivityStatsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCommitActivityStatsPath;
    },
    ReposReposGetCommitActivityStatsResponse
  >;
  type ReposReposGetCommitActivityStatsFn = (
    ctx: ReposReposGetCommitActivityStatsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCommitCommentPath;
    },
    ReposReposGetCommitCommentResponse
  >;
  type ReposReposGetCommitCommentFn = (
    ctx: ReposReposGetCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCommitSignatureProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCommitSignatureProtectionPath;
    },
    ReposReposGetCommitSignatureProtectionResponse
  >;
  type ReposReposGetCommitSignatureProtectionFn = (
    ctx: ReposReposGetCommitSignatureProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetCommunityProfileMetricsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetCommunityProfileMetricsPath;
    },
    ReposReposGetCommunityProfileMetricsResponse
  >;
  type ReposReposGetCommunityProfileMetricsFn = (
    ctx: ReposReposGetCommunityProfileMetricsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetContentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposGetContentQuery;
      validatedParams: ReposReposGetContentPath;
    },
    ReposReposGetContentResponse
  >;
  type ReposReposGetContentFn = (
    ctx: ReposReposGetContentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetContributorsStatsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetContributorsStatsPath;
    },
    ReposReposGetContributorsStatsResponse
  >;
  type ReposReposGetContributorsStatsFn = (
    ctx: ReposReposGetContributorsStatsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetDeployKeyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetDeployKeyPath;
    },
    ReposReposGetDeployKeyResponse
  >;
  type ReposReposGetDeployKeyFn = (
    ctx: ReposReposGetDeployKeyCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetDeploymentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetDeploymentPath;
    },
    ReposReposGetDeploymentResponse
  >;
  type ReposReposGetDeploymentFn = (
    ctx: ReposReposGetDeploymentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetDeploymentStatusCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetDeploymentStatusPath;
    },
    ReposReposGetDeploymentStatusResponse
  >;
  type ReposReposGetDeploymentStatusFn = (
    ctx: ReposReposGetDeploymentStatusCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetLatestPagesBuildCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetLatestPagesBuildPath;
    },
    ReposReposGetLatestPagesBuildResponse
  >;
  type ReposReposGetLatestPagesBuildFn = (
    ctx: ReposReposGetLatestPagesBuildCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetLatestReleaseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetLatestReleasePath;
    },
    ReposReposGetLatestReleaseResponse
  >;
  type ReposReposGetLatestReleaseFn = (
    ctx: ReposReposGetLatestReleaseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetPagesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetPagesPath;
    },
    ReposReposGetPagesResponse
  >;
  type ReposReposGetPagesFn = (
    ctx: ReposReposGetPagesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetPagesBuildCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetPagesBuildPath;
    },
    ReposReposGetPagesBuildResponse
  >;
  type ReposReposGetPagesBuildFn = (
    ctx: ReposReposGetPagesBuildCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetParticipationStatsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetParticipationStatsPath;
    },
    ReposReposGetParticipationStatsResponse
  >;
  type ReposReposGetParticipationStatsFn = (
    ctx: ReposReposGetParticipationStatsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetPullRequestReviewProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetPullRequestReviewProtectionPath;
    },
    ReposReposGetPullRequestReviewProtectionResponse
  >;
  type ReposReposGetPullRequestReviewProtectionFn = (
    ctx: ReposReposGetPullRequestReviewProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetPunchCardStatsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetPunchCardStatsPath;
    },
    ReposReposGetPunchCardStatsResponse
  >;
  type ReposReposGetPunchCardStatsFn = (
    ctx: ReposReposGetPunchCardStatsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetReadmeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposGetReadmeQuery;
      validatedParams: ReposReposGetReadmePath;
    },
    ReposReposGetReadmeResponse
  >;
  type ReposReposGetReadmeFn = (
    ctx: ReposReposGetReadmeCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetReleaseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetReleasePath;
    },
    ReposReposGetReleaseResponse
  >;
  type ReposReposGetReleaseFn = (
    ctx: ReposReposGetReleaseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetReleaseAssetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetReleaseAssetPath;
    },
    ReposReposGetReleaseAssetResponse
  >;
  type ReposReposGetReleaseAssetFn = (
    ctx: ReposReposGetReleaseAssetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetReleaseByTagCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetReleaseByTagPath;
    },
    ReposReposGetReleaseByTagResponse
  >;
  type ReposReposGetReleaseByTagFn = (
    ctx: ReposReposGetReleaseByTagCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetStatusChecksProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetStatusChecksProtectionPath;
    },
    ReposReposGetStatusChecksProtectionResponse
  >;
  type ReposReposGetStatusChecksProtectionFn = (
    ctx: ReposReposGetStatusChecksProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetTeamsWithAccessToProtectedBranchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetTeamsWithAccessToProtectedBranchPath;
    },
    ReposReposGetTeamsWithAccessToProtectedBranchResponse
  >;
  type ReposReposGetTeamsWithAccessToProtectedBranchFn = (
    ctx: ReposReposGetTeamsWithAccessToProtectedBranchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetTopPathsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetTopPathsPath;
    },
    ReposReposGetTopPathsResponse
  >;
  type ReposReposGetTopPathsFn = (
    ctx: ReposReposGetTopPathsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetTopReferrersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetTopReferrersPath;
    },
    ReposReposGetTopReferrersResponse
  >;
  type ReposReposGetTopReferrersFn = (
    ctx: ReposReposGetTopReferrersCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetUsersWithAccessToProtectedBranchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetUsersWithAccessToProtectedBranchPath;
    },
    ReposReposGetUsersWithAccessToProtectedBranchResponse
  >;
  type ReposReposGetUsersWithAccessToProtectedBranchFn = (
    ctx: ReposReposGetUsersWithAccessToProtectedBranchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetViewsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposGetViewsQuery;
      validatedParams: ReposReposGetViewsPath;
    },
    ReposReposGetViewsResponse
  >;
  type ReposReposGetViewsFn = (
    ctx: ReposReposGetViewsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetWebhookPath;
    },
    ReposReposGetWebhookResponse
  >;
  type ReposReposGetWebhookFn = (
    ctx: ReposReposGetWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposGetWebhookConfigForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposGetWebhookConfigForRepoPath;
    },
    ReposReposGetWebhookConfigForRepoResponse
  >;
  type ReposReposGetWebhookConfigForRepoFn = (
    ctx: ReposReposGetWebhookConfigForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListBranchesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListBranchesQuery;
      validatedParams: ReposReposListBranchesPath;
    },
    ReposReposListBranchesResponse
  >;
  type ReposReposListBranchesFn = (
    ctx: ReposReposListBranchesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListBranchesForHeadCommitCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposListBranchesForHeadCommitPath;
    },
    ReposReposListBranchesForHeadCommitResponse
  >;
  type ReposReposListBranchesForHeadCommitFn = (
    ctx: ReposReposListBranchesForHeadCommitCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListCollaboratorsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListCollaboratorsQuery;
      validatedParams: ReposReposListCollaboratorsPath;
    },
    ReposReposListCollaboratorsResponse
  >;
  type ReposReposListCollaboratorsFn = (
    ctx: ReposReposListCollaboratorsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListCommentsForCommitCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListCommentsForCommitQuery;
      validatedParams: ReposReposListCommentsForCommitPath;
    },
    ReposReposListCommentsForCommitResponse
  >;
  type ReposReposListCommentsForCommitFn = (
    ctx: ReposReposListCommentsForCommitCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListCommitCommentsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListCommitCommentsForRepoQuery;
      validatedParams: ReposReposListCommitCommentsForRepoPath;
    },
    ReposReposListCommitCommentsForRepoResponse
  >;
  type ReposReposListCommitCommentsForRepoFn = (
    ctx: ReposReposListCommitCommentsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListCommitStatusesForRefCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListCommitStatusesForRefQuery;
      validatedParams: ReposReposListCommitStatusesForRefPath;
    },
    ReposReposListCommitStatusesForRefResponse
  >;
  type ReposReposListCommitStatusesForRefFn = (
    ctx: ReposReposListCommitStatusesForRefCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListCommitsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListCommitsQuery;
      validatedParams: ReposReposListCommitsPath;
    },
    ReposReposListCommitsResponse
  >;
  type ReposReposListCommitsFn = (
    ctx: ReposReposListCommitsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListContributorsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListContributorsQuery;
      validatedParams: ReposReposListContributorsPath;
    },
    ReposReposListContributorsResponse
  >;
  type ReposReposListContributorsFn = (
    ctx: ReposReposListContributorsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListDeployKeysCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListDeployKeysQuery;
      validatedParams: ReposReposListDeployKeysPath;
    },
    ReposReposListDeployKeysResponse
  >;
  type ReposReposListDeployKeysFn = (
    ctx: ReposReposListDeployKeysCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListDeploymentStatusesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListDeploymentStatusesQuery;
      validatedParams: ReposReposListDeploymentStatusesPath;
    },
    ReposReposListDeploymentStatusesResponse
  >;
  type ReposReposListDeploymentStatusesFn = (
    ctx: ReposReposListDeploymentStatusesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListDeploymentsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListDeploymentsQuery;
      validatedParams: ReposReposListDeploymentsPath;
    },
    ReposReposListDeploymentsResponse
  >;
  type ReposReposListDeploymentsFn = (
    ctx: ReposReposListDeploymentsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListForAuthenticatedUserQuery;
    },
    ReposReposListForAuthenticatedUserResponse
  >;
  type ReposReposListForAuthenticatedUserFn = (
    ctx: ReposReposListForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListForOrgQuery;
      validatedParams: ReposReposListForOrgPath;
    },
    ReposReposListForOrgResponse
  >;
  type ReposReposListForOrgFn = (
    ctx: ReposReposListForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListForUserQuery;
      validatedParams: ReposReposListForUserPath;
    },
    ReposReposListForUserResponse
  >;
  type ReposReposListForUserFn = (
    ctx: ReposReposListForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListForksCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListForksQuery;
      validatedParams: ReposReposListForksPath;
    },
    ReposReposListForksResponse
  >;
  type ReposReposListForksFn = (
    ctx: ReposReposListForksCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListInvitationsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListInvitationsQuery;
      validatedParams: ReposReposListInvitationsPath;
    },
    ReposReposListInvitationsResponse
  >;
  type ReposReposListInvitationsFn = (
    ctx: ReposReposListInvitationsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListInvitationsForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListInvitationsForAuthenticatedUserQuery;
    },
    ReposReposListInvitationsForAuthenticatedUserResponse
  >;
  type ReposReposListInvitationsForAuthenticatedUserFn = (
    ctx: ReposReposListInvitationsForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListLanguagesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposListLanguagesPath;
    },
    ReposReposListLanguagesResponse
  >;
  type ReposReposListLanguagesFn = (
    ctx: ReposReposListLanguagesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListPagesBuildsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListPagesBuildsQuery;
      validatedParams: ReposReposListPagesBuildsPath;
    },
    ReposReposListPagesBuildsResponse
  >;
  type ReposReposListPagesBuildsFn = (
    ctx: ReposReposListPagesBuildsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListPublicCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListPublicQuery;
    },
    ReposReposListPublicResponse
  >;
  type ReposReposListPublicFn = (
    ctx: ReposReposListPublicCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListPullRequestsAssociatedWithCommitCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListPullRequestsAssociatedWithCommitQuery;
      validatedParams: ReposReposListPullRequestsAssociatedWithCommitPath;
    },
    ReposReposListPullRequestsAssociatedWithCommitResponse
  >;
  type ReposReposListPullRequestsAssociatedWithCommitFn = (
    ctx: ReposReposListPullRequestsAssociatedWithCommitCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListReleaseAssetsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListReleaseAssetsQuery;
      validatedParams: ReposReposListReleaseAssetsPath;
    },
    ReposReposListReleaseAssetsResponse
  >;
  type ReposReposListReleaseAssetsFn = (
    ctx: ReposReposListReleaseAssetsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListReleasesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListReleasesQuery;
      validatedParams: ReposReposListReleasesPath;
    },
    ReposReposListReleasesResponse
  >;
  type ReposReposListReleasesFn = (
    ctx: ReposReposListReleasesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListTagsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListTagsQuery;
      validatedParams: ReposReposListTagsPath;
    },
    ReposReposListTagsResponse
  >;
  type ReposReposListTagsFn = (
    ctx: ReposReposListTagsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListTeamsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListTeamsQuery;
      validatedParams: ReposReposListTeamsPath;
    },
    ReposReposListTeamsResponse
  >;
  type ReposReposListTeamsFn = (
    ctx: ReposReposListTeamsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposListWebhooksCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposListWebhooksQuery;
      validatedParams: ReposReposListWebhooksPath;
    },
    ReposReposListWebhooksResponse
  >;
  type ReposReposListWebhooksFn = (
    ctx: ReposReposListWebhooksCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposMergeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposMergePath;
      validatedBody: ReposReposMergeBody;
    },
    ReposReposMergeResponse
  >;
  type ReposReposMergeFn = (
    ctx: ReposReposMergeCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposPingWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposPingWebhookPath;
    },
    ReposReposPingWebhookResponse
  >;
  type ReposReposPingWebhookFn = (
    ctx: ReposReposPingWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRemoveAppAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRemoveAppAccessRestrictionsPath;
      validatedBody: ReposReposRemoveAppAccessRestrictionsBody;
    },
    ReposReposRemoveAppAccessRestrictionsResponse
  >;
  type ReposReposRemoveAppAccessRestrictionsFn = (
    ctx: ReposReposRemoveAppAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRemoveCollaboratorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRemoveCollaboratorPath;
    },
    ReposReposRemoveCollaboratorResponse
  >;
  type ReposReposRemoveCollaboratorFn = (
    ctx: ReposReposRemoveCollaboratorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRemoveStatusCheckContextsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRemoveStatusCheckContextsPath;
      validatedBody: ReposReposRemoveStatusCheckContextsBody;
    },
    ReposReposRemoveStatusCheckContextsResponse
  >;
  type ReposReposRemoveStatusCheckContextsFn = (
    ctx: ReposReposRemoveStatusCheckContextsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRemoveStatusCheckProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRemoveStatusCheckProtectionPath;
    },
    ReposReposRemoveStatusCheckProtectionResponse
  >;
  type ReposReposRemoveStatusCheckProtectionFn = (
    ctx: ReposReposRemoveStatusCheckProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRemoveTeamAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRemoveTeamAccessRestrictionsPath;
      validatedBody: ReposReposRemoveTeamAccessRestrictionsBody;
    },
    ReposReposRemoveTeamAccessRestrictionsResponse
  >;
  type ReposReposRemoveTeamAccessRestrictionsFn = (
    ctx: ReposReposRemoveTeamAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRemoveUserAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRemoveUserAccessRestrictionsPath;
      validatedBody: ReposReposRemoveUserAccessRestrictionsBody;
    },
    ReposReposRemoveUserAccessRestrictionsResponse
  >;
  type ReposReposRemoveUserAccessRestrictionsFn = (
    ctx: ReposReposRemoveUserAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposReplaceAllTopicsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposReplaceAllTopicsPath;
      validatedBody: ReposReposReplaceAllTopicsBody;
    },
    ReposReposReplaceAllTopicsResponse
  >;
  type ReposReposReplaceAllTopicsFn = (
    ctx: ReposReposReplaceAllTopicsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposRequestPagesBuildCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposRequestPagesBuildPath;
    },
    ReposReposRequestPagesBuildResponse
  >;
  type ReposReposRequestPagesBuildFn = (
    ctx: ReposReposRequestPagesBuildCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposSetAdminBranchProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposSetAdminBranchProtectionPath;
    },
    ReposReposSetAdminBranchProtectionResponse
  >;
  type ReposReposSetAdminBranchProtectionFn = (
    ctx: ReposReposSetAdminBranchProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposSetAppAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposSetAppAccessRestrictionsPath;
      validatedBody: ReposReposSetAppAccessRestrictionsBody;
    },
    ReposReposSetAppAccessRestrictionsResponse
  >;
  type ReposReposSetAppAccessRestrictionsFn = (
    ctx: ReposReposSetAppAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposSetStatusCheckContextsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposSetStatusCheckContextsPath;
      validatedBody: ReposReposSetStatusCheckContextsBody;
    },
    ReposReposSetStatusCheckContextsResponse
  >;
  type ReposReposSetStatusCheckContextsFn = (
    ctx: ReposReposSetStatusCheckContextsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposSetTeamAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposSetTeamAccessRestrictionsPath;
      validatedBody: ReposReposSetTeamAccessRestrictionsBody;
    },
    ReposReposSetTeamAccessRestrictionsResponse
  >;
  type ReposReposSetTeamAccessRestrictionsFn = (
    ctx: ReposReposSetTeamAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposSetUserAccessRestrictionsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposSetUserAccessRestrictionsPath;
      validatedBody: ReposReposSetUserAccessRestrictionsBody;
    },
    ReposReposSetUserAccessRestrictionsResponse
  >;
  type ReposReposSetUserAccessRestrictionsFn = (
    ctx: ReposReposSetUserAccessRestrictionsCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposTestPushWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposTestPushWebhookPath;
    },
    ReposReposTestPushWebhookResponse
  >;
  type ReposReposTestPushWebhookFn = (
    ctx: ReposReposTestPushWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposTransferCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposTransferPath;
      validatedBody: ReposReposTransferBody;
    },
    ReposReposTransferResponse
  >;
  type ReposReposTransferFn = (
    ctx: ReposReposTransferCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdatePath;
      validatedBody: ReposReposUpdateBody;
    },
    ReposReposUpdateResponse
  >;
  type ReposReposUpdateFn = (
    ctx: ReposReposUpdateCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateBranchProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateBranchProtectionPath;
      validatedBody: ReposReposUpdateBranchProtectionBody;
    },
    ReposReposUpdateBranchProtectionResponse
  >;
  type ReposReposUpdateBranchProtectionFn = (
    ctx: ReposReposUpdateBranchProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateCommitCommentCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateCommitCommentPath;
      validatedBody: ReposReposUpdateCommitCommentBody;
    },
    ReposReposUpdateCommitCommentResponse
  >;
  type ReposReposUpdateCommitCommentFn = (
    ctx: ReposReposUpdateCommitCommentCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateInformationAboutPagesSiteCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateInformationAboutPagesSitePath;
      validatedBody: ReposReposUpdateInformationAboutPagesSiteBody;
    },
    ReposReposUpdateInformationAboutPagesSiteResponse
  >;
  type ReposReposUpdateInformationAboutPagesSiteFn = (
    ctx: ReposReposUpdateInformationAboutPagesSiteCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateInvitationCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateInvitationPath;
      validatedBody: ReposReposUpdateInvitationBody;
    },
    ReposReposUpdateInvitationResponse
  >;
  type ReposReposUpdateInvitationFn = (
    ctx: ReposReposUpdateInvitationCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdatePullRequestReviewProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdatePullRequestReviewProtectionPath;
      validatedBody: ReposReposUpdatePullRequestReviewProtectionBody;
    },
    ReposReposUpdatePullRequestReviewProtectionResponse
  >;
  type ReposReposUpdatePullRequestReviewProtectionFn = (
    ctx: ReposReposUpdatePullRequestReviewProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateReleaseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateReleasePath;
      validatedBody: ReposReposUpdateReleaseBody;
    },
    ReposReposUpdateReleaseResponse
  >;
  type ReposReposUpdateReleaseFn = (
    ctx: ReposReposUpdateReleaseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateReleaseAssetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateReleaseAssetPath;
      validatedBody: ReposReposUpdateReleaseAssetBody;
    },
    ReposReposUpdateReleaseAssetResponse
  >;
  type ReposReposUpdateReleaseAssetFn = (
    ctx: ReposReposUpdateReleaseAssetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateStatusCheckProtectionCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateStatusCheckProtectionPath;
      validatedBody: ReposReposUpdateStatusCheckProtectionBody;
    },
    ReposReposUpdateStatusCheckProtectionResponse
  >;
  type ReposReposUpdateStatusCheckProtectionFn = (
    ctx: ReposReposUpdateStatusCheckProtectionCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateWebhookCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateWebhookPath;
      validatedBody: ReposReposUpdateWebhookBody;
    },
    ReposReposUpdateWebhookResponse
  >;
  type ReposReposUpdateWebhookFn = (
    ctx: ReposReposUpdateWebhookCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUpdateWebhookConfigForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ReposReposUpdateWebhookConfigForRepoPath;
      validatedBody: ReposReposUpdateWebhookConfigForRepoBody;
    },
    ReposReposUpdateWebhookConfigForRepoResponse
  >;
  type ReposReposUpdateWebhookConfigForRepoFn = (
    ctx: ReposReposUpdateWebhookConfigForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type ReposReposUploadReleaseAssetCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ReposReposUploadReleaseAssetQuery;
      validatedParams: ReposReposUploadReleaseAssetPath;
    },
    ReposReposUploadReleaseAssetResponse
  >;
  type ReposReposUploadReleaseAssetFn = (
    ctx: ReposReposUploadReleaseAssetCtx,
    next: Next,
  ) => void | Promise<void>;
  type ScimScimDeleteUserFromOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ScimScimDeleteUserFromOrgPath;
    },
    ScimScimDeleteUserFromOrgResponse
  >;
  type ScimScimDeleteUserFromOrgFn = (
    ctx: ScimScimDeleteUserFromOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type ScimScimGetProvisioningInformationForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ScimScimGetProvisioningInformationForUserPath;
    },
    ScimScimGetProvisioningInformationForUserResponse
  >;
  type ScimScimGetProvisioningInformationForUserFn = (
    ctx: ScimScimGetProvisioningInformationForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ScimScimListProvisionedIdentitiesCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ScimScimListProvisionedIdentitiesQuery;
      validatedParams: ScimScimListProvisionedIdentitiesPath;
    },
    ScimScimListProvisionedIdentitiesResponse
  >;
  type ScimScimListProvisionedIdentitiesFn = (
    ctx: ScimScimListProvisionedIdentitiesCtx,
    next: Next,
  ) => void | Promise<void>;
  type ScimScimProvisionAndInviteUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ScimScimProvisionAndInviteUserPath;
      validatedBody: ScimScimProvisionAndInviteUserBody;
    },
    ScimScimProvisionAndInviteUserResponse
  >;
  type ScimScimProvisionAndInviteUserFn = (
    ctx: ScimScimProvisionAndInviteUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ScimScimSetInformationForProvisionedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ScimScimSetInformationForProvisionedUserPath;
      validatedBody: ScimScimSetInformationForProvisionedUserBody;
    },
    ScimScimSetInformationForProvisionedUserResponse
  >;
  type ScimScimSetInformationForProvisionedUserFn = (
    ctx: ScimScimSetInformationForProvisionedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type ScimScimUpdateAttributeForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ScimScimUpdateAttributeForUserPath;
      validatedBody: ScimScimUpdateAttributeForUserBody;
    },
    ScimScimUpdateAttributeForUserResponse
  >;
  type ScimScimUpdateAttributeForUserFn = (
    ctx: ScimScimUpdateAttributeForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchCodeCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchCodeQuery;
    },
    SearchSearchCodeResponse
  >;
  type SearchSearchCodeFn = (
    ctx: SearchSearchCodeCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchCommitsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchCommitsQuery;
    },
    SearchSearchCommitsResponse
  >;
  type SearchSearchCommitsFn = (
    ctx: SearchSearchCommitsCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchIssuesAndPullRequestsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchIssuesAndPullRequestsQuery;
    },
    SearchSearchIssuesAndPullRequestsResponse
  >;
  type SearchSearchIssuesAndPullRequestsFn = (
    ctx: SearchSearchIssuesAndPullRequestsCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchLabelsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchLabelsQuery;
    },
    SearchSearchLabelsResponse
  >;
  type SearchSearchLabelsFn = (
    ctx: SearchSearchLabelsCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchReposCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchReposQuery;
    },
    SearchSearchReposResponse
  >;
  type SearchSearchReposFn = (
    ctx: SearchSearchReposCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchTopicsCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchTopicsQuery;
    },
    SearchSearchTopicsResponse
  >;
  type SearchSearchTopicsFn = (
    ctx: SearchSearchTopicsCtx,
    next: Next,
  ) => void | Promise<void>;
  type SearchSearchUsersCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SearchSearchUsersQuery;
    },
    SearchSearchUsersResponse
  >;
  type SearchSearchUsersFn = (
    ctx: SearchSearchUsersCtx,
    next: Next,
  ) => void | Promise<void>;
  type SecretScanningSecretScanningGetAlertCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: SecretScanningSecretScanningGetAlertPath;
    },
    SecretScanningSecretScanningGetAlertResponse
  >;
  type SecretScanningSecretScanningGetAlertFn = (
    ctx: SecretScanningSecretScanningGetAlertCtx,
    next: Next,
  ) => void | Promise<void>;
  type SecretScanningSecretScanningListAlertsForRepoCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: SecretScanningSecretScanningListAlertsForRepoQuery;
      validatedParams: SecretScanningSecretScanningListAlertsForRepoPath;
    },
    SecretScanningSecretScanningListAlertsForRepoResponse
  >;
  type SecretScanningSecretScanningListAlertsForRepoFn = (
    ctx: SecretScanningSecretScanningListAlertsForRepoCtx,
    next: Next,
  ) => void | Promise<void>;
  type SecretScanningSecretScanningUpdateAlertCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: SecretScanningSecretScanningUpdateAlertPath;
      validatedBody: SecretScanningSecretScanningUpdateAlertBody;
    },
    SecretScanningSecretScanningUpdateAlertResponse
  >;
  type SecretScanningSecretScanningUpdateAlertFn = (
    ctx: SecretScanningSecretScanningUpdateAlertCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ServerCreateQuery;
      validatedBody: ServerCreateBody;
    },
    ServerCreateResponse
  >;
  type ServerCreateFn = (
    ctx: ServerCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerEmptyResponseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ServerEmptyResponseQuery;
    },
    unknown
  >;
  type ServerEmptyResponseFn = (
    ctx: ServerEmptyResponseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerGetFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: ServerGetFileQuery;
    },
    ServerGetFileResponse
  >;
  type ServerGetFileFn = (
    ctx: ServerGetFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerGetIdCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: ServerGetIdParams;
    },
    ServerGetIdResponse
  >;
  type ServerGetIdFn = (
    ctx: ServerGetIdCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerInvalidResponseCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ServerInvalidResponseResponse
  >;
  type ServerInvalidResponseFn = (
    ctx: ServerInvalidResponseCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerPatchTestCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ServerPatchTestResponse
  >;
  type ServerPatchTestFn = (
    ctx: ServerPatchTestCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerSearchCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ServerSearchBody;
    },
    ServerSearchResponse
  >;
  type ServerSearchFn = (
    ctx: ServerSearchCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerServerErrorCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    ServerServerErrorResponse
  >;
  type ServerServerErrorFn = (
    ctx: ServerServerErrorCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerSetFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedFiles: ServerSetFileFiles;
    },
    ServerSetFileResponse
  >;
  type ServerSetFileFn = (
    ctx: ServerSetFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerSetMimeCheckedFileCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedFiles: ServerSetMimeCheckedFileFiles;
    },
    ServerSetMimeCheckedFileResponse
  >;
  type ServerSetMimeCheckedFileFn = (
    ctx: ServerSetMimeCheckedFileCtx,
    next: Next,
  ) => void | Promise<void>;
  type ServerValidatorShimCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: ServerValidatorShimBody;
    },
    ServerValidatorShimResponse
  >;
  type ServerValidatorShimFn = (
    ctx: ServerValidatorShimCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddMemberLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddMemberLegacyPath;
    },
    TeamsTeamsAddMemberLegacyResponse
  >;
  type TeamsTeamsAddMemberLegacyFn = (
    ctx: TeamsTeamsAddMemberLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddOrUpdateMembershipForUserInOrgPath;
      validatedBody: TeamsTeamsAddOrUpdateMembershipForUserInOrgBody;
    },
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponse
  >;
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgFn = (
    ctx: TeamsTeamsAddOrUpdateMembershipForUserInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddOrUpdateMembershipForUserLegacyPath;
      validatedBody: TeamsTeamsAddOrUpdateMembershipForUserLegacyBody;
    },
    TeamsTeamsAddOrUpdateMembershipForUserLegacyResponse
  >;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyFn = (
    ctx: TeamsTeamsAddOrUpdateMembershipForUserLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath;
      validatedBody: TeamsTeamsAddOrUpdateProjectPermissionsInOrgBody;
    },
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgResponse
  >;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgFn = (
    ctx: TeamsTeamsAddOrUpdateProjectPermissionsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath;
      validatedBody: TeamsTeamsAddOrUpdateProjectPermissionsLegacyBody;
    },
    TeamsTeamsAddOrUpdateProjectPermissionsLegacyResponse
  >;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyFn = (
    ctx: TeamsTeamsAddOrUpdateProjectPermissionsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath;
      validatedBody: TeamsTeamsAddOrUpdateRepoPermissionsInOrgBody;
    },
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgResponse
  >;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgFn = (
    ctx: TeamsTeamsAddOrUpdateRepoPermissionsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath;
      validatedBody: TeamsTeamsAddOrUpdateRepoPermissionsLegacyBody;
    },
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyResponse
  >;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyFn = (
    ctx: TeamsTeamsAddOrUpdateRepoPermissionsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCheckPermissionsForProjectInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCheckPermissionsForProjectInOrgPath;
    },
    TeamsTeamsCheckPermissionsForProjectInOrgResponse
  >;
  type TeamsTeamsCheckPermissionsForProjectInOrgFn = (
    ctx: TeamsTeamsCheckPermissionsForProjectInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCheckPermissionsForProjectLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCheckPermissionsForProjectLegacyPath;
    },
    TeamsTeamsCheckPermissionsForProjectLegacyResponse
  >;
  type TeamsTeamsCheckPermissionsForProjectLegacyFn = (
    ctx: TeamsTeamsCheckPermissionsForProjectLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCheckPermissionsForRepoInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCheckPermissionsForRepoInOrgPath;
    },
    TeamsTeamsCheckPermissionsForRepoInOrgResponse
  >;
  type TeamsTeamsCheckPermissionsForRepoInOrgFn = (
    ctx: TeamsTeamsCheckPermissionsForRepoInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCheckPermissionsForRepoLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCheckPermissionsForRepoLegacyPath;
    },
    TeamsTeamsCheckPermissionsForRepoLegacyResponse
  >;
  type TeamsTeamsCheckPermissionsForRepoLegacyFn = (
    ctx: TeamsTeamsCheckPermissionsForRepoLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreatePath;
      validatedBody: TeamsTeamsCreateBody;
    },
    TeamsTeamsCreateResponse
  >;
  type TeamsTeamsCreateFn = (
    ctx: TeamsTeamsCreateCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateDiscussionCommentInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreateDiscussionCommentInOrgPath;
      validatedBody: TeamsTeamsCreateDiscussionCommentInOrgBody;
    },
    TeamsTeamsCreateDiscussionCommentInOrgResponse
  >;
  type TeamsTeamsCreateDiscussionCommentInOrgFn = (
    ctx: TeamsTeamsCreateDiscussionCommentInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateDiscussionCommentLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreateDiscussionCommentLegacyPath;
      validatedBody: TeamsTeamsCreateDiscussionCommentLegacyBody;
    },
    TeamsTeamsCreateDiscussionCommentLegacyResponse
  >;
  type TeamsTeamsCreateDiscussionCommentLegacyFn = (
    ctx: TeamsTeamsCreateDiscussionCommentLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateDiscussionInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreateDiscussionInOrgPath;
      validatedBody: TeamsTeamsCreateDiscussionInOrgBody;
    },
    TeamsTeamsCreateDiscussionInOrgResponse
  >;
  type TeamsTeamsCreateDiscussionInOrgFn = (
    ctx: TeamsTeamsCreateDiscussionInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateDiscussionLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreateDiscussionLegacyPath;
      validatedBody: TeamsTeamsCreateDiscussionLegacyBody;
    },
    TeamsTeamsCreateDiscussionLegacyResponse
  >;
  type TeamsTeamsCreateDiscussionLegacyFn = (
    ctx: TeamsTeamsCreateDiscussionLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgPath;
      validatedBody: TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgBody;
    },
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponse
  >;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgFn = (
    ctx: TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyPath;
      validatedBody: TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyBody;
    },
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse
  >;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyFn = (
    ctx: TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsDeleteDiscussionCommentInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsDeleteDiscussionCommentInOrgPath;
    },
    TeamsTeamsDeleteDiscussionCommentInOrgResponse
  >;
  type TeamsTeamsDeleteDiscussionCommentInOrgFn = (
    ctx: TeamsTeamsDeleteDiscussionCommentInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsDeleteDiscussionCommentLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsDeleteDiscussionCommentLegacyPath;
    },
    TeamsTeamsDeleteDiscussionCommentLegacyResponse
  >;
  type TeamsTeamsDeleteDiscussionCommentLegacyFn = (
    ctx: TeamsTeamsDeleteDiscussionCommentLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsDeleteDiscussionInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsDeleteDiscussionInOrgPath;
    },
    TeamsTeamsDeleteDiscussionInOrgResponse
  >;
  type TeamsTeamsDeleteDiscussionInOrgFn = (
    ctx: TeamsTeamsDeleteDiscussionInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsDeleteDiscussionLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsDeleteDiscussionLegacyPath;
    },
    TeamsTeamsDeleteDiscussionLegacyResponse
  >;
  type TeamsTeamsDeleteDiscussionLegacyFn = (
    ctx: TeamsTeamsDeleteDiscussionLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsDeleteInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsDeleteInOrgPath;
    },
    TeamsTeamsDeleteInOrgResponse
  >;
  type TeamsTeamsDeleteInOrgFn = (
    ctx: TeamsTeamsDeleteInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsDeleteLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsDeleteLegacyPath;
    },
    TeamsTeamsDeleteLegacyResponse
  >;
  type TeamsTeamsDeleteLegacyFn = (
    ctx: TeamsTeamsDeleteLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetByNameCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetByNamePath;
    },
    TeamsTeamsGetByNameResponse
  >;
  type TeamsTeamsGetByNameFn = (
    ctx: TeamsTeamsGetByNameCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetDiscussionCommentInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetDiscussionCommentInOrgPath;
    },
    TeamsTeamsGetDiscussionCommentInOrgResponse
  >;
  type TeamsTeamsGetDiscussionCommentInOrgFn = (
    ctx: TeamsTeamsGetDiscussionCommentInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetDiscussionCommentLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetDiscussionCommentLegacyPath;
    },
    TeamsTeamsGetDiscussionCommentLegacyResponse
  >;
  type TeamsTeamsGetDiscussionCommentLegacyFn = (
    ctx: TeamsTeamsGetDiscussionCommentLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetDiscussionInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetDiscussionInOrgPath;
    },
    TeamsTeamsGetDiscussionInOrgResponse
  >;
  type TeamsTeamsGetDiscussionInOrgFn = (
    ctx: TeamsTeamsGetDiscussionInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetDiscussionLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetDiscussionLegacyPath;
    },
    TeamsTeamsGetDiscussionLegacyResponse
  >;
  type TeamsTeamsGetDiscussionLegacyFn = (
    ctx: TeamsTeamsGetDiscussionLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetLegacyPath;
    },
    TeamsTeamsGetLegacyResponse
  >;
  type TeamsTeamsGetLegacyFn = (
    ctx: TeamsTeamsGetLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetMemberLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetMemberLegacyPath;
    },
    TeamsTeamsGetMemberLegacyResponse
  >;
  type TeamsTeamsGetMemberLegacyFn = (
    ctx: TeamsTeamsGetMemberLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetMembershipForUserInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetMembershipForUserInOrgPath;
    },
    TeamsTeamsGetMembershipForUserInOrgResponse
  >;
  type TeamsTeamsGetMembershipForUserInOrgFn = (
    ctx: TeamsTeamsGetMembershipForUserInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsGetMembershipForUserLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsGetMembershipForUserLegacyPath;
    },
    TeamsTeamsGetMembershipForUserLegacyResponse
  >;
  type TeamsTeamsGetMembershipForUserLegacyFn = (
    ctx: TeamsTeamsGetMembershipForUserLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListQuery;
      validatedParams: TeamsTeamsListPath;
    },
    TeamsTeamsListResponse
  >;
  type TeamsTeamsListFn = (
    ctx: TeamsTeamsListCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListChildInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListChildInOrgQuery;
      validatedParams: TeamsTeamsListChildInOrgPath;
    },
    TeamsTeamsListChildInOrgResponse
  >;
  type TeamsTeamsListChildInOrgFn = (
    ctx: TeamsTeamsListChildInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListChildLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListChildLegacyQuery;
      validatedParams: TeamsTeamsListChildLegacyPath;
    },
    TeamsTeamsListChildLegacyResponse
  >;
  type TeamsTeamsListChildLegacyFn = (
    ctx: TeamsTeamsListChildLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListDiscussionCommentsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListDiscussionCommentsInOrgQuery;
      validatedParams: TeamsTeamsListDiscussionCommentsInOrgPath;
    },
    TeamsTeamsListDiscussionCommentsInOrgResponse
  >;
  type TeamsTeamsListDiscussionCommentsInOrgFn = (
    ctx: TeamsTeamsListDiscussionCommentsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListDiscussionCommentsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListDiscussionCommentsLegacyQuery;
      validatedParams: TeamsTeamsListDiscussionCommentsLegacyPath;
    },
    TeamsTeamsListDiscussionCommentsLegacyResponse
  >;
  type TeamsTeamsListDiscussionCommentsLegacyFn = (
    ctx: TeamsTeamsListDiscussionCommentsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListDiscussionsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListDiscussionsInOrgQuery;
      validatedParams: TeamsTeamsListDiscussionsInOrgPath;
    },
    TeamsTeamsListDiscussionsInOrgResponse
  >;
  type TeamsTeamsListDiscussionsInOrgFn = (
    ctx: TeamsTeamsListDiscussionsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListDiscussionsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListDiscussionsLegacyQuery;
      validatedParams: TeamsTeamsListDiscussionsLegacyPath;
    },
    TeamsTeamsListDiscussionsLegacyResponse
  >;
  type TeamsTeamsListDiscussionsLegacyFn = (
    ctx: TeamsTeamsListDiscussionsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListForAuthenticatedUserQuery;
    },
    TeamsTeamsListForAuthenticatedUserResponse
  >;
  type TeamsTeamsListForAuthenticatedUserFn = (
    ctx: TeamsTeamsListForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListIdpGroupsForLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsListIdpGroupsForLegacyPath;
    },
    TeamsTeamsListIdpGroupsForLegacyResponse
  >;
  type TeamsTeamsListIdpGroupsForLegacyFn = (
    ctx: TeamsTeamsListIdpGroupsForLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListIdpGroupsForOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListIdpGroupsForOrgQuery;
      validatedParams: TeamsTeamsListIdpGroupsForOrgPath;
    },
    TeamsTeamsListIdpGroupsForOrgResponse
  >;
  type TeamsTeamsListIdpGroupsForOrgFn = (
    ctx: TeamsTeamsListIdpGroupsForOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListIdpGroupsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsListIdpGroupsInOrgPath;
    },
    TeamsTeamsListIdpGroupsInOrgResponse
  >;
  type TeamsTeamsListIdpGroupsInOrgFn = (
    ctx: TeamsTeamsListIdpGroupsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListMembersInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListMembersInOrgQuery;
      validatedParams: TeamsTeamsListMembersInOrgPath;
    },
    TeamsTeamsListMembersInOrgResponse
  >;
  type TeamsTeamsListMembersInOrgFn = (
    ctx: TeamsTeamsListMembersInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListMembersLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListMembersLegacyQuery;
      validatedParams: TeamsTeamsListMembersLegacyPath;
    },
    TeamsTeamsListMembersLegacyResponse
  >;
  type TeamsTeamsListMembersLegacyFn = (
    ctx: TeamsTeamsListMembersLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListPendingInvitationsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListPendingInvitationsInOrgQuery;
      validatedParams: TeamsTeamsListPendingInvitationsInOrgPath;
    },
    TeamsTeamsListPendingInvitationsInOrgResponse
  >;
  type TeamsTeamsListPendingInvitationsInOrgFn = (
    ctx: TeamsTeamsListPendingInvitationsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListPendingInvitationsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListPendingInvitationsLegacyQuery;
      validatedParams: TeamsTeamsListPendingInvitationsLegacyPath;
    },
    TeamsTeamsListPendingInvitationsLegacyResponse
  >;
  type TeamsTeamsListPendingInvitationsLegacyFn = (
    ctx: TeamsTeamsListPendingInvitationsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListProjectsInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListProjectsInOrgQuery;
      validatedParams: TeamsTeamsListProjectsInOrgPath;
    },
    TeamsTeamsListProjectsInOrgResponse
  >;
  type TeamsTeamsListProjectsInOrgFn = (
    ctx: TeamsTeamsListProjectsInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListProjectsLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListProjectsLegacyQuery;
      validatedParams: TeamsTeamsListProjectsLegacyPath;
    },
    TeamsTeamsListProjectsLegacyResponse
  >;
  type TeamsTeamsListProjectsLegacyFn = (
    ctx: TeamsTeamsListProjectsLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListReposInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListReposInOrgQuery;
      validatedParams: TeamsTeamsListReposInOrgPath;
    },
    TeamsTeamsListReposInOrgResponse
  >;
  type TeamsTeamsListReposInOrgFn = (
    ctx: TeamsTeamsListReposInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsListReposLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: TeamsTeamsListReposLegacyQuery;
      validatedParams: TeamsTeamsListReposLegacyPath;
    },
    TeamsTeamsListReposLegacyResponse
  >;
  type TeamsTeamsListReposLegacyFn = (
    ctx: TeamsTeamsListReposLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveMemberLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveMemberLegacyPath;
    },
    TeamsTeamsRemoveMemberLegacyResponse
  >;
  type TeamsTeamsRemoveMemberLegacyFn = (
    ctx: TeamsTeamsRemoveMemberLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveMembershipForUserInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveMembershipForUserInOrgPath;
    },
    TeamsTeamsRemoveMembershipForUserInOrgResponse
  >;
  type TeamsTeamsRemoveMembershipForUserInOrgFn = (
    ctx: TeamsTeamsRemoveMembershipForUserInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveMembershipForUserLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveMembershipForUserLegacyPath;
    },
    TeamsTeamsRemoveMembershipForUserLegacyResponse
  >;
  type TeamsTeamsRemoveMembershipForUserLegacyFn = (
    ctx: TeamsTeamsRemoveMembershipForUserLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveProjectInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveProjectInOrgPath;
    },
    TeamsTeamsRemoveProjectInOrgResponse
  >;
  type TeamsTeamsRemoveProjectInOrgFn = (
    ctx: TeamsTeamsRemoveProjectInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveProjectLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveProjectLegacyPath;
    },
    TeamsTeamsRemoveProjectLegacyResponse
  >;
  type TeamsTeamsRemoveProjectLegacyFn = (
    ctx: TeamsTeamsRemoveProjectLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveRepoInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveRepoInOrgPath;
    },
    TeamsTeamsRemoveRepoInOrgResponse
  >;
  type TeamsTeamsRemoveRepoInOrgFn = (
    ctx: TeamsTeamsRemoveRepoInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsRemoveRepoLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsRemoveRepoLegacyPath;
    },
    TeamsTeamsRemoveRepoLegacyResponse
  >;
  type TeamsTeamsRemoveRepoLegacyFn = (
    ctx: TeamsTeamsRemoveRepoLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsUpdateDiscussionCommentInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsUpdateDiscussionCommentInOrgPath;
      validatedBody: TeamsTeamsUpdateDiscussionCommentInOrgBody;
    },
    TeamsTeamsUpdateDiscussionCommentInOrgResponse
  >;
  type TeamsTeamsUpdateDiscussionCommentInOrgFn = (
    ctx: TeamsTeamsUpdateDiscussionCommentInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsUpdateDiscussionCommentLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsUpdateDiscussionCommentLegacyPath;
      validatedBody: TeamsTeamsUpdateDiscussionCommentLegacyBody;
    },
    TeamsTeamsUpdateDiscussionCommentLegacyResponse
  >;
  type TeamsTeamsUpdateDiscussionCommentLegacyFn = (
    ctx: TeamsTeamsUpdateDiscussionCommentLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsUpdateDiscussionInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsUpdateDiscussionInOrgPath;
      validatedBody: TeamsTeamsUpdateDiscussionInOrgBody;
    },
    TeamsTeamsUpdateDiscussionInOrgResponse
  >;
  type TeamsTeamsUpdateDiscussionInOrgFn = (
    ctx: TeamsTeamsUpdateDiscussionInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsUpdateDiscussionLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsUpdateDiscussionLegacyPath;
      validatedBody: TeamsTeamsUpdateDiscussionLegacyBody;
    },
    TeamsTeamsUpdateDiscussionLegacyResponse
  >;
  type TeamsTeamsUpdateDiscussionLegacyFn = (
    ctx: TeamsTeamsUpdateDiscussionLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsUpdateInOrgCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsUpdateInOrgPath;
      validatedBody: TeamsTeamsUpdateInOrgBody;
    },
    TeamsTeamsUpdateInOrgResponse
  >;
  type TeamsTeamsUpdateInOrgFn = (
    ctx: TeamsTeamsUpdateInOrgCtx,
    next: Next,
  ) => void | Promise<void>;
  type TeamsTeamsUpdateLegacyCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: TeamsTeamsUpdateLegacyPath;
      validatedBody: TeamsTeamsUpdateLegacyBody;
    },
    TeamsTeamsUpdateLegacyResponse
  >;
  type TeamsTeamsUpdateLegacyFn = (
    ctx: TeamsTeamsUpdateLegacyCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersAddEmailForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: UsersUsersAddEmailForAuthenticatedBody;
    },
    UsersUsersAddEmailForAuthenticatedResponse
  >;
  type UsersUsersAddEmailForAuthenticatedFn = (
    ctx: UsersUsersAddEmailForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersBlockCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersBlockPath;
    },
    UsersUsersBlockResponse
  >;
  type UsersUsersBlockFn = (
    ctx: UsersUsersBlockCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersCheckBlockedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersCheckBlockedPath;
    },
    UsersUsersCheckBlockedResponse
  >;
  type UsersUsersCheckBlockedFn = (
    ctx: UsersUsersCheckBlockedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersCheckFollowingForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersCheckFollowingForUserPath;
    },
    UsersUsersCheckFollowingForUserResponse
  >;
  type UsersUsersCheckFollowingForUserFn = (
    ctx: UsersUsersCheckFollowingForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersCheckPersonIsFollowedByAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersCheckPersonIsFollowedByAuthenticatedPath;
    },
    UsersUsersCheckPersonIsFollowedByAuthenticatedResponse
  >;
  type UsersUsersCheckPersonIsFollowedByAuthenticatedFn = (
    ctx: UsersUsersCheckPersonIsFollowedByAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersCreateGpgKeyForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: UsersUsersCreateGpgKeyForAuthenticatedBody;
    },
    UsersUsersCreateGpgKeyForAuthenticatedResponse
  >;
  type UsersUsersCreateGpgKeyForAuthenticatedFn = (
    ctx: UsersUsersCreateGpgKeyForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersCreatePublicSshKeyForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: UsersUsersCreatePublicSshKeyForAuthenticatedBody;
    },
    UsersUsersCreatePublicSshKeyForAuthenticatedResponse
  >;
  type UsersUsersCreatePublicSshKeyForAuthenticatedFn = (
    ctx: UsersUsersCreatePublicSshKeyForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersDeleteEmailForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: UsersUsersDeleteEmailForAuthenticatedBody;
    },
    UsersUsersDeleteEmailForAuthenticatedResponse
  >;
  type UsersUsersDeleteEmailForAuthenticatedFn = (
    ctx: UsersUsersDeleteEmailForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersDeleteGpgKeyForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersDeleteGpgKeyForAuthenticatedPath;
    },
    UsersUsersDeleteGpgKeyForAuthenticatedResponse
  >;
  type UsersUsersDeleteGpgKeyForAuthenticatedFn = (
    ctx: UsersUsersDeleteGpgKeyForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersDeletePublicSshKeyForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersDeletePublicSshKeyForAuthenticatedPath;
    },
    UsersUsersDeletePublicSshKeyForAuthenticatedResponse
  >;
  type UsersUsersDeletePublicSshKeyForAuthenticatedFn = (
    ctx: UsersUsersDeletePublicSshKeyForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersFollowCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersFollowPath;
    },
    UsersUsersFollowResponse
  >;
  type UsersUsersFollowFn = (
    ctx: UsersUsersFollowCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersGetAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    UsersUsersGetAuthenticatedResponse
  >;
  type UsersUsersGetAuthenticatedFn = (
    ctx: UsersUsersGetAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersGetByUsernameCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersGetByUsernamePath;
    },
    UsersUsersGetByUsernameResponse
  >;
  type UsersUsersGetByUsernameFn = (
    ctx: UsersUsersGetByUsernameCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersGetContextForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersGetContextForUserQuery;
      validatedParams: UsersUsersGetContextForUserPath;
    },
    UsersUsersGetContextForUserResponse
  >;
  type UsersUsersGetContextForUserFn = (
    ctx: UsersUsersGetContextForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersGetGpgKeyForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersGetGpgKeyForAuthenticatedPath;
    },
    UsersUsersGetGpgKeyForAuthenticatedResponse
  >;
  type UsersUsersGetGpgKeyForAuthenticatedFn = (
    ctx: UsersUsersGetGpgKeyForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersGetPublicSshKeyForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersGetPublicSshKeyForAuthenticatedPath;
    },
    UsersUsersGetPublicSshKeyForAuthenticatedResponse
  >;
  type UsersUsersGetPublicSshKeyForAuthenticatedFn = (
    ctx: UsersUsersGetPublicSshKeyForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListQuery;
    },
    UsersUsersListResponse
  >;
  type UsersUsersListFn = (
    ctx: UsersUsersListCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListBlockedByAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
    },
    UsersUsersListBlockedByAuthenticatedResponse
  >;
  type UsersUsersListBlockedByAuthenticatedFn = (
    ctx: UsersUsersListBlockedByAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListEmailsForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListEmailsForAuthenticatedQuery;
    },
    UsersUsersListEmailsForAuthenticatedResponse
  >;
  type UsersUsersListEmailsForAuthenticatedFn = (
    ctx: UsersUsersListEmailsForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListFollowedByAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListFollowedByAuthenticatedQuery;
    },
    UsersUsersListFollowedByAuthenticatedResponse
  >;
  type UsersUsersListFollowedByAuthenticatedFn = (
    ctx: UsersUsersListFollowedByAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListFollowersForAuthenticatedUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListFollowersForAuthenticatedUserQuery;
    },
    UsersUsersListFollowersForAuthenticatedUserResponse
  >;
  type UsersUsersListFollowersForAuthenticatedUserFn = (
    ctx: UsersUsersListFollowersForAuthenticatedUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListFollowersForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListFollowersForUserQuery;
      validatedParams: UsersUsersListFollowersForUserPath;
    },
    UsersUsersListFollowersForUserResponse
  >;
  type UsersUsersListFollowersForUserFn = (
    ctx: UsersUsersListFollowersForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListFollowingForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListFollowingForUserQuery;
      validatedParams: UsersUsersListFollowingForUserPath;
    },
    UsersUsersListFollowingForUserResponse
  >;
  type UsersUsersListFollowingForUserFn = (
    ctx: UsersUsersListFollowingForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListGpgKeysForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListGpgKeysForAuthenticatedQuery;
    },
    UsersUsersListGpgKeysForAuthenticatedResponse
  >;
  type UsersUsersListGpgKeysForAuthenticatedFn = (
    ctx: UsersUsersListGpgKeysForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListGpgKeysForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListGpgKeysForUserQuery;
      validatedParams: UsersUsersListGpgKeysForUserPath;
    },
    UsersUsersListGpgKeysForUserResponse
  >;
  type UsersUsersListGpgKeysForUserFn = (
    ctx: UsersUsersListGpgKeysForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListPublicEmailsForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListPublicEmailsForAuthenticatedQuery;
    },
    UsersUsersListPublicEmailsForAuthenticatedResponse
  >;
  type UsersUsersListPublicEmailsForAuthenticatedFn = (
    ctx: UsersUsersListPublicEmailsForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListPublicKeysForUserCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListPublicKeysForUserQuery;
      validatedParams: UsersUsersListPublicKeysForUserPath;
    },
    UsersUsersListPublicKeysForUserResponse
  >;
  type UsersUsersListPublicKeysForUserFn = (
    ctx: UsersUsersListPublicKeysForUserCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersListPublicSshKeysForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedQuery: UsersUsersListPublicSshKeysForAuthenticatedQuery;
    },
    UsersUsersListPublicSshKeysForAuthenticatedResponse
  >;
  type UsersUsersListPublicSshKeysForAuthenticatedFn = (
    ctx: UsersUsersListPublicSshKeysForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: UsersUsersSetPrimaryEmailVisibilityForAuthenticatedBody;
    },
    UsersUsersSetPrimaryEmailVisibilityForAuthenticatedResponse
  >;
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticatedFn = (
    ctx: UsersUsersSetPrimaryEmailVisibilityForAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersUnblockCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersUnblockPath;
    },
    UsersUsersUnblockResponse
  >;
  type UsersUsersUnblockFn = (
    ctx: UsersUsersUnblockCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersUnfollowCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedParams: UsersUsersUnfollowPath;
    },
    UsersUsersUnfollowResponse
  >;
  type UsersUsersUnfollowFn = (
    ctx: UsersUsersUnfollowCtx,
    next: Next,
  ) => void | Promise<void>;
  type UsersUsersUpdateAuthenticatedCtx = Context<
    {},
    {
      event: InsightEvent;
      log: Logger;
      validatedBody: UsersUsersUpdateAuthenticatedBody;
    },
    UsersUsersUpdateAuthenticatedResponse
  >;
  type UsersUsersUpdateAuthenticatedFn = (
    ctx: UsersUsersUpdateAuthenticatedCtx,
    next: Next,
  ) => void | Promise<void>;
  type GroupMiddleware = {
    actions: Middleware | Middleware[];
    activity: Middleware | Middleware[];
    apps: Middleware | Middleware[];
    auditLog: Middleware | Middleware[];
    billing: Middleware | Middleware[];
    checks: Middleware | Middleware[];
    codeScanning: Middleware | Middleware[];
    codesOfConduct: Middleware | Middleware[];
    compas: Middleware | Middleware[];
    emojis: Middleware | Middleware[];
    enterpriseAdmin: Middleware | Middleware[];
    gists: Middleware | Middleware[];
    git: Middleware | Middleware[];
    gitignore: Middleware | Middleware[];
    group: Middleware | Middleware[];
    interactions: Middleware | Middleware[];
    issues: Middleware | Middleware[];
    licenses: Middleware | Middleware[];
    markdown: Middleware | Middleware[];
    meta: Middleware | Middleware[];
    migrations: Middleware | Middleware[];
    oauthAuthorizations: Middleware | Middleware[];
    orgs: Middleware | Middleware[];
    projects: Middleware | Middleware[];
    pulls: Middleware | Middleware[];
    rateLimit: Middleware | Middleware[];
    reactions: Middleware | Middleware[];
    repos: Middleware | Middleware[];
    scim: Middleware | Middleware[];
    search: Middleware | Middleware[];
    secretScanning: Middleware | Middleware[];
    server: Middleware | Middleware[];
    teams: Middleware | Middleware[];
    users: Middleware | Middleware[];
  };
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPathInput =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPath;
  type ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsAddSelectedRepoToOrgSecretPathInput =
    ActionsActionsAddSelectedRepoToOrgSecretPath;
  type ActionsActionsAddSelectedRepoToOrgSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsAddSelfHostedRunnerToGroupForOrgPathInput =
    ActionsActionsAddSelfHostedRunnerToGroupForOrgPath;
  type ActionsActionsAddSelfHostedRunnerToGroupForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCancelWorkflowRunPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsCancelWorkflowRunResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCreateOrUpdateOrgSecretPathInput =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsCreateOrUpdateOrgSecretBodyInput =
    ActionsActionsCreateOrUpdateOrgSecretBody;
  type ActionsActionsCreateOrUpdateOrgSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCreateOrUpdateRepoSecretPathInput =
    ActionsActionsCreateOrUpdateRepoSecretPath;
  type ActionsActionsCreateOrUpdateRepoSecretBodyInput =
    ActionsActionsCreateOrUpdateRepoSecretBody;
  type ActionsActionsCreateOrUpdateRepoSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsCreateRegistrationTokenForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsCreateRegistrationTokenForOrgResponseApiResponse =
    GithubApiAuthenticationTokenApiResponse;
  type GithubApiAuthenticationTokenApiResponse = {
    token: string;
    expires_at: string;
    permissions?: undefined | { [key: string]: any };
    repositories?: undefined | GithubApiRepositoryApiResponse[];
    single_file?: undefined | string;
    repository_selection?: undefined | "all" | "selected";
  };
  type GithubApiRepositoryApiResponse = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    license: GithubApiLicenseSimpleApiResponse;
    forks: number;
    permissions?:
      | undefined
      | {
          admin: boolean;
          pull: boolean;
          triage?: undefined | boolean;
          push: boolean;
          maintain?: undefined | boolean;
        };
    owner: GithubApiSimpleUserApiResponse;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template: boolean;
    topics?: undefined | string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility: string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    allow_rebase_merge: boolean;
    template_repository?:
      | undefined
      | {
          id?: undefined | number;
          node_id?: undefined | string;
          name?: undefined | string;
          full_name?: undefined | string;
          owner?:
            | undefined
            | {
                login?: undefined | string;
                id?: undefined | number;
                node_id?: undefined | string;
                avatar_url?: undefined | string;
                gravatar_id?: undefined | string;
                url?: undefined | string;
                html_url?: undefined | string;
                followers_url?: undefined | string;
                following_url?: undefined | string;
                gists_url?: undefined | string;
                starred_url?: undefined | string;
                subscriptions_url?: undefined | string;
                organizations_url?: undefined | string;
                repos_url?: undefined | string;
                events_url?: undefined | string;
                received_events_url?: undefined | string;
                type?: undefined | string;
                site_admin?: undefined | boolean;
              };
          private?: undefined | boolean;
          html_url?: undefined | string;
          description?: undefined | string;
          fork?: undefined | boolean;
          url?: undefined | string;
          archive_url?: undefined | string;
          assignees_url?: undefined | string;
          blobs_url?: undefined | string;
          branches_url?: undefined | string;
          collaborators_url?: undefined | string;
          comments_url?: undefined | string;
          commits_url?: undefined | string;
          compare_url?: undefined | string;
          contents_url?: undefined | string;
          contributors_url?: undefined | string;
          deployments_url?: undefined | string;
          downloads_url?: undefined | string;
          events_url?: undefined | string;
          forks_url?: undefined | string;
          git_commits_url?: undefined | string;
          git_refs_url?: undefined | string;
          git_tags_url?: undefined | string;
          git_url?: undefined | string;
          issue_comment_url?: undefined | string;
          issue_events_url?: undefined | string;
          issues_url?: undefined | string;
          keys_url?: undefined | string;
          labels_url?: undefined | string;
          languages_url?: undefined | string;
          merges_url?: undefined | string;
          milestones_url?: undefined | string;
          notifications_url?: undefined | string;
          pulls_url?: undefined | string;
          releases_url?: undefined | string;
          ssh_url?: undefined | string;
          stargazers_url?: undefined | string;
          statuses_url?: undefined | string;
          subscribers_url?: undefined | string;
          subscription_url?: undefined | string;
          tags_url?: undefined | string;
          teams_url?: undefined | string;
          trees_url?: undefined | string;
          clone_url?: undefined | string;
          mirror_url?: undefined | string;
          hooks_url?: undefined | string;
          svn_url?: undefined | string;
          homepage?: undefined | string;
          language?: undefined | string;
          forks_count?: undefined | number;
          stargazers_count?: undefined | number;
          watchers_count?: undefined | number;
          size?: undefined | number;
          default_branch?: undefined | string;
          open_issues_count?: undefined | number;
          is_template?: undefined | boolean;
          topics?: undefined | string[];
          has_issues?: undefined | boolean;
          has_projects?: undefined | boolean;
          has_wiki?: undefined | boolean;
          has_pages?: undefined | boolean;
          has_downloads?: undefined | boolean;
          archived?: undefined | boolean;
          disabled?: undefined | boolean;
          visibility?: undefined | string;
          pushed_at?: undefined | string;
          created_at?: undefined | string;
          updated_at?: undefined | string;
          permissions?:
            | undefined
            | {
                admin?: undefined | boolean;
                push?: undefined | boolean;
                pull?: undefined | boolean;
              };
          allow_rebase_merge?: undefined | boolean;
          temp_clone_token?: undefined | string;
          allow_squash_merge?: undefined | boolean;
          delete_branch_on_merge?: undefined | boolean;
          allow_merge_commit?: undefined | boolean;
          subscribers_count?: undefined | number;
          network_count?: undefined | number;
        };
    temp_clone_token?: undefined | string;
    allow_squash_merge: boolean;
    delete_branch_on_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count?: undefined | number;
    network_count?: undefined | number;
    open_issues: number;
    watchers: number;
    master_branch?: undefined | string;
    starred_at?: undefined | string;
  };
  type GithubApiLicenseSimpleApiResponse = GithubApiLicenseSimple;
  type GithubApiSimpleUserApiResponse = GithubApiSimpleUser;
  type ActionsActionsCreateRegistrationTokenForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsCreateRegistrationTokenForRepoResponseApiResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponseApiResponse;
  type ActionsActionsCreateRemoveTokenForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsCreateRemoveTokenForOrgResponseApiResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponseApiResponse;
  type ActionsActionsCreateRemoveTokenForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsCreateRemoveTokenForRepoResponseApiResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponseApiResponse;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgBodyInput =
    | undefined
    | {
        name: string;
        visibility?: undefined | "selected" | "all" | "private";
        selected_repository_ids?: undefined | number[];
        runners?: undefined | number[];
      };
  type ActionsActionsCreateSelfHostedRunnerGroupForOrgResponseApiResponse =
    GithubApiRunnerGroupsOrgApiResponse;
  type GithubApiRunnerGroupsOrgApiResponse = GithubApiRunnerGroupsOrg;
  type ActionsActionsCreateWorkflowDispatchPathInput =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsCreateWorkflowDispatchBodyInput =
    ActionsActionsCreateWorkflowDispatchBody;
  type ActionsActionsCreateWorkflowDispatchResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteArtifactPathInput = ActionsActionsDeleteArtifactPath;
  type ActionsActionsDeleteArtifactResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteOrgSecretPathInput =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsDeleteOrgSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteRepoSecretPathInput =
    ActionsActionsCreateOrUpdateRepoSecretPath;
  type ActionsActionsDeleteRepoSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteSelfHostedRunnerFromOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerFromOrgPath;
  type ActionsActionsDeleteSelfHostedRunnerFromOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteSelfHostedRunnerFromRepoPathInput =
    ActionsActionsDeleteSelfHostedRunnerFromRepoPath;
  type ActionsActionsDeleteSelfHostedRunnerFromRepoResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsDeleteSelfHostedRunnerGroupFromOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteWorkflowRunPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsDeleteWorkflowRunResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDeleteWorkflowRunLogsPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsDeleteWorkflowRunLogsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationPathInput =
    ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationPath;
  type ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDisableWorkflowPathInput =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsDisableWorkflowResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDownloadArtifactPathInput =
    ActionsActionsDownloadArtifactPath;
  type ActionsActionsDownloadArtifactResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDownloadJobLogsForWorkflowRunPathInput =
    ActionsActionsDownloadJobLogsForWorkflowRunPath;
  type ActionsActionsDownloadJobLogsForWorkflowRunResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsDownloadWorkflowRunLogsPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsDownloadWorkflowRunLogsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationPathInput =
    ActionsActionsDisableSelectedRepositoryGithubActionsOrganizationPath;
  type ActionsActionsEnableSelectedRepositoryGithubActionsOrganizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsEnableWorkflowPathInput =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsEnableWorkflowResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsGetAllowedActionsOrganizationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsGetAllowedActionsOrganizationResponseApiResponse =
    GithubApiSelectedActionsApiResponse;
  type GithubApiSelectedActionsApiResponse = GithubApiSelectedActions;
  type ActionsActionsGetAllowedActionsRepositoryPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsGetAllowedActionsRepositoryResponseApiResponse =
    ActionsActionsGetAllowedActionsOrganizationResponseApiResponse;
  type ActionsActionsGetArtifactPathInput = ActionsActionsDeleteArtifactPath;
  type ActionsActionsGetArtifactResponseApiResponse =
    GithubApiArtifactApiResponse;
  type GithubApiArtifactApiResponse = GithubApiArtifact;
  type ActionsActionsGetGithubActionsPermissionsOrganizationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsGetGithubActionsPermissionsOrganizationResponseApiResponse =
    GithubApiActionsOrganizationPermissionsApiResponse;
  type GithubApiActionsOrganizationPermissionsApiResponse = {
    enabled_repositories?: undefined | GithubApiEnabledRepositoriesApiResponse;
    selected_repositories_url?: undefined | string;
    allowed_actions?: undefined | GithubApiAllowedActionsApiResponse;
    selected_actions_url?: undefined | GithubApiSelectedActionsUrlApiResponse;
  };
  type GithubApiEnabledRepositoriesApiResponse = GithubApiEnabledRepositories;
  type GithubApiAllowedActionsApiResponse = GithubApiAllowedActions;
  type GithubApiSelectedActionsUrlApiResponse = GithubApiSelectedActionsUrl;
  type ActionsActionsGetGithubActionsPermissionsRepositoryPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsGetGithubActionsPermissionsRepositoryResponseApiResponse =
    GithubApiActionsRepositoryPermissionsApiResponse;
  type GithubApiActionsRepositoryPermissionsApiResponse = {
    enabled?: undefined | GithubApiActionsEnabledApiResponse;
    allowed_actions?: undefined | GithubApiAllowedActionsApiResponse;
    selected_actions_url?: undefined | GithubApiSelectedActionsUrlApiResponse;
  };
  type GithubApiActionsEnabledApiResponse = GithubApiActionsEnabled;
  type ActionsActionsGetJobForWorkflowRunPathInput =
    ActionsActionsDownloadJobLogsForWorkflowRunPath;
  type ActionsActionsGetJobForWorkflowRunResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsGetOrgPublicKeyPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsGetOrgPublicKeyResponseApiResponse =
    GithubApiActionsPublicKeyApiResponse;
  type GithubApiActionsPublicKeyApiResponse = GithubApiActionsPublicKey;
  type ActionsActionsGetOrgSecretPathInput =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsGetOrgSecretResponseApiResponse =
    GithubApiOrganizationActionsSecretApiResponse;
  type GithubApiOrganizationActionsSecretApiResponse =
    GithubApiOrganizationActionsSecret;
  type ActionsActionsGetRepoPublicKeyPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsGetRepoPublicKeyResponseApiResponse =
    ActionsActionsGetOrgPublicKeyResponseApiResponse;
  type ActionsActionsGetRepoSecretPathInput =
    ActionsActionsCreateOrUpdateRepoSecretPath;
  type ActionsActionsGetRepoSecretResponseApiResponse =
    GithubApiActionsSecretApiResponse;
  type GithubApiActionsSecretApiResponse = GithubApiActionsSecret;
  type ActionsActionsGetSelfHostedRunnerForOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerFromOrgPath;
  type ActionsActionsGetSelfHostedRunnerForOrgResponseApiResponse =
    GithubApiRunnerApiResponse;
  type GithubApiRunnerApiResponse = GithubApiRunner;
  type ActionsActionsGetSelfHostedRunnerForRepoPathInput =
    ActionsActionsDeleteSelfHostedRunnerFromRepoPath;
  type ActionsActionsGetSelfHostedRunnerForRepoResponseApiResponse =
    ActionsActionsGetSelfHostedRunnerForOrgResponseApiResponse;
  type ActionsActionsGetSelfHostedRunnerGroupForOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsGetSelfHostedRunnerGroupForOrgResponseApiResponse =
    ActionsActionsCreateSelfHostedRunnerGroupForOrgResponseApiResponse;
  type ActionsActionsGetWorkflowPathInput =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsGetWorkflowResponseApiResponse =
    GithubApiWorkflowApiResponse;
  type GithubApiWorkflowApiResponse = GithubApiWorkflow;
  type ActionsActionsGetWorkflowRunPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsGetWorkflowRunResponseApiResponse =
    GithubApiWorkflowRunApiResponse;
  type GithubApiWorkflowRunApiResponse = {
    id: number;
    name?: undefined | string;
    node_id: string;
    head_branch: string;
    head_sha: string;
    run_number: number;
    event: string;
    status: string;
    conclusion: string;
    workflow_id: number;
    url: string;
    html_url: string;
    pull_requests: GithubApiPullRequestMinimalApiResponse[];
    created_at: string;
    updated_at: string;
    jobs_url: string;
    logs_url: string;
    check_suite_url: string;
    artifacts_url: string;
    cancel_url: string;
    rerun_url: string;
    workflow_url: string;
    head_commit: GithubApiSimpleCommitApiResponse;
    repository: GithubApiMinimalRepositoryApiResponse;
    head_repository: GithubApiMinimalRepositoryApiResponse;
    head_repository_id?: undefined | number;
  };
  type GithubApiPullRequestMinimalApiResponse = GithubApiPullRequestMinimal;
  type GithubApiSimpleCommitApiResponse = GithubApiSimpleCommit;
  type GithubApiMinimalRepositoryApiResponse = GithubApiMinimalRepository;
  type ActionsActionsGetWorkflowRunUsagePathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsGetWorkflowRunUsageResponseApiResponse =
    GithubApiWorkflowRunUsageApiResponse;
  type GithubApiWorkflowRunUsageApiResponse = GithubApiWorkflowRunUsage;
  type ActionsActionsGetWorkflowUsagePathInput =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsGetWorkflowUsageResponseApiResponse =
    GithubApiWorkflowUsageApiResponse;
  type GithubApiWorkflowUsageApiResponse = GithubApiWorkflowUsage;
  type ActionsActionsListArtifactsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListArtifactsForRepoQueryInput = {
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ActionsActionsListArtifactsForRepoResponseApiResponse = {
    total_count?: undefined | number;
    artifacts?: undefined | GithubApiArtifactApiResponse[];
  };
  type ActionsActionsListJobsForWorkflowRunPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsListJobsForWorkflowRunQueryInput = {
    filter?: undefined | "latest" | "all";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ActionsActionsListJobsForWorkflowRunResponseApiResponse = {
    total_count?: undefined | number;
    jobs?: undefined | GithubApiJobApiResponse[];
  };
  type GithubApiJobApiResponse = GithubApiJob;
  type ActionsActionsListOrgSecretsPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListOrgSecretsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListOrgSecretsResponseApiResponse = {
    total_count?: undefined | number;
    secrets?: undefined | GithubApiOrganizationActionsSecretApiResponse[];
  };
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponseApiResponse =
    {
      total_count?: undefined | number;
      repositories?: undefined | GithubApiRepositoryApiResponse[];
    };
  type ActionsActionsListRepoSecretsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListRepoSecretsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListRepoSecretsResponseApiResponse = {
    total_count?: undefined | number;
    secrets?: undefined | GithubApiActionsSecretApiResponse[];
  };
  type ActionsActionsListRepoWorkflowsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListRepoWorkflowsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListRepoWorkflowsResponseApiResponse = {
    total_count?: undefined | number;
    workflows?: undefined | GithubApiWorkflowApiResponse[];
  };
  type ActionsActionsListRunnerApplicationsForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListRunnerApplicationsForOrgResponseApiResponse =
    GithubApiRunnerApplicationApiResponse[];
  type GithubApiRunnerApplicationApiResponse = GithubApiRunnerApplication;
  type ActionsActionsListRunnerApplicationsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListRunnerApplicationsForRepoResponseApiResponse =
    ActionsActionsListRunnerApplicationsForOrgResponseApiResponse;
  type ActionsActionsListSelectedReposForOrgSecretPathInput =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsListSelectedReposForOrgSecretResponseApiResponse = {
    total_count?: undefined | number;
    repositories?: undefined | GithubApiMinimalRepositoryApiResponse[];
  };
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponseApiResponse =
    ActionsActionsListRepoAccessToSelfHostedRunnerGroupInOrgResponseApiResponse;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListSelfHostedRunnerGroupsForOrgResponseApiResponse = {
    total_count?: undefined | number;
    runner_groups?: undefined | GithubApiRunnerGroupsOrgApiResponse[];
  };
  type ActionsActionsListSelfHostedRunnersForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsListSelfHostedRunnersForOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListSelfHostedRunnersForOrgResponseApiResponse = {
    total_count?: undefined | number;
    runners?: undefined | GithubApiRunnerApiResponse[];
  };
  type ActionsActionsListSelfHostedRunnersForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListSelfHostedRunnersForRepoQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListSelfHostedRunnersForRepoResponseApiResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponseApiResponse;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListSelfHostedRunnersInGroupForOrgResponseApiResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponseApiResponse;
  type ActionsActionsListWorkflowRunArtifactsPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsListWorkflowRunArtifactsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActionsActionsListWorkflowRunArtifactsResponseApiResponse =
    ActionsActionsListArtifactsForRepoResponseApiResponse;
  type ActionsActionsListWorkflowRunsPathInput =
    ActionsActionsCreateWorkflowDispatchPath;
  type ActionsActionsListWorkflowRunsQueryInput = {
    actor?: undefined | string;
    branch?: undefined | string;
    event?: undefined | string;
    status?: undefined | "completed" | "status" | "conclusion";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ActionsActionsListWorkflowRunsResponseApiResponse = {
    total_count?: undefined | number;
    workflow_runs?: undefined | GithubApiWorkflowRunApiResponse[];
  };
  type ActionsActionsListWorkflowRunsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsListWorkflowRunsForRepoQueryInput =
    ActionsActionsListWorkflowRunsQueryInput;
  type ActionsActionsListWorkflowRunsForRepoResponseApiResponse =
    ActionsActionsListWorkflowRunsResponseApiResponse;
  type ActionsActionsReRunWorkflowPathInput =
    ActionsActionsCancelWorkflowRunPath;
  type ActionsActionsReRunWorkflowResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgPathInput =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgPath;
  type ActionsActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsRemoveSelectedRepoFromOrgSecretPathInput =
    ActionsActionsAddSelectedRepoToOrgSecretPath;
  type ActionsActionsRemoveSelectedRepoFromOrgSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgPathInput =
    ActionsActionsAddSelfHostedRunnerToGroupForOrgPath;
  type ActionsActionsRemoveSelfHostedRunnerFromGroupForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetAllowedActionsOrganizationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsSetAllowedActionsOrganizationBodyInput =
    | undefined
    | GithubApiSelectedActionsInput;
  type GithubApiSelectedActionsInput = GithubApiSelectedActions;
  type ActionsActionsSetAllowedActionsOrganizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetAllowedActionsRepositoryPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsSetAllowedActionsRepositoryBodyInput =
    ActionsActionsSetAllowedActionsOrganizationBodyInput;
  type ActionsActionsSetAllowedActionsRepositoryResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetGithubActionsPermissionsOrganizationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsSetGithubActionsPermissionsOrganizationBodyInput =
    | undefined
    | {
        enabled_repositories: GithubApiEnabledRepositoriesInput;
        allowed_actions?: undefined | GithubApiAllowedActionsInput;
      };
  type GithubApiEnabledRepositoriesInput = GithubApiEnabledRepositories;
  type GithubApiAllowedActionsInput = GithubApiAllowedActions;
  type ActionsActionsSetGithubActionsPermissionsOrganizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetGithubActionsPermissionsRepositoryPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActionsActionsSetGithubActionsPermissionsRepositoryBodyInput =
    | undefined
    | {
        enabled: GithubApiActionsEnabledInput;
        allowed_actions?: undefined | GithubApiAllowedActionsInput;
      };
  type GithubApiActionsEnabledInput = GithubApiActionsEnabled;
  type ActionsActionsSetGithubActionsPermissionsRepositoryResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodyInput =
    ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBody;
  type ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetSelectedReposForOrgSecretPathInput =
    ActionsActionsCreateOrUpdateOrgSecretPath;
  type ActionsActionsSetSelectedReposForOrgSecretBodyInput =
    ActionsActionsSetSelectedReposForOrgSecretBody;
  type ActionsActionsSetSelectedReposForOrgSecretResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodyInput =
    ActionsActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBody;
  type ActionsActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgBodyInput =
    ActionsActionsSetSelfHostedRunnersInGroupForOrgBody;
  type ActionsActionsSetSelfHostedRunnersInGroupForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgPathInput =
    ActionsActionsDeleteSelfHostedRunnerGroupFromOrgPath;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgBodyInput =
    ActionsActionsUpdateSelfHostedRunnerGroupForOrgBody;
  type ActionsActionsUpdateSelfHostedRunnerGroupForOrgResponseApiResponse =
    ActionsActionsCreateSelfHostedRunnerGroupForOrgResponseApiResponse;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUserPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityCheckRepoIsStarredByAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityDeleteRepoSubscriptionPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityDeleteRepoSubscriptionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityDeleteThreadSubscriptionPathInput =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityDeleteThreadSubscriptionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityGetFeedsResponseApiResponse = GithubApiFeedApiResponse;
  type GithubApiFeedApiResponse = {
    timeline_url: string;
    user_url: string;
    current_user_public_url?: undefined | string;
    current_user_url?: undefined | string;
    current_user_actor_url?: undefined | string;
    current_user_organization_url?: undefined | string;
    current_user_organization_urls?: undefined | string[];
    security_advisories_url?: undefined | string;
    _links: {
      timeline: GithubApiLinkWithTypeApiResponse;
      user: GithubApiLinkWithTypeApiResponse;
      security_advisories?: undefined | GithubApiLinkWithTypeApiResponse;
      current_user?: undefined | GithubApiLinkWithTypeApiResponse;
      current_user_public?: undefined | GithubApiLinkWithTypeApiResponse;
      current_user_actor?: undefined | GithubApiLinkWithTypeApiResponse;
      current_user_organization?: undefined | GithubApiLinkWithTypeApiResponse;
      current_user_organizations?:
        | undefined
        | GithubApiLinkWithTypeApiResponse[];
    };
  };
  type GithubApiLinkWithTypeApiResponse = GithubApiLinkWithType;
  type ActivityActivityGetRepoSubscriptionPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityGetRepoSubscriptionResponseApiResponse =
    GithubApiRepositorySubscriptionApiResponse;
  type GithubApiRepositorySubscriptionApiResponse =
    GithubApiRepositorySubscription;
  type ActivityActivityGetThreadPathInput =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityGetThreadResponseApiResponse =
    GithubApiThreadApiResponse;
  type GithubApiThreadApiResponse = {
    id?: undefined | string;
    repository?: undefined | GithubApiMinimalRepositoryApiResponse;
    subject?:
      | undefined
      | {
          title?: undefined | string;
          url?: undefined | string;
          latest_comment_url?: undefined | string;
          type?: undefined | string;
        };
    reason?: undefined | string;
    unread?: undefined | boolean;
    updated_at?: undefined | string;
    last_read_at?: undefined | string;
    url?: undefined | string;
    subscription_url?: undefined | string;
  };
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUserPathInput =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityGetThreadSubscriptionForAuthenticatedUserResponseApiResponse =
    GithubApiThreadSubscriptionApiResponse;
  type GithubApiThreadSubscriptionApiResponse = GithubApiThreadSubscription;
  type ActivityActivityListEventsForAuthenticatedUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListEventsForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListEventsForAuthenticatedUserResponseApiResponse =
    GithubApiEventApiResponse[];
  type GithubApiEventApiResponse = {
    id: string;
    type: string;
    actor: GithubApiActorApiResponse;
    repo: { id: number; name: string; url: string };
    org?: undefined | GithubApiActorApiResponse;
    payload: {
      action: string;
      issue?: undefined | GithubApiIssueSimpleApiResponse;
      comment?: undefined | GithubApiIssueCommentApiResponse;
      pages?:
        | undefined
        | {
            page_name?: undefined | string;
            title?: undefined | string;
            summary?: undefined | string;
            action?: undefined | string;
            sha?: undefined | string;
            html_url?: undefined | string;
          }[];
    };
    public: boolean;
    created_at: string;
  };
  type GithubApiActorApiResponse = GithubApiActor;
  type GithubApiIssueSimpleApiResponse = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body?: undefined | string;
    user: GithubApiSimpleUserApiResponse;
    labels: GithubApiLabelApiResponse[];
    assignee: GithubApiSimpleUserApiResponse;
    assignees?: undefined | GithubApiSimpleUserApiResponse[];
    milestone: GithubApiMilestoneApiResponse;
    locked: boolean;
    active_lock_reason?: undefined | string;
    comments: number;
    pull_request?:
      | undefined
      | {
          merged_at?: undefined | string;
          diff_url: string;
          html_url: string;
          patch_url: string;
          url: string;
        };
    closed_at: string;
    created_at: string;
    updated_at: string;
    author_association: string;
    body_html?: undefined | string;
    body_text?: undefined | string;
    timeline_url?: undefined | string;
    repository?: undefined | GithubApiRepositoryApiResponse;
    performed_via_github_app?: undefined | GithubApiIntegrationApiResponse;
  };
  type GithubApiLabelApiResponse = GithubApiLabel;
  type GithubApiMilestoneApiResponse = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: "open" | "closed";
    title: string;
    description: string;
    creator: GithubApiSimpleUserApiResponse;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GithubApiIntegrationApiResponse = {
    id: number;
    slug?: undefined | string;
    node_id: string;
    owner: GithubApiSimpleUserApiResponse;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    permissions: {
      issues?: undefined | string;
      checks?: undefined | string;
      metadata?: undefined | string;
      contents?: undefined | string;
      deployments?: undefined | string;
    };
    events: string[];
    installations_count?: undefined | number;
    client_id?: undefined | string;
    client_secret?: undefined | string;
    webhook_secret?: undefined | string;
    pem?: undefined | string;
  };
  type GithubApiIssueCommentApiResponse = {
    id: number;
    node_id: string;
    url: string;
    body?: undefined | string;
    body_text?: undefined | string;
    body_html?: undefined | string;
    html_url: string;
    user: GithubApiSimpleUserApiResponse;
    created_at: string;
    updated_at: string;
    issue_url: string;
    author_association:
      | "collaborator"
      | "contributor"
      | "first_timer"
      | "first_time_contributor"
      | "mannequin"
      | "member"
      | "none"
      | "owner";
    performed_via_github_app?: undefined | GithubApiIntegrationApiResponse;
    reactions?: undefined | GithubApiReactionRollupApiResponse;
  };
  type GithubApiReactionRollupApiResponse = GithubApiReactionRollup;
  type ActivityActivityListNotificationsForAuthenticatedUserQueryInput = {
    all?: undefined | boolean;
    participating?: undefined | boolean;
    since?: undefined | string;
    before?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ActivityActivityListNotificationsForAuthenticatedUserResponseApiResponse =
    GithubApiThreadApiResponse[];
  type ActivityActivityListOrgEventsForAuthenticatedUserPathInput =
    ActivityActivityListOrgEventsForAuthenticatedUserPath;
  type ActivityActivityListOrgEventsForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListOrgEventsForAuthenticatedUserResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListPublicEventsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListPublicEventsResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListPublicEventsForRepoNetworkPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListPublicEventsForRepoNetworkQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListPublicEventsForRepoNetworkResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListPublicEventsForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListPublicEventsForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListPublicEventsForUserResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListPublicOrgEventsPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ActivityActivityListPublicOrgEventsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListPublicOrgEventsResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListReceivedEventsForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReceivedEventsForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListReceivedEventsForUserResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListReceivedPublicEventsForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReceivedPublicEventsForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListReceivedPublicEventsForUserResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListRepoEventsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListRepoEventsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListRepoEventsResponseApiResponse =
    ActivityActivityListEventsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserQueryInput =
    ActivityActivityListNotificationsForAuthenticatedUserQueryInput;
  type ActivityActivityListRepoNotificationsForAuthenticatedUserResponseApiResponse =
    ActivityActivityListNotificationsForAuthenticatedUserResponseApiResponse;
  type ActivityActivityListReposStarredByAuthenticatedUserQueryInput = {
    sort?: undefined | "created" | "updated";
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ActivityActivityListReposStarredByAuthenticatedUserResponseApiResponse =
    GithubApiRepositoryApiResponse[];
  type ActivityActivityListReposStarredByUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReposStarredByUserQueryInput =
    ActivityActivityListReposStarredByAuthenticatedUserQueryInput;
  type ActivityActivityListReposStarredByUserResponseApiResponse =
    ActivityActivityListReposStarredByAuthenticatedUserResponseApiResponse;
  type ActivityActivityListReposWatchedByUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ActivityActivityListReposWatchedByUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListReposWatchedByUserResponseApiResponse =
    GithubApiMinimalRepositoryApiResponse[];
  type ActivityActivityListStargazersForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListStargazersForRepoQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListStargazersForRepoResponseApiResponse =
    GithubApiSimpleUserApiResponse[];
  type ActivityActivityListWatchedReposForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListWatchedReposForAuthenticatedUserResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type ActivityActivityListWatchersForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityListWatchersForRepoQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ActivityActivityListWatchersForRepoResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type ActivityActivityMarkNotificationsAsReadBodyInput =
    ActivityActivityMarkNotificationsAsReadBody;
  type ActivityActivityMarkNotificationsAsReadResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityMarkRepoNotificationsAsReadPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityMarkRepoNotificationsAsReadBodyInput =
    ActivityActivityMarkRepoNotificationsAsReadBody;
  type ActivityActivityMarkRepoNotificationsAsReadResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityMarkThreadAsReadPathInput =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivityMarkThreadAsReadResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivitySetRepoSubscriptionPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivitySetRepoSubscriptionBodyInput =
    ActivityActivitySetRepoSubscriptionBody;
  type ActivityActivitySetRepoSubscriptionResponseApiResponse =
    ActivityActivityGetRepoSubscriptionResponseApiResponse;
  type ActivityActivitySetThreadSubscriptionPathInput =
    ActivityActivityDeleteThreadSubscriptionPath;
  type ActivityActivitySetThreadSubscriptionBodyInput =
    | undefined
    | { ignored?: undefined | boolean };
  type ActivityActivitySetThreadSubscriptionResponseApiResponse =
    ActivityActivityGetThreadSubscriptionForAuthenticatedUserResponseApiResponse;
  type ActivityActivityStarRepoForAuthenticatedUserPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityStarRepoForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ActivityActivityUnstarRepoForAuthenticatedUserPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ActivityActivityUnstarRepoForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsAddRepoToInstallationPathInput =
    AppsAppsAddRepoToInstallationPath;
  type AppsAppsAddRepoToInstallationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsCheckAuthorizationPathInput = AppsAppsCheckAuthorizationPath;
  type AppsAppsCheckAuthorizationResponseApiResponse =
    GithubApiAuthorizationApiResponse;
  type GithubApiAuthorizationApiResponse = {
    id: number;
    url: string;
    scopes: string[];
    token: string;
    token_last_eight: string;
    hashed_token: string;
    app: { client_id: string; name: string; url: string };
    note: string;
    note_url: string;
    updated_at: string;
    created_at: string;
    fingerprint: string;
    user?: undefined | GithubApiSimpleUserApiResponse;
    installation?: undefined | GithubApiScopedInstallationApiResponse;
  };
  type GithubApiScopedInstallationApiResponse = {
    permissions: { [key: string]: any };
    repository_selection: "all" | "selected";
    single_file_name: string;
    has_multiple_single_files?: undefined | boolean;
    single_file_paths?: undefined | string[];
    repositories_url: string;
    account: GithubApiSimpleUserApiResponse;
  };
  type AppsAppsCheckTokenPathInput = AppsAppsCheckTokenPath;
  type AppsAppsCheckTokenBodyInput = AppsAppsCheckTokenBody;
  type AppsAppsCheckTokenResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type AppsAppsCreateContentAttachmentPathInput =
    AppsAppsCreateContentAttachmentPath;
  type AppsAppsCreateContentAttachmentBodyInput =
    AppsAppsCreateContentAttachmentBody;
  type AppsAppsCreateContentAttachmentResponseApiResponse =
    GithubApiContentReferenceAttachmentApiResponse;
  type GithubApiContentReferenceAttachmentApiResponse =
    GithubApiContentReferenceAttachment;
  type AppsAppsCreateFromManifestPathInput = AppsAppsCreateFromManifestPath;
  type AppsAppsCreateFromManifestResponseApiResponse =
    | GithubApiIntegrationApiResponse
    | {
        client_id: string;
        client_secret: string;
        webhook_secret: string;
        pem: string;
      };
  type AppsAppsCreateInstallationAccessTokenPathInput =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsCreateInstallationAccessTokenBodyInput =
    AppsAppsCreateInstallationAccessTokenBody;
  type AppsAppsCreateInstallationAccessTokenResponseApiResponse =
    GithubApiInstallationTokenApiResponse;
  type GithubApiInstallationTokenApiResponse = {
    token?: undefined | string;
    expires_at?: undefined | string;
    permissions?:
      | undefined
      | {
          issues?: undefined | string;
          contents?: undefined | string;
          metadata?: undefined | string;
          single_file?: undefined | string;
        };
    repository_selection?: undefined | "all" | "selected";
    repositories?: undefined | GithubApiRepositoryApiResponse[];
    single_file?: undefined | string;
    has_multiple_single_files?: undefined | boolean;
    single_file_paths?: undefined | string[];
  };
  type AppsAppsDeleteAuthorizationPathInput = AppsAppsCheckTokenPath;
  type AppsAppsDeleteAuthorizationBodyInput = AppsAppsDeleteAuthorizationBody;
  type AppsAppsDeleteAuthorizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsDeleteInstallationPathInput =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsDeleteInstallationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsDeleteTokenPathInput = AppsAppsCheckTokenPath;
  type AppsAppsDeleteTokenBodyInput = AppsAppsDeleteAuthorizationBody;
  type AppsAppsDeleteTokenResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsGetAuthenticatedResponseApiResponse =
    GithubApiIntegrationApiResponse;
  type AppsAppsGetBySlugPathInput = AppsAppsGetBySlugPath;
  type AppsAppsGetBySlugResponseApiResponse =
    AppsAppsGetAuthenticatedResponseApiResponse;
  type AppsAppsGetInstallationPathInput =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsGetInstallationResponseApiResponse =
    GithubApiInstallationApiResponse;
  type GithubApiInstallationApiResponse = {
    id: number;
    account: GithubApiSimpleUserApiResponse | GithubApiEnterpriseApiResponse;
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: {
      deployments?: undefined | string;
      checks?: undefined | string;
      metadata?: undefined | string;
      contents?: undefined | string;
      pull_requests?: undefined | string;
      statuses?: undefined | string;
      issues?: undefined | string;
      organization_administration?: undefined | string;
    };
    events: string[];
    created_at: string;
    updated_at: string;
    single_file_name: string;
    has_multiple_single_files?: undefined | boolean;
    single_file_paths?: undefined | string[];
    app_slug: string;
    suspended_by?: undefined | GithubApiSimpleUserApiResponse;
    suspended_at?: undefined | string;
    contact_email?: undefined | string;
  };
  type GithubApiEnterpriseApiResponse = GithubApiEnterprise;
  type AppsAppsGetOrgInstallationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type AppsAppsGetOrgInstallationResponseApiResponse =
    AppsAppsGetInstallationResponseApiResponse;
  type AppsAppsGetRepoInstallationPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type AppsAppsGetRepoInstallationResponseApiResponse =
    AppsAppsGetInstallationResponseApiResponse;
  type AppsAppsGetSubscriptionPlanForAccountPathInput =
    AppsAppsGetSubscriptionPlanForAccountPath;
  type AppsAppsGetSubscriptionPlanForAccountResponseApiResponse =
    GithubApiMarketplacePurchaseApiResponse;
  type GithubApiMarketplacePurchaseApiResponse = {
    url: string;
    type: string;
    id: number;
    login: string;
    organization_billing_email?: undefined | string;
    marketplace_pending_change?:
      | undefined
      | {
          is_installed?: undefined | boolean;
          effective_date?: undefined | string;
          unit_count?: undefined | number;
          id?: undefined | number;
          plan?: undefined | GithubApiMarketplaceListingPlanApiResponse;
        };
    marketplace_purchase: {
      billing_cycle?: undefined | string;
      next_billing_date?: undefined | string;
      is_installed?: undefined | boolean;
      unit_count?: undefined | number;
      on_free_trial?: undefined | boolean;
      free_trial_ends_on?: undefined | string;
      updated_at?: undefined | string;
      plan?: undefined | GithubApiMarketplaceListingPlanApiResponse;
    };
  };
  type GithubApiMarketplaceListingPlanApiResponse =
    GithubApiMarketplaceListingPlan;
  type AppsAppsGetSubscriptionPlanForAccountStubbedPathInput =
    AppsAppsGetSubscriptionPlanForAccountPath;
  type AppsAppsGetSubscriptionPlanForAccountStubbedResponseApiResponse =
    AppsAppsGetSubscriptionPlanForAccountResponseApiResponse;
  type AppsAppsGetUserInstallationPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type AppsAppsGetUserInstallationResponseApiResponse =
    AppsAppsGetInstallationResponseApiResponse;
  type AppsAppsGetWebhookConfigForAppResponseApiResponse =
    GithubApiWebhookConfigApiResponse;
  type GithubApiWebhookConfigApiResponse = {
    url?: undefined | GithubApiWebhookConfigUrlApiResponse;
    content_type?: undefined | GithubApiWebhookConfigContentTypeApiResponse;
    secret?: undefined | GithubApiWebhookConfigSecretApiResponse;
    insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslApiResponse;
  };
  type GithubApiWebhookConfigUrlApiResponse = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigContentTypeApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigSecretApiResponse = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigInsecureSslApiResponse =
    GithubApiSelectedActionsUrl;
  type AppsAppsListAccountsForPlanPathInput = AppsAppsListAccountsForPlanPath;
  type AppsAppsListAccountsForPlanQueryInput =
    ActivityActivityListReposStarredByAuthenticatedUserQueryInput;
  type AppsAppsListAccountsForPlanResponseApiResponse =
    GithubApiMarketplacePurchaseApiResponse[];
  type AppsAppsListAccountsForPlanStubbedPathInput =
    AppsAppsListAccountsForPlanPath;
  type AppsAppsListAccountsForPlanStubbedQueryInput =
    ActivityActivityListReposStarredByAuthenticatedUserQueryInput;
  type AppsAppsListAccountsForPlanStubbedResponseApiResponse =
    AppsAppsListAccountsForPlanResponseApiResponse;
  type AppsAppsListInstallationReposForAuthenticatedUserPathInput =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsListInstallationReposForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListInstallationReposForAuthenticatedUserResponseApiResponse = {
    total_count?: undefined | number;
    repository_selection?: undefined | string;
    repositories?: undefined | GithubApiRepositoryApiResponse[];
  };
  type AppsAppsListInstallationsQueryInput = {
    per_page?: undefined | number;
    page?: undefined | number;
    since?: undefined | string;
    outdated?: undefined | string;
  };
  type AppsAppsListInstallationsResponseApiResponse =
    GithubApiInstallationApiResponse[];
  type AppsAppsListInstallationsForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListInstallationsForAuthenticatedUserResponseApiResponse = {
    total_count?: undefined | number;
    installations?: undefined | GithubApiInstallationApiResponse[];
  };
  type AppsAppsListPlansQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListPlansResponseApiResponse =
    GithubApiMarketplaceListingPlanApiResponse[];
  type AppsAppsListPlansStubbedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListPlansStubbedResponseApiResponse =
    AppsAppsListPlansResponseApiResponse;
  type AppsAppsListReposAccessibleToInstallationQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListReposAccessibleToInstallationResponseApiResponse = {
    total_count?: undefined | number;
    repositories?: undefined | GithubApiRepositoryApiResponse[];
    repository_selection?: undefined | string;
  };
  type AppsAppsListSubscriptionsForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListSubscriptionsForAuthenticatedUserResponseApiResponse =
    GithubApiUserMarketplacePurchaseApiResponse[];
  type GithubApiUserMarketplacePurchaseApiResponse = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    account: GithubApiMarketplaceAccountApiResponse;
    plan: GithubApiMarketplaceListingPlanApiResponse;
  };
  type GithubApiMarketplaceAccountApiResponse = GithubApiMarketplaceAccount;
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type AppsAppsListSubscriptionsForAuthenticatedUserStubbedResponseApiResponse =
    AppsAppsListSubscriptionsForAuthenticatedUserResponseApiResponse;
  type AppsAppsRemoveRepoFromInstallationPathInput =
    AppsAppsAddRepoToInstallationPath;
  type AppsAppsRemoveRepoFromInstallationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsResetAuthorizationPathInput = AppsAppsCheckAuthorizationPath;
  type AppsAppsResetAuthorizationResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type AppsAppsResetTokenPathInput = AppsAppsCheckTokenPath;
  type AppsAppsResetTokenBodyInput = AppsAppsCheckTokenBody;
  type AppsAppsResetTokenResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type AppsAppsRevokeAuthorizationForApplicationPathInput =
    AppsAppsCheckAuthorizationPath;
  type AppsAppsRevokeAuthorizationForApplicationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsRevokeGrantForApplicationPathInput =
    AppsAppsCheckAuthorizationPath;
  type AppsAppsRevokeGrantForApplicationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsRevokeInstallationAccessTokenResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsSuspendInstallationPathInput =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsSuspendInstallationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsUnsuspendInstallationPathInput =
    AppsAppsCreateInstallationAccessTokenPath;
  type AppsAppsUnsuspendInstallationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type AppsAppsUpdateWebhookConfigForAppBodyInput =
    | undefined
    | {
        url?: undefined | GithubApiWebhookConfigUrlInput;
        content_type?: undefined | GithubApiWebhookConfigContentTypeInput;
        secret?: undefined | GithubApiWebhookConfigSecretInput;
        insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslInput;
      };
  type GithubApiWebhookConfigUrlInput = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigContentTypeInput = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigSecretInput = GithubApiSelectedActionsUrl;
  type GithubApiWebhookConfigInsecureSslInput = GithubApiSelectedActionsUrl;
  type AppsAppsUpdateWebhookConfigForAppResponseApiResponse =
    AppsAppsGetWebhookConfigForAppResponseApiResponse;
  type AuditLogAuditLogGetAuditLogPathInput = AuditLogAuditLogGetAuditLogPath;
  type AuditLogAuditLogGetAuditLogQueryInput = {
    phrase?: undefined | string;
    include?: undefined | "web" | "git" | "all";
    after?: undefined | string;
    before?: undefined | string;
    per_page?: undefined | number;
  };
  type AuditLogAuditLogGetAuditLogResponseApiResponse =
    GithubApiAuditLogEventApiResponse[];
  type GithubApiAuditLogEventApiResponse = GithubApiAuditLogEvent;
  type BillingBillingGetGithubActionsBillingGhePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type BillingBillingGetGithubActionsBillingGheResponseApiResponse =
    GithubApiActionsBillingUsageApiResponse;
  type GithubApiActionsBillingUsageApiResponse = GithubApiActionsBillingUsage;
  type BillingBillingGetGithubActionsBillingOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type BillingBillingGetGithubActionsBillingOrgResponseApiResponse =
    BillingBillingGetGithubActionsBillingGheResponseApiResponse;
  type BillingBillingGetGithubActionsBillingUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type BillingBillingGetGithubActionsBillingUserResponseApiResponse =
    BillingBillingGetGithubActionsBillingGheResponseApiResponse;
  type BillingBillingGetGithubPackagesBillingGhePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type BillingBillingGetGithubPackagesBillingGheResponseApiResponse =
    GithubApiPackagesBillingUsageApiResponse;
  type GithubApiPackagesBillingUsageApiResponse = GithubApiPackagesBillingUsage;
  type BillingBillingGetGithubPackagesBillingOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type BillingBillingGetGithubPackagesBillingOrgResponseApiResponse =
    BillingBillingGetGithubPackagesBillingGheResponseApiResponse;
  type BillingBillingGetGithubPackagesBillingUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type BillingBillingGetGithubPackagesBillingUserResponseApiResponse =
    BillingBillingGetGithubPackagesBillingGheResponseApiResponse;
  type BillingBillingGetSharedStorageBillingGhePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type BillingBillingGetSharedStorageBillingGheResponseApiResponse =
    GithubApiCombinedBillingUsageApiResponse;
  type GithubApiCombinedBillingUsageApiResponse = GithubApiCombinedBillingUsage;
  type BillingBillingGetSharedStorageBillingOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type BillingBillingGetSharedStorageBillingOrgResponseApiResponse =
    BillingBillingGetSharedStorageBillingGheResponseApiResponse;
  type BillingBillingGetSharedStorageBillingUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type BillingBillingGetSharedStorageBillingUserResponseApiResponse =
    BillingBillingGetSharedStorageBillingGheResponseApiResponse;
  type ChecksChecksCreatePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ChecksChecksCreateBodyInput =
    | undefined
    | {
        name: string;
        head_sha: string;
        details_url?: undefined | string;
        external_id?: undefined | string;
        status?: undefined | "queued" | "in_progress" | "completed";
        started_at?: undefined | string;
        conclusion?:
          | undefined
          | "success"
          | "failure"
          | "neutral"
          | "cancelled"
          | "skipped"
          | "timed_out"
          | "action_required";
        completed_at?: undefined | string;
        output?:
          | undefined
          | {
              title: string;
              summary: string;
              text?: undefined | string;
              annotations?:
                | undefined
                | {
                    path: string;
                    start_line: number;
                    end_line: number;
                    start_column?: undefined | number;
                    end_column?: undefined | number;
                    annotation_level: "notice" | "warning" | "failure";
                    message: string;
                    title?: undefined | string;
                    raw_details?: undefined | string;
                  }[];
              images?:
                | undefined
                | {
                    alt: string;
                    image_url: string;
                    caption?: undefined | string;
                  }[];
            };
        actions?:
          | undefined
          | { label: string; description: string; identifier: string }[];
      };
  type ChecksChecksCreateResponseApiResponse = GithubApiCheckRunApiResponse;
  type GithubApiCheckRunApiResponse = {
    id: number;
    head_sha: string;
    node_id: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "skipped"
      | "timed_out"
      | "action_required";
    started_at: string;
    completed_at: string;
    output: {
      title: string;
      summary: string;
      text: string;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: { id: number };
    app: GithubApiIntegrationApiResponse;
    pull_requests: any;
  };
  type ChecksChecksCreateSuitePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ChecksChecksCreateSuiteBodyInput = ChecksChecksCreateSuiteBody;
  type ChecksChecksCreateSuiteResponseApiResponse =
    GithubApiCheckSuiteApiResponse;
  type GithubApiCheckSuiteApiResponse = {
    id: number;
    node_id: string;
    head_branch: string;
    head_sha: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "skipped"
      | "timed_out"
      | "action_required";
    url: string;
    before: string;
    after: string;
    pull_requests: GithubApiPullRequestMinimalApiResponse[];
    app: GithubApiIntegrationApiResponse;
    repository: GithubApiMinimalRepositoryApiResponse;
    created_at: string;
    updated_at: string;
    head_commit: GithubApiSimpleCommitApiResponse;
    latest_check_runs_count: number;
    check_runs_url: string;
  };
  type ChecksChecksGetPathInput = ChecksChecksGetPath;
  type ChecksChecksGetResponseApiResponse =
    ChecksChecksCreateResponseApiResponse;
  type ChecksChecksGetSuitePathInput = ChecksChecksGetSuitePath;
  type ChecksChecksGetSuiteResponseApiResponse =
    ChecksChecksCreateSuiteResponseApiResponse;
  type ChecksChecksListAnnotationsPathInput = ChecksChecksGetPath;
  type ChecksChecksListAnnotationsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ChecksChecksListAnnotationsResponseApiResponse =
    GithubApiCheckAnnotationApiResponse[];
  type GithubApiCheckAnnotationApiResponse = GithubApiCheckAnnotation;
  type ChecksChecksListForRefPathInput = ChecksChecksListForRefPath;
  type ChecksChecksListForRefQueryInput = {
    check_name?: undefined | string;
    status?: undefined | "queued" | "in_progress" | "completed";
    filter?: undefined | "latest" | "all";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ChecksChecksListForRefResponseApiResponse = {
    total_count?: undefined | number;
    check_runs?: undefined | GithubApiCheckRunApiResponse[];
  };
  type ChecksChecksListForSuitePathInput = ChecksChecksGetSuitePath;
  type ChecksChecksListForSuiteQueryInput = ChecksChecksListForRefQueryInput;
  type ChecksChecksListForSuiteResponseApiResponse =
    ChecksChecksListForRefResponseApiResponse;
  type ChecksChecksListSuitesForRefPathInput = ChecksChecksListForRefPath;
  type ChecksChecksListSuitesForRefQueryInput = {
    app_id?: undefined | number;
    check_name?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ChecksChecksListSuitesForRefResponseApiResponse = {
    total_count?: undefined | number;
    check_suites?: undefined | GithubApiCheckSuiteApiResponse[];
  };
  type ChecksChecksRerequestSuitePathInput = ChecksChecksGetSuitePath;
  type ChecksChecksRerequestSuiteResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ChecksChecksSetSuitesPreferencesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ChecksChecksSetSuitesPreferencesBodyInput =
    ChecksChecksSetSuitesPreferencesBody;
  type ChecksChecksSetSuitesPreferencesResponseApiResponse =
    GithubApiCheckSuitePreferenceApiResponse;
  type GithubApiCheckSuitePreferenceApiResponse = {
    preferences?:
      | undefined
      | {
          auto_trigger_checks?:
            | undefined
            | { app_id: number; setting: boolean }[];
        };
    repository?: undefined | GithubApiRepositoryApiResponse;
  };
  type ChecksChecksUpdatePathInput = ChecksChecksGetPath;
  type ChecksChecksUpdateBodyInput = ChecksChecksUpdateBody;
  type ChecksChecksUpdateResponseApiResponse =
    ChecksChecksCreateResponseApiResponse;
  type CodeScanningCodeScanningGetAlertPathInput =
    CodeScanningCodeScanningGetAlertPath;
  type CodeScanningCodeScanningGetAlertResponseApiResponse =
    GithubApiCodeScanningAlertCodeScanningAlertApiResponse;
  type GithubApiCodeScanningAlertCodeScanningAlertApiResponse = {
    number?: undefined | GithubApiAlertNumberApiResponse;
    created_at?: undefined | GithubApiAlertCreatedAtApiResponse;
    url?: undefined | GithubApiAlertUrlApiResponse;
    html_url?: undefined | GithubApiAlertHtmlUrlApiResponse;
    instances?: undefined | GithubApiCodeScanningAlertInstancesApiResponse;
    state?: undefined | GithubApiCodeScanningAlertStateApiResponse;
    dismissed_by?: undefined | GithubApiSimpleUserApiResponse;
    dismissed_at?: undefined | GithubApiCodeScanningAlertDismissedAtApiResponse;
    dismissed_reason?:
      | undefined
      | GithubApiCodeScanningAlertDismissedReasonApiResponse;
    rule?: undefined | GithubApiCodeScanningAlertRuleApiResponse;
    tool?: undefined | GithubApiCodeScanningAnalysisToolApiResponse;
  };
  type GithubApiAlertNumberApiResponse = GithubApiAlertNumber;
  type GithubApiAlertCreatedAtApiResponse = GithubApiSelectedActionsUrl;
  type GithubApiAlertUrlApiResponse = GithubApiSelectedActionsUrl;
  type GithubApiAlertHtmlUrlApiResponse = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAlertInstancesApiResponse =
    GithubApiCodeScanningAlertInstances;
  type GithubApiCodeScanningAlertStateApiResponse =
    GithubApiCodeScanningAlertState;
  type GithubApiCodeScanningAlertDismissedAtApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAlertDismissedReasonApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAlertRuleApiResponse =
    GithubApiCodeScanningAlertRule;
  type GithubApiCodeScanningAnalysisToolApiResponse = {
    name?: undefined | GithubApiCodeScanningAnalysisToolNameApiResponse;
    version?: undefined | string;
  };
  type GithubApiCodeScanningAnalysisToolNameApiResponse =
    GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningListAlertsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodeScanningCodeScanningListAlertsForRepoQueryInput = {
    state?: undefined | GithubApiCodeScanningAlertStateInput;
    ref?: undefined | GithubApiCodeScanningAlertRefInput;
  };
  type GithubApiCodeScanningAlertStateInput = GithubApiCodeScanningAlertState;
  type GithubApiCodeScanningAlertRefInput = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningListAlertsForRepoResponseApiResponse =
    GithubApiCodeScanningAlertCodeScanningAlertItemsApiResponse[];
  type GithubApiCodeScanningAlertCodeScanningAlertItemsApiResponse = {
    number?: undefined | GithubApiAlertNumberApiResponse;
    created_at?: undefined | GithubApiAlertCreatedAtApiResponse;
    url?: undefined | GithubApiAlertUrlApiResponse;
    html_url?: undefined | GithubApiAlertHtmlUrlApiResponse;
    state?: undefined | GithubApiCodeScanningAlertStateApiResponse;
    dismissed_by?: undefined | GithubApiSimpleUserApiResponse;
    dismissed_at?: undefined | GithubApiCodeScanningAlertDismissedAtApiResponse;
    dismissed_reason?:
      | undefined
      | GithubApiCodeScanningAlertDismissedReasonApiResponse;
    rule?: undefined | GithubApiCodeScanningAlertRuleApiResponse;
    tool?: undefined | GithubApiCodeScanningAnalysisToolApiResponse;
  };
  type CodeScanningCodeScanningListRecentAnalysesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodeScanningCodeScanningListRecentAnalysesQueryInput = {
    ref?: undefined | GithubApiCodeScanningAnalysisRefInput;
    tool_name?: undefined | GithubApiCodeScanningAnalysisToolNameInput;
  };
  type GithubApiCodeScanningAnalysisRefInput = GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisToolNameInput = GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningListRecentAnalysesResponseApiResponse =
    GithubApiCodeScanningAnalysisCodeScanningAnalysisApiResponse[];
  type GithubApiCodeScanningAnalysisCodeScanningAnalysisApiResponse = {
    commit_sha?: undefined | GithubApiCodeScanningAnalysisCommitShaApiResponse;
    ref?: undefined | GithubApiCodeScanningAnalysisRefApiResponse;
    analysis_key?:
      | undefined
      | GithubApiCodeScanningAnalysisAnalysisKeyApiResponse;
    created_at?: undefined | GithubApiCodeScanningAnalysisCreatedAtApiResponse;
    tool_name?: undefined | GithubApiCodeScanningAnalysisToolNameApiResponse;
    error?: undefined | string;
    environment?:
      | undefined
      | GithubApiCodeScanningAnalysisEnvironmentApiResponse;
  };
  type GithubApiCodeScanningAnalysisCommitShaApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisRefApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisAnalysisKeyApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisCreatedAtApiResponse =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisEnvironmentApiResponse =
    GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningUpdateAlertPathInput = {
    owner: string;
    repo: string;
    alert_number: GithubApiAlertNumberInput;
  };
  type GithubApiAlertNumberInput = GithubApiAlertNumber;
  type CodeScanningCodeScanningUpdateAlertBodyInput =
    | undefined
    | {
        state: GithubApiCodeScanningAlertSetStateInput;
        dismissed_reason?:
          | undefined
          | GithubApiCodeScanningAlertDismissedReasonInput;
      };
  type GithubApiCodeScanningAlertSetStateInput =
    GithubApiCodeScanningAlertSetState;
  type GithubApiCodeScanningAlertDismissedReasonInput =
    GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningUpdateAlertResponseApiResponse =
    CodeScanningCodeScanningGetAlertResponseApiResponse;
  type CodeScanningCodeScanningUploadSarifPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodeScanningCodeScanningUploadSarifBodyInput =
    | undefined
    | {
        commit_sha: GithubApiCodeScanningAnalysisCommitShaInput;
        ref: GithubApiCodeScanningAnalysisRefInput;
        sarif: GithubApiCodeScanningAnalysisSarifFileInput;
        checkout_uri?: undefined | string;
        started_at?: undefined | string;
        tool_name: GithubApiCodeScanningAnalysisToolNameInput;
      };
  type GithubApiCodeScanningAnalysisCommitShaInput =
    GithubApiSelectedActionsUrl;
  type GithubApiCodeScanningAnalysisSarifFileInput =
    GithubApiSelectedActionsUrl;
  type CodeScanningCodeScanningUploadSarifResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type CodesOfConductCodesOfConductGetAllCodesOfConductResponseApiResponse =
    GithubApiCodeOfConductApiResponse[];
  type GithubApiCodeOfConductApiResponse = GithubApiCodeOfConduct;
  type CodesOfConductCodesOfConductGetConductCodePathInput =
    CodesOfConductCodesOfConductGetConductCodePath;
  type CodesOfConductCodesOfConductGetConductCodeResponseApiResponse =
    GithubApiCodeOfConductApiResponse;
  type CodesOfConductCodesOfConductGetForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type CodesOfConductCodesOfConductGetForRepoResponseApiResponse =
    CodesOfConductCodesOfConductGetConductCodeResponseApiResponse;
  type CompasStructureResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EmojisEmojisGetResponseApiResponse = EmojisEmojisGetResponse;
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
  type EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePath;
  type EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminCreateRegistrationTokenForEnterpriseResponseApiResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminCreateRemoveTokenForEnterpriseResponseApiResponse =
    ActionsActionsCreateRegistrationTokenForOrgResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodyInput =
    EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBody;
  type EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponseApiResponse =
    GithubApiRunnerGroupsEnterpriseApiResponse;
  type GithubApiRunnerGroupsEnterpriseApiResponse =
    GithubApiRunnerGroupsEnterprise;
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminDeleteUserFromEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePath;
  type EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprisePath;
  type EnterpriseAdminEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminGetAllowedActionsEnterpriseResponseApiResponse =
    ActionsActionsGetAllowedActionsOrganizationResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminGetGithubActionsPermissionsEnterpriseResponseApiResponse =
    GithubApiActionsEnterprisePermissionsApiResponse;
  type GithubApiActionsEnterprisePermissionsApiResponse = {
    enabled_organizations?:
      | undefined
      | GithubApiEnabledOrganizationsApiResponse;
    selected_organizations_url?: undefined | string;
    allowed_actions?: undefined | GithubApiAllowedActionsApiResponse;
    selected_actions_url?: undefined | GithubApiSelectedActionsUrlApiResponse;
  };
  type GithubApiEnabledOrganizationsApiResponse = GithubApiEnabledRepositories;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupPathInput =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponseApiResponse =
    GithubApiScimEnterpriseGroupApiResponse;
  type GithubApiScimEnterpriseGroupApiResponse = GithubApiScimEnterpriseGroup;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserPathInput =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponseApiResponse =
    GithubApiScimEnterpriseUserApiResponse;
  type GithubApiScimEnterpriseUserApiResponse = GithubApiScimEnterpriseUser;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerForEnterpriseResponseApiResponse =
    ActionsActionsGetSelfHostedRunnerForOrgResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponseApiResponse =
    EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseApiResponse =
    {
      total_count?: undefined | number;
      organizations?: undefined | GithubApiOrganizationSimpleApiResponse[];
    };
  type GithubApiOrganizationSimpleApiResponse = GithubApiOrganizationSimple;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseQueryInput =
    EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseQuery;
  type EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseResponseApiResponse =
    GithubApiScimGroupListEnterpriseApiResponse;
  type GithubApiScimGroupListEnterpriseApiResponse =
    GithubApiScimGroupListEnterprise;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseQueryInput =
    EnterpriseAdminEnterpriseAdminListProvisionedGroupsEnterpriseQuery;
  type EnterpriseAdminEnterpriseAdminListProvisionedIdentitiesEnterpriseResponseApiResponse =
    GithubApiScimUserListEnterpriseApiResponse;
  type GithubApiScimUserListEnterpriseApiResponse =
    GithubApiScimUserListEnterprise;
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListRunnerApplicationsForEnterpriseResponseApiResponse =
    ActionsActionsListRunnerApplicationsForOrgResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type EnterpriseAdminEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponseApiResponse =
    EnterpriseAdminEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponseApiResponse =
    {
      total_count?: undefined | number;
      runner_groups?: undefined | GithubApiRunnerGroupsEnterpriseApiResponse[];
    };
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersForEnterpriseResponseApiResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type EnterpriseAdminEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponseApiResponse =
    ActionsActionsListSelfHostedRunnersForOrgResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupPathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupBodyInput =
    EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupBody;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupResponseApiResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserPathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserBodyInput =
    EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserBody;
  type EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserResponseApiResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprisePath;
  type EnterpriseAdminEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminAddSelfHostedRunnerToGroupForEnterprisePath;
  type EnterpriseAdminEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseBodyInput =
    ActionsActionsSetAllowedActionsOrganizationBodyInput;
  type EnterpriseAdminEnterpriseAdminSetAllowedActionsEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseBodyInput =

      | undefined
      | {
          enabled_organizations: GithubApiEnabledOrganizationsInput;
          allowed_actions?: undefined | GithubApiAllowedActionsInput;
        };
  type GithubApiEnabledOrganizationsInput = GithubApiEnabledRepositories;
  type EnterpriseAdminEnterpriseAdminSetGithubActionsPermissionsEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupPathInput =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupBodyInput =
    EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseGroupBody;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseGroupResponseApiResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserPathInput =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserBodyInput =
    EnterpriseAdminEnterpriseAdminProvisionAndInviteEnterpriseUserBody;
  type EnterpriseAdminEnterpriseAdminSetInformationForProvisionedEnterpriseUserResponseApiResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBodyInput =
    EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBody;
  type EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprisePathInput =
    AuditLogAuditLogGetAuditLogPath;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseBodyInput =
    EnterpriseAdminEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBody;
  type EnterpriseAdminEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseBodyInput =
    ActionsActionsSetSelfHostedRunnersInGroupForOrgBody;
  type EnterpriseAdminEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupPathInput =
    EnterpriseAdminEnterpriseAdminDeleteScimGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupBodyInput =
    EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupBody;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupResponseApiResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseGroupResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserPathInput =
    EnterpriseAdminEnterpriseAdminDeleteUserFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserBodyInput =
    EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseGroupBody;
  type EnterpriseAdminEnterpriseAdminUpdateAttributeForEnterpriseUserResponseApiResponse =
    EnterpriseAdminEnterpriseAdminGetProvisioningInformationForEnterpriseUserResponseApiResponse;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprisePathInput =
    EnterpriseAdminEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprisePath;
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBodyInput =

      | undefined
      | {
          name?: undefined | string;
          visibility?: undefined | "selected" | "all";
        };
  type EnterpriseAdminEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponseApiResponse =
    EnterpriseAdminEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponseApiResponse;
  type GistsGistsCheckIsStarredPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsCheckIsStarredResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsCreateBodyInput = GistsGistsCreateBody;
  type GistsGistsCreateResponseApiResponse = GithubApiGistFullApiResponse;
  type GithubApiGistFullApiResponse =
    | GithubApiGistSimpleApiResponse
    | {
        forks?:
          | undefined
          | {
              user?:
                | undefined
                | {
                    login?: undefined | string;
                    id?: undefined | number;
                    node_id?: undefined | string;
                    avatar_url?: undefined | string;
                    gravatar_id?: undefined | string;
                    url?: undefined | string;
                    html_url?: undefined | string;
                    followers_url?: undefined | string;
                    following_url?: undefined | string;
                    gists_url?: undefined | string;
                    starred_url?: undefined | string;
                    subscriptions_url?: undefined | string;
                    organizations_url?: undefined | string;
                    repos_url?: undefined | string;
                    events_url?: undefined | string;
                    received_events_url?: undefined | string;
                    type?: undefined | string;
                    site_admin?: undefined | boolean;
                  };
              url?: undefined | string;
              id?: undefined | string;
              created_at?: undefined | string;
              updated_at?: undefined | string;
            }[];
        history?:
          | undefined
          | {
              url?: undefined | string;
              version?: undefined | string;
              user?:
                | undefined
                | {
                    login?: undefined | string;
                    id?: undefined | number;
                    node_id?: undefined | string;
                    avatar_url?: undefined | string;
                    gravatar_id?: undefined | string;
                    url?: undefined | string;
                    html_url?: undefined | string;
                    followers_url?: undefined | string;
                    following_url?: undefined | string;
                    gists_url?: undefined | string;
                    starred_url?: undefined | string;
                    subscriptions_url?: undefined | string;
                    organizations_url?: undefined | string;
                    repos_url?: undefined | string;
                    events_url?: undefined | string;
                    received_events_url?: undefined | string;
                    type?: undefined | string;
                    site_admin?: undefined | boolean;
                  };
              change_status?:
                | undefined
                | {
                    deletions?: undefined | number;
                    additions?: undefined | number;
                    total?: undefined | number;
                  };
              committed_at?: undefined | string;
            }[];
        fork_of?: undefined | GithubApiGistSimpleApiResponse;
        url?: undefined | string;
        forks_url?: undefined | string;
        commits_url?: undefined | string;
        id?: undefined | string;
        node_id?: undefined | string;
        git_pull_url?: undefined | string;
        git_push_url?: undefined | string;
        html_url?: undefined | string;
        created_at?: undefined | string;
        updated_at?: undefined | string;
        description?: undefined | string;
        comments?: undefined | number;
        comments_url?: undefined | string;
      };
  type GithubApiGistSimpleApiResponse = {
    url?: undefined | string;
    forks_url?: undefined | string;
    commits_url?: undefined | string;
    id?: undefined | string;
    node_id?: undefined | string;
    git_pull_url?: undefined | string;
    git_push_url?: undefined | string;
    html_url?: undefined | string;
    files?:
      | undefined
      | {
          [key: string]: {
            filename?: undefined | string;
            type?: undefined | string;
            language?: undefined | string;
            raw_url?: undefined | string;
            size?: undefined | number;
            truncated?: undefined | boolean;
            content?: undefined | string;
          };
        };
    public?: undefined | boolean;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    description?: undefined | string;
    comments?: undefined | number;
    user?: undefined | string;
    comments_url?: undefined | string;
    owner?: undefined | GithubApiSimpleUserApiResponse;
    truncated?: undefined | boolean;
  };
  type GistsGistsCreateCommentPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsCreateCommentBodyInput = GistsGistsCreateCommentBody;
  type GistsGistsCreateCommentResponseApiResponse =
    GithubApiGistCommentApiResponse;
  type GithubApiGistCommentApiResponse = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: GithubApiSimpleUserApiResponse;
    created_at: string;
    updated_at: string;
    author_association: string;
  };
  type GistsGistsDeletePathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsDeleteResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsDeleteCommentPathInput = GistsGistsDeleteCommentPath;
  type GistsGistsDeleteCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsForkPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsForkResponseApiResponse = GithubApiBaseGistApiResponse;
  type GithubApiBaseGistApiResponse = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: {
      [key: string]: {
        filename?: undefined | string;
        type?: undefined | string;
        language?: undefined | string;
        raw_url?: undefined | string;
        size?: undefined | number;
      };
    };
    public: boolean;
    created_at: string;
    updated_at: string;
    description: string;
    comments: number;
    user: GithubApiSimpleUserApiResponse;
    comments_url: string;
    owner?: undefined | GithubApiSimpleUserApiResponse;
    truncated?: undefined | boolean;
    forks?: undefined | any[];
    history?: undefined | any[];
  };
  type GistsGistsGetPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsGetResponseApiResponse = GistsGistsCreateResponseApiResponse;
  type GistsGistsGetCommentPathInput = GistsGistsDeleteCommentPath;
  type GistsGistsGetCommentResponseApiResponse =
    GistsGistsCreateCommentResponseApiResponse;
  type GistsGistsGetRevisionPathInput = GistsGistsGetRevisionPath;
  type GistsGistsGetRevisionResponseApiResponse =
    GistsGistsCreateResponseApiResponse;
  type GistsGistsListQueryInput = {
    since?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type GistsGistsListResponseApiResponse = GithubApiBaseGistApiResponse[];
  type GistsGistsListCommentsPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsListCommentsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type GistsGistsListCommentsResponseApiResponse =
    GithubApiGistCommentApiResponse[];
  type GistsGistsListCommitsPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsListCommitsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type GistsGistsListCommitsResponseApiResponse =
    GithubApiGistCommitApiResponse[];
  type GithubApiGistCommitApiResponse = {
    url: string;
    version: string;
    user: GithubApiSimpleUserApiResponse;
    change_status: {
      total?: undefined | number;
      additions?: undefined | number;
      deletions?: undefined | number;
    };
    committed_at: string;
  };
  type GistsGistsListForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type GistsGistsListForUserQueryInput = GistsGistsListQueryInput;
  type GistsGistsListForUserResponseApiResponse =
    GistsGistsListResponseApiResponse;
  type GistsGistsListForksPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsListForksQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type GistsGistsListForksResponseApiResponse = GithubApiGistFullApiResponse[];
  type GistsGistsListPublicQueryInput = GistsGistsListQueryInput;
  type GistsGistsListPublicResponseApiResponse =
    GistsGistsListResponseApiResponse;
  type GistsGistsListStarredQueryInput = GistsGistsListQueryInput;
  type GistsGistsListStarredResponseApiResponse =
    GistsGistsListResponseApiResponse;
  type GistsGistsStarPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsStarResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsUnstarPathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsUnstarResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GistsGistsUpdatePathInput = GistsGistsCheckIsStarredPath;
  type GistsGistsUpdateBodyInput = GistsGistsUpdateBody;
  type GistsGistsUpdateResponseApiResponse =
    GistsGistsCreateResponseApiResponse;
  type GistsGistsUpdateCommentPathInput = GistsGistsDeleteCommentPath;
  type GistsGistsUpdateCommentBodyInput = GistsGistsCreateCommentBody;
  type GistsGistsUpdateCommentResponseApiResponse =
    GistsGistsCreateCommentResponseApiResponse;
  type GitGitCreateBlobPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateBlobBodyInput =
    | undefined
    | { content: string; encoding?: undefined | string };
  type GitGitCreateBlobResponseApiResponse = GithubApiShortBlobApiResponse;
  type GithubApiShortBlobApiResponse = GithubApiShortBlob;
  type GitGitCreateCommitPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateCommitBodyInput = GitGitCreateCommitBody;
  type GitGitCreateCommitResponseApiResponse = GithubApiGitCommitApiResponse;
  type GithubApiGitCommitApiResponse = GithubApiGitCommit;
  type GitGitCreateRefPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateRefBodyInput = GitGitCreateRefBody;
  type GitGitCreateRefResponseApiResponse = GithubApiGitRefApiResponse;
  type GithubApiGitRefApiResponse = GithubApiGitRef;
  type GitGitCreateTagPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateTagBodyInput = GitGitCreateTagBody;
  type GitGitCreateTagResponseApiResponse = GithubApiGitTagApiResponse;
  type GithubApiGitTagApiResponse = {
    node_id: string;
    tag: string;
    sha: string;
    url: string;
    message: string;
    tagger: { date: string; email: string; name: string };
    object: { sha: string; type: string; url: string };
    verification?: undefined | GithubApiVerificationApiResponse;
  };
  type GithubApiVerificationApiResponse = GithubApiVerification;
  type GitGitCreateTreePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type GitGitCreateTreeBodyInput = GitGitCreateTreeBody;
  type GitGitCreateTreeResponseApiResponse = GithubApiGitTreeApiResponse;
  type GithubApiGitTreeApiResponse = GithubApiGitTree;
  type GitGitDeleteRefPathInput = ChecksChecksListForRefPath;
  type GitGitDeleteRefResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type GitGitGetBlobPathInput = GitGitGetBlobPath;
  type GitGitGetBlobResponseApiResponse = GithubApiBlobApiResponse;
  type GithubApiBlobApiResponse = GithubApiBlob;
  type GitGitGetCommitPathInput = GitGitGetCommitPath;
  type GitGitGetCommitResponseApiResponse =
    GitGitCreateCommitResponseApiResponse;
  type GitGitGetRefPathInput = ChecksChecksListForRefPath;
  type GitGitGetRefResponseApiResponse = GitGitCreateRefResponseApiResponse;
  type GitGitGetTagPathInput = GitGitGetTagPath;
  type GitGitGetTagResponseApiResponse = GitGitCreateTagResponseApiResponse;
  type GitGitGetTreePathInput = GitGitGetTreePath;
  type GitGitGetTreeQueryInput = GitGitGetTreeQuery;
  type GitGitGetTreeResponseApiResponse = GitGitCreateTreeResponseApiResponse;
  type GitGitListMatchingRefsPathInput = ChecksChecksListForRefPath;
  type GitGitListMatchingRefsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type GitGitListMatchingRefsResponseApiResponse = GithubApiGitRefApiResponse[];
  type GitGitUpdateRefPathInput = ChecksChecksListForRefPath;
  type GitGitUpdateRefBodyInput =
    | undefined
    | { sha: string; force?: undefined | boolean };
  type GitGitUpdateRefResponseApiResponse = GitGitCreateRefResponseApiResponse;
  type GitignoreGitignoreGetAllTemplatesResponseApiResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type GitignoreGitignoreGetTemplatePathInput =
    GitignoreGitignoreGetTemplatePath;
  type GitignoreGitignoreGetTemplateResponseApiResponse =
    GithubApiGitignoreTemplateApiResponse;
  type GithubApiGitignoreTemplateApiResponse = GithubApiGitignoreTemplate;
  type GroupFullRouteParamsInput = { full: string; color: number | string };
  type GroupFullRouteBodyInput = { foo: string; bar: ServerOptionsInput };
  type ServerOptionsInput = ServerOptions;
  type GroupFullRouteResponseApiResponse = {
    items: { foo: string; bar: ServerItemApiResponse }[];
  };
  type ServerItemApiResponse = {
    A: string;
    B: number;
    C: number;
    D: boolean;
    E: string;
  };
  type GroupRefRouteParamsInput = { id: ServerInputInput };
  type ServerInputInput = number | string;
  type GroupRefRouteQueryInput = GroupRefRouteQuery;
  type GroupRefRouteResponseApiResponse = BenchNestedApiResponse;
  type BenchNestedApiResponse = {
    foo: true;
    bar: 5;
    nest: BenchSimpleApiResponse[];
  };
  type BenchSimpleApiResponse = BenchSimple;
  type GroupUploadFilesInput = {
    input1: { name?: string; data: ReadableStream };
  };
  type GroupUploadResponseApiResponse = GroupUploadResponse;
  type InteractionsInteractionsGetRestrictionsForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type InteractionsInteractionsGetRestrictionsForOrgResponseApiResponse =
    GithubApiInteractionLimitResponseApiResponse;
  type GithubApiInteractionLimitResponseApiResponse = {
    limit: GithubApiInteractionGroupApiResponse;
    origin: string;
    expires_at: string;
  };
  type GithubApiInteractionGroupApiResponse = GithubApiInteractionGroup;
  type InteractionsInteractionsGetRestrictionsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type InteractionsInteractionsGetRestrictionsForRepoResponseApiResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponseApiResponse;
  type InteractionsInteractionsGetRestrictionsForYourPublicReposResponseApiResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponseApiResponse;
  type InteractionsInteractionsRemoveRestrictionsForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type InteractionsInteractionsRemoveRestrictionsForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type InteractionsInteractionsRemoveRestrictionsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type InteractionsInteractionsRemoveRestrictionsForRepoResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type InteractionsInteractionsRemoveRestrictionsForYourPublicReposResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type InteractionsInteractionsSetRestrictionsForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type InteractionsInteractionsSetRestrictionsForOrgBodyInput =
    | undefined
    | GithubApiInteractionLimitInput;
  type GithubApiInteractionLimitInput = {
    limit: GithubApiInteractionGroupInput;
    expiry?: undefined | GithubApiInteractionExpiryInput;
  };
  type GithubApiInteractionGroupInput = GithubApiInteractionGroup;
  type GithubApiInteractionExpiryInput = GithubApiInteractionExpiry;
  type InteractionsInteractionsSetRestrictionsForOrgResponseApiResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponseApiResponse;
  type InteractionsInteractionsSetRestrictionsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type InteractionsInteractionsSetRestrictionsForRepoBodyInput =
    InteractionsInteractionsSetRestrictionsForOrgBodyInput;
  type InteractionsInteractionsSetRestrictionsForRepoResponseApiResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponseApiResponse;
  type InteractionsInteractionsSetRestrictionsForYourPublicReposBodyInput =
    InteractionsInteractionsSetRestrictionsForOrgBodyInput;
  type InteractionsInteractionsSetRestrictionsForYourPublicReposResponseApiResponse =
    InteractionsInteractionsGetRestrictionsForOrgResponseApiResponse;
  type IssuesIssuesAddAssigneesPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesAddAssigneesBodyInput = IssuesIssuesAddAssigneesBody;
  type IssuesIssuesAddAssigneesResponseApiResponse =
    GithubApiIssueSimpleApiResponse;
  type IssuesIssuesAddLabelsPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesAddLabelsBodyInput = IssuesIssuesAddLabelsBody;
  type IssuesIssuesAddLabelsResponseApiResponse = GithubApiLabelApiResponse[];
  type IssuesIssuesCheckUserCanBeAssignedPathInput =
    IssuesIssuesCheckUserCanBeAssignedPath;
  type IssuesIssuesCheckUserCanBeAssignedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesCreatePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesCreateBodyInput = IssuesIssuesCreateBody;
  type IssuesIssuesCreateResponseApiResponse = GithubApiIssueApiResponse;
  type GithubApiIssueApiResponse = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body?: undefined | string;
    user: GithubApiSimpleUserApiResponse;
    labels: (
      | string
      | {
          id?: undefined | number;
          node_id?: undefined | string;
          url?: undefined | string;
          name?: undefined | string;
          description?: undefined | string;
          color?: undefined | string;
          default?: undefined | boolean;
        }
    )[];
    assignee: GithubApiSimpleUserApiResponse;
    assignees?: undefined | GithubApiSimpleUserApiResponse[];
    milestone: GithubApiMilestoneApiResponse;
    locked: boolean;
    active_lock_reason?: undefined | string;
    comments: number;
    pull_request?:
      | undefined
      | {
          merged_at?: undefined | string;
          diff_url: string;
          html_url: string;
          patch_url: string;
          url: string;
        };
    closed_at: string;
    created_at: string;
    updated_at: string;
    closed_by?: undefined | GithubApiSimpleUserApiResponse;
    body_html?: undefined | string;
    body_text?: undefined | string;
    timeline_url?: undefined | string;
    repository?: undefined | GithubApiRepositoryApiResponse;
    performed_via_github_app?: undefined | GithubApiIntegrationApiResponse;
    author_association: string;
    reactions?: undefined | GithubApiReactionRollupApiResponse;
  };
  type IssuesIssuesCreateCommentPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesCreateCommentBodyInput = GistsGistsCreateCommentBody;
  type IssuesIssuesCreateCommentResponseApiResponse =
    GithubApiIssueCommentApiResponse;
  type IssuesIssuesCreateLabelPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesCreateLabelBodyInput = IssuesIssuesCreateLabelBody;
  type IssuesIssuesCreateLabelResponseApiResponse = GithubApiLabelApiResponse;
  type IssuesIssuesCreateMilestonePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesCreateMilestoneBodyInput =
    | undefined
    | {
        title: string;
        state?: undefined | "open" | "closed";
        description?: undefined | string;
        due_on?: undefined | string;
      };
  type IssuesIssuesCreateMilestoneResponseApiResponse =
    GithubApiMilestoneApiResponse;
  type IssuesIssuesDeleteCommentPathInput = IssuesIssuesDeleteCommentPath;
  type IssuesIssuesDeleteCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesDeleteLabelPathInput = IssuesIssuesDeleteLabelPath;
  type IssuesIssuesDeleteLabelResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesDeleteMilestonePathInput = IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesDeleteMilestoneResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesGetPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesGetResponseApiResponse =
    IssuesIssuesCreateResponseApiResponse;
  type IssuesIssuesGetCommentPathInput = IssuesIssuesDeleteCommentPath;
  type IssuesIssuesGetCommentResponseApiResponse =
    IssuesIssuesCreateCommentResponseApiResponse;
  type IssuesIssuesGetEventPathInput = IssuesIssuesGetEventPath;
  type IssuesIssuesGetEventResponseApiResponse = GithubApiIssueEventApiResponse;
  type GithubApiIssueEventApiResponse = {
    id: number;
    node_id: string;
    url: string;
    actor: GithubApiSimpleUserApiResponse;
    event: string;
    commit_id: string;
    commit_url: string;
    created_at: string;
    issue?: undefined | GithubApiIssueSimpleApiResponse;
    label?: undefined | GithubApiIssueEventLabelApiResponse;
    assignee?: undefined | GithubApiSimpleUserApiResponse;
    assigner?: undefined | GithubApiSimpleUserApiResponse;
    review_requester?: undefined | GithubApiSimpleUserApiResponse;
    requested_reviewer?: undefined | GithubApiSimpleUserApiResponse;
    requested_team?: undefined | GithubApiTeamApiResponse;
    dismissed_review?:
      | undefined
      | GithubApiIssueEventDismissedReviewApiResponse;
    milestone?: undefined | GithubApiIssueEventMilestoneApiResponse;
    project_card?: undefined | GithubApiIssueEventProjectCardApiResponse;
    rename?: undefined | GithubApiIssueEventRenameApiResponse;
    author_association?: undefined | string;
    lock_reason?: undefined | string;
  };
  type GithubApiIssueEventLabelApiResponse = GithubApiIssueEventLabel;
  type GithubApiTeamApiResponse = {
    id: number;
    node_id: string;
    name: string;
    slug: string;
    description: string;
    privacy?: undefined | string;
    permission: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    parent?: undefined | GithubApiTeamSimpleApiResponse;
  };
  type GithubApiTeamSimpleApiResponse = GithubApiTeamSimple;
  type GithubApiIssueEventDismissedReviewApiResponse =
    GithubApiIssueEventDismissedReview;
  type GithubApiIssueEventMilestoneApiResponse = GithubApiIssueEventMilestone;
  type GithubApiIssueEventProjectCardApiResponse =
    GithubApiIssueEventProjectCard;
  type GithubApiIssueEventRenameApiResponse = GithubApiIssueEventRename;
  type IssuesIssuesGetLabelPathInput = IssuesIssuesDeleteLabelPath;
  type IssuesIssuesGetLabelResponseApiResponse =
    IssuesIssuesCreateLabelResponseApiResponse;
  type IssuesIssuesGetMilestonePathInput = IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesGetMilestoneResponseApiResponse =
    IssuesIssuesCreateMilestoneResponseApiResponse;
  type IssuesIssuesListQueryInput = {
    filter?:
      | undefined
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "all";
    state?: undefined | "open" | "closed" | "all";
    labels?: undefined | string;
    sort?: undefined | "created" | "updated" | "comments";
    direction?: undefined | "asc" | "desc";
    since?: undefined | string;
    collab?: undefined | boolean;
    orgs?: undefined | boolean;
    owned?: undefined | boolean;
    pulls?: undefined | boolean;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type IssuesIssuesListResponseApiResponse = GithubApiIssueApiResponse[];
  type IssuesIssuesListAssigneesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListAssigneesQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListAssigneesResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type IssuesIssuesListCommentsPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListCommentsQueryInput = GistsGistsListQueryInput;
  type IssuesIssuesListCommentsResponseApiResponse =
    GithubApiIssueCommentApiResponse[];
  type IssuesIssuesListCommentsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListCommentsForRepoQueryInput = {
    sort?: undefined | "created" | "updated";
    direction?: undefined | "asc" | "desc";
    since?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type IssuesIssuesListCommentsForRepoResponseApiResponse =
    IssuesIssuesListCommentsResponseApiResponse;
  type IssuesIssuesListEventsPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListEventsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListEventsResponseApiResponse =
    GithubApiIssueEventForIssueApiResponse[];
  type GithubApiIssueEventForIssueApiResponse = {
    id?: undefined | number;
    node_id?: undefined | string;
    url?: undefined | string;
    actor?: undefined | GithubApiSimpleUserApiResponse;
    event?: undefined | string;
    commit_id?: undefined | string;
    commit_url?: undefined | string;
    created_at?: undefined | string;
    sha?: undefined | string;
    html_url?: undefined | string;
    message?: undefined | string;
    issue_url?: undefined | string;
    updated_at?: undefined | string;
    author_association?: undefined | string;
    body?: undefined | string;
    lock_reason?: undefined | string;
    submitted_at?: undefined | string;
    state?: undefined | string;
    pull_request_url?: undefined | string;
    body_html?: undefined | string;
    body_text?: undefined | string;
  };
  type IssuesIssuesListEventsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListEventsForRepoQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListEventsForRepoResponseApiResponse =
    GithubApiIssueEventApiResponse[];
  type IssuesIssuesListEventsForTimelinePathInput =
    IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListEventsForTimelineQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListEventsForTimelineResponseApiResponse =
    IssuesIssuesListEventsResponseApiResponse;
  type IssuesIssuesListForAuthenticatedUserQueryInput = {
    filter?:
      | undefined
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "all";
    state?: undefined | "open" | "closed" | "all";
    labels?: undefined | string;
    sort?: undefined | "created" | "updated" | "comments";
    direction?: undefined | "asc" | "desc";
    since?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type IssuesIssuesListForAuthenticatedUserResponseApiResponse =
    IssuesIssuesListResponseApiResponse;
  type IssuesIssuesListForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type IssuesIssuesListForOrgQueryInput =
    IssuesIssuesListForAuthenticatedUserQueryInput;
  type IssuesIssuesListForOrgResponseApiResponse =
    IssuesIssuesListResponseApiResponse;
  type IssuesIssuesListForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListForRepoQueryInput = {
    milestone?: undefined | string;
    state?: undefined | "open" | "closed" | "all";
    assignee?: undefined | string;
    creator?: undefined | string;
    mentioned?: undefined | string;
    labels?: undefined | string;
    sort?: undefined | "created" | "updated" | "comments";
    direction?: undefined | "asc" | "desc";
    since?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type IssuesIssuesListForRepoResponseApiResponse =
    GithubApiIssueSimpleApiResponse[];
  type IssuesIssuesListLabelsForMilestonePathInput =
    IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesListLabelsForMilestoneQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListLabelsForMilestoneResponseApiResponse =
    IssuesIssuesAddLabelsResponseApiResponse;
  type IssuesIssuesListLabelsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListLabelsForRepoQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListLabelsForRepoResponseApiResponse =
    IssuesIssuesAddLabelsResponseApiResponse;
  type IssuesIssuesListLabelsOnIssuePathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesListLabelsOnIssueQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type IssuesIssuesListLabelsOnIssueResponseApiResponse =
    IssuesIssuesAddLabelsResponseApiResponse;
  type IssuesIssuesListMilestonesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type IssuesIssuesListMilestonesQueryInput = {
    state?: undefined | "open" | "closed" | "all";
    sort?: undefined | "due_on" | "completeness";
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type IssuesIssuesListMilestonesResponseApiResponse =
    GithubApiMilestoneApiResponse[];
  type IssuesIssuesLockPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesLockBodyInput = IssuesIssuesLockBody;
  type IssuesIssuesLockResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesRemoveAllLabelsPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesRemoveAllLabelsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesRemoveAssigneesPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesRemoveAssigneesBodyInput = IssuesIssuesAddAssigneesBody;
  type IssuesIssuesRemoveAssigneesResponseApiResponse =
    IssuesIssuesAddAssigneesResponseApiResponse;
  type IssuesIssuesRemoveLabelPathInput = IssuesIssuesRemoveLabelPath;
  type IssuesIssuesRemoveLabelResponseApiResponse =
    IssuesIssuesAddLabelsResponseApiResponse;
  type IssuesIssuesSetLabelsPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesSetLabelsBodyInput = IssuesIssuesSetLabelsBody;
  type IssuesIssuesSetLabelsResponseApiResponse =
    IssuesIssuesAddLabelsResponseApiResponse;
  type IssuesIssuesUnlockPathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesUnlockResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type IssuesIssuesUpdatePathInput = IssuesIssuesAddAssigneesPath;
  type IssuesIssuesUpdateBodyInput = IssuesIssuesUpdateBody;
  type IssuesIssuesUpdateResponseApiResponse =
    IssuesIssuesCreateResponseApiResponse;
  type IssuesIssuesUpdateCommentPathInput = IssuesIssuesDeleteCommentPath;
  type IssuesIssuesUpdateCommentBodyInput = GistsGistsCreateCommentBody;
  type IssuesIssuesUpdateCommentResponseApiResponse =
    IssuesIssuesCreateCommentResponseApiResponse;
  type IssuesIssuesUpdateLabelPathInput = IssuesIssuesDeleteLabelPath;
  type IssuesIssuesUpdateLabelBodyInput = IssuesIssuesUpdateLabelBody;
  type IssuesIssuesUpdateLabelResponseApiResponse =
    IssuesIssuesCreateLabelResponseApiResponse;
  type IssuesIssuesUpdateMilestonePathInput = IssuesIssuesDeleteMilestonePath;
  type IssuesIssuesUpdateMilestoneBodyInput =
    | undefined
    | {
        title?: undefined | string;
        state?: undefined | "open" | "closed";
        description?: undefined | string;
        due_on?: undefined | string;
      };
  type IssuesIssuesUpdateMilestoneResponseApiResponse =
    IssuesIssuesCreateMilestoneResponseApiResponse;
  type LicensesLicensesGetPathInput = LicensesLicensesGetPath;
  type LicensesLicensesGetResponseApiResponse = GithubApiLicenseApiResponse;
  type GithubApiLicenseApiResponse = GithubApiLicense;
  type LicensesLicensesGetAllCommonlyUsedQueryInput = {
    featured?: undefined | boolean;
    per_page?: undefined | number;
  };
  type LicensesLicensesGetAllCommonlyUsedResponseApiResponse =
    GithubApiLicenseSimpleApiResponse[];
  type LicensesLicensesGetForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type LicensesLicensesGetForRepoResponseApiResponse =
    GithubApiLicenseContentApiResponse;
  type GithubApiLicenseContentApiResponse = {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    content: string;
    encoding: string;
    _links: { git: string; html: string; self: string };
    license: GithubApiLicenseSimpleApiResponse;
  };
  type MarkdownMarkdownRenderBodyInput =
    | undefined
    | {
        text: string;
        mode?: undefined | "markdown" | "gfm";
        context?: undefined | string;
      };
  type MarkdownMarkdownRenderResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MarkdownMarkdownRenderRawResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MetaMetaGetResponseApiResponse = GithubApiApiOverviewApiResponse;
  type GithubApiApiOverviewApiResponse = GithubApiApiOverview;
  type MetaMetaGetOctocatQueryInput = MetaMetaGetOctocatQuery;
  type MetaMetaGetOctocatResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MetaMetaGetZenResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MetaMetaRootResponseApiResponse = MetaMetaRootResponse;
  type MigrationsMigrationsCancelImportPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsCancelImportResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUserPathInput =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsDeleteArchiveForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsDeleteArchiveForOrgPathInput =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsDeleteArchiveForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsDownloadArchiveForOrgPathInput =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsDownloadArchiveForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsGetArchiveForAuthenticatedUserPathInput =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsGetArchiveForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsGetCommitAuthorsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsGetCommitAuthorsQueryInput =
    MigrationsMigrationsGetCommitAuthorsQuery;
  type MigrationsMigrationsGetCommitAuthorsResponseApiResponse =
    GithubApiPorterAuthorApiResponse[];
  type GithubApiPorterAuthorApiResponse = GithubApiPorterAuthor;
  type MigrationsMigrationsGetImportStatusPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsGetImportStatusResponseApiResponse =
    GithubApiImportApiResponse;
  type GithubApiImportApiResponse = GithubApiImport;
  type MigrationsMigrationsGetLargeFilesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsGetLargeFilesResponseApiResponse =
    GithubApiPorterLargeFileApiResponse[];
  type GithubApiPorterLargeFileApiResponse = GithubApiPorterLargeFile;
  type MigrationsMigrationsGetStatusForAuthenticatedUserPathInput =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsGetStatusForAuthenticatedUserQueryInput =
    MigrationsMigrationsGetStatusForAuthenticatedUserQuery;
  type MigrationsMigrationsGetStatusForAuthenticatedUserResponseApiResponse =
    GithubApiMigrationApiResponse;
  type GithubApiMigrationApiResponse = {
    id: number;
    owner: GithubApiSimpleUserApiResponse;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: GithubApiRepositoryApiResponse[];
    url: string;
    created_at: string;
    updated_at: string;
    node_id: string;
    archive_url?: undefined | string;
    exclude?: undefined | any[];
  };
  type MigrationsMigrationsGetStatusForOrgPathInput =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsGetStatusForOrgResponseApiResponse =
    MigrationsMigrationsGetStatusForAuthenticatedUserResponseApiResponse;
  type MigrationsMigrationsListForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type MigrationsMigrationsListForAuthenticatedUserResponseApiResponse =
    GithubApiMigrationApiResponse[];
  type MigrationsMigrationsListForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type MigrationsMigrationsListForOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type MigrationsMigrationsListForOrgResponseApiResponse =
    MigrationsMigrationsListForAuthenticatedUserResponseApiResponse;
  type MigrationsMigrationsListReposForOrgPathInput =
    MigrationsMigrationsDeleteArchiveForOrgPath;
  type MigrationsMigrationsListReposForOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type MigrationsMigrationsListReposForOrgResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type MigrationsMigrationsListReposForUserPathInput =
    MigrationsMigrationsDeleteArchiveForAuthenticatedUserPath;
  type MigrationsMigrationsListReposForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type MigrationsMigrationsListReposForUserResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type MigrationsMigrationsMapCommitAuthorPathInput =
    MigrationsMigrationsMapCommitAuthorPath;
  type MigrationsMigrationsMapCommitAuthorBodyInput =
    MigrationsMigrationsMapCommitAuthorBody;
  type MigrationsMigrationsMapCommitAuthorResponseApiResponse =
    GithubApiPorterAuthorApiResponse;
  type MigrationsMigrationsSetLfsPreferencePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsSetLfsPreferenceBodyInput =
    MigrationsMigrationsSetLfsPreferenceBody;
  type MigrationsMigrationsSetLfsPreferenceResponseApiResponse =
    MigrationsMigrationsGetImportStatusResponseApiResponse;
  type MigrationsMigrationsStartForAuthenticatedUserBodyInput =
    MigrationsMigrationsStartForAuthenticatedUserBody;
  type MigrationsMigrationsStartForAuthenticatedUserResponseApiResponse =
    MigrationsMigrationsGetStatusForAuthenticatedUserResponseApiResponse;
  type MigrationsMigrationsStartForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type MigrationsMigrationsStartForOrgBodyInput =
    | undefined
    | {
        repositories: string[];
        lock_repositories?: undefined | boolean;
        exclude_attachments?: undefined | boolean;
        exclude?: undefined | string[];
      };
  type MigrationsMigrationsStartForOrgResponseApiResponse =
    MigrationsMigrationsGetStatusForAuthenticatedUserResponseApiResponse;
  type MigrationsMigrationsStartImportPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsStartImportBodyInput =
    MigrationsMigrationsStartImportBody;
  type MigrationsMigrationsStartImportResponseApiResponse =
    MigrationsMigrationsGetImportStatusResponseApiResponse;
  type MigrationsMigrationsUnlockRepoForAuthenticatedUserPathInput =
    MigrationsMigrationsUnlockRepoForAuthenticatedUserPath;
  type MigrationsMigrationsUnlockRepoForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsUnlockRepoForOrgPathInput =
    MigrationsMigrationsUnlockRepoForOrgPath;
  type MigrationsMigrationsUnlockRepoForOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type MigrationsMigrationsUpdateImportPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type MigrationsMigrationsUpdateImportBodyInput =
    MigrationsMigrationsUpdateImportBody;
  type MigrationsMigrationsUpdateImportResponseApiResponse =
    MigrationsMigrationsGetImportStatusResponseApiResponse;
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorizationBodyInput =
    OauthAuthorizationsOauthAuthorizationsCreateAuthorizationBody;
  type OauthAuthorizationsOauthAuthorizationsCreateAuthorizationResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPathInput =
    OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath;
  type OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OauthAuthorizationsOauthAuthorizationsDeleteGrantPathInput =
    OauthAuthorizationsOauthAuthorizationsDeleteGrantPath;
  type OauthAuthorizationsOauthAuthorizationsDeleteGrantResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorizationPathInput =
    OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath;
  type OauthAuthorizationsOauthAuthorizationsGetAuthorizationResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type OauthAuthorizationsOauthAuthorizationsGetGrantPathInput =
    OauthAuthorizationsOauthAuthorizationsDeleteGrantPath;
  type OauthAuthorizationsOauthAuthorizationsGetGrantResponseApiResponse =
    GithubApiApplicationGrantApiResponse;
  type GithubApiApplicationGrantApiResponse = {
    id: number;
    url: string;
    app: { client_id: string; name: string; url: string };
    created_at: string;
    updated_at: string;
    scopes: string[];
    user?: undefined | GithubApiSimpleUserApiResponse;
  };
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppPathInput =
    AppsAppsCheckTokenPath;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppBodyInput =
    OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppBody;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPathInput =
    OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintPath;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodyInput =
    OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBody;
  type OauthAuthorizationsOauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizationsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OauthAuthorizationsOauthAuthorizationsListAuthorizationsResponseApiResponse =
    GithubApiAuthorizationApiResponse[];
  type OauthAuthorizationsOauthAuthorizationsListGrantsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OauthAuthorizationsOauthAuthorizationsListGrantsResponseApiResponse =
    GithubApiApplicationGrantApiResponse[];
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationPathInput =
    OauthAuthorizationsOauthAuthorizationsDeleteAuthorizationPath;
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationBodyInput =
    OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationBody;
  type OauthAuthorizationsOauthAuthorizationsUpdateAuthorizationResponseApiResponse =
    AppsAppsCheckAuthorizationResponseApiResponse;
  type OrgsOrgsBlockUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsBlockUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCheckBlockedUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsCheckBlockedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCheckMembershipForUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsCheckMembershipForUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCheckPublicMembershipForUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsCheckPublicMembershipForUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsConvertMemberToOutsideCollaboratorPathInput =
    OrgsOrgsBlockUserPath;
  type OrgsOrgsConvertMemberToOutsideCollaboratorResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsCreateInvitationPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsCreateInvitationBodyInput =
    | undefined
    | {
        invitee_id?: undefined | number;
        email?: undefined | string;
        role?: undefined | "admin" | "direct_member" | "billing_manager";
        team_ids?: undefined | number[];
      };
  type OrgsOrgsCreateInvitationResponseApiResponse =
    GithubApiOrganizationInvitationApiResponse;
  type GithubApiOrganizationInvitationApiResponse = {
    id?: undefined | number;
    login?: undefined | string;
    email?: undefined | string;
    role?: undefined | string;
    created_at?: undefined | string;
    inviter?: undefined | GithubApiSimpleUserApiResponse;
    team_count?: undefined | number;
    invitation_team_url?: undefined | string;
    node_id?: undefined | string;
    invitation_teams_url?: undefined | string;
  };
  type OrgsOrgsCreateWebhookPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsCreateWebhookBodyInput =
    | undefined
    | {
        name: string;
        config: {
          url: GithubApiWebhookConfigUrlInput;
          content_type?: undefined | GithubApiWebhookConfigContentTypeInput;
          secret?: undefined | GithubApiWebhookConfigSecretInput;
          insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslInput;
          username?: undefined | string;
          password?: undefined | string;
        };
        events?: undefined | string[];
        active?: undefined | boolean;
      };
  type OrgsOrgsCreateWebhookResponseApiResponse = GithubApiOrgHookApiResponse;
  type GithubApiOrgHookApiResponse = GithubApiOrgHook;
  type OrgsOrgsDeleteWebhookPathInput = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsDeleteWebhookResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsGetPathInput = ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsGetResponseApiResponse = GithubApiOrganizationFullApiResponse;
  type GithubApiOrganizationFullApiResponse = GithubApiOrganizationFull;
  type OrgsOrgsGetAuditLogPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsGetAuditLogQueryInput = AuditLogAuditLogGetAuditLogQueryInput;
  type OrgsOrgsGetAuditLogResponseApiResponse =
    AuditLogAuditLogGetAuditLogResponseApiResponse;
  type OrgsOrgsGetMembershipForAuthenticatedUserPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsGetMembershipForAuthenticatedUserResponseApiResponse =
    GithubApiOrgMembershipApiResponse;
  type GithubApiOrgMembershipApiResponse = {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    organization: GithubApiOrganizationSimpleApiResponse;
    user: GithubApiSimpleUserApiResponse;
    permissions?: undefined | { can_create_repository: boolean };
  };
  type OrgsOrgsGetMembershipForUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsGetMembershipForUserResponseApiResponse =
    OrgsOrgsGetMembershipForAuthenticatedUserResponseApiResponse;
  type OrgsOrgsGetWebhookPathInput = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsGetWebhookResponseApiResponse =
    OrgsOrgsCreateWebhookResponseApiResponse;
  type OrgsOrgsGetWebhookConfigForOrgPathInput = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsGetWebhookConfigForOrgResponseApiResponse =
    AppsAppsGetWebhookConfigForAppResponseApiResponse;
  type OrgsOrgsListQueryInput = {
    since?: undefined | number;
    per_page?: undefined | number;
  };
  type OrgsOrgsListResponseApiResponse =
    GithubApiOrganizationSimpleApiResponse[];
  type OrgsOrgsListAppInstallationsPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListAppInstallationsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListAppInstallationsResponseApiResponse =
    AppsAppsListInstallationsForAuthenticatedUserResponseApiResponse;
  type OrgsOrgsListBlockedUsersPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListBlockedUsersResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type OrgsOrgsListForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListForAuthenticatedUserResponseApiResponse =
    OrgsOrgsListResponseApiResponse;
  type OrgsOrgsListForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type OrgsOrgsListForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListForUserResponseApiResponse = OrgsOrgsListResponseApiResponse;
  type OrgsOrgsListInvitationTeamsPathInput = OrgsOrgsListInvitationTeamsPath;
  type OrgsOrgsListInvitationTeamsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListInvitationTeamsResponseApiResponse =
    GithubApiTeamApiResponse[];
  type OrgsOrgsListMembersPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListMembersQueryInput = {
    filter?: undefined | "2fa_disabled" | "all";
    role?: undefined | "all" | "admin" | "member";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type OrgsOrgsListMembersResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type OrgsOrgsListMembershipsForAuthenticatedUserQueryInput = {
    state?: undefined | "active" | "pending";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type OrgsOrgsListMembershipsForAuthenticatedUserResponseApiResponse =
    GithubApiOrgMembershipApiResponse[];
  type OrgsOrgsListOutsideCollaboratorsPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListOutsideCollaboratorsQueryInput = {
    filter?: undefined | "2fa_disabled" | "all";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type OrgsOrgsListOutsideCollaboratorsResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type OrgsOrgsListPendingInvitationsPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListPendingInvitationsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListPendingInvitationsResponseApiResponse =
    GithubApiOrganizationInvitationApiResponse[];
  type OrgsOrgsListPublicMembersPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListPublicMembersQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListPublicMembersResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type OrgsOrgsListSamlSsoAuthorizationsPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListSamlSsoAuthorizationsResponseApiResponse =
    GithubApiCredentialAuthorizationApiResponse[];
  type GithubApiCredentialAuthorizationApiResponse =
    GithubApiCredentialAuthorization;
  type OrgsOrgsListWebhooksPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsListWebhooksQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type OrgsOrgsListWebhooksResponseApiResponse = GithubApiOrgHookApiResponse[];
  type OrgsOrgsPingWebhookPathInput = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsPingWebhookResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveMemberPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsRemoveMemberResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveMembershipForUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsRemoveMembershipForUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveOutsideCollaboratorPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsRemoveOutsideCollaboratorResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUserPathInput =
    OrgsOrgsBlockUserPath;
  type OrgsOrgsRemovePublicMembershipForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsRemoveSamlSsoAuthorizationPathInput =
    OrgsOrgsRemoveSamlSsoAuthorizationPath;
  type OrgsOrgsRemoveSamlSsoAuthorizationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsSetMembershipForUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsSetMembershipForUserBodyInput =
    | undefined
    | { role?: undefined | "admin" | "member" };
  type OrgsOrgsSetMembershipForUserResponseApiResponse =
    OrgsOrgsGetMembershipForAuthenticatedUserResponseApiResponse;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUserPathInput =
    OrgsOrgsBlockUserPath;
  type OrgsOrgsSetPublicMembershipForAuthenticatedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsUnblockUserPathInput = OrgsOrgsBlockUserPath;
  type OrgsOrgsUnblockUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type OrgsOrgsUpdatePathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsUpdateBodyInput =
    | undefined
    | {
        billing_email?: undefined | string;
        company?: undefined | string;
        email?: undefined | string;
        twitter_username?: undefined | string;
        location?: undefined | string;
        name?: undefined | string;
        description?: undefined | string;
        has_organization_projects?: undefined | boolean;
        has_repository_projects?: undefined | boolean;
        default_repository_permission?:
          | undefined
          | "read"
          | "write"
          | "admin"
          | "none";
        members_can_create_repositories?: undefined | boolean;
        members_can_create_internal_repositories?: undefined | boolean;
        members_can_create_private_repositories?: undefined | boolean;
        members_can_create_public_repositories?: undefined | boolean;
        members_allowed_repository_creation_type?:
          | undefined
          | "all"
          | "private"
          | "none";
        members_can_create_pages?: undefined | boolean;
        blog?: undefined | string;
      };
  type OrgsOrgsUpdateResponseApiResponse = OrgsOrgsGetResponseApiResponse;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserBodyInput =
    OrgsOrgsUpdateMembershipForAuthenticatedUserBody;
  type OrgsOrgsUpdateMembershipForAuthenticatedUserResponseApiResponse =
    OrgsOrgsGetMembershipForAuthenticatedUserResponseApiResponse;
  type OrgsOrgsUpdateWebhookPathInput = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsUpdateWebhookBodyInput =
    | undefined
    | {
        config?:
          | undefined
          | {
              url: GithubApiWebhookConfigUrlInput;
              content_type?: undefined | GithubApiWebhookConfigContentTypeInput;
              secret?: undefined | GithubApiWebhookConfigSecretInput;
              insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslInput;
            };
        events?: undefined | string[];
        active?: undefined | boolean;
        name?: undefined | string;
      };
  type OrgsOrgsUpdateWebhookResponseApiResponse =
    OrgsOrgsCreateWebhookResponseApiResponse;
  type OrgsOrgsUpdateWebhookConfigForOrgPathInput = OrgsOrgsDeleteWebhookPath;
  type OrgsOrgsUpdateWebhookConfigForOrgBodyInput =
    AppsAppsUpdateWebhookConfigForAppBodyInput;
  type OrgsOrgsUpdateWebhookConfigForOrgResponseApiResponse =
    AppsAppsGetWebhookConfigForAppResponseApiResponse;
  type ProjectsProjectsAddCollaboratorPathInput =
    ProjectsProjectsAddCollaboratorPath;
  type ProjectsProjectsAddCollaboratorBodyInput =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgBody;
  type ProjectsProjectsAddCollaboratorResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsCreateCardPathInput = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsCreateCardBodyInput = ProjectsProjectsCreateCardBody;
  type ProjectsProjectsCreateCardResponseApiResponse =
    GithubApiProjectCardApiResponse;
  type GithubApiProjectCardApiResponse = {
    url: string;
    id: number;
    node_id: string;
    note: string;
    creator: GithubApiSimpleUserApiResponse;
    created_at: string;
    updated_at: string;
    archived?: undefined | boolean;
    column_url: string;
    content_url?: undefined | string;
    project_url: string;
  };
  type ProjectsProjectsCreateColumnPathInput = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsCreateColumnBodyInput = ProjectsProjectsCreateColumnBody;
  type ProjectsProjectsCreateColumnResponseApiResponse =
    GithubApiProjectColumnApiResponse;
  type GithubApiProjectColumnApiResponse = GithubApiProjectColumn;
  type ProjectsProjectsCreateForAuthenticatedUserBodyInput =
    ProjectsProjectsCreateForAuthenticatedUserBody;
  type ProjectsProjectsCreateForAuthenticatedUserResponseApiResponse =
    GithubApiProjectApiResponse;
  type GithubApiProjectApiResponse = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: GithubApiSimpleUserApiResponse;
    created_at: string;
    updated_at: string;
    organization_permission?: undefined | "read" | "write" | "admin" | "none";
    private?: undefined | boolean;
    cards_url?: undefined | string;
    permissions?: undefined | { read: boolean; write: boolean; admin: boolean };
  };
  type ProjectsProjectsCreateForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ProjectsProjectsCreateForOrgBodyInput =
    ProjectsProjectsCreateForAuthenticatedUserBody;
  type ProjectsProjectsCreateForOrgResponseApiResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponseApiResponse;
  type ProjectsProjectsCreateForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ProjectsProjectsCreateForRepoBodyInput =
    ProjectsProjectsCreateForAuthenticatedUserBody;
  type ProjectsProjectsCreateForRepoResponseApiResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponseApiResponse;
  type ProjectsProjectsDeletePathInput = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsDeleteResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsDeleteCardPathInput = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsDeleteCardResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsDeleteColumnPathInput = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsDeleteColumnResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsGetPathInput = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsGetResponseApiResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponseApiResponse;
  type ProjectsProjectsGetCardPathInput = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsGetCardResponseApiResponse =
    ProjectsProjectsCreateCardResponseApiResponse;
  type ProjectsProjectsGetColumnPathInput = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsGetColumnResponseApiResponse =
    ProjectsProjectsCreateColumnResponseApiResponse;
  type ProjectsProjectsGetPermissionForUserPathInput =
    ProjectsProjectsAddCollaboratorPath;
  type ProjectsProjectsGetPermissionForUserResponseApiResponse =
    GithubApiRepositoryCollaboratorPermissionApiResponse;
  type GithubApiRepositoryCollaboratorPermissionApiResponse = {
    permission: string;
    user: GithubApiSimpleUserApiResponse;
  };
  type ProjectsProjectsListCardsPathInput = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsListCardsQueryInput = {
    archived_state?: undefined | "all" | "archived" | "not_archived";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ProjectsProjectsListCardsResponseApiResponse =
    GithubApiProjectCardApiResponse[];
  type ProjectsProjectsListCollaboratorsPathInput =
    ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsListCollaboratorsQueryInput = {
    affiliation?: undefined | "outside" | "direct" | "all";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ProjectsProjectsListCollaboratorsResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type ProjectsProjectsListColumnsPathInput = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsListColumnsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ProjectsProjectsListColumnsResponseApiResponse =
    GithubApiProjectColumnApiResponse[];
  type ProjectsProjectsListForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ProjectsProjectsListForOrgQueryInput = {
    state?: undefined | "open" | "closed" | "all";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ProjectsProjectsListForOrgResponseApiResponse =
    GithubApiProjectApiResponse[];
  type ProjectsProjectsListForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ProjectsProjectsListForRepoQueryInput =
    ProjectsProjectsListForOrgQueryInput;
  type ProjectsProjectsListForRepoResponseApiResponse =
    ProjectsProjectsListForOrgResponseApiResponse;
  type ProjectsProjectsListForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ProjectsProjectsListForUserQueryInput =
    ProjectsProjectsListForOrgQueryInput;
  type ProjectsProjectsListForUserResponseApiResponse =
    ProjectsProjectsListForOrgResponseApiResponse;
  type ProjectsProjectsMoveCardPathInput = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsMoveCardBodyInput = ProjectsProjectsMoveCardBody;
  type ProjectsProjectsMoveCardResponseApiResponse =
    ProjectsProjectsMoveCardResponse;
  type ProjectsProjectsMoveColumnPathInput = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsMoveColumnBodyInput = ProjectsProjectsMoveColumnBody;
  type ProjectsProjectsMoveColumnResponseApiResponse =
    ProjectsProjectsMoveCardResponse;
  type ProjectsProjectsRemoveCollaboratorPathInput =
    ProjectsProjectsAddCollaboratorPath;
  type ProjectsProjectsRemoveCollaboratorResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ProjectsProjectsUpdatePathInput = ProjectsProjectsCreateColumnPath;
  type ProjectsProjectsUpdateBodyInput = ProjectsProjectsUpdateBody;
  type ProjectsProjectsUpdateResponseApiResponse =
    ProjectsProjectsCreateForAuthenticatedUserResponseApiResponse;
  type ProjectsProjectsUpdateCardPathInput = ProjectsProjectsDeleteCardPath;
  type ProjectsProjectsUpdateCardBodyInput = ProjectsProjectsUpdateCardBody;
  type ProjectsProjectsUpdateCardResponseApiResponse =
    ProjectsProjectsCreateCardResponseApiResponse;
  type ProjectsProjectsUpdateColumnPathInput = ProjectsProjectsCreateCardPath;
  type ProjectsProjectsUpdateColumnBodyInput = ProjectsProjectsCreateColumnBody;
  type ProjectsProjectsUpdateColumnResponseApiResponse =
    ProjectsProjectsCreateColumnResponseApiResponse;
  type PullsPullsCheckIfMergedPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsCheckIfMergedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsCreatePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type PullsPullsCreateBodyInput = PullsPullsCreateBody;
  type PullsPullsCreateResponseApiResponse = GithubApiPullRequestApiResponse;
  type GithubApiPullRequestApiResponse = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: GithubApiSimpleUserApiResponse;
    body: string;
    labels: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      name?: undefined | string;
      description?: undefined | string;
      color?: undefined | string;
      default?: undefined | boolean;
    }[];
    milestone: GithubApiMilestoneApiResponse;
    active_lock_reason?: undefined | string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string;
    merge_commit_sha: string;
    assignee: GithubApiSimpleUserApiResponse;
    assignees?: undefined | GithubApiSimpleUserApiResponse[];
    requested_reviewers?: undefined | GithubApiSimpleUserApiResponse[];
    requested_teams?: undefined | GithubApiTeamSimpleApiResponse[];
    head: {
      label: string;
      ref: string;
      repo: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        node_id: string;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        notifications_url: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
        clone_url: string;
        default_branch: string;
        forks: number;
        forks_count: number;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        homepage: string;
        language: string;
        master_branch?: undefined | string;
        archived: boolean;
        disabled: boolean;
        mirror_url: string;
        open_issues: number;
        open_issues_count: number;
        permissions?:
          | undefined
          | { admin: boolean; pull: boolean; push: boolean };
        temp_clone_token?: undefined | string;
        allow_merge_commit?: undefined | boolean;
        allow_squash_merge?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        license: {
          key: string;
          name: string;
          url: string;
          spdx_id: string;
          node_id: string;
        };
        pushed_at: string;
        size: number;
        ssh_url: string;
        stargazers_count: number;
        svn_url: string;
        topics?: undefined | string[];
        watchers: number;
        watchers_count: number;
        created_at: string;
        updated_at: string;
      };
      sha: string;
      user: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
    };
    base: {
      label: string;
      ref: string;
      repo: {
        archive_url: string;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        deployments_url: string;
        description: string;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        hooks_url: string;
        html_url: string;
        id: number;
        node_id: string;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        languages_url: string;
        merges_url: string;
        milestones_url: string;
        name: string;
        notifications_url: string;
        owner: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        private: boolean;
        pulls_url: string;
        releases_url: string;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        tags_url: string;
        teams_url: string;
        trees_url: string;
        url: string;
        clone_url: string;
        default_branch: string;
        forks: number;
        forks_count: number;
        git_url: string;
        has_downloads: boolean;
        has_issues: boolean;
        has_projects: boolean;
        has_wiki: boolean;
        has_pages: boolean;
        homepage: string;
        language: string;
        master_branch?: undefined | string;
        archived: boolean;
        disabled: boolean;
        mirror_url: string;
        open_issues: number;
        open_issues_count: number;
        permissions?:
          | undefined
          | { admin: boolean; pull: boolean; push: boolean };
        temp_clone_token?: undefined | string;
        allow_merge_commit?: undefined | boolean;
        allow_squash_merge?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        license: GithubApiLicenseSimpleApiResponse;
        pushed_at: string;
        size: number;
        ssh_url: string;
        stargazers_count: number;
        svn_url: string;
        topics?: undefined | string[];
        watchers: number;
        watchers_count: number;
        created_at: string;
        updated_at: string;
      };
      sha: string;
      user: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
    };
    _links: {
      comments: GithubApiLinkApiResponse;
      commits: GithubApiLinkApiResponse;
      statuses: GithubApiLinkApiResponse;
      html: GithubApiLinkApiResponse;
      issue: GithubApiLinkApiResponse;
      review_comments: GithubApiLinkApiResponse;
      review_comment: GithubApiLinkApiResponse;
      self: GithubApiLinkApiResponse;
    };
    author_association: string;
    draft?: undefined | boolean;
    merged: boolean;
    mergeable: boolean;
    rebaseable?: undefined | boolean;
    mergeable_state: string;
    merged_by: GithubApiSimpleUserApiResponse;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  type GithubApiLinkApiResponse = GithubApiLink;
  type PullsPullsCreateReplyForReviewCommentPathInput =
    PullsPullsCreateReplyForReviewCommentPath;
  type PullsPullsCreateReplyForReviewCommentBodyInput =
    GistsGistsCreateCommentBody;
  type PullsPullsCreateReplyForReviewCommentResponseApiResponse =
    GithubApiPullRequestReviewCommentApiResponse;
  type GithubApiPullRequestReviewCommentApiResponse = {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: undefined | number;
    user: GithubApiSimpleUserApiResponse;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: string;
    _links: {
      self: { href: string };
      html: { href: string };
      pull_request: { href: string };
    };
    start_line?: undefined | number;
    original_start_line?: undefined | number;
    start_side: "LEFT" | "RIGHT";
    line?: undefined | number;
    original_line?: undefined | number;
    side: "LEFT" | "RIGHT";
    reactions?: undefined | GithubApiReactionRollupApiResponse;
    body_html?: undefined | string;
    body_text?: undefined | string;
  };
  type PullsPullsCreateReviewPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsCreateReviewBodyInput = PullsPullsCreateReviewBody;
  type PullsPullsCreateReviewResponseApiResponse =
    GithubApiPullRequestReviewApiResponse;
  type GithubApiPullRequestReviewApiResponse = {
    id: number;
    node_id: string;
    user: GithubApiSimpleUserApiResponse;
    body: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: { html: { href: string }; pull_request: { href: string } };
    submitted_at?: undefined | string;
    commit_id: string;
    body_html?: undefined | string;
    body_text?: undefined | string;
    author_association: string;
  };
  type PullsPullsCreateReviewCommentPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsCreateReviewCommentBodyInput =
    PullsPullsCreateReviewCommentBody;
  type PullsPullsCreateReviewCommentResponseApiResponse =
    PullsPullsCreateReplyForReviewCommentResponseApiResponse;
  type PullsPullsDeletePendingReviewPathInput =
    PullsPullsDeletePendingReviewPath;
  type PullsPullsDeletePendingReviewResponseApiResponse =
    PullsPullsCreateReviewResponseApiResponse;
  type PullsPullsDeleteReviewCommentPathInput = IssuesIssuesDeleteCommentPath;
  type PullsPullsDeleteReviewCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsDismissReviewPathInput = PullsPullsDeletePendingReviewPath;
  type PullsPullsDismissReviewBodyInput = PullsPullsDismissReviewBody;
  type PullsPullsDismissReviewResponseApiResponse =
    PullsPullsCreateReviewResponseApiResponse;
  type PullsPullsGetPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsGetResponseApiResponse = PullsPullsCreateResponseApiResponse;
  type PullsPullsGetReviewPathInput = PullsPullsDeletePendingReviewPath;
  type PullsPullsGetReviewResponseApiResponse =
    PullsPullsCreateReviewResponseApiResponse;
  type PullsPullsGetReviewCommentPathInput = IssuesIssuesDeleteCommentPath;
  type PullsPullsGetReviewCommentResponseApiResponse =
    PullsPullsCreateReplyForReviewCommentResponseApiResponse;
  type PullsPullsListPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type PullsPullsListQueryInput = {
    state?: undefined | "open" | "closed" | "all";
    head?: undefined | string;
    base?: undefined | string;
    sort?: undefined | "created" | "updated" | "popularity" | "long-running";
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type PullsPullsListResponseApiResponse =
    GithubApiPullRequestSimpleApiResponse[];
  type GithubApiPullRequestSimpleApiResponse = {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: string;
    locked: boolean;
    title: string;
    user: GithubApiSimpleUserApiResponse;
    body: string;
    labels: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      name?: undefined | string;
      description?: undefined | string;
      color?: undefined | string;
      default?: undefined | boolean;
    }[];
    milestone: GithubApiMilestoneApiResponse;
    active_lock_reason?: undefined | string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string;
    merge_commit_sha: string;
    assignee: GithubApiSimpleUserApiResponse;
    assignees?: undefined | GithubApiSimpleUserApiResponse[];
    requested_reviewers?: undefined | GithubApiSimpleUserApiResponse[];
    requested_teams?: undefined | GithubApiTeamSimpleApiResponse[];
    head: {
      label: string;
      ref: string;
      repo: GithubApiRepositoryApiResponse;
      sha: string;
      user: GithubApiSimpleUserApiResponse;
    };
    base: {
      label: string;
      ref: string;
      repo: GithubApiRepositoryApiResponse;
      sha: string;
      user: GithubApiSimpleUserApiResponse;
    };
    _links: {
      comments: GithubApiLinkApiResponse;
      commits: GithubApiLinkApiResponse;
      statuses: GithubApiLinkApiResponse;
      html: GithubApiLinkApiResponse;
      issue: GithubApiLinkApiResponse;
      review_comments: GithubApiLinkApiResponse;
      review_comment: GithubApiLinkApiResponse;
      self: GithubApiLinkApiResponse;
    };
    author_association: string;
    draft?: undefined | boolean;
  };
  type PullsPullsListCommentsForReviewPathInput =
    PullsPullsDeletePendingReviewPath;
  type PullsPullsListCommentsForReviewQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type PullsPullsListCommentsForReviewResponseApiResponse =
    GithubApiReviewCommentApiResponse[];
  type GithubApiReviewCommentApiResponse = {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id?: undefined | number;
    user: GithubApiSimpleUserApiResponse;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association: string;
    _links: {
      self: GithubApiLinkApiResponse;
      html: GithubApiLinkApiResponse;
      pull_request: GithubApiLinkApiResponse;
    };
    body_text?: undefined | string;
    body_html?: undefined | string;
    side: "LEFT" | "RIGHT";
    start_side: "LEFT" | "RIGHT";
    line?: undefined | number;
    original_line?: undefined | number;
    start_line?: undefined | number;
    original_start_line?: undefined | number;
  };
  type PullsPullsListCommitsPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsListCommitsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type PullsPullsListCommitsResponseApiResponse = GithubApiCommitApiResponse[];
  type GithubApiCommitApiResponse = {
    url: string;
    sha: string;
    node_id: string;
    html_url: string;
    comments_url: string;
    commit: {
      url: string;
      author: GithubApiGitUserApiResponse;
      committer: GithubApiGitUserApiResponse;
      message: string;
      comment_count: number;
      tree: { sha: string; url: string };
      verification?: undefined | GithubApiVerificationApiResponse;
    };
    author: GithubApiSimpleUserApiResponse;
    committer: GithubApiSimpleUserApiResponse;
    parents: { sha: string; url: string; html_url?: undefined | string }[];
    stats?:
      | undefined
      | {
          additions?: undefined | number;
          deletions?: undefined | number;
          total?: undefined | number;
        };
    files?:
      | undefined
      | {
          filename?: undefined | string;
          additions?: undefined | number;
          deletions?: undefined | number;
          changes?: undefined | number;
          status?: undefined | string;
          raw_url?: undefined | string;
          blob_url?: undefined | string;
          patch?: undefined | string;
          sha?: undefined | string;
          contents_url?: undefined | string;
          previous_filename?: undefined | string;
        }[];
  };
  type GithubApiGitUserApiResponse = GithubApiGitUser;
  type PullsPullsListFilesPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsListFilesQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type PullsPullsListFilesResponseApiResponse = GithubApiDiffEntryApiResponse[];
  type GithubApiDiffEntryApiResponse = GithubApiDiffEntry;
  type PullsPullsListRequestedReviewersPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsListRequestedReviewersQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type PullsPullsListRequestedReviewersResponseApiResponse =
    GithubApiPullRequestReviewRequestApiResponse;
  type GithubApiPullRequestReviewRequestApiResponse =
    GithubApiPullRequestReviewRequest;
  type PullsPullsListReviewCommentsPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsListReviewCommentsQueryInput =
    IssuesIssuesListCommentsForRepoQueryInput;
  type PullsPullsListReviewCommentsResponseApiResponse =
    GithubApiPullRequestReviewCommentApiResponse[];
  type PullsPullsListReviewCommentsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type PullsPullsListReviewCommentsForRepoQueryInput =
    IssuesIssuesListCommentsForRepoQueryInput;
  type PullsPullsListReviewCommentsForRepoResponseApiResponse =
    PullsPullsListReviewCommentsResponseApiResponse;
  type PullsPullsListReviewsPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsListReviewsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type PullsPullsListReviewsResponseApiResponse =
    GithubApiPullRequestReviewApiResponse[];
  type PullsPullsMergePathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsMergeBodyInput = PullsPullsMergeBody;
  type PullsPullsMergeResponseApiResponse =
    GithubApiPullRequestMergeResultApiResponse;
  type GithubApiPullRequestMergeResultApiResponse =
    GithubApiPullRequestMergeResult;
  type PullsPullsRemoveRequestedReviewersPathInput =
    PullsPullsCheckIfMergedPath;
  type PullsPullsRemoveRequestedReviewersBodyInput =
    PullsPullsRemoveRequestedReviewersBody;
  type PullsPullsRemoveRequestedReviewersResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsRequestReviewersPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsRequestReviewersBodyInput =
    PullsPullsRemoveRequestedReviewersBody;
  type PullsPullsRequestReviewersResponseApiResponse =
    GithubApiPullRequestSimpleApiResponse;
  type PullsPullsSubmitReviewPathInput = PullsPullsDeletePendingReviewPath;
  type PullsPullsSubmitReviewBodyInput = PullsPullsSubmitReviewBody;
  type PullsPullsSubmitReviewResponseApiResponse =
    PullsPullsCreateReviewResponseApiResponse;
  type PullsPullsUpdatePathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsUpdateBodyInput = PullsPullsUpdateBody;
  type PullsPullsUpdateResponseApiResponse =
    PullsPullsCreateResponseApiResponse;
  type PullsPullsUpdateBranchPathInput = PullsPullsCheckIfMergedPath;
  type PullsPullsUpdateBranchBodyInput = PullsPullsUpdateBranchBody;
  type PullsPullsUpdateBranchResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type PullsPullsUpdateReviewPathInput = PullsPullsDeletePendingReviewPath;
  type PullsPullsUpdateReviewBodyInput = GistsGistsCreateCommentBody;
  type PullsPullsUpdateReviewResponseApiResponse =
    PullsPullsCreateReviewResponseApiResponse;
  type PullsPullsUpdateReviewCommentPathInput = IssuesIssuesDeleteCommentPath;
  type PullsPullsUpdateReviewCommentBodyInput = GistsGistsCreateCommentBody;
  type PullsPullsUpdateReviewCommentResponseApiResponse =
    PullsPullsCreateReplyForReviewCommentResponseApiResponse;
  type RateLimitRateLimitGetResponseApiResponse =
    GithubApiRateLimitOverviewApiResponse;
  type GithubApiRateLimitOverviewApiResponse = {
    resources: {
      core: GithubApiRateLimitApiResponse;
      graphql?: undefined | GithubApiRateLimitApiResponse;
      search: GithubApiRateLimitApiResponse;
      source_import?: undefined | GithubApiRateLimitApiResponse;
      integration_manifest?: undefined | GithubApiRateLimitApiResponse;
      code_scanning_upload?: undefined | GithubApiRateLimitApiResponse;
    };
    rate: GithubApiRateLimitApiResponse;
  };
  type GithubApiRateLimitApiResponse = GithubApiRateLimit;
  type ReactionsReactionsCreateForCommitCommentPathInput =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsCreateForCommitCommentBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForCommitCommentResponseApiResponse =
    GithubApiReactionApiResponse;
  type GithubApiReactionApiResponse = {
    id: number;
    node_id: string;
    user: GithubApiSimpleUserApiResponse;
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    created_at: string;
  };
  type ReactionsReactionsCreateForIssuePathInput = IssuesIssuesAddAssigneesPath;
  type ReactionsReactionsCreateForIssueBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForIssueResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsCreateForIssueCommentPathInput =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsCreateForIssueCommentBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForIssueCommentResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsCreateForPullRequestReviewCommentPathInput =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsCreateForPullRequestReviewCommentBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForPullRequestReviewCommentResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionCommentInOrgResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionCommentLegacyResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsCreateForTeamDiscussionInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type ReactionsReactionsCreateForTeamDiscussionInOrgBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionInOrgResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsCreateForTeamDiscussionLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type ReactionsReactionsCreateForTeamDiscussionLegacyBodyInput =
    ReactionsReactionsCreateForCommitCommentBody;
  type ReactionsReactionsCreateForTeamDiscussionLegacyResponseApiResponse =
    ReactionsReactionsCreateForCommitCommentResponseApiResponse;
  type ReactionsReactionsDeleteForCommitCommentPathInput =
    ReactionsReactionsDeleteForCommitCommentPath;
  type ReactionsReactionsDeleteForCommitCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForIssuePathInput =
    ReactionsReactionsDeleteForIssuePath;
  type ReactionsReactionsDeleteForIssueResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForIssueCommentPathInput =
    ReactionsReactionsDeleteForCommitCommentPath;
  type ReactionsReactionsDeleteForIssueCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForPullRequestCommentPathInput =
    ReactionsReactionsDeleteForCommitCommentPath;
  type ReactionsReactionsDeleteForPullRequestCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForTeamDiscussionPathInput =
    ReactionsReactionsDeleteForTeamDiscussionPath;
  type ReactionsReactionsDeleteForTeamDiscussionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteForTeamDiscussionCommentPathInput =
    ReactionsReactionsDeleteForTeamDiscussionCommentPath;
  type ReactionsReactionsDeleteForTeamDiscussionCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsDeleteLegacyPathInput =
    ReactionsReactionsDeleteLegacyPath;
  type ReactionsReactionsDeleteLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReactionsReactionsListForCommitCommentPathInput =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsListForCommitCommentQueryInput = {
    content?:
      | undefined
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReactionsReactionsListForCommitCommentResponseApiResponse =
    GithubApiReactionApiResponse[];
  type ReactionsReactionsListForIssuePathInput = IssuesIssuesAddAssigneesPath;
  type ReactionsReactionsListForIssueQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForIssueResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReactionsReactionsListForIssueCommentPathInput =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsListForIssueCommentQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForIssueCommentResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReactionsReactionsListForPullRequestReviewCommentPathInput =
    IssuesIssuesDeleteCommentPath;
  type ReactionsReactionsListForPullRequestReviewCommentQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForPullRequestReviewCommentResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForTeamDiscussionCommentInOrgResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForTeamDiscussionCommentLegacyResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReactionsReactionsListForTeamDiscussionInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type ReactionsReactionsListForTeamDiscussionInOrgQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForTeamDiscussionInOrgResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReactionsReactionsListForTeamDiscussionLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type ReactionsReactionsListForTeamDiscussionLegacyQueryInput =
    ReactionsReactionsListForCommitCommentQueryInput;
  type ReactionsReactionsListForTeamDiscussionLegacyResponseApiResponse =
    ReactionsReactionsListForCommitCommentResponseApiResponse;
  type ReposReposAcceptInvitationPathInput = ReposReposAcceptInvitationPath;
  type ReposReposAcceptInvitationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposAddAppAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddAppAccessRestrictionsBodyInput =
    ReposReposAddAppAccessRestrictionsBody;
  type ReposReposAddAppAccessRestrictionsResponseApiResponse =
    GithubApiIntegrationApiResponse[];
  type ReposReposAddCollaboratorPathInput = ReposReposAddCollaboratorPath;
  type ReposReposAddCollaboratorBodyInput =
    | undefined
    | {
        permission?:
          | undefined
          | "pull"
          | "push"
          | "admin"
          | "maintain"
          | "triage";
        permissions?: undefined | string;
      };
  type ReposReposAddCollaboratorResponseApiResponse =
    GithubApiRepositoryInvitationApiResponse;
  type GithubApiRepositoryInvitationApiResponse = {
    id: number;
    repository: GithubApiMinimalRepositoryApiResponse;
    invitee: GithubApiSimpleUserApiResponse;
    inviter: GithubApiSimpleUserApiResponse;
    permissions: "read" | "write" | "admin";
    created_at: string;
    url: string;
    html_url: string;
    node_id: string;
  };
  type ReposReposAddStatusCheckContextsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddStatusCheckContextsBodyInput =
    ReposReposAddStatusCheckContextsBody;
  type ReposReposAddStatusCheckContextsResponseApiResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposAddTeamAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddTeamAccessRestrictionsBodyInput =
    ReposReposAddTeamAccessRestrictionsBody;
  type ReposReposAddTeamAccessRestrictionsResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type ReposReposAddUserAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposAddUserAccessRestrictionsBodyInput =
    ReposReposAddUserAccessRestrictionsBody;
  type ReposReposAddUserAccessRestrictionsResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type ReposReposCheckCollaboratorPathInput = ReposReposAddCollaboratorPath;
  type ReposReposCheckCollaboratorResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCheckVulnerabilityAlertsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCheckVulnerabilityAlertsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCompareCommitsPathInput = ReposReposCompareCommitsPath;
  type ReposReposCompareCommitsResponseApiResponse =
    GithubApiCommitComparisonApiResponse;
  type GithubApiCommitComparisonApiResponse = {
    url: string;
    html_url: string;
    permalink_url: string;
    diff_url: string;
    patch_url: string;
    base_commit: GithubApiCommitApiResponse;
    merge_base_commit: GithubApiCommitApiResponse;
    status: "diverged" | "ahead" | "behind" | "identical";
    ahead_by: number;
    behind_by: number;
    total_commits: number;
    commits: GithubApiCommitApiResponse[];
    files: GithubApiDiffEntryApiResponse[];
  };
  type ReposReposCreateCommitCommentPathInput = GitGitGetCommitPath;
  type ReposReposCreateCommitCommentBodyInput =
    ReposReposCreateCommitCommentBody;
  type ReposReposCreateCommitCommentResponseApiResponse =
    GithubApiCommitCommentApiResponse;
  type GithubApiCommitCommentApiResponse = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: GithubApiSimpleUserApiResponse;
    created_at: string;
    updated_at: string;
    author_association: string;
    reactions?: undefined | GithubApiReactionRollupApiResponse;
  };
  type ReposReposCreateCommitSignatureProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposCreateCommitSignatureProtectionResponseApiResponse =
    GithubApiProtectedBranchAdminEnforcedApiResponse;
  type GithubApiProtectedBranchAdminEnforcedApiResponse =
    GithubApiProtectedBranchAdminEnforced;
  type ReposReposCreateCommitStatusPathInput = ReposReposCreateCommitStatusPath;
  type ReposReposCreateCommitStatusBodyInput =
    | undefined
    | {
        state: "error" | "failure" | "pending" | "success";
        target_url?: undefined | string;
        description?: undefined | string;
        context?: undefined | string;
      };
  type ReposReposCreateCommitStatusResponseApiResponse =
    GithubApiStatusApiResponse;
  type GithubApiStatusApiResponse = {
    url?: undefined | string;
    avatar_url?: undefined | string;
    id?: undefined | number;
    node_id?: undefined | string;
    state?: undefined | string;
    description?: undefined | string;
    target_url?: undefined | string;
    context?: undefined | string;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    creator?: undefined | GithubApiSimpleUserApiResponse;
  };
  type ReposReposCreateDeployKeyPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateDeployKeyBodyInput = ReposReposCreateDeployKeyBody;
  type ReposReposCreateDeployKeyResponseApiResponse =
    GithubApiDeployKeyApiResponse;
  type GithubApiDeployKeyApiResponse = GithubApiDeployKey;
  type ReposReposCreateDeploymentPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateDeploymentBodyInput =
    | undefined
    | {
        ref: string;
        task?: undefined | string;
        auto_merge?: undefined | boolean;
        required_contexts?: undefined | string[];
        payload?: undefined | string;
        environment?: undefined | string;
        description?: undefined | string;
        transient_environment?: undefined | boolean;
        production_environment?: undefined | boolean;
        created_at?: undefined | string;
      };
  type ReposReposCreateDeploymentResponseApiResponse =
    GithubApiDeploymentApiResponse;
  type GithubApiDeploymentApiResponse = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: {};
    original_environment?: undefined | string;
    environment: string;
    description: string;
    creator: GithubApiSimpleUserApiResponse;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    transient_environment?: undefined | boolean;
    production_environment?: undefined | boolean;
    performed_via_github_app?: undefined | GithubApiIntegrationApiResponse;
  };
  type ReposReposCreateDeploymentStatusPathInput =
    ReposReposCreateDeploymentStatusPath;
  type ReposReposCreateDeploymentStatusBodyInput =
    | undefined
    | {
        state:
          | "error"
          | "failure"
          | "inactive"
          | "in_progress"
          | "queued"
          | "pending"
          | "success";
        target_url?: undefined | string;
        log_url?: undefined | string;
        description?: undefined | string;
        environment?: undefined | "production" | "staging" | "qa";
        environment_url?: undefined | string;
        auto_inactive?: undefined | boolean;
      };
  type ReposReposCreateDeploymentStatusResponseApiResponse =
    GithubApiDeploymentStatusApiResponse;
  type GithubApiDeploymentStatusApiResponse = {
    url: string;
    id: number;
    node_id: string;
    state:
      | "error"
      | "failure"
      | "inactive"
      | "pending"
      | "success"
      | "queued"
      | "in_progress";
    creator: GithubApiSimpleUserApiResponse;
    description: string;
    environment: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
    environment_url: string;
    log_url: string;
    performed_via_github_app?: undefined | GithubApiIntegrationApiResponse;
  };
  type ReposReposCreateDispatchEventPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateDispatchEventBodyInput =
    ReposReposCreateDispatchEventBody;
  type ReposReposCreateDispatchEventResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCreateForAuthenticatedUserBodyInput =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        homepage?: undefined | string;
        private?: undefined | boolean;
        has_issues?: undefined | boolean;
        has_projects?: undefined | boolean;
        has_wiki?: undefined | boolean;
        team_id?: undefined | number;
        auto_init?: undefined | boolean;
        gitignore_template?: undefined | string;
        license_template?: undefined | string;
        allow_squash_merge?: undefined | boolean;
        allow_merge_commit?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        delete_branch_on_merge?: undefined | boolean;
        has_downloads?: undefined | boolean;
        is_template?: undefined | boolean;
      };
  type ReposReposCreateForAuthenticatedUserResponseApiResponse =
    GithubApiRepositoryApiResponse;
  type ReposReposCreateForkPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateForkBodyInput = ReposReposCreateForkBody;
  type ReposReposCreateForkResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposCreateInOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ReposReposCreateInOrgBodyInput =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        homepage?: undefined | string;
        private?: undefined | boolean;
        visibility?:
          | undefined
          | "public"
          | "private"
          | "visibility"
          | "internal";
        has_issues?: undefined | boolean;
        has_projects?: undefined | boolean;
        has_wiki?: undefined | boolean;
        is_template?: undefined | boolean;
        team_id?: undefined | number;
        auto_init?: undefined | boolean;
        gitignore_template?: undefined | string;
        license_template?: undefined | string;
        allow_squash_merge?: undefined | boolean;
        allow_merge_commit?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        delete_branch_on_merge?: undefined | boolean;
      };
  type ReposReposCreateInOrgResponseApiResponse =
    ReposReposCreateForAuthenticatedUserResponseApiResponse;
  type ReposReposCreateOrUpdateFileContentsPathInput =
    ReposReposCreateOrUpdateFileContentsPath;
  type ReposReposCreateOrUpdateFileContentsBodyInput =
    ReposReposCreateOrUpdateFileContentsBody;
  type ReposReposCreateOrUpdateFileContentsResponseApiResponse =
    GithubApiFileCommitApiResponse;
  type GithubApiFileCommitApiResponse = GithubApiFileCommit;
  type ReposReposCreatePagesSitePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreatePagesSiteBodyInput =
    | undefined
    | { source: { branch: string; path?: undefined | "/" | "/docs" } };
  type ReposReposCreatePagesSiteResponseApiResponse = GithubApiPageApiResponse;
  type GithubApiPageApiResponse = {
    url: string;
    status: "built" | "building" | "errored";
    cname: string;
    custom_404: boolean;
    html_url?: undefined | string;
    source?: undefined | GithubApiPagesSourceHashApiResponse;
  };
  type GithubApiPagesSourceHashApiResponse = GithubApiPagesSourceHash;
  type ReposReposCreateReleasePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateReleaseBodyInput =
    | undefined
    | {
        tag_name: string;
        target_commitish?: undefined | string;
        name?: undefined | string;
        body?: undefined | string;
        draft?: undefined | boolean;
        prerelease?: undefined | boolean;
      };
  type ReposReposCreateReleaseResponseApiResponse = GithubApiReleaseApiResponse;
  type GithubApiReleaseApiResponse = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body?: undefined | string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GithubApiSimpleUserApiResponse;
    assets: GithubApiReleaseAssetApiResponse[];
    body_html?: undefined | string;
    body_text?: undefined | string;
  };
  type GithubApiReleaseAssetApiResponse = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: "uploaded" | "open";
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GithubApiSimpleUserApiResponse;
  };
  type ReposReposCreateUsingTemplatePathInput =
    ReposReposCreateUsingTemplatePath;
  type ReposReposCreateUsingTemplateBodyInput =
    | undefined
    | {
        owner?: undefined | string;
        name: string;
        description?: undefined | string;
        include_all_branches?: undefined | boolean;
        private?: undefined | boolean;
      };
  type ReposReposCreateUsingTemplateResponseApiResponse =
    ReposReposCreateForAuthenticatedUserResponseApiResponse;
  type ReposReposCreateWebhookPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposCreateWebhookBodyInput =
    | undefined
    | {
        name?: undefined | string;
        config: {
          url: GithubApiWebhookConfigUrlInput;
          content_type?: undefined | GithubApiWebhookConfigContentTypeInput;
          secret?: undefined | GithubApiWebhookConfigSecretInput;
          insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslInput;
          token?: undefined | string;
          digest?: undefined | string;
        };
        events?: undefined | string[];
        active?: undefined | boolean;
      };
  type ReposReposCreateWebhookResponseApiResponse = GithubApiHookApiResponse;
  type GithubApiHookApiResponse = {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: string[];
    config: {
      email?: undefined | string;
      password?: undefined | string;
      room?: undefined | string;
      subdomain?: undefined | string;
      url?: undefined | GithubApiWebhookConfigUrlApiResponse;
      insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslApiResponse;
      content_type?: undefined | GithubApiWebhookConfigContentTypeApiResponse;
      digest?: undefined | string;
      secret?: undefined | GithubApiWebhookConfigSecretApiResponse;
      token?: undefined | string;
    };
    updated_at: string;
    created_at: string;
    url: string;
    test_url: string;
    ping_url: string;
    last_response: GithubApiHookResponseApiResponse;
  };
  type GithubApiHookResponseApiResponse = GithubApiHookResponse;
  type ReposReposDeclineInvitationPathInput = ReposReposAcceptInvitationPath;
  type ReposReposDeclineInvitationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeletePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDeleteResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteAccessRestrictionsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteAdminBranchProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteAdminBranchProtectionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteBranchProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteBranchProtectionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteCommitCommentPathInput = IssuesIssuesDeleteCommentPath;
  type ReposReposDeleteCommitCommentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteCommitSignatureProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeleteCommitSignatureProtectionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteDeployKeyPathInput = ReposReposDeleteDeployKeyPath;
  type ReposReposDeleteDeployKeyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteDeploymentPathInput =
    ReposReposCreateDeploymentStatusPath;
  type ReposReposDeleteDeploymentResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteFilePathInput = ReposReposCreateOrUpdateFileContentsPath;
  type ReposReposDeleteFileBodyInput = ReposReposDeleteFileBody;
  type ReposReposDeleteFileResponseApiResponse =
    ReposReposCreateOrUpdateFileContentsResponseApiResponse;
  type ReposReposDeleteInvitationPathInput = ReposReposDeleteInvitationPath;
  type ReposReposDeleteInvitationResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeletePagesSitePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDeletePagesSiteResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeletePullRequestReviewProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposDeletePullRequestReviewProtectionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteReleasePathInput = ReposReposDeleteReleasePath;
  type ReposReposDeleteReleaseResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteReleaseAssetPathInput = ReposReposDeleteReleaseAssetPath;
  type ReposReposDeleteReleaseAssetResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDeleteWebhookPathInput = ReposReposDeleteWebhookPath;
  type ReposReposDeleteWebhookResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDisableAutomatedSecurityFixesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDisableAutomatedSecurityFixesResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDisableVulnerabilityAlertsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposDisableVulnerabilityAlertsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDownloadTarballArchivePathInput = ChecksChecksListForRefPath;
  type ReposReposDownloadTarballArchiveResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposDownloadZipballArchivePathInput = ChecksChecksListForRefPath;
  type ReposReposDownloadZipballArchiveResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposEnableAutomatedSecurityFixesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposEnableAutomatedSecurityFixesResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposEnableVulnerabilityAlertsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposEnableVulnerabilityAlertsResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposGetPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetResponseApiResponse = GithubApiFullRepositoryApiResponse;
  type GithubApiFullRepositoryApiResponse = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GithubApiSimpleUserApiResponse;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: string;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    is_template?: undefined | boolean;
    topics?: undefined | string[];
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    visibility?: undefined | string;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions?: undefined | { admin: boolean; pull: boolean; push: boolean };
    allow_rebase_merge?: undefined | boolean;
    template_repository?: undefined | { [key: string]: any };
    temp_clone_token?: undefined | string;
    allow_squash_merge?: undefined | boolean;
    delete_branch_on_merge?: undefined | boolean;
    allow_merge_commit?: undefined | boolean;
    subscribers_count: number;
    network_count: number;
    license: GithubApiLicenseSimpleApiResponse;
    organization?: undefined | GithubApiSimpleUserApiResponse;
    parent?: undefined | GithubApiRepositoryApiResponse;
    source?: undefined | GithubApiRepositoryApiResponse;
    forks: number;
    master_branch?: undefined | string;
    open_issues: number;
    watchers: number;
    anonymous_access_enabled: boolean;
  };
  type ReposReposGetAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAccessRestrictionsResponseApiResponse =
    GithubApiBranchRestrictionPolicyApiResponse;
  type GithubApiBranchRestrictionPolicyApiResponse =
    GithubApiBranchRestrictionPolicy;
  type ReposReposGetAdminBranchProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAdminBranchProtectionResponseApiResponse =
    ReposReposCreateCommitSignatureProtectionResponseApiResponse;
  type ReposReposGetAllStatusCheckContextsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAllStatusCheckContextsResponseApiResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposGetAllTopicsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetAllTopicsResponseApiResponse = GithubApiTopicApiResponse;
  type GithubApiTopicApiResponse = GithubApiTopic;
  type ReposReposGetAppsWithAccessToProtectedBranchPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetAppsWithAccessToProtectedBranchResponseApiResponse =
    ReposReposAddAppAccessRestrictionsResponseApiResponse;
  type ReposReposGetBranchPathInput = ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetBranchResponseApiResponse =
    GithubApiBranchWithProtectionApiResponse;
  type GithubApiBranchWithProtectionApiResponse = {
    name: string;
    commit: GithubApiCommitApiResponse;
    _links: { html: string; self: string };
    protected: boolean;
    protection: GithubApiBranchProtectionApiResponse;
    protection_url: string;
    pattern?: undefined | string;
    required_approving_review_count?: undefined | number;
  };
  type GithubApiBranchProtectionApiResponse = {
    url?: undefined | string;
    required_status_checks: {
      url?: undefined | string;
      enforcement_level: string;
      contexts: string[];
      contexts_url?: undefined | string;
    };
    enforce_admins?:
      | undefined
      | GithubApiProtectedBranchAdminEnforcedApiResponse;
    required_pull_request_reviews?:
      | undefined
      | GithubApiProtectedBranchPullRequestReviewApiResponse;
    restrictions?: undefined | GithubApiBranchRestrictionPolicyApiResponse;
    required_linear_history?: undefined | { enabled?: undefined | boolean };
    allow_force_pushes?: undefined | { enabled?: undefined | boolean };
    allow_deletions?: undefined | { enabled?: undefined | boolean };
    enabled: boolean;
    name?: undefined | string;
    protection_url?: undefined | string;
  };
  type GithubApiProtectedBranchPullRequestReviewApiResponse = {
    url?: undefined | string;
    dismissal_restrictions?:
      | undefined
      | {
          users?: undefined | GithubApiSimpleUserApiResponse[];
          teams?: undefined | GithubApiTeamApiResponse[];
          url?: undefined | string;
          users_url?: undefined | string;
          teams_url?: undefined | string;
        };
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count?: undefined | number;
  };
  type ReposReposGetBranchProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetBranchProtectionResponseApiResponse =
    GithubApiBranchProtectionApiResponse;
  type ReposReposGetClonesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetClonesQueryInput = { per?: undefined | "day" | "week" };
  type ReposReposGetClonesResponseApiResponse =
    GithubApiCloneTrafficApiResponse;
  type GithubApiCloneTrafficApiResponse = {
    count: number;
    uniques: number;
    clones: GithubApiTrafficApiResponse[];
  };
  type GithubApiTrafficApiResponse = GithubApiTraffic;
  type ReposReposGetCodeFrequencyStatsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetCodeFrequencyStatsResponseApiResponse =
    GithubApiCodeFrequencyStatApiResponse[];
  type GithubApiCodeFrequencyStatApiResponse = GithubApiCodeFrequencyStat;
  type ReposReposGetCollaboratorPermissionLevelPathInput =
    ReposReposAddCollaboratorPath;
  type ReposReposGetCollaboratorPermissionLevelResponseApiResponse =
    ProjectsProjectsGetPermissionForUserResponseApiResponse;
  type ReposReposGetCombinedStatusForRefPathInput = ChecksChecksListForRefPath;
  type ReposReposGetCombinedStatusForRefResponseApiResponse =
    GithubApiCombinedCommitStatusApiResponse;
  type GithubApiCombinedCommitStatusApiResponse = {
    state: string;
    statuses: GithubApiSimpleCommitStatusApiResponse[];
    sha: string;
    total_count: number;
    repository: GithubApiMinimalRepositoryApiResponse;
    commit_url: string;
    url: string;
  };
  type GithubApiSimpleCommitStatusApiResponse = GithubApiSimpleCommitStatus;
  type ReposReposGetCommitPathInput = ChecksChecksListForRefPath;
  type ReposReposGetCommitResponseApiResponse = GithubApiCommitApiResponse;
  type ReposReposGetCommitActivityStatsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetCommitActivityStatsResponseApiResponse =
    GithubApiCommitActivityApiResponse[];
  type GithubApiCommitActivityApiResponse = GithubApiCommitActivity;
  type ReposReposGetCommitCommentPathInput = IssuesIssuesDeleteCommentPath;
  type ReposReposGetCommitCommentResponseApiResponse =
    ReposReposCreateCommitCommentResponseApiResponse;
  type ReposReposGetCommitSignatureProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetCommitSignatureProtectionResponseApiResponse =
    ReposReposCreateCommitSignatureProtectionResponseApiResponse;
  type ReposReposGetCommunityProfileMetricsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetCommunityProfileMetricsResponseApiResponse =
    GithubApiCommunityProfileApiResponse;
  type GithubApiCommunityProfileApiResponse = {
    health_percentage: number;
    description: string;
    documentation: string;
    files: {
      code_of_conduct: GithubApiCodeOfConductSimpleApiResponse;
      license: GithubApiLicenseSimpleApiResponse;
      contributing: GithubApiCommunityHealthFileApiResponse;
      readme: GithubApiCommunityHealthFileApiResponse;
      issue_template: GithubApiCommunityHealthFileApiResponse;
      pull_request_template: GithubApiCommunityHealthFileApiResponse;
    };
    updated_at: string;
    content_reports_enabled?: undefined | boolean;
  };
  type GithubApiCodeOfConductSimpleApiResponse = GithubApiCodeOfConductSimple;
  type GithubApiCommunityHealthFileApiResponse = GithubApiCommunityHealthFile;
  type ReposReposGetContentPathInput = ReposReposCreateOrUpdateFileContentsPath;
  type ReposReposGetContentQueryInput = ReposReposGetContentQuery;
  type ReposReposGetContentResponseApiResponse =
    | GithubApiContentDirectoryApiResponse
    | GithubApiContentFileApiResponse
    | GithubApiContentSymlinkApiResponse
    | GithubApiContentSubmoduleApiResponse;
  type GithubApiContentDirectoryApiResponse = GithubApiContentDirectory;
  type GithubApiContentFileApiResponse = GithubApiContentFile;
  type GithubApiContentSymlinkApiResponse = GithubApiContentSymlink;
  type GithubApiContentSubmoduleApiResponse = GithubApiContentSubmodule;
  type ReposReposGetContributorsStatsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetContributorsStatsResponseApiResponse =
    GithubApiContributorActivityApiResponse[];
  type GithubApiContributorActivityApiResponse = {
    author: GithubApiSimpleUserApiResponse;
    total: number;
    weeks: {
      w?: undefined | string;
      a?: undefined | number;
      d?: undefined | number;
      c?: undefined | number;
    }[];
  };
  type ReposReposGetDeployKeyPathInput = ReposReposDeleteDeployKeyPath;
  type ReposReposGetDeployKeyResponseApiResponse =
    ReposReposCreateDeployKeyResponseApiResponse;
  type ReposReposGetDeploymentPathInput = ReposReposCreateDeploymentStatusPath;
  type ReposReposGetDeploymentResponseApiResponse =
    ReposReposCreateDeploymentResponseApiResponse;
  type ReposReposGetDeploymentStatusPathInput =
    ReposReposGetDeploymentStatusPath;
  type ReposReposGetDeploymentStatusResponseApiResponse =
    ReposReposCreateDeploymentStatusResponseApiResponse;
  type ReposReposGetLatestPagesBuildPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetLatestPagesBuildResponseApiResponse =
    GithubApiPageBuildApiResponse;
  type GithubApiPageBuildApiResponse = {
    url: string;
    status: string;
    error: { message: string };
    pusher: GithubApiSimpleUserApiResponse;
    commit: string;
    duration: number;
    created_at: string;
    updated_at: string;
  };
  type ReposReposGetLatestReleasePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetLatestReleaseResponseApiResponse =
    ReposReposCreateReleaseResponseApiResponse;
  type ReposReposGetPagesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetPagesResponseApiResponse =
    ReposReposCreatePagesSiteResponseApiResponse;
  type ReposReposGetPagesBuildPathInput = ReposReposGetPagesBuildPath;
  type ReposReposGetPagesBuildResponseApiResponse =
    ReposReposGetLatestPagesBuildResponseApiResponse;
  type ReposReposGetParticipationStatsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetParticipationStatsResponseApiResponse =
    GithubApiParticipationStatsApiResponse;
  type GithubApiParticipationStatsApiResponse = GithubApiParticipationStats;
  type ReposReposGetPullRequestReviewProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetPullRequestReviewProtectionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposGetPunchCardStatsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetPunchCardStatsResponseApiResponse =
    ReposReposGetCodeFrequencyStatsResponseApiResponse;
  type ReposReposGetReadmePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetReadmeQueryInput = ReposReposGetContentQuery;
  type ReposReposGetReadmeResponseApiResponse = GithubApiContentFileApiResponse;
  type ReposReposGetReleasePathInput = ReposReposDeleteReleasePath;
  type ReposReposGetReleaseResponseApiResponse =
    ReposReposCreateReleaseResponseApiResponse;
  type ReposReposGetReleaseAssetPathInput = ReposReposDeleteReleaseAssetPath;
  type ReposReposGetReleaseAssetResponseApiResponse =
    GithubApiReleaseAssetApiResponse;
  type ReposReposGetReleaseByTagPathInput = ReposReposGetReleaseByTagPath;
  type ReposReposGetReleaseByTagResponseApiResponse =
    ReposReposCreateReleaseResponseApiResponse;
  type ReposReposGetStatusChecksProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetStatusChecksProtectionResponseApiResponse =
    GithubApiStatusCheckPolicyApiResponse;
  type GithubApiStatusCheckPolicyApiResponse = GithubApiStatusCheckPolicy;
  type ReposReposGetTeamsWithAccessToProtectedBranchPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetTeamsWithAccessToProtectedBranchResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type ReposReposGetTopPathsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetTopPathsResponseApiResponse =
    GithubApiContentTrafficApiResponse[];
  type GithubApiContentTrafficApiResponse = GithubApiContentTraffic;
  type ReposReposGetTopReferrersPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetTopReferrersResponseApiResponse =
    GithubApiReferrerTrafficApiResponse[];
  type GithubApiReferrerTrafficApiResponse = GithubApiReferrerTraffic;
  type ReposReposGetUsersWithAccessToProtectedBranchPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposGetUsersWithAccessToProtectedBranchResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type ReposReposGetViewsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposGetViewsQueryInput = ReposReposGetClonesQueryInput;
  type ReposReposGetViewsResponseApiResponse = GithubApiViewTrafficApiResponse;
  type GithubApiViewTrafficApiResponse = {
    count: number;
    uniques: number;
    views: GithubApiTrafficApiResponse[];
  };
  type ReposReposGetWebhookPathInput = ReposReposDeleteWebhookPath;
  type ReposReposGetWebhookResponseApiResponse =
    ReposReposCreateWebhookResponseApiResponse;
  type ReposReposGetWebhookConfigForRepoPathInput = ReposReposDeleteWebhookPath;
  type ReposReposGetWebhookConfigForRepoResponseApiResponse =
    AppsAppsGetWebhookConfigForAppResponseApiResponse;
  type ReposReposListBranchesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListBranchesQueryInput = {
    protected?: undefined | boolean;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListBranchesResponseApiResponse =
    GithubApiShortBranchApiResponse[];
  type GithubApiShortBranchApiResponse = {
    name: string;
    commit: { sha: string; url: string };
    protected: boolean;
    protection?: undefined | GithubApiBranchProtectionApiResponse;
    protection_url?: undefined | string;
  };
  type ReposReposListBranchesForHeadCommitPathInput = GitGitGetCommitPath;
  type ReposReposListBranchesForHeadCommitResponseApiResponse =
    GithubApiBranchShortApiResponse[];
  type GithubApiBranchShortApiResponse = GithubApiBranchShort;
  type ReposReposListCollaboratorsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListCollaboratorsQueryInput =
    ProjectsProjectsListCollaboratorsQueryInput;
  type ReposReposListCollaboratorsResponseApiResponse =
    GithubApiCollaboratorApiResponse[];
  type GithubApiCollaboratorApiResponse = GithubApiCollaborator;
  type ReposReposListCommentsForCommitPathInput = GitGitGetCommitPath;
  type ReposReposListCommentsForCommitQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListCommentsForCommitResponseApiResponse =
    GithubApiCommitCommentApiResponse[];
  type ReposReposListCommitCommentsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListCommitCommentsForRepoQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListCommitCommentsForRepoResponseApiResponse =
    ReposReposListCommentsForCommitResponseApiResponse;
  type ReposReposListCommitStatusesForRefPathInput = ChecksChecksListForRefPath;
  type ReposReposListCommitStatusesForRefQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListCommitStatusesForRefResponseApiResponse =
    GithubApiStatusApiResponse[];
  type ReposReposListCommitsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListCommitsQueryInput = {
    sha?: undefined | string;
    path?: undefined | string;
    author?: undefined | string;
    since?: undefined | string;
    until?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListCommitsResponseApiResponse =
    PullsPullsListCommitsResponseApiResponse;
  type ReposReposListContributorsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListContributorsQueryInput = {
    anon?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListContributorsResponseApiResponse =
    GithubApiContributorApiResponse[];
  type GithubApiContributorApiResponse = GithubApiContributor;
  type ReposReposListDeployKeysPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListDeployKeysQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListDeployKeysResponseApiResponse =
    GithubApiDeployKeyApiResponse[];
  type ReposReposListDeploymentStatusesPathInput =
    ReposReposCreateDeploymentStatusPath;
  type ReposReposListDeploymentStatusesQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListDeploymentStatusesResponseApiResponse =
    GithubApiDeploymentStatusApiResponse[];
  type ReposReposListDeploymentsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListDeploymentsQueryInput = {
    sha?: undefined | string;
    ref?: undefined | string;
    task?: undefined | string;
    environment?: undefined | string;
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListDeploymentsResponseApiResponse =
    GithubApiDeploymentApiResponse[];
  type ReposReposListForAuthenticatedUserQueryInput = {
    visibility?: undefined | "all" | "public" | "private";
    affiliation?: undefined | string;
    type?: undefined | "all" | "owner" | "public" | "private" | "member";
    sort?: undefined | "created" | "updated" | "pushed" | "full_name";
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
    since?: undefined | string;
    before?: undefined | string;
  };
  type ReposReposListForAuthenticatedUserResponseApiResponse =
    ActivityActivityListReposStarredByAuthenticatedUserResponseApiResponse;
  type ReposReposListForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ReposReposListForOrgQueryInput = {
    type?:
      | undefined
      | "all"
      | "public"
      | "private"
      | "forks"
      | "sources"
      | "member"
      | "internal";
    sort?: undefined | "created" | "updated" | "pushed" | "full_name";
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListForOrgResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type ReposReposListForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type ReposReposListForUserQueryInput = {
    type?: undefined | "all" | "owner" | "member";
    sort?: undefined | "created" | "updated" | "pushed" | "full_name";
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListForUserResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type ReposReposListForksPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListForksQueryInput = {
    sort?: undefined | "newest" | "oldest" | "stargazers";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type ReposReposListForksResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type ReposReposListInvitationsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListInvitationsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListInvitationsResponseApiResponse =
    GithubApiRepositoryInvitationApiResponse[];
  type ReposReposListInvitationsForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListInvitationsForAuthenticatedUserResponseApiResponse =
    ReposReposListInvitationsResponseApiResponse;
  type ReposReposListLanguagesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListLanguagesResponseApiResponse =
    GithubApiLanguageApiResponse;
  type GithubApiLanguageApiResponse = GithubApiLanguage;
  type ReposReposListPagesBuildsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListPagesBuildsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListPagesBuildsResponseApiResponse =
    GithubApiPageBuildApiResponse[];
  type ReposReposListPublicQueryInput =
    MigrationsMigrationsGetCommitAuthorsQuery;
  type ReposReposListPublicResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type ReposReposListPullRequestsAssociatedWithCommitPathInput =
    GitGitGetCommitPath;
  type ReposReposListPullRequestsAssociatedWithCommitQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListPullRequestsAssociatedWithCommitResponseApiResponse =
    PullsPullsListResponseApiResponse;
  type ReposReposListReleaseAssetsPathInput = ReposReposDeleteReleasePath;
  type ReposReposListReleaseAssetsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListReleaseAssetsResponseApiResponse =
    GithubApiReleaseAssetApiResponse[];
  type ReposReposListReleasesPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListReleasesQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListReleasesResponseApiResponse =
    GithubApiReleaseApiResponse[];
  type ReposReposListTagsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListTagsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListTagsResponseApiResponse = GithubApiTagApiResponse[];
  type GithubApiTagApiResponse = GithubApiTag;
  type ReposReposListTeamsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListTeamsQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListTeamsResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type ReposReposListWebhooksPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposListWebhooksQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type ReposReposListWebhooksResponseApiResponse = GithubApiHookApiResponse[];
  type ReposReposMergePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposMergeBodyInput = ReposReposMergeBody;
  type ReposReposMergeResponseApiResponse =
    ReposReposGetCommitResponseApiResponse;
  type ReposReposPingWebhookPathInput = ReposReposDeleteWebhookPath;
  type ReposReposPingWebhookResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposRemoveAppAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveAppAccessRestrictionsBodyInput =
    ReposReposAddAppAccessRestrictionsBody;
  type ReposReposRemoveAppAccessRestrictionsResponseApiResponse =
    ReposReposAddAppAccessRestrictionsResponseApiResponse;
  type ReposReposRemoveCollaboratorPathInput = ReposReposAddCollaboratorPath;
  type ReposReposRemoveCollaboratorResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposRemoveStatusCheckContextsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveStatusCheckContextsBodyInput =
    ReposReposAddStatusCheckContextsBody;
  type ReposReposRemoveStatusCheckContextsResponseApiResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposRemoveStatusCheckProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveStatusCheckProtectionResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposRemoveTeamAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveTeamAccessRestrictionsBodyInput =
    ReposReposAddTeamAccessRestrictionsBody;
  type ReposReposRemoveTeamAccessRestrictionsResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type ReposReposRemoveUserAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposRemoveUserAccessRestrictionsBodyInput =
    ReposReposAddUserAccessRestrictionsBody;
  type ReposReposRemoveUserAccessRestrictionsResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type ReposReposReplaceAllTopicsPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposReplaceAllTopicsBodyInput = ReposReposReplaceAllTopicsBody;
  type ReposReposReplaceAllTopicsResponseApiResponse =
    ReposReposGetAllTopicsResponseApiResponse;
  type ReposReposRequestPagesBuildPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposRequestPagesBuildResponseApiResponse =
    GithubApiPageBuildStatusApiResponse;
  type GithubApiPageBuildStatusApiResponse = GithubApiPageBuildStatus;
  type ReposReposSetAdminBranchProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetAdminBranchProtectionResponseApiResponse =
    ReposReposCreateCommitSignatureProtectionResponseApiResponse;
  type ReposReposSetAppAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetAppAccessRestrictionsBodyInput =
    ReposReposAddAppAccessRestrictionsBody;
  type ReposReposSetAppAccessRestrictionsResponseApiResponse =
    ReposReposAddAppAccessRestrictionsResponseApiResponse;
  type ReposReposSetStatusCheckContextsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetStatusCheckContextsBodyInput =
    ReposReposAddStatusCheckContextsBody;
  type ReposReposSetStatusCheckContextsResponseApiResponse =
    GitignoreGitignoreGetAllTemplatesResponse;
  type ReposReposSetTeamAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetTeamAccessRestrictionsBodyInput =
    ReposReposAddTeamAccessRestrictionsBody;
  type ReposReposSetTeamAccessRestrictionsResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type ReposReposSetUserAccessRestrictionsPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposSetUserAccessRestrictionsBodyInput =
    ReposReposAddUserAccessRestrictionsBody;
  type ReposReposSetUserAccessRestrictionsResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type ReposReposTestPushWebhookPathInput = ReposReposDeleteWebhookPath;
  type ReposReposTestPushWebhookResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposTransferPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposTransferBodyInput = ReposReposTransferBody;
  type ReposReposTransferResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposUpdatePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposUpdateBodyInput =
    | undefined
    | {
        name?: undefined | string;
        description?: undefined | string;
        homepage?: undefined | string;
        private?: undefined | boolean;
        visibility?:
          | undefined
          | "public"
          | "private"
          | "visibility"
          | "internal";
        has_issues?: undefined | boolean;
        has_projects?: undefined | boolean;
        has_wiki?: undefined | boolean;
        is_template?: undefined | boolean;
        default_branch?: undefined | string;
        allow_squash_merge?: undefined | boolean;
        allow_merge_commit?: undefined | boolean;
        allow_rebase_merge?: undefined | boolean;
        delete_branch_on_merge?: undefined | boolean;
        archived?: undefined | boolean;
      };
  type ReposReposUpdateResponseApiResponse = ReposReposGetResponseApiResponse;
  type ReposReposUpdateBranchProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposUpdateBranchProtectionBodyInput =
    ReposReposUpdateBranchProtectionBody;
  type ReposReposUpdateBranchProtectionResponseApiResponse =
    GithubApiProtectedBranchApiResponse;
  type GithubApiProtectedBranchApiResponse = {
    url: string;
    required_status_checks?: undefined | GithubApiStatusCheckPolicyApiResponse;
    required_pull_request_reviews?:
      | undefined
      | {
          url: string;
          dismiss_stale_reviews?: undefined | boolean;
          require_code_owner_reviews?: undefined | boolean;
          required_approving_review_count?: undefined | number;
          dismissal_restrictions?:
            | undefined
            | {
                url: string;
                users_url: string;
                teams_url: string;
                users: GithubApiSimpleUserApiResponse[];
                teams: GithubApiTeamApiResponse[];
              };
        };
    required_signatures?: undefined | { url: string; enabled: boolean };
    enforce_admins?: undefined | { url: string; enabled: boolean };
    required_linear_history?: undefined | { enabled: boolean };
    allow_force_pushes?: undefined | { enabled: boolean };
    allow_deletions?: undefined | { enabled: boolean };
    restrictions?: undefined | GithubApiBranchRestrictionPolicyApiResponse;
  };
  type ReposReposUpdateCommitCommentPathInput = IssuesIssuesDeleteCommentPath;
  type ReposReposUpdateCommitCommentBodyInput = GistsGistsCreateCommentBody;
  type ReposReposUpdateCommitCommentResponseApiResponse =
    ReposReposCreateCommitCommentResponseApiResponse;
  type ReposReposUpdateInformationAboutPagesSitePathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type ReposReposUpdateInformationAboutPagesSiteBodyInput =
    ReposReposUpdateInformationAboutPagesSiteBody;
  type ReposReposUpdateInformationAboutPagesSiteResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ReposReposUpdateInvitationPathInput = ReposReposDeleteInvitationPath;
  type ReposReposUpdateInvitationBodyInput = ReposReposUpdateInvitationBody;
  type ReposReposUpdateInvitationResponseApiResponse =
    ReposReposAddCollaboratorResponseApiResponse;
  type ReposReposUpdatePullRequestReviewProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposUpdatePullRequestReviewProtectionBodyInput =
    ReposReposUpdatePullRequestReviewProtectionBody;
  type ReposReposUpdatePullRequestReviewProtectionResponseApiResponse =
    GithubApiProtectedBranchPullRequestReviewApiResponse;
  type ReposReposUpdateReleasePathInput = ReposReposDeleteReleasePath;
  type ReposReposUpdateReleaseBodyInput = ReposReposUpdateReleaseBody;
  type ReposReposUpdateReleaseResponseApiResponse =
    ReposReposCreateReleaseResponseApiResponse;
  type ReposReposUpdateReleaseAssetPathInput = ReposReposDeleteReleaseAssetPath;
  type ReposReposUpdateReleaseAssetBodyInput = ReposReposUpdateReleaseAssetBody;
  type ReposReposUpdateReleaseAssetResponseApiResponse =
    ReposReposGetReleaseAssetResponseApiResponse;
  type ReposReposUpdateStatusCheckProtectionPathInput =
    ReposReposAddAppAccessRestrictionsPath;
  type ReposReposUpdateStatusCheckProtectionBodyInput =
    ReposReposUpdateStatusCheckProtectionBody;
  type ReposReposUpdateStatusCheckProtectionResponseApiResponse =
    ReposReposGetStatusChecksProtectionResponseApiResponse;
  type ReposReposUpdateWebhookPathInput = ReposReposDeleteWebhookPath;
  type ReposReposUpdateWebhookBodyInput =
    | undefined
    | {
        config?:
          | undefined
          | {
              url: GithubApiWebhookConfigUrlInput;
              content_type?: undefined | GithubApiWebhookConfigContentTypeInput;
              secret?: undefined | GithubApiWebhookConfigSecretInput;
              insecure_ssl?: undefined | GithubApiWebhookConfigInsecureSslInput;
              address?: undefined | string;
              room?: undefined | string;
            };
        events?: undefined | string[];
        add_events?: undefined | string[];
        remove_events?: undefined | string[];
        active?: undefined | boolean;
      };
  type ReposReposUpdateWebhookResponseApiResponse =
    ReposReposCreateWebhookResponseApiResponse;
  type ReposReposUpdateWebhookConfigForRepoPathInput =
    ReposReposDeleteWebhookPath;
  type ReposReposUpdateWebhookConfigForRepoBodyInput =
    AppsAppsUpdateWebhookConfigForAppBodyInput;
  type ReposReposUpdateWebhookConfigForRepoResponseApiResponse =
    AppsAppsGetWebhookConfigForAppResponseApiResponse;
  type ReposReposUploadReleaseAssetPathInput = ReposReposDeleteReleasePath;
  type ReposReposUploadReleaseAssetQueryInput =
    ReposReposUploadReleaseAssetQuery;
  type ReposReposUploadReleaseAssetResponseApiResponse =
    ReposReposGetReleaseAssetResponseApiResponse;
  type ScimScimDeleteUserFromOrgPathInput = ScimScimDeleteUserFromOrgPath;
  type ScimScimDeleteUserFromOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimGetProvisioningInformationForUserPathInput =
    ScimScimDeleteUserFromOrgPath;
  type ScimScimGetProvisioningInformationForUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimListProvisionedIdentitiesPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ScimScimListProvisionedIdentitiesQueryInput =
    ScimScimListProvisionedIdentitiesQuery;
  type ScimScimListProvisionedIdentitiesResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimProvisionAndInviteUserPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type ScimScimProvisionAndInviteUserBodyInput =
    ScimScimProvisionAndInviteUserBody;
  type ScimScimProvisionAndInviteUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimSetInformationForProvisionedUserPathInput =
    ScimScimDeleteUserFromOrgPath;
  type ScimScimSetInformationForProvisionedUserBodyInput =
    ScimScimSetInformationForProvisionedUserBody;
  type ScimScimSetInformationForProvisionedUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type ScimScimUpdateAttributeForUserPathInput = ScimScimDeleteUserFromOrgPath;
  type ScimScimUpdateAttributeForUserBodyInput =
    ScimScimUpdateAttributeForUserBody;
  type ScimScimUpdateAttributeForUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type SearchSearchCodeQueryInput = {
    q: string;
    sort?: undefined | "indexed";
    order?: undefined | "desc" | "asc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type SearchSearchCodeResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiCodeSearchResultItemApiResponse[];
  };
  type GithubApiCodeSearchResultItemApiResponse = {
    name: string;
    path: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    repository: GithubApiMinimalRepositoryApiResponse;
    score: number;
    file_size?: undefined | number;
    language?: undefined | string;
    last_modified_at?: undefined | string;
    line_numbers?: undefined | string[];
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
  };
  type GithubApiSearchResultTextMatchesApiResponse =
    GithubApiSearchResultTextMatches;
  type SearchSearchCommitsQueryInput = {
    q: string;
    sort?: undefined | "author-date" | "committer-date";
    order?: undefined | "desc" | "asc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type SearchSearchCommitsResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiCommitSearchResultItemApiResponse[];
  };
  type GithubApiCommitSearchResultItemApiResponse = {
    url: string;
    sha: string;
    html_url: string;
    comments_url: string;
    commit: {
      author: { name: string; email: string; date: string };
      committer: GithubApiGitUserApiResponse;
      comment_count: number;
      message: string;
      tree: { sha: string; url: string };
      url: string;
      verification?: undefined | GithubApiVerificationApiResponse;
    };
    author: GithubApiSimpleUserApiResponse;
    committer: GithubApiGitUserApiResponse;
    parents: {
      url?: undefined | string;
      html_url?: undefined | string;
      sha?: undefined | string;
    }[];
    repository: GithubApiMinimalRepositoryApiResponse;
    score: number;
    node_id: string;
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
  };
  type SearchSearchIssuesAndPullRequestsQueryInput = {
    q: string;
    sort?:
      | undefined
      | "comments"
      | "reactions"
      | "reactions-+1"
      | "reactions--1"
      | "reactions-smile"
      | "reactions-thinking_face"
      | "reactions-heart"
      | "reactions-tada"
      | "interactions"
      | "created"
      | "updated";
    order?: undefined | "desc" | "asc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type SearchSearchIssuesAndPullRequestsResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiIssueSearchResultItemApiResponse[];
  };
  type GithubApiIssueSearchResultItemApiResponse = {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    locked: boolean;
    active_lock_reason?: undefined | string;
    assignees?: undefined | GithubApiSimpleUserApiResponse[];
    user: GithubApiSimpleUserApiResponse;
    labels: {
      id?: undefined | number;
      node_id?: undefined | string;
      url?: undefined | string;
      name?: undefined | string;
      color?: undefined | string;
      default?: undefined | boolean;
      description?: undefined | string;
    }[];
    state: string;
    assignee: GithubApiSimpleUserApiResponse;
    milestone: GithubApiMilestoneApiResponse;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
    pull_request?:
      | undefined
      | {
          merged_at?: undefined | string;
          diff_url: string;
          html_url: string;
          patch_url: string;
          url: string;
        };
    body?: undefined | string;
    score: number;
    author_association: string;
    draft?: undefined | boolean;
    repository?: undefined | GithubApiRepositoryApiResponse;
    body_html?: undefined | string;
    body_text?: undefined | string;
    timeline_url?: undefined | string;
    performed_via_github_app?: undefined | GithubApiIntegrationApiResponse;
  };
  type SearchSearchLabelsQueryInput = {
    repository_id: number;
    q: string;
    sort?: undefined | "created" | "updated";
    order?: undefined | "desc" | "asc";
  };
  type SearchSearchLabelsResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiLabelSearchResultItemApiResponse[];
  };
  type GithubApiLabelSearchResultItemApiResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description: string;
    score: number;
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
  };
  type SearchSearchReposQueryInput = {
    q: string;
    sort?: undefined | "stars" | "forks" | "help-wanted-issues" | "updated";
    order?: undefined | "desc" | "asc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type SearchSearchReposResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiRepoSearchResultItemApiResponse[];
  };
  type GithubApiRepoSearchResultItemApiResponse = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GithubApiSimpleUserApiResponse;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    created_at: string;
    updated_at: string;
    pushed_at: string;
    homepage: string;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string;
    forks_count: number;
    open_issues_count: number;
    master_branch?: undefined | string;
    default_branch: string;
    score: number;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    forks: number;
    open_issues: number;
    watchers: number;
    topics?: undefined | string[];
    mirror_url: string;
    has_issues: boolean;
    has_projects: boolean;
    has_pages: boolean;
    has_wiki: boolean;
    has_downloads: boolean;
    archived: boolean;
    disabled: boolean;
    license: GithubApiLicenseSimpleApiResponse;
    permissions?: undefined | { admin: boolean; pull: boolean; push: boolean };
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
    temp_clone_token?: undefined | string;
    allow_merge_commit?: undefined | boolean;
    allow_squash_merge?: undefined | boolean;
    allow_rebase_merge?: undefined | boolean;
    delete_branch_on_merge?: undefined | boolean;
  };
  type SearchSearchTopicsQueryInput = SearchSearchTopicsQuery;
  type SearchSearchTopicsResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiTopicSearchResultItemApiResponse[];
  };
  type GithubApiTopicSearchResultItemApiResponse = {
    name: string;
    display_name: string;
    short_description: string;
    description: string;
    created_by: string;
    released: string;
    created_at: string;
    updated_at: string;
    featured: boolean;
    curated: boolean;
    score: number;
    repository_count?: undefined | number;
    logo_url?: undefined | string;
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
    related?:
      | undefined
      | {
          topic_relation?:
            | undefined
            | {
                id?: undefined | number;
                name?: undefined | string;
                topic_id?: undefined | number;
                relation_type?: undefined | string;
              };
        }[];
    aliases?:
      | undefined
      | {
          topic_relation?:
            | undefined
            | {
                id?: undefined | number;
                name?: undefined | string;
                topic_id?: undefined | number;
                relation_type?: undefined | string;
              };
        }[];
  };
  type SearchSearchUsersQueryInput = {
    q: string;
    sort?: undefined | "followers" | "repositories" | "joined";
    order?: undefined | "desc" | "asc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type SearchSearchUsersResponseApiResponse = {
    total_count?: undefined | number;
    incomplete_results?: undefined | boolean;
    items?: undefined | GithubApiUserSearchResultItemApiResponse[];
  };
  type GithubApiUserSearchResultItemApiResponse = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    received_events_url: string;
    type: string;
    score: number;
    following_url: string;
    gists_url: string;
    starred_url: string;
    events_url: string;
    public_repos?: undefined | number;
    public_gists?: undefined | number;
    followers?: undefined | number;
    following?: undefined | number;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    name?: undefined | string;
    bio?: undefined | string;
    email?: undefined | string;
    location?: undefined | string;
    site_admin: boolean;
    hireable?: undefined | boolean;
    text_matches?: undefined | GithubApiSearchResultTextMatchesApiResponse;
    blog?: undefined | string;
    company?: undefined | string;
    suspended_at?: undefined | string;
  };
  type SecretScanningSecretScanningGetAlertPathInput =
    CodeScanningCodeScanningUpdateAlertPathInput;
  type SecretScanningSecretScanningGetAlertResponseApiResponse =
    GithubApiSecretScanningAlertApiResponse;
  type GithubApiSecretScanningAlertApiResponse = {
    number?: undefined | GithubApiAlertNumberApiResponse;
    created_at?: undefined | GithubApiAlertCreatedAtApiResponse;
    url?: undefined | GithubApiAlertUrlApiResponse;
    html_url?: undefined | GithubApiAlertHtmlUrlApiResponse;
    state?: undefined | GithubApiSecretScanningAlertStateApiResponse;
    resolution?: undefined | GithubApiSecretScanningAlertResolutionApiResponse;
    resolved_at?: undefined | string;
    resolved_by?: undefined | GithubApiSimpleUserApiResponse;
    secret_type?: undefined | string;
    secret?: undefined | string;
  };
  type GithubApiSecretScanningAlertStateApiResponse =
    GithubApiSecretScanningAlertState;
  type GithubApiSecretScanningAlertResolutionApiResponse =
    GithubApiSelectedActionsUrl;
  type SecretScanningSecretScanningListAlertsForRepoPathInput =
    ActionsActionsCreateRegistrationTokenForRepoPath;
  type SecretScanningSecretScanningListAlertsForRepoQueryInput = {
    state?: undefined | "open" | "resolved";
    page?: undefined | number;
    per_page?: undefined | number;
  };
  type SecretScanningSecretScanningListAlertsForRepoResponseApiResponse =
    GithubApiSecretScanningAlertApiResponse[];
  type SecretScanningSecretScanningUpdateAlertPathInput =
    CodeScanningCodeScanningUpdateAlertPathInput;
  type SecretScanningSecretScanningUpdateAlertBodyInput =
    | undefined
    | {
        state: GithubApiSecretScanningAlertStateInput;
        resolution?: undefined | GithubApiSecretScanningAlertResolutionInput;
      };
  type GithubApiSecretScanningAlertStateInput =
    GithubApiSecretScanningAlertState;
  type GithubApiSecretScanningAlertResolutionInput =
    GithubApiSelectedActionsUrl;
  type SecretScanningSecretScanningUpdateAlertResponseApiResponse =
    SecretScanningSecretScanningGetAlertResponseApiResponse;
  type ServerCreateQueryInput = ServerCreateQuery;
  type ServerCreateBodyInput = ServerCreateBody;
  type ServerCreateResponseApiResponse = ServerCreateResponse;
  type ServerEmptyResponseQueryInput = ServerEmptyResponseQuery;
  type ServerGetFileQueryInput = {
    throwError?: undefined | boolean | "true" | "false";
  };
  type ServerGetFileResponseApiResponse = GroupUploadResponse;
  type ServerGetIdParamsInput = { id: number | string };
  type ServerGetIdResponseApiResponse = ServerGetIdParams;
  type ServerInvalidResponseResponseApiResponse = ServerInvalidResponseResponse;
  type ServerPatchTestResponseApiResponse = ProjectsProjectsMoveCardResponse;
  type ServerSearchBodyInput = ServerCreateResponse;
  type ServerSearchResponseApiResponse = ServerSearchResponse;
  type ServerServerErrorResponseApiResponse = ProjectsProjectsMoveCardResponse;
  type ServerSetFileFilesInput = {
    myFile: { name?: string; data: ReadableStream };
  };
  type ServerSetFileResponseApiResponse = ServerSetFileResponse;
  type ServerSetMimeCheckedFileFilesInput = ServerSetFileFilesInput;
  type ServerSetMimeCheckedFileResponseApiResponse = ServerSetFileResponse;
  type ServerValidatorShimBodyInput = ServerValidatorShimBody;
  type ServerValidatorShimResponseApiResponse = ServerSetFileResponse;
  type TeamsTeamsAddMemberLegacyPathInput = TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsAddMemberLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgPathInput =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgPath;
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgBodyInput =
    | undefined
    | { role?: undefined | "member" | "maintainer" };
  type TeamsTeamsAddOrUpdateMembershipForUserInOrgResponseApiResponse =
    GithubApiTeamMembershipApiResponse;
  type GithubApiTeamMembershipApiResponse = GithubApiTeamMembership;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyPathInput =
    TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyBodyInput =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgBodyInput;
  type TeamsTeamsAddOrUpdateMembershipForUserLegacyResponseApiResponse =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponseApiResponse;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgPathInput =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgBodyInput =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgBody;
  type TeamsTeamsAddOrUpdateProjectPermissionsInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyPathInput =
    TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyBodyInput =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgBody;
  type TeamsTeamsAddOrUpdateProjectPermissionsLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgPathInput =
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgBodyInput =
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgBody;
  type TeamsTeamsAddOrUpdateRepoPermissionsInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyPathInput =
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyBodyInput =
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyBody;
  type TeamsTeamsAddOrUpdateRepoPermissionsLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsCheckPermissionsForProjectInOrgPathInput =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath;
  type TeamsTeamsCheckPermissionsForProjectInOrgResponseApiResponse =
    GithubApiTeamProjectApiResponse;
  type GithubApiTeamProjectApiResponse = {
    owner_url?: undefined | string;
    url?: undefined | string;
    html_url?: undefined | string;
    columns_url?: undefined | string;
    id?: undefined | number;
    node_id?: undefined | string;
    name?: undefined | string;
    body?: undefined | string;
    number?: undefined | number;
    state?: undefined | string;
    creator?: undefined | GithubApiSimpleUserApiResponse;
    created_at?: undefined | string;
    updated_at?: undefined | string;
    organization_permission?: undefined | string;
    private?: undefined | boolean;
    permissions?:
      | undefined
      | {
          read?: undefined | boolean;
          write?: undefined | boolean;
          admin?: undefined | boolean;
        };
  };
  type TeamsTeamsCheckPermissionsForProjectLegacyPathInput =
    TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath;
  type TeamsTeamsCheckPermissionsForProjectLegacyResponseApiResponse =
    TeamsTeamsCheckPermissionsForProjectInOrgResponseApiResponse;
  type TeamsTeamsCheckPermissionsForRepoInOrgPathInput =
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath;
  type TeamsTeamsCheckPermissionsForRepoInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsCheckPermissionsForRepoLegacyPathInput =
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath;
  type TeamsTeamsCheckPermissionsForRepoLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsCreatePathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type TeamsTeamsCreateBodyInput =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        maintainers?: undefined | string[];
        repo_names?: undefined | string[];
        privacy?: undefined | "secret" | "closed";
        permission?: undefined | "pull" | "push" | "admin";
        parent_team_id?: undefined | number;
      };
  type TeamsTeamsCreateResponseApiResponse = GithubApiTeamFullApiResponse;
  type GithubApiTeamFullApiResponse = {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    name: string;
    slug: string;
    description: string;
    privacy?: undefined | "closed" | "secret";
    permission: string;
    members_url: string;
    repositories_url: string;
    parent?: undefined | GithubApiTeamSimpleApiResponse;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: GithubApiOrganizationFullApiResponse;
    ldap_dn?: undefined | string;
  };
  type TeamsTeamsCreateDiscussionCommentInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsCreateDiscussionCommentInOrgBodyInput =
    GistsGistsCreateCommentBody;
  type TeamsTeamsCreateDiscussionCommentInOrgResponseApiResponse =
    GithubApiTeamDiscussionCommentApiResponse;
  type GithubApiTeamDiscussionCommentApiResponse = {
    author: GithubApiSimpleUserApiResponse;
    body: string;
    body_html: string;
    body_version: string;
    created_at: string;
    last_edited_at: string;
    discussion_url: string;
    html_url: string;
    node_id: string;
    number: number;
    updated_at: string;
    url: string;
    reactions?: undefined | GithubApiReactionRollupApiResponse;
  };
  type TeamsTeamsCreateDiscussionCommentLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsCreateDiscussionCommentLegacyBodyInput =
    GistsGistsCreateCommentBody;
  type TeamsTeamsCreateDiscussionCommentLegacyResponseApiResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponseApiResponse;
  type TeamsTeamsCreateDiscussionInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsCreateDiscussionInOrgBodyInput =
    | undefined
    | { title: string; body: string; private?: undefined | boolean };
  type TeamsTeamsCreateDiscussionInOrgResponseApiResponse =
    GithubApiTeamDiscussionApiResponse;
  type GithubApiTeamDiscussionApiResponse = {
    author: GithubApiSimpleUserApiResponse;
    body: string;
    body_html: string;
    body_version: string;
    comments_count: number;
    comments_url: string;
    created_at: string;
    last_edited_at: string;
    html_url: string;
    node_id: string;
    number: number;
    pinned: boolean;
    private: boolean;
    team_url: string;
    title: string;
    updated_at: string;
    url: string;
    reactions?: undefined | GithubApiReactionRollupApiResponse;
  };
  type TeamsTeamsCreateDiscussionLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsCreateDiscussionLegacyBodyInput =
    TeamsTeamsCreateDiscussionInOrgBodyInput;
  type TeamsTeamsCreateDiscussionLegacyResponseApiResponse =
    TeamsTeamsCreateDiscussionInOrgResponseApiResponse;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgBodyInput =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgBody;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseApiResponse =
    GithubApiGroupMappingApiResponse;
  type GithubApiGroupMappingApiResponse = GithubApiGroupMapping;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyBodyInput =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyBody;
  type TeamsTeamsCreateOrUpdateIdpGroupConnectionsLegacyResponseApiResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseApiResponse;
  type TeamsTeamsDeleteDiscussionCommentInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type TeamsTeamsDeleteDiscussionCommentInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteDiscussionCommentLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type TeamsTeamsDeleteDiscussionCommentLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteDiscussionInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsDeleteDiscussionInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteDiscussionLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsDeleteDiscussionLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteInOrgPathInput = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsDeleteInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsDeleteLegacyPathInput = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsDeleteLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsGetByNamePathInput = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsGetByNameResponseApiResponse =
    TeamsTeamsCreateResponseApiResponse;
  type TeamsTeamsGetDiscussionCommentInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type TeamsTeamsGetDiscussionCommentInOrgResponseApiResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponseApiResponse;
  type TeamsTeamsGetDiscussionCommentLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type TeamsTeamsGetDiscussionCommentLegacyResponseApiResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponseApiResponse;
  type TeamsTeamsGetDiscussionInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsGetDiscussionInOrgResponseApiResponse =
    TeamsTeamsCreateDiscussionInOrgResponseApiResponse;
  type TeamsTeamsGetDiscussionLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsGetDiscussionLegacyResponseApiResponse =
    TeamsTeamsCreateDiscussionInOrgResponseApiResponse;
  type TeamsTeamsGetLegacyPathInput = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsGetLegacyResponseApiResponse =
    TeamsTeamsCreateResponseApiResponse;
  type TeamsTeamsGetMemberLegacyPathInput = TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsGetMemberLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsGetMembershipForUserInOrgPathInput =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgPath;
  type TeamsTeamsGetMembershipForUserInOrgResponseApiResponse =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponseApiResponse;
  type TeamsTeamsGetMembershipForUserLegacyPathInput =
    TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsGetMembershipForUserLegacyResponseApiResponse =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgResponseApiResponse;
  type TeamsTeamsListPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type TeamsTeamsListQueryInput = ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type TeamsTeamsListChildInOrgPathInput = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListChildInOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListChildInOrgResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type TeamsTeamsListChildLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListChildLegacyQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListChildLegacyResponseApiResponse =
    OrgsOrgsListInvitationTeamsResponseApiResponse;
  type TeamsTeamsListDiscussionCommentsInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsListDiscussionCommentsInOrgQueryInput = {
    direction?: undefined | "asc" | "desc";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type TeamsTeamsListDiscussionCommentsInOrgResponseApiResponse =
    GithubApiTeamDiscussionCommentApiResponse[];
  type TeamsTeamsListDiscussionCommentsLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsListDiscussionCommentsLegacyQueryInput =
    TeamsTeamsListDiscussionCommentsInOrgQueryInput;
  type TeamsTeamsListDiscussionCommentsLegacyResponseApiResponse =
    TeamsTeamsListDiscussionCommentsInOrgResponseApiResponse;
  type TeamsTeamsListDiscussionsInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListDiscussionsInOrgQueryInput =
    TeamsTeamsListDiscussionCommentsInOrgQueryInput;
  type TeamsTeamsListDiscussionsInOrgResponseApiResponse =
    GithubApiTeamDiscussionApiResponse[];
  type TeamsTeamsListDiscussionsLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListDiscussionsLegacyQueryInput =
    TeamsTeamsListDiscussionCommentsInOrgQueryInput;
  type TeamsTeamsListDiscussionsLegacyResponseApiResponse =
    TeamsTeamsListDiscussionsInOrgResponseApiResponse;
  type TeamsTeamsListForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListForAuthenticatedUserResponseApiResponse =
    GithubApiTeamFullApiResponse[];
  type TeamsTeamsListIdpGroupsForLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListIdpGroupsForLegacyResponseApiResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseApiResponse;
  type TeamsTeamsListIdpGroupsForOrgPathInput =
    ActionsActionsCreateRegistrationTokenForOrgPath;
  type TeamsTeamsListIdpGroupsForOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListIdpGroupsForOrgResponseApiResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseApiResponse;
  type TeamsTeamsListIdpGroupsInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListIdpGroupsInOrgResponseApiResponse =
    TeamsTeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseApiResponse;
  type TeamsTeamsListMembersInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListMembersInOrgQueryInput = {
    role?: undefined | "member" | "maintainer" | "all";
    per_page?: undefined | number;
    page?: undefined | number;
  };
  type TeamsTeamsListMembersInOrgResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type TeamsTeamsListMembersLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListMembersLegacyQueryInput =
    TeamsTeamsListMembersInOrgQueryInput;
  type TeamsTeamsListMembersLegacyResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type TeamsTeamsListPendingInvitationsInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListPendingInvitationsInOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListPendingInvitationsInOrgResponseApiResponse =
    OrgsOrgsListPendingInvitationsResponseApiResponse;
  type TeamsTeamsListPendingInvitationsLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListPendingInvitationsLegacyQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListPendingInvitationsLegacyResponseApiResponse =
    OrgsOrgsListPendingInvitationsResponseApiResponse;
  type TeamsTeamsListProjectsInOrgPathInput =
    TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListProjectsInOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListProjectsInOrgResponseApiResponse =
    GithubApiTeamProjectApiResponse[];
  type TeamsTeamsListProjectsLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListProjectsLegacyQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListProjectsLegacyResponseApiResponse =
    TeamsTeamsListProjectsInOrgResponseApiResponse;
  type TeamsTeamsListReposInOrgPathInput = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsListReposInOrgQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListReposInOrgResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type TeamsTeamsListReposLegacyPathInput =
    TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsListReposLegacyQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type TeamsTeamsListReposLegacyResponseApiResponse =
    ActivityActivityListReposWatchedByUserResponseApiResponse;
  type TeamsTeamsRemoveMemberLegacyPathInput = TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsRemoveMemberLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveMembershipForUserInOrgPathInput =
    TeamsTeamsAddOrUpdateMembershipForUserInOrgPath;
  type TeamsTeamsRemoveMembershipForUserInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveMembershipForUserLegacyPathInput =
    TeamsTeamsAddMemberLegacyPath;
  type TeamsTeamsRemoveMembershipForUserLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveProjectInOrgPathInput =
    TeamsTeamsAddOrUpdateProjectPermissionsInOrgPath;
  type TeamsTeamsRemoveProjectInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveProjectLegacyPathInput =
    TeamsTeamsAddOrUpdateProjectPermissionsLegacyPath;
  type TeamsTeamsRemoveProjectLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveRepoInOrgPathInput =
    TeamsTeamsAddOrUpdateRepoPermissionsInOrgPath;
  type TeamsTeamsRemoveRepoInOrgResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsRemoveRepoLegacyPathInput =
    TeamsTeamsAddOrUpdateRepoPermissionsLegacyPath;
  type TeamsTeamsRemoveRepoLegacyResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type TeamsTeamsUpdateDiscussionCommentInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentInOrgPath;
  type TeamsTeamsUpdateDiscussionCommentInOrgBodyInput =
    GistsGistsCreateCommentBody;
  type TeamsTeamsUpdateDiscussionCommentInOrgResponseApiResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponseApiResponse;
  type TeamsTeamsUpdateDiscussionCommentLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionCommentLegacyPath;
  type TeamsTeamsUpdateDiscussionCommentLegacyBodyInput =
    GistsGistsCreateCommentBody;
  type TeamsTeamsUpdateDiscussionCommentLegacyResponseApiResponse =
    TeamsTeamsCreateDiscussionCommentInOrgResponseApiResponse;
  type TeamsTeamsUpdateDiscussionInOrgPathInput =
    ReactionsReactionsCreateForTeamDiscussionInOrgPath;
  type TeamsTeamsUpdateDiscussionInOrgBodyInput =
    TeamsTeamsUpdateDiscussionInOrgBody;
  type TeamsTeamsUpdateDiscussionInOrgResponseApiResponse =
    TeamsTeamsCreateDiscussionInOrgResponseApiResponse;
  type TeamsTeamsUpdateDiscussionLegacyPathInput =
    ReactionsReactionsCreateForTeamDiscussionLegacyPath;
  type TeamsTeamsUpdateDiscussionLegacyBodyInput =
    TeamsTeamsUpdateDiscussionInOrgBody;
  type TeamsTeamsUpdateDiscussionLegacyResponseApiResponse =
    TeamsTeamsCreateDiscussionInOrgResponseApiResponse;
  type TeamsTeamsUpdateInOrgPathInput = TeamsTeamsCreateDiscussionInOrgPath;
  type TeamsTeamsUpdateInOrgBodyInput =
    | undefined
    | {
        name: string;
        description?: undefined | string;
        privacy?: undefined | "secret" | "closed";
        permission?: undefined | "pull" | "push" | "admin";
        parent_team_id?: undefined | number;
      };
  type TeamsTeamsUpdateInOrgResponseApiResponse =
    TeamsTeamsCreateResponseApiResponse;
  type TeamsTeamsUpdateLegacyPathInput = TeamsTeamsCreateDiscussionLegacyPath;
  type TeamsTeamsUpdateLegacyBodyInput = TeamsTeamsUpdateInOrgBodyInput;
  type TeamsTeamsUpdateLegacyResponseApiResponse =
    TeamsTeamsCreateResponseApiResponse;
  type UsersUsersAddEmailForAuthenticatedBodyInput =
    UsersUsersAddEmailForAuthenticatedBody;
  type UsersUsersAddEmailForAuthenticatedResponseApiResponse =
    GithubApiEmailApiResponse[];
  type GithubApiEmailApiResponse = GithubApiEmail;
  type UsersUsersBlockPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersBlockResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCheckBlockedPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersCheckBlockedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCheckFollowingForUserPathInput =
    UsersUsersCheckFollowingForUserPath;
  type UsersUsersCheckFollowingForUserResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCheckPersonIsFollowedByAuthenticatedPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersCheckPersonIsFollowedByAuthenticatedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersCreateGpgKeyForAuthenticatedBodyInput =
    UsersUsersCreateGpgKeyForAuthenticatedBody;
  type UsersUsersCreateGpgKeyForAuthenticatedResponseApiResponse =
    GithubApiGpgKeyApiResponse;
  type GithubApiGpgKeyApiResponse = GithubApiGpgKey;
  type UsersUsersCreatePublicSshKeyForAuthenticatedBodyInput =
    UsersUsersCreatePublicSshKeyForAuthenticatedBody;
  type UsersUsersCreatePublicSshKeyForAuthenticatedResponseApiResponse =
    GithubApiKeyApiResponse;
  type GithubApiKeyApiResponse = GithubApiKey;
  type UsersUsersDeleteEmailForAuthenticatedBodyInput =
    UsersUsersAddEmailForAuthenticatedBody;
  type UsersUsersDeleteEmailForAuthenticatedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersDeleteGpgKeyForAuthenticatedPathInput =
    UsersUsersDeleteGpgKeyForAuthenticatedPath;
  type UsersUsersDeleteGpgKeyForAuthenticatedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersDeletePublicSshKeyForAuthenticatedPathInput =
    UsersUsersDeletePublicSshKeyForAuthenticatedPath;
  type UsersUsersDeletePublicSshKeyForAuthenticatedResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersFollowPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersFollowResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersGetAuthenticatedResponseApiResponse =
    | GithubApiPrivateUserApiResponse
    | GithubApiPublicUserApiResponse;
  type GithubApiPrivateUserApiResponse = GithubApiPrivateUser;
  type GithubApiPublicUserApiResponse = GithubApiPublicUser;
  type UsersUsersGetByUsernamePathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersGetByUsernameResponseApiResponse =
    UsersUsersGetAuthenticatedResponseApiResponse;
  type UsersUsersGetContextForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersGetContextForUserQueryInput = UsersUsersGetContextForUserQuery;
  type UsersUsersGetContextForUserResponseApiResponse =
    GithubApiHovercardApiResponse;
  type GithubApiHovercardApiResponse = GithubApiHovercard;
  type UsersUsersGetGpgKeyForAuthenticatedPathInput =
    UsersUsersDeleteGpgKeyForAuthenticatedPath;
  type UsersUsersGetGpgKeyForAuthenticatedResponseApiResponse =
    UsersUsersCreateGpgKeyForAuthenticatedResponseApiResponse;
  type UsersUsersGetPublicSshKeyForAuthenticatedPathInput =
    UsersUsersDeletePublicSshKeyForAuthenticatedPath;
  type UsersUsersGetPublicSshKeyForAuthenticatedResponseApiResponse =
    UsersUsersCreatePublicSshKeyForAuthenticatedResponseApiResponse;
  type UsersUsersListQueryInput = OrgsOrgsListQueryInput;
  type UsersUsersListResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type UsersUsersListBlockedByAuthenticatedResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type UsersUsersListEmailsForAuthenticatedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListEmailsForAuthenticatedResponseApiResponse =
    UsersUsersAddEmailForAuthenticatedResponseApiResponse;
  type UsersUsersListFollowedByAuthenticatedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListFollowedByAuthenticatedResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type UsersUsersListFollowersForAuthenticatedUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListFollowersForAuthenticatedUserResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type UsersUsersListFollowersForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListFollowersForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListFollowersForUserResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type UsersUsersListFollowingForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListFollowingForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListFollowingForUserResponseApiResponse =
    ActivityActivityListStargazersForRepoResponseApiResponse;
  type UsersUsersListGpgKeysForAuthenticatedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListGpgKeysForAuthenticatedResponseApiResponse =
    GithubApiGpgKeyApiResponse[];
  type UsersUsersListGpgKeysForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListGpgKeysForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListGpgKeysForUserResponseApiResponse =
    UsersUsersListGpgKeysForAuthenticatedResponseApiResponse;
  type UsersUsersListPublicEmailsForAuthenticatedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListPublicEmailsForAuthenticatedResponseApiResponse =
    UsersUsersAddEmailForAuthenticatedResponseApiResponse;
  type UsersUsersListPublicKeysForUserPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersListPublicKeysForUserQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListPublicKeysForUserResponseApiResponse =
    GithubApiKeySimpleApiResponse[];
  type GithubApiKeySimpleApiResponse = GithubApiKeySimple;
  type UsersUsersListPublicSshKeysForAuthenticatedQueryInput =
    ActionsActionsListArtifactsForRepoQueryInput;
  type UsersUsersListPublicSshKeysForAuthenticatedResponseApiResponse =
    GithubApiKeyApiResponse[];
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticatedBodyInput =
    UsersUsersSetPrimaryEmailVisibilityForAuthenticatedBody;
  type UsersUsersSetPrimaryEmailVisibilityForAuthenticatedResponseApiResponse =
    UsersUsersAddEmailForAuthenticatedResponseApiResponse;
  type UsersUsersUnblockPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersUnblockResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersUnfollowPathInput =
    ActivityActivityListEventsForAuthenticatedUserPath;
  type UsersUsersUnfollowResponseApiResponse =
    ActionsActionsAddRepoAccessToSelfHostedRunnerGroupInOrgResponse;
  type UsersUsersUpdateAuthenticatedBodyInput =
    UsersUsersUpdateAuthenticatedBody;
  type UsersUsersUpdateAuthenticatedResponseApiResponse =
    GithubApiPrivateUserApiResponse;
  type SqlCategoryMeta = {
    postCount: number;
    isHighlighted?: undefined | boolean;
    isNew: boolean;
    id: string;
    category: string;
  };
  type SqlJobStatusAggregate = { id: string; job: number };
  type SqlCategoryWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlCategoryWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    label?: undefined | string;
    labelNotEqual?: undefined | string;
    labelIn?: undefined | string[] | QueryPart<any>;
    labelNotIn?: undefined | string[] | QueryPart<any>;
    labelLike?: undefined | string;
    labelILike?: undefined | string;
    labelNotLike?: undefined | string;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    postsExists?: undefined | SqlPostCategoryWhere;
    postsNotExists?: undefined | SqlPostCategoryWhere;
    metaExists?: undefined | SqlCategoryMetaWhere;
    metaNotExists?: undefined | SqlCategoryMetaWhere;
  };
  type SqlPostCategoryWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlPostCategoryWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    category?: undefined | string;
    categoryNotEqual?: undefined | string;
    categoryIn?: undefined | string[] | QueryPart<any>;
    categoryNotIn?: undefined | string[] | QueryPart<any>;
    post?: undefined | string;
    postNotEqual?: undefined | string;
    postIn?: undefined | string[] | QueryPart<any>;
    postNotIn?: undefined | string[] | QueryPart<any>;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
  };
  type SqlCategoryMetaWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlCategoryMetaWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    category?: undefined | string;
    categoryNotEqual?: undefined | string;
    categoryIn?: undefined | string[] | QueryPart<any>;
    categoryNotIn?: undefined | string[] | QueryPart<any>;
    isHighlighted?: undefined | boolean;
    isHighlightedIsNull?: undefined | boolean;
    isHighlightedIsNotNull?: undefined | boolean;
  };
  type SqlJobStatusAggregateWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlJobStatusAggregateWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    job?: undefined | number;
    jobNotEqual?: undefined | number;
    jobIn?: undefined | number[] | QueryPart<any>;
    jobNotIn?: undefined | number[] | QueryPart<any>;
    jobGreaterThan?: undefined | number;
    jobLowerThan?: undefined | number;
  };
  type SqlPostWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlPostWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    writer?: undefined | string;
    writerNotEqual?: undefined | string;
    writerIn?: undefined | string[] | QueryPart<any>;
    writerNotIn?: undefined | string[] | QueryPart<any>;
    title?: undefined | string;
    titleNotEqual?: undefined | string;
    titleIn?: undefined | string[] | QueryPart<any>;
    titleNotIn?: undefined | string[] | QueryPart<any>;
    titleLike?: undefined | string;
    titleILike?: undefined | string;
    titleNotLike?: undefined | string;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    categoriesExists?: undefined | SqlPostCategoryWhere;
    categoriesNotExists?: undefined | SqlPostCategoryWhere;
    postagesExists?: undefined | SqlPostageWhere;
    postagesNotExists?: undefined | SqlPostageWhere;
  };
  type SqlPostageWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlPostageWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    images?: undefined | string;
    imagesNotEqual?: undefined | string;
    imagesIn?: undefined | string[] | QueryPart<any>;
    imagesNotIn?: undefined | string[] | QueryPart<any>;
    post?: undefined | string;
    postNotEqual?: undefined | string;
    postIn?: undefined | string[] | QueryPart<any>;
    postNotIn?: undefined | string[] | QueryPart<any>;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
  };
  type SqlUserWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | SqlUserWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    email?: undefined | string;
    emailNotEqual?: undefined | string;
    emailIn?: undefined | string[] | QueryPart<any>;
    emailNotIn?: undefined | string[] | QueryPart<any>;
    emailLike?: undefined | string;
    emailILike?: undefined | string;
    emailNotLike?: undefined | string;
    isCool?: undefined | "true" | "false";
    isCoolNotEqual?: undefined | "true" | "false";
    isCoolIn?: undefined | ("true" | "false")[] | QueryPart<any>;
    isCoolNotIn?: undefined | ("true" | "false")[] | QueryPart<any>;
    isCoolLike?: undefined | "true" | "false";
    isCoolILike?: undefined | "true" | "false";
    isCoolNotLike?: undefined | "true" | "false";
    isCoolIsNull?: undefined | boolean;
    isCoolIsNotNull?: undefined | boolean;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    postsExists?: undefined | SqlPostWhere;
    postsNotExists?: undefined | SqlPostWhere;
  };
  type StoreFileWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreFileWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    bucketName?: undefined | string;
    bucketNameNotEqual?: undefined | string;
    bucketNameIn?: undefined | string[] | QueryPart<any>;
    bucketNameNotIn?: undefined | string[] | QueryPart<any>;
    bucketNameLike?: undefined | string;
    bucketNameILike?: undefined | string;
    bucketNameNotLike?: undefined | string;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    groupExists?: undefined | StoreFileGroupWhere;
    groupNotExists?: undefined | StoreFileGroupWhere;
  };
  type StoreFileGroupWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreFileGroupWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    order?: undefined | number;
    orderNotEqual?: undefined | number;
    orderIn?: undefined | number[] | QueryPart<any>;
    orderNotIn?: undefined | number[] | QueryPart<any>;
    orderGreaterThan?: undefined | number;
    orderLowerThan?: undefined | number;
    orderIsNull?: undefined | boolean;
    orderIsNotNull?: undefined | boolean;
    file?: undefined | string;
    fileNotEqual?: undefined | string;
    fileIn?: undefined | string[] | QueryPart<any>;
    fileNotIn?: undefined | string[] | QueryPart<any>;
    fileIsNull?: undefined | boolean;
    fileIsNotNull?: undefined | boolean;
    parent?: undefined | string;
    parentNotEqual?: undefined | string;
    parentIn?: undefined | string[] | QueryPart<any>;
    parentNotIn?: undefined | string[] | QueryPart<any>;
    parentIsNull?: undefined | boolean;
    parentIsNotNull?: undefined | boolean;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    deletedAt?: undefined | Date;
    deletedAtNotEqual?: undefined | Date;
    deletedAtIn?: undefined | Date[] | QueryPart<any>;
    deletedAtNotIn?: undefined | Date[] | QueryPart<any>;
    deletedAtGreaterThan?: undefined | Date;
    deletedAtLowerThan?: undefined | Date;
    deletedAtIncludeNotNull?: undefined | boolean;
    childrenExists?: undefined | StoreFileGroupWhere;
    childrenNotExists?: undefined | StoreFileGroupWhere;
    postageImagesExists?: undefined | SqlPostageWhere;
    postageImagesNotExists?: undefined | SqlPostageWhere;
  };
  type StoreJobWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreJobWhere[];
    id?: undefined | number;
    idNotEqual?: undefined | number;
    idIn?: undefined | number[] | QueryPart<any>;
    idNotIn?: undefined | number[] | QueryPart<any>;
    idGreaterThan?: undefined | number;
    idLowerThan?: undefined | number;
    isComplete?: undefined | boolean;
    isCompleteIsNull?: undefined | boolean;
    isCompleteIsNotNull?: undefined | boolean;
    name?: undefined | string;
    nameNotEqual?: undefined | string;
    nameIn?: undefined | string[] | QueryPart<any>;
    nameNotIn?: undefined | string[] | QueryPart<any>;
    nameLike?: undefined | string;
    nameILike?: undefined | string;
    nameNotLike?: undefined | string;
    scheduledAt?: undefined | Date;
    scheduledAtNotEqual?: undefined | Date;
    scheduledAtIn?: undefined | Date[] | QueryPart<any>;
    scheduledAtNotIn?: undefined | Date[] | QueryPart<any>;
    scheduledAtGreaterThan?: undefined | Date;
    scheduledAtLowerThan?: undefined | Date;
    scheduledAtIsNull?: undefined | boolean;
    scheduledAtIsNotNull?: undefined | boolean;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
    statusExists?: undefined | SqlJobStatusAggregateWhere;
    statusNotExists?: undefined | SqlJobStatusAggregateWhere;
  };
  type SqlCategoryOrderBy =
    | QueryPart<any>
    | ("id" | "label" | "createdAt" | "updatedAt")[];
  type SqlCategoryOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    label?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type CompasSqlOrderBy = "ASC" | "DESC";
  type SqlCategoryMetaOrderBy =
    | QueryPart<any>
    | ("id" | "category" | "isHighlighted")[];
  type SqlCategoryMetaOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    category?: undefined | CompasSqlOrderBy;
    isHighlighted?: undefined | CompasSqlOrderByOptionalField;
  };
  type CompasSqlOrderByOptionalField =
    | "ASC"
    | "DESC"
    | "ASC NULLS FIRST"
    | "DESC NULLS LAST";
  type SqlJobStatusAggregateOrderBy = QueryPart<any> | ("id" | "job")[];
  type SqlJobStatusAggregateOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    job?: undefined | CompasSqlOrderBy;
  };
  type SqlPostOrderBy =
    | QueryPart<any>
    | ("id" | "writer" | "title" | "createdAt" | "updatedAt" | "deletedAt")[];
  type SqlPostOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    writer?: undefined | CompasSqlOrderBy;
    title?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type SqlPostCategoryOrderBy =
    | QueryPart<any>
    | ("id" | "category" | "post" | "createdAt" | "updatedAt")[];
  type SqlPostCategoryOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    category?: undefined | CompasSqlOrderBy;
    post?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type SqlPostageOrderBy =
    | QueryPart<any>
    | ("id" | "images" | "post" | "createdAt" | "updatedAt" | "deletedAt")[];
  type SqlPostageOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    images?: undefined | CompasSqlOrderBy;
    post?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type SqlUserOrderBy =
    | QueryPart<any>
    | ("id" | "email" | "isCool" | "createdAt" | "updatedAt" | "deletedAt")[];
  type SqlUserOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    email?: undefined | CompasSqlOrderBy;
    isCool?: undefined | CompasSqlOrderByOptionalField;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreFileOrderBy =
    | QueryPart<any>
    | ("id" | "bucketName" | "createdAt" | "updatedAt" | "deletedAt")[];
  type StoreFileOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    bucketName?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreFileGroupOrderBy =
    | QueryPart<any>
    | (
        | "id"
        | "order"
        | "file"
        | "parent"
        | "createdAt"
        | "updatedAt"
        | "deletedAt"
      )[];
  type StoreFileGroupOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    order?: undefined | CompasSqlOrderByOptionalField;
    file?: undefined | CompasSqlOrderByOptionalField;
    parent?: undefined | CompasSqlOrderByOptionalField;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
    deletedAt?: undefined | CompasSqlOrderByOptionalField;
  };
  type StoreJobOrderBy =
    | QueryPart<any>
    | (
        | "id"
        | "isComplete"
        | "name"
        | "scheduledAt"
        | "createdAt"
        | "updatedAt"
      )[];
  type StoreJobOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    isComplete?: undefined | CompasSqlOrderByOptionalField;
    name?: undefined | CompasSqlOrderBy;
    scheduledAt?: undefined | CompasSqlOrderByOptionalField;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type SqlCategoryInsertPartial = {
    id?: undefined | string;
    label: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlCategoryUpdatePartial = {
    label?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlCategoryMetaInsertPartial = {
    id?: undefined | string;
    isNew?: undefined | null | boolean;
    postCount: number;
    category: string;
    isHighlighted?: undefined | null | boolean;
  };
  type SqlCategoryMetaUpdatePartial = {
    isNew?: undefined | boolean;
    postCount?: undefined | number;
    category?: undefined | string;
    isHighlighted?: undefined | null | boolean;
  };
  type SqlJobStatusAggregateInsertPartial = {
    id?: undefined | string;
    job: number;
  };
  type SqlJobStatusAggregateUpdatePartial = { job?: undefined | number };
  type SqlPostInsertPartial = {
    id?: undefined | string;
    writer: string;
    body: string;
    title: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlPostUpdatePartial = {
    writer?: undefined | string;
    body?: undefined | string;
    title?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlPostCategoryInsertPartial = {
    id?: undefined | string;
    category: string;
    post: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlPostCategoryUpdatePartial = {
    category?: undefined | string;
    post?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlPostageInsertPartial = {
    id?: undefined | string;
    value: number;
    images: string;
    post: string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlPostageUpdatePartial = {
    value?: undefined | number;
    images?: undefined | string;
    post?: undefined | string;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlUserInsertPartial = {
    id?: undefined | string;
    authKey: string;
    email: string;
    nickName: string;
    isCool?: undefined | null | "true" | "false";
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type SqlUserUpdatePartial = {
    authKey?: undefined | string;
    email?: undefined | string;
    nickName?: undefined | string;
    isCool?: undefined | null | "true" | "false";
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileInsertPartial = {
    id?: undefined | string;
    contentLength: number;
    bucketName: string;
    contentType: string;
    name: string;
    meta?:
      | undefined
      | {
          transforms?: undefined | any;
          transformedFromOriginal?: undefined | string;
        };
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileUpdatePartial = {
    contentLength?: undefined | number;
    bucketName?: undefined | string;
    contentType?: undefined | string;
    name?: undefined | string;
    meta?:
      | undefined
      | {
          transforms?: undefined | any;
          transformedFromOriginal?: undefined | string;
        };
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileGroupInsertPartial = {
    id?: undefined | string;
    order?: undefined | number;
    file?: undefined | null | string;
    parent?: undefined | null | string;
    name?: undefined | null | string;
    meta?: undefined | {};
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreFileGroupUpdatePartial = {
    order?: undefined | number;
    file?: undefined | null | string;
    parent?: undefined | null | string;
    name?: undefined | null | string;
    meta?: undefined | {};
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
    deletedAt?: undefined | null | Date;
  };
  type StoreJobInsertPartial = {
    id?: undefined | number;
    isComplete?: undefined | boolean;
    handlerTimeout?: undefined | null | number;
    priority?: undefined | number;
    retryCount?: undefined | number;
    name: string;
    scheduledAt?: undefined | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreJobUpdatePartial = {
    isComplete?: undefined | boolean;
    handlerTimeout?: undefined | null | number;
    priority?: undefined | number;
    retryCount?: undefined | number;
    name?: undefined | string;
    scheduledAt?: undefined | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type SqlCategoryQueryBuilder = {
    where?: undefined | SqlCategoryWhere;
    orderBy?: undefined | SqlCategoryOrderBy;
    orderBySpec?: undefined | SqlCategoryOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    posts?: undefined | SqlPostCategoryQueryBuilder;
    viaPosts?: undefined | SqlPostCategoryQueryTraverser;
    meta?: undefined | SqlCategoryMetaQueryBuilder;
    viaMeta?: undefined | SqlCategoryMetaQueryTraverser;
  };
  type SqlPostCategoryQueryBuilder = {
    where?: undefined | SqlPostCategoryWhere;
    orderBy?: undefined | SqlPostCategoryOrderBy;
    orderBySpec?: undefined | SqlPostCategoryOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    post?: undefined | SqlPostQueryBuilder;
    viaPost?: undefined | SqlPostQueryTraverser;
    category?: undefined | SqlCategoryQueryBuilder;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlPostQueryBuilder = {
    where?: undefined | SqlPostWhere;
    orderBy?: undefined | SqlPostOrderBy;
    orderBySpec?: undefined | SqlPostOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    writer?: undefined | SqlUserQueryBuilder;
    viaWriter?: undefined | SqlUserQueryTraverser;
    categories?: undefined | SqlPostCategoryQueryBuilder;
    viaCategories?: undefined | SqlPostCategoryQueryTraverser;
    postages?: undefined | SqlPostageQueryBuilder;
    viaPostages?: undefined | SqlPostageQueryTraverser;
  };
  type SqlUserQueryBuilder = {
    where?: undefined | SqlUserWhere;
    orderBy?: undefined | SqlUserOrderBy;
    orderBySpec?: undefined | SqlUserOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    posts?: undefined | SqlPostQueryBuilder;
    viaPosts?: undefined | SqlPostQueryTraverser;
  };
  type SqlPostQueryTraverser = {
    where?: undefined | SqlPostWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaWriter?: undefined | SqlUserQueryTraverser;
    viaCategories?: undefined | SqlPostCategoryQueryTraverser;
    viaPostages?: undefined | SqlPostageQueryTraverser;
  };
  type SqlUserQueryTraverser = {
    where?: undefined | SqlUserWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPosts?: undefined | SqlPostQueryTraverser;
  };
  type SqlPostCategoryQueryTraverser = {
    where?: undefined | SqlPostCategoryWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPost?: undefined | SqlPostQueryTraverser;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlCategoryQueryTraverser = {
    where?: undefined | SqlCategoryWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPosts?: undefined | SqlPostCategoryQueryTraverser;
    viaMeta?: undefined | SqlCategoryMetaQueryTraverser;
  };
  type SqlCategoryMetaQueryTraverser = {
    where?: undefined | SqlCategoryMetaWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlPostageQueryTraverser = {
    where?: undefined | SqlPostageWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaPost?: undefined | SqlPostQueryTraverser;
    viaImages?: undefined | StoreFileGroupQueryTraverser;
  };
  type StoreFileGroupQueryTraverser = {
    where?: undefined | StoreFileGroupWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaFile?: undefined | StoreFileQueryTraverser;
    viaParent?: undefined | StoreFileGroupQueryTraverser;
    viaChildren?: undefined | StoreFileGroupQueryTraverser;
    viaPostageImages?: undefined | SqlPostageQueryTraverser;
  };
  type StoreFileQueryTraverser = {
    where?: undefined | StoreFileWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaGroup?: undefined | StoreFileGroupQueryTraverser;
  };
  type SqlPostageQueryBuilder = {
    where?: undefined | SqlPostageWhere;
    orderBy?: undefined | SqlPostageOrderBy;
    orderBySpec?: undefined | SqlPostageOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    post?: undefined | SqlPostQueryBuilder;
    viaPost?: undefined | SqlPostQueryTraverser;
    images?: undefined | StoreFileGroupQueryBuilder;
    viaImages?: undefined | StoreFileGroupQueryTraverser;
  };
  type StoreFileGroupQueryBuilder = {
    where?: undefined | StoreFileGroupWhere;
    orderBy?: undefined | StoreFileGroupOrderBy;
    orderBySpec?: undefined | StoreFileGroupOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    file?: undefined | StoreFileQueryBuilder;
    viaFile?: undefined | StoreFileQueryTraverser;
    parent?: undefined | StoreFileGroupQueryBuilder;
    viaParent?: undefined | StoreFileGroupQueryTraverser;
    children?: undefined | StoreFileGroupQueryBuilder;
    viaChildren?: undefined | StoreFileGroupQueryTraverser;
    postageImages?: undefined | SqlPostageQueryBuilder;
    viaPostageImages?: undefined | SqlPostageQueryTraverser;
  };
  type StoreFileQueryBuilder = {
    where?: undefined | StoreFileWhere;
    orderBy?: undefined | StoreFileOrderBy;
    orderBySpec?: undefined | StoreFileOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    group?: undefined | StoreFileGroupQueryBuilder;
    viaGroup?: undefined | StoreFileGroupQueryTraverser;
  };
  type SqlCategoryMetaQueryBuilder = {
    where?: undefined | SqlCategoryMetaWhere;
    orderBy?: undefined | SqlCategoryMetaOrderBy;
    orderBySpec?: undefined | SqlCategoryMetaOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    category?: undefined | SqlCategoryQueryBuilder;
    viaCategory?: undefined | SqlCategoryQueryTraverser;
  };
  type SqlJobStatusAggregateQueryBuilder = {
    where?: undefined | SqlJobStatusAggregateWhere;
    orderBy?: undefined | SqlJobStatusAggregateOrderBy;
    orderBySpec?: undefined | SqlJobStatusAggregateOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    job?: undefined | StoreJobQueryBuilder;
    viaJob?: undefined | StoreJobQueryTraverser;
  };
  type StoreJobQueryBuilder = {
    where?: undefined | StoreJobWhere;
    orderBy?: undefined | StoreJobOrderBy;
    orderBySpec?: undefined | StoreJobOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
    status?: undefined | SqlJobStatusAggregateQueryBuilder;
    viaStatus?: undefined | SqlJobStatusAggregateQueryTraverser;
  };
  type SqlJobStatusAggregateQueryTraverser = {
    where?: undefined | SqlJobStatusAggregateWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaJob?: undefined | StoreJobQueryTraverser;
  };
  type StoreJobQueryTraverser = {
    where?: undefined | StoreJobWhere;
    limit?: undefined | number;
    offset?: undefined | number;
    viaStatus?: undefined | SqlJobStatusAggregateQueryTraverser;
  };
  type QueryResultSqlCategory = SqlCategory & {
    posts?: QueryResultSqlPostCategory[];
    meta?: QueryResultSqlCategoryMeta | string | number;
  };
  type QueryResultSqlCategoryMeta = SqlCategoryMeta & {
    category?: QueryResultSqlCategory | string | number;
  };
  type QueryResultSqlJobStatusAggregate = SqlJobStatusAggregate & {
    job?: QueryResultStoreJob | string | number;
  };
  type QueryResultSqlPost = SqlPost & {
    writer?: QueryResultSqlUser | string | number;
    categories?: QueryResultSqlPostCategory[];
    postages?: QueryResultSqlPostage[];
  };
  type QueryResultSqlPostCategory = SqlPostCategory & {
    post?: QueryResultSqlPost | string | number;
    category?: QueryResultSqlCategory | string | number;
  };
  type QueryResultSqlPostage = SqlPostage & {
    post?: QueryResultSqlPost | string | number;
    images?: QueryResultStoreFileGroup | string | number;
  };
  type QueryResultSqlUser = SqlUser & {
    posts?: QueryResultSqlPost[];
  };
  type QueryResultStoreFile = StoreFile & {
    group?: QueryResultStoreFileGroup | string | number;
  };
  type QueryResultStoreFileGroup = StoreFileGroup & {
    file?: QueryResultStoreFile | string | number;
    parent?: QueryResultStoreFileGroup | string | number;
    children?: QueryResultStoreFileGroup[];
    postageImages?: QueryResultSqlPostage | string | number;
  };
  type QueryResultStoreJob = StoreJob & {
    status?: QueryResultSqlJobStatusAggregate | string | number;
  };
  type ValidatorAnyOf = boolean | number;
  type ValidatorArray = boolean[];
  type ValidatorArrayConvert = ValidatorArray;
  type ValidatorArrayMinMax = ValidatorArray;
  type ValidatorBool = GithubApiActionsEnabled;
  type ValidatorBoolAllowNull = undefined | null | boolean;
  type ValidatorBoolConvert = GithubApiActionsEnabled;
  type ValidatorBoolDefault = GithubApiActionsEnabled;
  type ValidatorBoolOneOf = true;
  type ValidatorBoolOptional = undefined | boolean;
  type ValidatorDate = Date;
  type ValidatorDateAllowNull = undefined | null | Date;
  type ValidatorDateDefault = ValidatorDate;
  type ValidatorDateFuture = ValidatorDate;
  type ValidatorDateMax = ValidatorDate;
  type ValidatorDateMin = ValidatorDate;
  type ValidatorDateOptional = undefined | Date;
  type ValidatorDatePast = ValidatorDate;
  type ValidatorGeneric = { [key: number]: boolean };
  type ValidatorNumber = GithubApiAlertNumber;
  type ValidatorNumberConvert = GithubApiAlertNumber;
  type ValidatorNumberFloat = GithubApiAlertNumber;
  type ValidatorNumberMinMax = GithubApiAlertNumber;
  type ValidatorNumberOneOf = 1 | 3 | 5;
  type ValidatorObject = { bool: boolean; string: string };
  type ValidatorObjectLoose = ValidatorObject;
  type ValidatorObjectWithOptionalReference = { ref?: ValidatorObjectOptional };
  type ValidatorString = GithubApiSelectedActionsUrl;
  type ValidatorStringAllowNull = undefined | null | string;
  type ValidatorStringConvert = GithubApiSelectedActionsUrl;
  type ValidatorStringDisallowedCharacters = GithubApiSelectedActionsUrl;
  type ValidatorStringLower = GithubApiSelectedActionsUrl;
  type ValidatorStringMinMax = GithubApiSelectedActionsUrl;
  type ValidatorStringOneOf = "north" | "east";
  type ValidatorStringPattern = GithubApiSelectedActionsUrl;
  type ValidatorStringTrim = GithubApiSelectedActionsUrl;
  type ValidatorStringUpper = GithubApiSelectedActionsUrl;
  type ValidatorUuid = GithubApiSelectedActionsUrl;
  type DocParserBlock =
    | DocParserUnknownBlock
    | DocParserFunctionDeclarationBlock;
  type DocParserUnknownBlock = {
    type: "unknown";
    raw: string;
    range?: DocParserRange;
  };
  type DocParserRange =
    | undefined
    | {
        start: number;
        end: number;
        pkg: DocParserPackage;
        file: string;
        line?: undefined | string;
      };
  type DocParserPackage = "stdlib" | "cli" | "store" | "server";
  type DocParserFunctionDeclarationBlock = {
    type: "functionDeclaration";
    name?: undefined | string;
    summary?: undefined | string;
    description?: undefined | string;
    availableSince?: undefined | string;
    isVariable: boolean;
    parsedType: DocParserFunctionType;
    range?: DocParserRange;
  };
  type DocParserFunctionType = {
    type: "function";
    params: { name: string; description: string; type: DocParserType }[];
    returnType: DocParserType;
  };
  type DocParserType = DocParserLiteralType | DocParserFunctionType;
  type DocParserLiteralType = {
    type: "literal";
    value: string;
    isOptional?: undefined | boolean;
    defaultValue?: undefined | string;
    isDocBlockReference?: undefined | boolean;
  };
  type DocParserJSComment = {
    type: "MultiLine" | "SingleLine";
    value: string;
    range?: DocParserRange;
  };
  type CodeGenAnyOfType = {
    type: "anyOf";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {};
    internalSettings: {};
    values: CodeGenType[];
  };
  type CodeGenType =
    | CodeGenAnyType
    | CodeGenAnyOfType
    | CodeGenArrayType
    | CodeGenBooleanType
    | CodeGenDateType
    | CodeGenFileType
    | CodeGenGenericType
    | CodeGenNumberType
    | CodeGenObjectType
    | CodeGenReferenceType
    | CodeGenRelationType
    | CodeGenStringType
    | CodeGenUuidType
    | CodeGenRouteType;
  type CodeGenAnyType = {
    type: "any";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: { allowNull: boolean };
    internalSettings: {};
    rawValue?: undefined | string;
    rawValueImport: {
      javaScript?: undefined | string;
      typeScript?: undefined | string;
    };
    rawValidator?: undefined | string;
    rawValidatorImport: {
      javaScript?: undefined | string;
      typeScript?: undefined | string;
    };
  };
  type CodeGenArrayType = {
    type: "array";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {
      convert: boolean;
      min?: undefined | number;
      max?: undefined | number;
    };
    internalSettings: {};
    values: CodeGenType;
  };
  type CodeGenBooleanType = {
    type: "boolean";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: { convert: boolean; allowNull: boolean };
    internalSettings: {};
    oneOf?: undefined | boolean;
  };
  type CodeGenDateType = {
    type: "date";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {
      allowNull: boolean;
      min?: undefined | Date;
      max?: undefined | Date;
      inFuture?: undefined | boolean;
      inPast?: undefined | boolean;
    };
    internalSettings: {};
  };
  type CodeGenFileType = {
    type: "file";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: { mimeTypes?: undefined | string[] };
    internalSettings: {};
  };
  type CodeGenGenericType = {
    type: "generic";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {};
    internalSettings: {};
    keys: CodeGenType;
    values: CodeGenType;
  };
  type CodeGenNumberType = {
    type: "number";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {
      convert: boolean;
      floatingPoint: boolean;
      min?: undefined | number;
      max?: undefined | number;
      allowNull: boolean;
    };
    internalSettings: {};
    oneOf?: undefined | number[];
  };
  type CodeGenObjectType = {
    type: "object";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: { allowNull: boolean; strict: boolean };
    internalSettings: {};
    shortName?: undefined | string;
    keys: { [key: string]: CodeGenType };
    enableQueries: boolean;
    queryOptions?:
      | undefined
      | {
          withSoftDeletes: boolean;
          withDates: boolean;
          withPrimaryKey: boolean;
          isView: boolean;
          schema: string;
        };
    relations: CodeGenRelationType[];
    where?:
      | undefined
      | {
          type: string;
          rawType: CodeGenObjectType;
          fields: {
            key: string;
            name: string;
            isRelation: boolean;
            variant:
              | "equal"
              | "notEqual"
              | "in"
              | "notIn"
              | "greaterThan"
              | "lowerThan"
              | "isNull"
              | "isNotNull"
              | "includeNotNull"
              | "like"
              | "iLike"
              | "notLike"
              | "exists"
              | "notExists";
          }[];
        };
    orderBy?:
      | undefined
      | {
          type: string;
          specType: string;
          fields: { key: string; optional: boolean }[];
        };
    partial?:
      | undefined
      | {
          insertType: string;
          updateType: string;
          fields: {
            key: string;
            defaultValue?: undefined | string;
            hasSqlDefault: boolean;
            isJsonb: boolean;
          }[];
        };
  };
  type CodeGenRelationType = {
    type: "relation";
    subType: "manyToOne" | "oneToMany" | "oneToOne" | "oneToOneReverse";
    reference: CodeGenReferenceType;
    ownKey: string;
    referencedKey?: undefined | string;
    isOptional: boolean;
  };
  type CodeGenReferenceType = {
    type: "reference";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {};
    internalSettings: {};
    reference:
      | CodeGenType
      | {
          uniqueName?: undefined | string;
          group?: undefined | string;
          name?: undefined | string;
        };
  };
  type CodeGenStringType = {
    type: "string";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {
      convert: boolean;
      trim: boolean;
      lowerCase: boolean;
      upperCase: boolean;
      min: number;
      max?: undefined | number;
      pattern?: undefined | string;
      allowNull: boolean;
      disallowedCharacters?: undefined | string[];
    };
    internalSettings: {};
    oneOf?: undefined | string[];
  };
  type CodeGenUuidType = {
    type: "uuid";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: { allowNull: boolean };
    internalSettings: {};
  };
  type CodeGenRouteType = {
    type: "route";
    docString: string;
    isOptional: boolean;
    defaultValue?: undefined | string | boolean | number;
    uniqueName?: undefined | string;
    group?: undefined | string;
    name?: undefined | string;
    sql?:
      | undefined
      | { primary: boolean; searchable: boolean; hasDefaultValue: boolean };
    validator: {};
    internalSettings: { requestBodyType?: undefined | "json" | "form-data" };
    method: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "PATCH";
    idempotent: boolean;
    path: string;
    tags: string[];
    query?: undefined | CodeGenType;
    params?: undefined | CodeGenType;
    body?: undefined | CodeGenType;
    files?: undefined | CodeGenType;
    response?: undefined | CodeGenType;
  };
  type CodeGenContext = {
    options: CodeGenGenerateOpts;
    structure: CodeGenStructure;
    extension: ".js" | ".ts";
    importExtension: string;
    outputFiles: CodeGenFile[];
    errors: (
      | { key: "structureReservedGroupName"; groupName: string }
      | { key: "structureUnknownOrEmptyGroup"; groupName: string }
      | { key: "sqlMissingPrimaryKey"; typeName: string }
      | {
          key: "sqlForgotEnableQueries";
          typeName: string;
          referencedByType: string;
        }
      | {
          key: "sqlMissingOneToMany";
          referencedByGroup: string;
          referencedByType: string;
          typeName: string;
          relationOwnKey: string;
        }
      | {
          key: "sqlUnusedOneToMany";
          type: string;
          referencedType: string;
          ownKey: string;
        }
      | { key: "sqlEnableValidator" }
      | {
          key: "sqlDuplicateShortName";
          shortName: string;
          firstName: string;
          secondName: string;
        }
      | { key: "sqlReservedRelationKey"; type: string; ownKey: string }
      | { key: "sqlUsedRelationKey"; type: string; ownKey: string }
    )[];
  };
  type CodeGenGenerateOpts = {
    enabledGroups: string[];
    isBrowser: boolean;
    isNode: boolean;
    isNodeServer: boolean;
    enabledGenerators: (
      | "type"
      | "validator"
      | "router"
      | "sql"
      | "apiClient"
      | "reactQuery"
    )[];
    useTypescript: boolean;
    dumpStructure: boolean;
    dumpApiStructure: boolean;
    dumpPostgres: boolean;
    fileHeader: string;
    outputDirectory: string;
  };
  type CodeGenStructure = { [key: string]: { [key: string]: CodeGenType } };
  type CodeGenFile = { relativePath: string; contents: string };
  type CodeGenTemplateState = { phase: "init" | "collect" | "finish" };
  type CodeGenTypeSettings = {
    isJSON?: undefined | boolean;
    nestedIsJSON?: undefined | boolean;
    useDefaults?: undefined | boolean;
    useTypescript?: undefined | boolean;
    isNode?: undefined | boolean;
    isBrowser?: undefined | boolean;
    suffix?: undefined | string;
    fileTypeIO?: undefined | "input" | "outputRouter" | "outputClient";
  };
  type StoreImageTransformOptions = { q: number; w: number };
  type StoreJobInterval = {
    years?: undefined | number;
    months?: undefined | number;
    days?: undefined | number;
    hours?: undefined | number;
    minutes?: undefined | number;
    seconds?: undefined | number;
  };
  type StoreSession = {
    expires: Date;
    data: any;
    id: string;
    createdAt: Date;
    updatedAt: Date;
  };
  type StoreSessionWhere = {
    $raw?: undefined | QueryPart<any>;
    $or?: undefined | StoreSessionWhere[];
    id?: undefined | string;
    idNotEqual?: undefined | string;
    idIn?: undefined | string[] | QueryPart<any>;
    idNotIn?: undefined | string[] | QueryPart<any>;
    expires?: undefined | Date;
    expiresNotEqual?: undefined | Date;
    expiresIn?: undefined | Date[] | QueryPart<any>;
    expiresNotIn?: undefined | Date[] | QueryPart<any>;
    expiresGreaterThan?: undefined | Date;
    expiresLowerThan?: undefined | Date;
    createdAt?: undefined | Date;
    createdAtNotEqual?: undefined | Date;
    createdAtIn?: undefined | Date[] | QueryPart<any>;
    createdAtNotIn?: undefined | Date[] | QueryPart<any>;
    createdAtGreaterThan?: undefined | Date;
    createdAtLowerThan?: undefined | Date;
    createdAtIsNull?: undefined | boolean;
    createdAtIsNotNull?: undefined | boolean;
    updatedAt?: undefined | Date;
    updatedAtNotEqual?: undefined | Date;
    updatedAtIn?: undefined | Date[] | QueryPart<any>;
    updatedAtNotIn?: undefined | Date[] | QueryPart<any>;
    updatedAtGreaterThan?: undefined | Date;
    updatedAtLowerThan?: undefined | Date;
    updatedAtIsNull?: undefined | boolean;
    updatedAtIsNotNull?: undefined | boolean;
  };
  type StoreSessionOrderBy =
    | QueryPart<any>
    | ("id" | "expires" | "createdAt" | "updatedAt")[];
  type StoreSessionOrderBySpec = {
    id?: undefined | CompasSqlOrderBy;
    expires?: undefined | CompasSqlOrderBy;
    createdAt?: undefined | CompasSqlOrderBy;
    updatedAt?: undefined | CompasSqlOrderBy;
  };
  type StoreSessionInsertPartial = {
    id?: undefined | string;
    expires: Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreSessionUpdatePartial = {
    expires?: undefined | Date;
    data?: undefined | any;
    createdAt?: undefined | Date;
    updatedAt?: undefined | Date;
  };
  type StoreSessionQueryBuilder = {
    where?: undefined | StoreSessionWhere;
    orderBy?: undefined | StoreSessionOrderBy;
    orderBySpec?: undefined | StoreSessionOrderBySpec;
    as?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
  };
  type StoreSessionQueryTraverser = {
    where?: undefined | StoreSessionWhere;
    limit?: undefined | number;
    offset?: undefined | number;
  };
  type QueryResultStoreSession = StoreSession & {};
}
