// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

import { query } from "@lbu/store";
import {
  fileFields,
  fileGroupFields,
  fileGroupOrderBy,
  fileGroupViewFields,
  fileGroupViewOrderBy,
  fileGroupViewWhere,
  fileGroupWhere,
  fileOrderBy,
  fileWhere,
  jobFields,
  jobOrderBy,
  jobWhere,
  sessionFields,
  sessionOrderBy,
  sessionWhere,
} from "./query-partials.js";
/**
 * @name TraverseFile
 * @typedef {object}
 * @property {(where?: StoreFileGroupWhere) => TraverseFileGroup} getGroup
 * @property {(where?: StoreFileGroupViewWhere) => TraverseFileGroupView} getGroupView
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreFile[]>} exec
 */
/**
 * @param {StoreFileWhere} [where={}]
 * @param {QueryPart|undefined} [queryPart]
 * @returns {TraverseFile}
 */
export function traverseFile(where = {}, queryPart) {
  const q = query`
FROM "file" f
WHERE ${fileWhere(where)}
${queryPart}
`;
  return {
    /**
     * @param {StoreFileGroupWhere} [where={}]
     * @returns {TraverseFileGroup}
     */
    getGroup(where = {}) {
      return traverseFileGroup(
        where,
        query`
AND fg."file"  = ANY(
SELECT f."id"
${q}
)
`,
      );
    },
    /**
     * @param {StoreFileGroupViewWhere} [where={}]
     * @returns {TraverseFileGroupView}
     */
    getGroupView(where = {}) {
      return traverseFileGroupView(
        where,
        query`
AND fgv."file"  = ANY(
SELECT f."id"
${q}
)
`,
      );
    },
    get queryPart() {
      return query`
SELECT ${fileFields()}
${q}
ORDER BY ${fileOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${fileFields()}
${q}
ORDER BY ${fileOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseFileGroup
 * @typedef {object}
 * @property {(where?: StoreFileWhere) => TraverseFile} getFile
 * @property {(where?: StoreFileGroupWhere) => TraverseFileGroup} getParent
 * @property {(where?: StoreFileGroupWhere) => TraverseFileGroup} getChildren
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreFileGroup[]>} exec
 */
/**
 * @param {StoreFileGroupWhere} [where={}]
 * @param {QueryPart|undefined} [queryPart]
 * @returns {TraverseFileGroup}
 */
export function traverseFileGroup(where = {}, queryPart) {
  const q = query`
FROM "fileGroup" fg
WHERE ${fileGroupWhere(where)}
${queryPart}
`;
  return {
    /**
     * @param {StoreFileWhere} [where={}]
     * @returns {TraverseFile}
     */
    getFile(where = {}) {
      return traverseFile(
        where,
        query`
AND f."id"  = ANY(
SELECT fg."file"
${q}
)
`,
      );
    },
    /**
     * @param {StoreFileGroupWhere} [where={}]
     * @returns {TraverseFileGroup}
     */
    getParent(where = {}) {
      return traverseFileGroup(
        where,
        query`
AND fg."id"  = ANY(
SELECT fg."parent"
${q}
)
`,
      );
    },
    /**
     * @param {StoreFileGroupWhere} [where={}]
     * @returns {TraverseFileGroup}
     */
    getChildren(where = {}) {
      return traverseFileGroup(
        where,
        query`
AND fg."parent"  = ANY(
SELECT fg."id"
${q}
)
`,
      );
    },
    get queryPart() {
      return query`
SELECT ${fileGroupFields()}
${q}
ORDER BY ${fileGroupOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${fileGroupFields()}
${q}
ORDER BY ${fileGroupOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseFileGroupView
 * @typedef {object}
 * @property {(where?: StoreFileWhere) => TraverseFile} getFile
 * @property {(where?: StoreFileGroupViewWhere) => TraverseFileGroupView} getParent
 * @property {(where?: StoreFileGroupViewWhere) => TraverseFileGroupView} getChildren
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreFileGroupView[]>} exec
 */
/**
 * @param {StoreFileGroupViewWhere} [where={}]
 * @param {QueryPart|undefined} [queryPart]
 * @returns {TraverseFileGroupView}
 */
export function traverseFileGroupView(where = {}, queryPart) {
  const q = query`
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(where)}
${queryPart}
`;
  return {
    /**
     * @param {StoreFileWhere} [where={}]
     * @returns {TraverseFile}
     */
    getFile(where = {}) {
      return traverseFile(
        where,
        query`
AND f."id"  = ANY(
SELECT fgv."file"
${q}
)
`,
      );
    },
    /**
     * @param {StoreFileGroupViewWhere} [where={}]
     * @returns {TraverseFileGroupView}
     */
    getParent(where = {}) {
      return traverseFileGroupView(
        where,
        query`
AND fgv."id"  = ANY(
SELECT fgv."parent"
${q}
)
`,
      );
    },
    /**
     * @param {StoreFileGroupViewWhere} [where={}]
     * @returns {TraverseFileGroupView}
     */
    getChildren(where = {}) {
      return traverseFileGroupView(
        where,
        query`
AND fgv."parent"  = ANY(
SELECT fgv."id"
${q}
)
`,
      );
    },
    get queryPart() {
      return query`
SELECT ${fileGroupViewFields()}
${q}
ORDER BY ${fileGroupViewOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${fileGroupViewFields()}
${q}
ORDER BY ${fileGroupViewOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseJob
 * @typedef {object}
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreJob[]>} exec
 */
/**
 * @param {StoreJobWhere} [where={}]
 * @param {QueryPart|undefined} [queryPart]
 * @returns {TraverseJob}
 */
export function traverseJob(where = {}, queryPart) {
  const q = query`
FROM "job" j
WHERE ${jobWhere(where)}
${queryPart}
`;
  return {
    get queryPart() {
      return query`
SELECT ${jobFields()}
${q}
ORDER BY ${jobOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${jobFields()}
${q}
ORDER BY ${jobOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseSession
 * @typedef {object}
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreSession[]>} exec
 */
/**
 * @param {StoreSessionWhere} [where={}]
 * @param {QueryPart|undefined} [queryPart]
 * @returns {TraverseSession}
 */
export function traverseSession(where = {}, queryPart) {
  const q = query`
FROM "session" s
WHERE ${sessionWhere(where)}
${queryPart}
`;
  return {
    get queryPart() {
      return query`
SELECT ${sessionFields()}
${q}
ORDER BY ${sessionOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${sessionFields()}
${q}
ORDER BY ${sessionOrderBy()}
`.exec(sql);
    },
  };
}
