// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

import { query } from "@lbu/store";
import {
  fileFields,
  fileGroupFields,
  fileGroupOrderBy,
  fileGroupViewFields,
  fileGroupViewOrderBy,
  fileGroupViewWhere,
  fileGroupWhere,
  fileOrderBy,
  fileWhere,
  jobFields,
  jobOrderBy,
  jobWhere,
  sessionFields,
  sessionOrderBy,
  sessionWhere,
} from "./query-partials.js";
/**
 * @name TraverseFile
 * @typedef {object}
 * @property {function(where: StoreFileGroupWhere=): TraverseFileGroup} getGroup
 * @property {function(where: StoreFileGroupViewWhere=): TraverseFileGroupView} getGroupView
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreFile[]>} exec
 */
/**
 * @param {StoreFileWhere} [thisWhere={}]
 * @returns {TraverseFile}
 */
export function traverseFile(thisWhere = {}) {
  return {
    /**
     * @param {StoreFileGroupWhere} [where={}]
     * @returns {TraverseFileGroup}
     */
    getGroup(where = {}) {
      where.fileIn = query`
SELECT f."id"
FROM "file" f
WHERE ${fileWhere(thisWhere)}
`;
      return traverseFileGroup(where);
    },
    /**
     * @param {StoreFileGroupViewWhere} [where={}]
     * @returns {TraverseFileGroupView}
     */
    getGroupView(where = {}) {
      where.fileIn = query`
SELECT f."id"
FROM "file" f
WHERE ${fileWhere(thisWhere)}
`;
      return traverseFileGroupView(where);
    },
    get queryPart() {
      return query`
SELECT ${fileFields()}
FROM "file" f
WHERE ${fileWhere(thisWhere)}
ORDER BY ${fileOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${fileFields()}
FROM "file" f
WHERE ${fileWhere(thisWhere)}
ORDER BY ${fileOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseFileGroup
 * @typedef {object}
 * @property {function(where: StoreFileWhere=): TraverseFile} getFile
 * @property {function(where: StoreFileGroupWhere=): TraverseFileGroup} getParent
 * @property {function(where: StoreFileGroupWhere=): TraverseFileGroup} getChildren
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreFileGroup[]>} exec
 */
/**
 * @param {StoreFileGroupWhere} [thisWhere={}]
 * @returns {TraverseFileGroup}
 */
export function traverseFileGroup(thisWhere = {}) {
  return {
    /**
     * @param {StoreFileWhere} [where={}]
     * @returns {TraverseFile}
     */
    getFile(where = {}) {
      where.idIn = query`
SELECT fg."file"
FROM "fileGroup" fg
WHERE ${fileGroupWhere(thisWhere)}
`;
      return traverseFile(where);
    },
    /**
     * @param {StoreFileGroupWhere} [where={}]
     * @returns {TraverseFileGroup}
     */
    getParent(where = {}) {
      where.idIn = query`
SELECT fg."parent"
FROM "fileGroup" fg
WHERE ${fileGroupWhere(thisWhere)}
`;
      return traverseFileGroup(where);
    },
    /**
     * @param {StoreFileGroupWhere} [where={}]
     * @returns {TraverseFileGroup}
     */
    getChildren(where = {}) {
      where.parentIn = query`
SELECT fg."id"
FROM "fileGroup" fg
WHERE ${fileGroupWhere(thisWhere)}
`;
      return traverseFileGroup(where);
    },
    get queryPart() {
      return query`
SELECT ${fileGroupFields()}
FROM "fileGroup" fg
WHERE ${fileGroupWhere(thisWhere)}
ORDER BY ${fileGroupOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${fileGroupFields()}
FROM "fileGroup" fg
WHERE ${fileGroupWhere(thisWhere)}
ORDER BY ${fileGroupOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseFileGroupView
 * @typedef {object}
 * @property {function(where: StoreFileWhere=): TraverseFile} getFile
 * @property {function(where: StoreFileGroupViewWhere=): TraverseFileGroupView} getParent
 * @property {function(where: StoreFileGroupViewWhere=): TraverseFileGroupView} getChildren
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreFileGroupView[]>} exec
 */
/**
 * @param {StoreFileGroupViewWhere} [thisWhere={}]
 * @returns {TraverseFileGroupView}
 */
export function traverseFileGroupView(thisWhere = {}) {
  return {
    /**
     * @param {StoreFileWhere} [where={}]
     * @returns {TraverseFile}
     */
    getFile(where = {}) {
      where.idIn = query`
SELECT fgv."file"
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(thisWhere)}
`;
      return traverseFile(where);
    },
    /**
     * @param {StoreFileGroupViewWhere} [where={}]
     * @returns {TraverseFileGroupView}
     */
    getParent(where = {}) {
      where.idIn = query`
SELECT fgv."parent"
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(thisWhere)}
`;
      return traverseFileGroupView(where);
    },
    /**
     * @param {StoreFileGroupViewWhere} [where={}]
     * @returns {TraverseFileGroupView}
     */
    getChildren(where = {}) {
      where.parentIn = query`
SELECT fgv."id"
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(thisWhere)}
`;
      return traverseFileGroupView(where);
    },
    get queryPart() {
      return query`
SELECT ${fileGroupViewFields()}
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(thisWhere)}
ORDER BY ${fileGroupViewOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${fileGroupViewFields()}
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(thisWhere)}
ORDER BY ${fileGroupViewOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseJob
 * @typedef {object}
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreJob[]>} exec
 */
/**
 * @param {StoreJobWhere} [thisWhere={}]
 * @returns {TraverseJob}
 */
export function traverseJob(thisWhere = {}) {
  return {
    get queryPart() {
      return query`
SELECT ${jobFields()}
FROM "job" j
WHERE ${jobWhere(thisWhere)}
ORDER BY ${jobOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${jobFields()}
FROM "job" j
WHERE ${jobWhere(thisWhere)}
ORDER BY ${jobOrderBy()}
`.exec(sql);
    },
  };
}
/**
 * @name TraverseSession
 * @typedef {object}
 * @property {QueryPart} queryPart
 * @property {function(sql: Postgres): Promise<StoreSession[]>} exec
 */
/**
 * @param {StoreSessionWhere} [thisWhere={}]
 * @returns {TraverseSession}
 */
export function traverseSession(thisWhere = {}) {
  return {
    get queryPart() {
      return query`
SELECT ${sessionFields()}
FROM "session" s
WHERE ${sessionWhere(thisWhere)}
ORDER BY ${sessionOrderBy()}
`;
    },
    exec(sql) {
      return query`
SELECT ${sessionFields()}
FROM "session" s
WHERE ${sessionWhere(thisWhere)}
ORDER BY ${sessionOrderBy()}
`.exec(sql);
    },
  };
}
