// @ts-nocheck
// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";
import { isQueryPart } from "@compas/store";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

const objectKeys599447075 = new Set([
  "bucketName",
  "contentLength",
  "contentType",
  "name",
  "meta",
  "id",
  "createdAt",
  "updatedAt",
  "deletedAt",
]);
const objectKeys2144828802 = new Set(["transforms", "transformedFromOriginal"]);
const objectKeys2060025506 = new Set([
  "name",
  "order",
  "meta",
  "id",
  "file",
  "parent",
  "createdAt",
  "updatedAt",
  "deletedAt",
]);
const objectKeys420878393 = new Set([""]);
const objectKeys376443596 = new Set(["q", "w"]);
const objectKeys1781782332 = new Set([
  "id",
  "isComplete",
  "priority",
  "scheduledAt",
  "name",
  "data",
  "retryCount",
  "handlerTimeout",
  "createdAt",
  "updatedAt",
]);
const objectKeys430889951 = new Set([
  "years",
  "months",
  "days",
  "hours",
  "minutes",
  "seconds",
]);
const objectKeys1108679019 = new Set([
  "expires",
  "data",
  "id",
  "createdAt",
  "updatedAt",
]);
const objectKeys2074494218 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "idLike",
  "idNotLike",
  "bucketName",
  "bucketNameNotEqual",
  "bucketNameIn",
  "bucketNameNotIn",
  "bucketNameLike",
  "bucketNameILike",
  "bucketNameNotLike",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
  "deletedAt",
  "deletedAtNotEqual",
  "deletedAtIn",
  "deletedAtNotIn",
  "deletedAtGreaterThan",
  "deletedAtLowerThan",
  "deletedAtIncludeNotNull",
  "groupExists",
  "groupNotExists",
]);
const objectKeys153017499 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "idLike",
  "idNotLike",
  "order",
  "orderNotEqual",
  "orderIn",
  "orderNotIn",
  "orderGreaterThan",
  "orderLowerThan",
  "orderIsNull",
  "orderIsNotNull",
  "file",
  "fileNotEqual",
  "fileIn",
  "fileNotIn",
  "fileLike",
  "fileNotLike",
  "fileIsNull",
  "fileIsNotNull",
  "parent",
  "parentNotEqual",
  "parentIn",
  "parentNotIn",
  "parentLike",
  "parentNotLike",
  "parentIsNull",
  "parentIsNotNull",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
  "deletedAt",
  "deletedAtNotEqual",
  "deletedAtIn",
  "deletedAtNotIn",
  "deletedAtGreaterThan",
  "deletedAtLowerThan",
  "deletedAtIncludeNotNull",
  "childrenExists",
  "childrenNotExists",
]);
const objectKeys1257773835 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "idGreaterThan",
  "idLowerThan",
  "isComplete",
  "isCompleteIsNull",
  "isCompleteIsNotNull",
  "name",
  "nameNotEqual",
  "nameIn",
  "nameNotIn",
  "nameLike",
  "nameILike",
  "nameNotLike",
  "scheduledAt",
  "scheduledAtNotEqual",
  "scheduledAtIn",
  "scheduledAtNotIn",
  "scheduledAtGreaterThan",
  "scheduledAtLowerThan",
  "scheduledAtIsNull",
  "scheduledAtIsNotNull",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
]);
const objectKeys500057262 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "idLike",
  "idNotLike",
  "expires",
  "expiresNotEqual",
  "expiresIn",
  "expiresNotIn",
  "expiresGreaterThan",
  "expiresLowerThan",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
]);
const objectKeys163358845 = new Set([
  "id",
  "bucketName",
  "createdAt",
  "updatedAt",
  "deletedAt",
]);
const objectKeys322356638 = new Set([
  "id",
  "order",
  "file",
  "parent",
  "createdAt",
  "updatedAt",
  "deletedAt",
]);
const objectKeys280827708 = new Set([
  "id",
  "isComplete",
  "name",
  "scheduledAt",
  "createdAt",
  "updatedAt",
]);
const objectKeys144635851 = new Set([
  "id",
  "expires",
  "createdAt",
  "updatedAt",
]);
const objectKeys310044624 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
  "group",
  "viaGroup",
]);
const objectKeys1862233461 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
  "file",
  "viaFile",
  "parent",
  "viaParent",
  "children",
  "viaChildren",
]);
const objectKeys1069465749 = new Set(["where", "limit", "offset", "viaGroup"]);
const objectKeys1274599578 = new Set([
  "where",
  "limit",
  "offset",
  "viaFile",
  "viaParent",
  "viaChildren",
]);
const objectKeys343387919 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
]);
const objectKeys1952914356 = new Set(["where", "limit", "offset"]);
const objectKeys647856360 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
]);
const objectKeys1805657267 = new Set(["where", "limit", "offset"]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator186795873(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator293751998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|any, errors?: InternalError[] }}
 */
export function anonymousValidator1585770956(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string, errors?: InternalError[] }}
 */
export function anonymousValidator1443576836(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"transforms"?: undefined|any, "transformedFromOriginal"?: undefined|string, }, errors?: InternalError[] }}
 */
export function anonymousValidator2144828802(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2144828802.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1727069561 = anonymousValidator1585770956(
    value["transforms"],
    `${propertyPath}.transforms`,
  );
  if (val1727069561.errors) {
    errors = errors.concat(val1727069561.errors.flat(2));
  } else {
    result["transforms"] = val1727069561.value;
  }
  const val1264198726 = anonymousValidator1443576836(
    value["transformedFromOriginal"],
    `${propertyPath}.transformedFromOriginal`,
  );
  if (val1264198726.errors) {
    errors = errors.concat(val1264198726.errors.flat(2));
  } else {
    result["transformedFromOriginal"] = val1264198726.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator981662321(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  value = value.trim();
  if (value.length < 36) {
    const min = 36;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 36) {
    const max = 36;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  value = value.toLowerCase();
  if (
    !/^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
      value,
    )
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator56355924(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.uuid.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator981662321(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string, errors?: InternalError[] }}
 */
export function anonymousValidator852571656(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 24) {
    const min = 24;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 29) {
    const max = 29;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  if (
    !/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/gi.test(
      value,
    )
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: Date, errors?: InternalError[] }}
 */
export function anonymousValidator1389014320(value, propertyPath) {
  if (isNil(value)) {
    return { value: new Date() };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  let date = new Date(value);
  if (typeof value === "string") {
    value = anonymousValidator852571656(value, propertyPath);
    if (value.errors) {
      return value;
    }
    if (!value.value) {
      return { value: new Date() };
    }
    if (!value.value) {
      return { value: value.value };
    }
    date = new Date(value.value);
  }
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|Date, errors?: InternalError[] }}
 */
export function anonymousValidator1988053796(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  let date = new Date(value);
  if (typeof value === "string") {
    value = anonymousValidator852571656(value, propertyPath);
    if (value.errors) {
      return value;
    }
    if (!value.value) {
      return { value: value.value };
    }
    date = new Date(value.value);
  }
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"bucketName": string, "contentLength": number, "contentType": string, "name": string, "meta": StoreFileMeta, "id": string, "createdAt": Date, "updatedAt": Date, "deletedAt"?: undefined|Date, }, errors?: InternalError[] }}
 */
export function anonymousValidator599447075(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys599447075.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1117008789 = anonymousValidator186795873(
    value["bucketName"],
    `${propertyPath}.bucketName`,
  );
  if (val1117008789.errors) {
    errors = errors.concat(val1117008789.errors.flat(2));
  } else {
    result["bucketName"] = val1117008789.value;
  }
  const val540713793 = anonymousValidator293751998(
    value["contentLength"],
    `${propertyPath}.contentLength`,
  );
  if (val540713793.errors) {
    errors = errors.concat(val540713793.errors.flat(2));
  } else {
    result["contentLength"] = val540713793.value;
  }
  const val389131437 = anonymousValidator186795873(
    value["contentType"],
    `${propertyPath}.contentType`,
  );
  if (val389131437.errors) {
    errors = errors.concat(val389131437.errors.flat(2));
  } else {
    result["contentType"] = val389131437.value;
  }
  const val3373707 = anonymousValidator186795873(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val3347973 = anonymousValidator2144828802(
    value["meta"],
    `${propertyPath}.meta`,
  );
  if (val3347973.errors) {
    errors = errors.concat(val3347973.errors.flat(2));
  } else {
    result["meta"] = val3347973.value;
  }
  const val3355 = anonymousValidator56355924(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val598371643 = anonymousValidator1389014320(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator1389014320(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val358705620 = anonymousValidator1988053796(
    value["deletedAt"],
    `${propertyPath}.deletedAt`,
  );
  if (val358705620.errors) {
    errors = errors.concat(val358705620.errors.flat(2));
  } else {
    result["deletedAt"] = val358705620.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator1789497143(value, propertyPath) {
  if (isNil(value)) {
    return { value: Math.floor(Date.now() / 1000000) };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {}, errors?: InternalError[] }}
 */
export function anonymousValidator420878393(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  const errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys420878393.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string, errors?: InternalError[] }}
 */
export function anonymousValidator1802076175(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator981662321(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"name"?: undefined|string, "order": number, "meta": StoreFileGroupMeta, "id": string, "file"?: undefined|string, "parent"?: undefined|string, "createdAt": Date, "updatedAt": Date, "deletedAt"?: undefined|Date, }, errors?: InternalError[] }}
 */
export function anonymousValidator2060025506(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2060025506.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val106006350 = anonymousValidator1789497143(
    value["order"],
    `${propertyPath}.order`,
  );
  if (val106006350.errors) {
    errors = errors.concat(val106006350.errors.flat(2));
  } else {
    result["order"] = val106006350.value;
  }
  const val3347973 = anonymousValidator420878393(
    value["meta"],
    `${propertyPath}.meta`,
  );
  if (val3347973.errors) {
    errors = errors.concat(val3347973.errors.flat(2));
  } else {
    result["meta"] = val3347973.value;
  }
  const val3355 = anonymousValidator56355924(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val3143036 = anonymousValidator1802076175(
    value["file"],
    `${propertyPath}.file`,
  );
  if (val3143036.errors) {
    errors = errors.concat(val3143036.errors.flat(2));
  } else {
    result["file"] = val3143036.value;
  }
  const val995424086 = anonymousValidator1802076175(
    value["parent"],
    `${propertyPath}.parent`,
  );
  if (val995424086.errors) {
    errors = errors.concat(val995424086.errors.flat(2));
  } else {
    result["parent"] = val995424086.value;
  }
  const val598371643 = anonymousValidator1389014320(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator1389014320(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val358705620 = anonymousValidator1988053796(
    value["deletedAt"],
    `${propertyPath}.deletedAt`,
  );
  if (val358705620.errors) {
    errors = errors.concat(val358705620.errors.flat(2));
  } else {
    result["deletedAt"] = val358705620.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator66994068(value, propertyPath) {
  if (isNil(value)) {
    return { value: 75 };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 100) {
    const max = 100;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator1483765921(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"q": number, "w": number, }, errors?: InternalError[] }}
 */
export function anonymousValidator376443596(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys376443596.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113 = anonymousValidator66994068(value["q"], `${propertyPath}.q`);
  if (val113.errors) {
    errors = errors.concat(val113.errors.flat(2));
  } else {
    result["q"] = val113.value;
  }
  const val119 = anonymousValidator1483765921(value["w"], `${propertyPath}.w`);
  if (val119.errors) {
    errors = errors.concat(val119.errors.flat(2));
  } else {
    result["w"] = val119.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: boolean, errors?: InternalError[] }}
 */
export function anonymousValidator1174857441(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator326842456(value, propertyPath) {
  if (isNil(value)) {
    return { value: 0 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: any, errors?: InternalError[] }}
 */
export function anonymousValidator1471603504(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator1103865757(value, propertyPath) {
  if (isNil(value)) {
    return { value: 0 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|number, errors?: InternalError[] }}
 */
export function anonymousValidator1065942849(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 1000) {
    const min = 1000;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"id": number, "isComplete": boolean, "priority": number, "scheduledAt": Date, "name": string, "data": any, "retryCount": number, "handlerTimeout"?: undefined|number, "createdAt": Date, "updatedAt": Date, }, errors?: InternalError[] }}
 */
export function anonymousValidator1781782332(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1781782332.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3355 = anonymousValidator1483765921(
    value["id"],
    `${propertyPath}.id`,
  );
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val1392715645 = anonymousValidator1174857441(
    value["isComplete"],
    `${propertyPath}.isComplete`,
  );
  if (val1392715645.errors) {
    errors = errors.concat(val1392715645.errors.flat(2));
  } else {
    result["isComplete"] = val1392715645.value;
  }
  const val1165461084 = anonymousValidator326842456(
    value["priority"],
    `${propertyPath}.priority`,
  );
  if (val1165461084.errors) {
    errors = errors.concat(val1165461084.errors.flat(2));
  } else {
    result["priority"] = val1165461084.value;
  }
  const val176050624 = anonymousValidator1389014320(
    value["scheduledAt"],
    `${propertyPath}.scheduledAt`,
  );
  if (val176050624.errors) {
    errors = errors.concat(val176050624.errors.flat(2));
  } else {
    result["scheduledAt"] = val176050624.value;
  }
  const val3373707 = anonymousValidator186795873(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val3076010 = anonymousValidator1471603504(
    value["data"],
    `${propertyPath}.data`,
  );
  if (val3076010.errors) {
    errors = errors.concat(val3076010.errors.flat(2));
  } else {
    result["data"] = val3076010.value;
  }
  const val1163811001 = anonymousValidator1103865757(
    value["retryCount"],
    `${propertyPath}.retryCount`,
  );
  if (val1163811001.errors) {
    errors = errors.concat(val1163811001.errors.flat(2));
  } else {
    result["retryCount"] = val1163811001.value;
  }
  const val2123605687 = anonymousValidator1065942849(
    value["handlerTimeout"],
    `${propertyPath}.handlerTimeout`,
  );
  if (val2123605687.errors) {
    errors = errors.concat(val2123605687.errors.flat(2));
  } else {
    result["handlerTimeout"] = val2123605687.value;
  }
  const val598371643 = anonymousValidator1389014320(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator1389014320(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|number, errors?: InternalError[] }}
 */
export function anonymousValidator963028965(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"years"?: undefined|number, "months"?: undefined|number, "days"?: undefined|number, "hours"?: undefined|number, "minutes"?: undefined|number, "seconds"?: undefined|number, }, errors?: InternalError[] }}
 */
export function anonymousValidator430889951(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys430889951.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val114851798 = anonymousValidator963028965(
    value["years"],
    `${propertyPath}.years`,
  );
  if (val114851798.errors) {
    errors = errors.concat(val114851798.errors.flat(2));
  } else {
    result["years"] = val114851798.value;
  }
  const val1068487181 = anonymousValidator963028965(
    value["months"],
    `${propertyPath}.months`,
  );
  if (val1068487181.errors) {
    errors = errors.concat(val1068487181.errors.flat(2));
  } else {
    result["months"] = val1068487181.value;
  }
  const val3076183 = anonymousValidator963028965(
    value["days"],
    `${propertyPath}.days`,
  );
  if (val3076183.errors) {
    errors = errors.concat(val3076183.errors.flat(2));
  } else {
    result["days"] = val3076183.value;
  }
  const val99469071 = anonymousValidator963028965(
    value["hours"],
    `${propertyPath}.hours`,
  );
  if (val99469071.errors) {
    errors = errors.concat(val99469071.errors.flat(2));
  } else {
    result["hours"] = val99469071.value;
  }
  const val1064901855 = anonymousValidator963028965(
    value["minutes"],
    `${propertyPath}.minutes`,
  );
  if (val1064901855.errors) {
    errors = errors.concat(val1064901855.errors.flat(2));
  } else {
    result["minutes"] = val1064901855.value;
  }
  const val1970096767 = anonymousValidator963028965(
    value["seconds"],
    `${propertyPath}.seconds`,
  );
  if (val1970096767.errors) {
    errors = errors.concat(val1970096767.errors.flat(2));
  } else {
    result["seconds"] = val1970096767.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator1135331723(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 24) {
    const min = 24;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 29) {
    const max = 29;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  if (
    !/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/gi.test(
      value,
    )
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: Date, errors?: InternalError[] }}
 */
export function anonymousValidator448481401(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.undefined",
          info: {},
        },
      ],
    };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  let date = new Date(value);
  if (typeof value === "string") {
    value = anonymousValidator1135331723(value, propertyPath);
    if (value.errors) {
      return value;
    }
    date = new Date(value.value);
  }
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"expires": Date, "data": any, "id": string, "createdAt": Date, "updatedAt": Date, }, errors?: InternalError[] }}
 */
export function anonymousValidator1108679019(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1108679019.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1309235404 = anonymousValidator448481401(
    value["expires"],
    `${propertyPath}.expires`,
  );
  if (val1309235404.errors) {
    errors = errors.concat(val1309235404.errors.flat(2));
  } else {
    result["expires"] = val1309235404.value;
  }
  const val3076010 = anonymousValidator1471603504(
    value["data"],
    `${propertyPath}.data`,
  );
  if (val3076010.errors) {
    errors = errors.concat(val3076010.errors.flat(2));
  } else {
    result["data"] = val3076010.value;
  }
  const val3355 = anonymousValidator56355924(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val598371643 = anonymousValidator1389014320(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator1389014320(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(StoreFileWhere)[], errors?: InternalError[] }}
 */
export function anonymousValidator1804070323(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator2074494218(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(string)[], errors?: InternalError[] }}
 */
export function anonymousValidator1899069927(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator56355924(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(string)[]|QueryPart<any>, errors?: InternalError[] }}
 */
export function anonymousValidator1024905514(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  let errors = [];
  /** @type {{ value?: undefined|(string)[]|QueryPart<any>, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator1899069927(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1585770956(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(string)[], errors?: InternalError[] }}
 */
export function anonymousValidator890105892(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(string)[]|QueryPart<any>, errors?: InternalError[] }}
 */
export function anonymousValidator972289697(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  let errors = [];
  /** @type {{ value?: undefined|(string)[]|QueryPart<any>, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator890105892(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1585770956(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(Date)[], errors?: InternalError[] }}
 */
export function anonymousValidator1891060044(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator448481401(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(Date)[]|QueryPart<any>, errors?: InternalError[] }}
 */
export function anonymousValidator978954249(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  let errors = [];
  /** @type {{ value?: undefined|(Date)[]|QueryPart<any>, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator1891060044(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1585770956(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|boolean, errors?: InternalError[] }}
 */
export function anonymousValidator196147222(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(StoreFileGroupWhere)[], errors?: InternalError[] }}
 */
export function anonymousValidator58972158(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator153017499(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(number)[], errors?: InternalError[] }}
 */
export function anonymousValidator1370653763(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator293751998(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(number)[]|QueryPart<any>, errors?: InternalError[] }}
 */
export function anonymousValidator2102014144(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  let errors = [];
  /** @type {{ value?: undefined|(number)[]|QueryPart<any>, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator1370653763(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1585770956(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreFileGroupWhere)[], "id"?: undefined|string, "idNotEqual"?: undefined|string, "idIn"?: undefined|(string)[]|QueryPart<any>, "idNotIn"?: undefined|(string)[]|QueryPart<any>, "idLike"?: undefined|string, "idNotLike"?: undefined|string, "order"?: undefined|number, "orderNotEqual"?: undefined|number, "orderIn"?: undefined|(number)[]|QueryPart<any>, "orderNotIn"?: undefined|(number)[]|QueryPart<any>, "orderGreaterThan"?: undefined|number, "orderLowerThan"?: undefined|number, "orderIsNull"?: undefined|boolean, "orderIsNotNull"?: undefined|boolean, "file"?: undefined|string, "fileNotEqual"?: undefined|string, "fileIn"?: undefined|(string)[]|QueryPart<any>, "fileNotIn"?: undefined|(string)[]|QueryPart<any>, "fileLike"?: undefined|string, "fileNotLike"?: undefined|string, "fileIsNull"?: undefined|boolean, "fileIsNotNull"?: undefined|boolean, "parent"?: undefined|string, "parentNotEqual"?: undefined|string, "parentIn"?: undefined|(string)[]|QueryPart<any>, "parentNotIn"?: undefined|(string)[]|QueryPart<any>, "parentLike"?: undefined|string, "parentNotLike"?: undefined|string, "parentIsNull"?: undefined|boolean, "parentIsNotNull"?: undefined|boolean, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, "deletedAt"?: undefined|Date, "deletedAtNotEqual"?: undefined|Date, "deletedAtIn"?: undefined|(Date)[]|QueryPart<any>, "deletedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "deletedAtGreaterThan"?: undefined|Date, "deletedAtLowerThan"?: undefined|Date, "deletedAtIncludeNotNull"?: undefined|boolean, "childrenExists"?: undefined|StoreFileGroupWhere, "childrenNotExists"?: undefined|StoreFileGroupWhere, }, errors?: InternalError[] }}
 */
export function anonymousValidator153017499(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys153017499.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1185156 = anonymousValidator1585770956(
    value["$raw"],
    `${propertyPath}.$raw`,
  );
  if (val1185156.errors) {
    errors = errors.concat(val1185156.errors.flat(2));
  } else {
    result["$raw"] = val1185156.value;
  }
  const val38151 = anonymousValidator58972158(
    value["$or"],
    `${propertyPath}.$or`,
  );
  if (val38151.errors) {
    errors = errors.concat(val38151.errors.flat(2));
  } else {
    result["$or"] = val38151.value;
  }
  const val3355 = anonymousValidator1802076175(
    value["id"],
    `${propertyPath}.id`,
  );
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val2101198428 = anonymousValidator1802076175(
    value["idNotEqual"],
    `${propertyPath}.idNotEqual`,
  );
  if (val2101198428.errors) {
    errors = errors.concat(val2101198428.errors.flat(2));
  } else {
    result["idNotEqual"] = val2101198428.value;
  }
  const val3226528 = anonymousValidator1024905514(
    value["idIn"],
    `${propertyPath}.idIn`,
  );
  if (val3226528.errors) {
    errors = errors.concat(val3226528.errors.flat(2));
  } else {
    result["idIn"] = val3226528.value;
  }
  const val1636976381 = anonymousValidator1024905514(
    value["idNotIn"],
    `${propertyPath}.idNotIn`,
  );
  if (val1636976381.errors) {
    errors = errors.concat(val1636976381.errors.flat(2));
  } else {
    result["idNotIn"] = val1636976381.value;
  }
  const val1194185902 = anonymousValidator1802076175(
    value["idLike"],
    `${propertyPath}.idLike`,
  );
  if (val1194185902.errors) {
    errors = errors.concat(val1194185902.errors.flat(2));
  } else {
    result["idLike"] = val1194185902.value;
  }
  const val1176359791 = anonymousValidator1802076175(
    value["idNotLike"],
    `${propertyPath}.idNotLike`,
  );
  if (val1176359791.errors) {
    errors = errors.concat(val1176359791.errors.flat(2));
  } else {
    result["idNotLike"] = val1176359791.value;
  }
  const val106006350 = anonymousValidator963028965(
    value["order"],
    `${propertyPath}.order`,
  );
  if (val106006350.errors) {
    errors = errors.concat(val106006350.errors.flat(2));
  } else {
    result["order"] = val106006350.value;
  }
  const val921217649 = anonymousValidator963028965(
    value["orderNotEqual"],
    `${propertyPath}.orderNotEqual`,
  );
  if (val921217649.errors) {
    errors = errors.concat(val921217649.errors.flat(2));
  } else {
    result["orderNotEqual"] = val921217649.value;
  }
  const val1207110381 = anonymousValidator2102014144(
    value["orderIn"],
    `${propertyPath}.orderIn`,
  );
  if (val1207110381.errors) {
    errors = errors.concat(val1207110381.errors.flat(2));
  } else {
    result["orderIn"] = val1207110381.value;
  }
  const val740570282 = anonymousValidator2102014144(
    value["orderNotIn"],
    `${propertyPath}.orderNotIn`,
  );
  if (val740570282.errors) {
    errors = errors.concat(val740570282.errors.flat(2));
  } else {
    result["orderNotIn"] = val740570282.value;
  }
  const val770884749 = anonymousValidator963028965(
    value["orderGreaterThan"],
    `${propertyPath}.orderGreaterThan`,
  );
  if (val770884749.errors) {
    errors = errors.concat(val770884749.errors.flat(2));
  } else {
    result["orderGreaterThan"] = val770884749.value;
  }
  const val110589076 = anonymousValidator963028965(
    value["orderLowerThan"],
    `${propertyPath}.orderLowerThan`,
  );
  if (val110589076.errors) {
    errors = errors.concat(val110589076.errors.flat(2));
  } else {
    result["orderLowerThan"] = val110589076.value;
  }
  const val1342300863 = anonymousValidator196147222(
    value["orderIsNull"],
    `${propertyPath}.orderIsNull`,
  );
  if (val1342300863.errors) {
    errors = errors.concat(val1342300863.errors.flat(2));
  } else {
    result["orderIsNull"] = val1342300863.value;
  }
  const val2120647998 = anonymousValidator196147222(
    value["orderIsNotNull"],
    `${propertyPath}.orderIsNotNull`,
  );
  if (val2120647998.errors) {
    errors = errors.concat(val2120647998.errors.flat(2));
  } else {
    result["orderIsNotNull"] = val2120647998.value;
  }
  const val3143036 = anonymousValidator1802076175(
    value["file"],
    `${propertyPath}.file`,
  );
  if (val3143036.errors) {
    errors = errors.concat(val3143036.errors.flat(2));
  } else {
    result["file"] = val3143036.value;
  }
  const val284407229 = anonymousValidator1802076175(
    value["fileNotEqual"],
    `${propertyPath}.fileNotEqual`,
  );
  if (val284407229.errors) {
    errors = errors.concat(val284407229.errors.flat(2));
  } else {
    result["fileNotEqual"] = val284407229.value;
  }
  const val1274507327 = anonymousValidator1024905514(
    value["fileIn"],
    `${propertyPath}.fileIn`,
  );
  if (val1274507327.errors) {
    errors = errors.concat(val1274507327.errors.flat(2));
  } else {
    result["fileIn"] = val1274507327.value;
  }
  const val1332120772 = anonymousValidator1024905514(
    value["fileNotIn"],
    `${propertyPath}.fileNotIn`,
  );
  if (val1332120772.errors) {
    errors = errors.concat(val1332120772.errors.flat(2));
  } else {
    result["fileNotIn"] = val1332120772.value;
  }
  const val735773901 = anonymousValidator1802076175(
    value["fileLike"],
    `${propertyPath}.fileLike`,
  );
  if (val735773901.errors) {
    errors = errors.concat(val735773901.errors.flat(2));
  } else {
    result["fileLike"] = val735773901.value;
  }
  const val267719698 = anonymousValidator1802076175(
    value["fileNotLike"],
    `${propertyPath}.fileNotLike`,
  );
  if (val267719698.errors) {
    errors = errors.concat(val267719698.errors.flat(2));
  } else {
    result["fileNotLike"] = val267719698.value;
  }
  const val1513387629 = anonymousValidator196147222(
    value["fileIsNull"],
    `${propertyPath}.fileIsNull`,
  );
  if (val1513387629.errors) {
    errors = errors.concat(val1513387629.errors.flat(2));
  } else {
    result["fileIsNull"] = val1513387629.value;
  }
  const val893984852 = anonymousValidator196147222(
    value["fileIsNotNull"],
    `${propertyPath}.fileIsNotNull`,
  );
  if (val893984852.errors) {
    errors = errors.concat(val893984852.errors.flat(2));
  } else {
    result["fileIsNotNull"] = val893984852.value;
  }
  const val995424086 = anonymousValidator1802076175(
    value["parent"],
    `${propertyPath}.parent`,
  );
  if (val995424086.errors) {
    errors = errors.concat(val995424086.errors.flat(2));
  } else {
    result["parent"] = val995424086.value;
  }
  const val487081237 = anonymousValidator1802076175(
    value["parentNotEqual"],
    `${propertyPath}.parentNotEqual`,
  );
  if (val487081237.errors) {
    errors = errors.concat(val487081237.errors.flat(2));
  } else {
    result["parentNotEqual"] = val487081237.value;
  }
  const val1175162735 = anonymousValidator1024905514(
    value["parentIn"],
    `${propertyPath}.parentIn`,
  );
  if (val1175162735.errors) {
    errors = errors.concat(val1175162735.errors.flat(2));
  } else {
    result["parentIn"] = val1175162735.value;
  }
  const val999369934 = anonymousValidator1024905514(
    value["parentNotIn"],
    `${propertyPath}.parentNotIn`,
  );
  if (val999369934.errors) {
    errors = errors.concat(val999369934.errors.flat(2));
  } else {
    result["parentNotIn"] = val999369934.value;
  }
  const val244922527 = anonymousValidator1802076175(
    value["parentLike"],
    `${propertyPath}.parentLike`,
  );
  if (val244922527.errors) {
    errors = errors.concat(val244922527.errors.flat(2));
  } else {
    result["parentLike"] = val244922527.value;
  }
  const val1678079744 = anonymousValidator1802076175(
    value["parentNotLike"],
    `${propertyPath}.parentNotLike`,
  );
  if (val1678079744.errors) {
    errors = errors.concat(val1678079744.errors.flat(2));
  } else {
    result["parentNotLike"] = val1678079744.value;
  }
  const val775155483 = anonymousValidator196147222(
    value["parentIsNull"],
    `${propertyPath}.parentIsNull`,
  );
  if (val775155483.errors) {
    errors = errors.concat(val775155483.errors.flat(2));
  } else {
    result["parentIsNull"] = val775155483.value;
  }
  const val1547321114 = anonymousValidator196147222(
    value["parentIsNotNull"],
    `${propertyPath}.parentIsNotNull`,
  );
  if (val1547321114.errors) {
    errors = errors.concat(val1547321114.errors.flat(2));
  } else {
    result["parentIsNotNull"] = val1547321114.value;
  }
  const val598371643 = anonymousValidator1988053796(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1995047300 = anonymousValidator1988053796(
    value["createdAtNotEqual"],
    `${propertyPath}.createdAtNotEqual`,
  );
  if (val1995047300.errors) {
    errors = errors.concat(val1995047300.errors.flat(2));
  } else {
    result["createdAtNotEqual"] = val1995047300.value;
  }
  const val490466368 = anonymousValidator978954249(
    value["createdAtIn"],
    `${propertyPath}.createdAtIn`,
  );
  if (val490466368.errors) {
    errors = errors.concat(val490466368.errors.flat(2));
  } else {
    result["createdAtIn"] = val490466368.value;
  }
  const val66851 = anonymousValidator978954249(
    value["createdAtNotIn"],
    `${propertyPath}.createdAtNotIn`,
  );
  if (val66851.errors) {
    errors = errors.concat(val66851.errors.flat(2));
  } else {
    result["createdAtNotIn"] = val66851.value;
  }
  const val771827584 = anonymousValidator1988053796(
    value["createdAtGreaterThan"],
    `${propertyPath}.createdAtGreaterThan`,
  );
  if (val771827584.errors) {
    errors = errors.concat(val771827584.errors.flat(2));
  } else {
    result["createdAtGreaterThan"] = val771827584.value;
  }
  const val1181608263 = anonymousValidator1988053796(
    value["createdAtLowerThan"],
    `${propertyPath}.createdAtLowerThan`,
  );
  if (val1181608263.errors) {
    errors = errors.concat(val1181608263.errors.flat(2));
  } else {
    result["createdAtLowerThan"] = val1181608263.value;
  }
  const val142613780 = anonymousValidator196147222(
    value["createdAtIsNull"],
    `${propertyPath}.createdAtIsNull`,
  );
  if (val142613780.errors) {
    errors = errors.concat(val142613780.errors.flat(2));
  } else {
    result["createdAtIsNull"] = val142613780.value;
  }
  const val1049628811 = anonymousValidator196147222(
    value["createdAtIsNotNull"],
    `${propertyPath}.createdAtIsNotNull`,
  );
  if (val1049628811.errors) {
    errors = errors.concat(val1049628811.errors.flat(2));
  } else {
    result["createdAtIsNotNull"] = val1049628811.value;
  }
  const val1949194674 = anonymousValidator1988053796(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val403207311 = anonymousValidator1988053796(
    value["updatedAtNotEqual"],
    `${propertyPath}.updatedAtNotEqual`,
  );
  if (val403207311.errors) {
    errors = errors.concat(val403207311.errors.flat(2));
  } else {
    result["updatedAtNotEqual"] = val403207311.value;
  }
  const val570338285 = anonymousValidator978954249(
    value["updatedAtIn"],
    `${propertyPath}.updatedAtIn`,
  );
  if (val570338285.errors) {
    errors = errors.concat(val570338285.errors.flat(2));
  } else {
    result["updatedAtIn"] = val570338285.value;
  }
  const val52464214 = anonymousValidator978954249(
    value["updatedAtNotIn"],
    `${propertyPath}.updatedAtNotIn`,
  );
  if (val52464214.errors) {
    errors = errors.concat(val52464214.errors.flat(2));
  } else {
    result["updatedAtNotIn"] = val52464214.value;
  }
  const val1149680243 = anonymousValidator1988053796(
    value["updatedAtGreaterThan"],
    `${propertyPath}.updatedAtGreaterThan`,
  );
  if (val1149680243.errors) {
    errors = errors.concat(val1149680243.errors.flat(2));
  } else {
    result["updatedAtGreaterThan"] = val1149680243.value;
  }
  const val1781910124 = anonymousValidator1988053796(
    value["updatedAtLowerThan"],
    `${propertyPath}.updatedAtLowerThan`,
  );
  if (val1781910124.errors) {
    errors = errors.concat(val1781910124.errors.flat(2));
  } else {
    result["updatedAtLowerThan"] = val1781910124.value;
  }
  const val1766932033 = anonymousValidator196147222(
    value["updatedAtIsNull"],
    `${propertyPath}.updatedAtIsNull`,
  );
  if (val1766932033.errors) {
    errors = errors.concat(val1766932033.errors.flat(2));
  } else {
    result["updatedAtIsNull"] = val1766932033.value;
  }
  const val281820098 = anonymousValidator196147222(
    value["updatedAtIsNotNull"],
    `${propertyPath}.updatedAtIsNotNull`,
  );
  if (val281820098.errors) {
    errors = errors.concat(val281820098.errors.flat(2));
  } else {
    result["updatedAtIsNotNull"] = val281820098.value;
  }
  const val358705620 = anonymousValidator1988053796(
    value["deletedAt"],
    `${propertyPath}.deletedAt`,
  );
  if (val358705620.errors) {
    errors = errors.concat(val358705620.errors.flat(2));
  } else {
    result["deletedAt"] = val358705620.value;
  }
  const val1640932973 = anonymousValidator1988053796(
    value["deletedAtNotEqual"],
    `${propertyPath}.deletedAtNotEqual`,
  );
  if (val1640932973.errors) {
    errors = errors.concat(val1640932973.errors.flat(2));
  } else {
    result["deletedAtNotEqual"] = val1640932973.value;
  }
  const val1118714767 = anonymousValidator978954249(
    value["deletedAtIn"],
    `${propertyPath}.deletedAtIn`,
  );
  if (val1118714767.errors) {
    errors = errors.concat(val1118714767.errors.flat(2));
  } else {
    result["deletedAtIn"] = val1118714767.value;
  }
  const val1319354508 = anonymousValidator978954249(
    value["deletedAtNotIn"],
    `${propertyPath}.deletedAtNotIn`,
  );
  if (val1319354508.errors) {
    errors = errors.concat(val1319354508.errors.flat(2));
  } else {
    result["deletedAtNotIn"] = val1319354508.value;
  }
  const val358719761 = anonymousValidator1988053796(
    value["deletedAtGreaterThan"],
    `${propertyPath}.deletedAtGreaterThan`,
  );
  if (val358719761.errors) {
    errors = errors.concat(val358719761.errors.flat(2));
  } else {
    result["deletedAtGreaterThan"] = val358719761.value;
  }
  const val2067120266 = anonymousValidator1988053796(
    value["deletedAtLowerThan"],
    `${propertyPath}.deletedAtLowerThan`,
  );
  if (val2067120266.errors) {
    errors = errors.concat(val2067120266.errors.flat(2));
  } else {
    result["deletedAtLowerThan"] = val2067120266.value;
  }
  const val487235198 = anonymousValidator196147222(
    value["deletedAtIncludeNotNull"],
    `${propertyPath}.deletedAtIncludeNotNull`,
  );
  if (val487235198.errors) {
    errors = errors.concat(val487235198.errors.flat(2));
  } else {
    result["deletedAtIncludeNotNull"] = val487235198.value;
  }
  const val590314693 = anonymousValidator481156646(
    value["childrenExists"],
    `${propertyPath}.childrenExists`,
  );
  if (val590314693.errors) {
    errors = errors.concat(val590314693.errors.flat(2));
  } else {
    result["childrenExists"] = val590314693.value;
  }
  const val202378800 = anonymousValidator481156646(
    value["childrenNotExists"],
    `${propertyPath}.childrenNotExists`,
  );
  if (val202378800.errors) {
    errors = errors.concat(val202378800.errors.flat(2));
  } else {
    result["childrenNotExists"] = val202378800.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileGroupWhere, errors?: InternalError[] }}
 */
export function anonymousValidator481156646(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator153017499(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreFileWhere)[], "id"?: undefined|string, "idNotEqual"?: undefined|string, "idIn"?: undefined|(string)[]|QueryPart<any>, "idNotIn"?: undefined|(string)[]|QueryPart<any>, "idLike"?: undefined|string, "idNotLike"?: undefined|string, "bucketName"?: undefined|string, "bucketNameNotEqual"?: undefined|string, "bucketNameIn"?: undefined|(string)[]|QueryPart<any>, "bucketNameNotIn"?: undefined|(string)[]|QueryPart<any>, "bucketNameLike"?: undefined|string, "bucketNameILike"?: undefined|string, "bucketNameNotLike"?: undefined|string, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, "deletedAt"?: undefined|Date, "deletedAtNotEqual"?: undefined|Date, "deletedAtIn"?: undefined|(Date)[]|QueryPart<any>, "deletedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "deletedAtGreaterThan"?: undefined|Date, "deletedAtLowerThan"?: undefined|Date, "deletedAtIncludeNotNull"?: undefined|boolean, "groupExists"?: undefined|StoreFileGroupWhere, "groupNotExists"?: undefined|StoreFileGroupWhere, }, errors?: InternalError[] }}
 */
export function anonymousValidator2074494218(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2074494218.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1185156 = anonymousValidator1585770956(
    value["$raw"],
    `${propertyPath}.$raw`,
  );
  if (val1185156.errors) {
    errors = errors.concat(val1185156.errors.flat(2));
  } else {
    result["$raw"] = val1185156.value;
  }
  const val38151 = anonymousValidator1804070323(
    value["$or"],
    `${propertyPath}.$or`,
  );
  if (val38151.errors) {
    errors = errors.concat(val38151.errors.flat(2));
  } else {
    result["$or"] = val38151.value;
  }
  const val3355 = anonymousValidator1802076175(
    value["id"],
    `${propertyPath}.id`,
  );
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val2101198428 = anonymousValidator1802076175(
    value["idNotEqual"],
    `${propertyPath}.idNotEqual`,
  );
  if (val2101198428.errors) {
    errors = errors.concat(val2101198428.errors.flat(2));
  } else {
    result["idNotEqual"] = val2101198428.value;
  }
  const val3226528 = anonymousValidator1024905514(
    value["idIn"],
    `${propertyPath}.idIn`,
  );
  if (val3226528.errors) {
    errors = errors.concat(val3226528.errors.flat(2));
  } else {
    result["idIn"] = val3226528.value;
  }
  const val1636976381 = anonymousValidator1024905514(
    value["idNotIn"],
    `${propertyPath}.idNotIn`,
  );
  if (val1636976381.errors) {
    errors = errors.concat(val1636976381.errors.flat(2));
  } else {
    result["idNotIn"] = val1636976381.value;
  }
  const val1194185902 = anonymousValidator1802076175(
    value["idLike"],
    `${propertyPath}.idLike`,
  );
  if (val1194185902.errors) {
    errors = errors.concat(val1194185902.errors.flat(2));
  } else {
    result["idLike"] = val1194185902.value;
  }
  const val1176359791 = anonymousValidator1802076175(
    value["idNotLike"],
    `${propertyPath}.idNotLike`,
  );
  if (val1176359791.errors) {
    errors = errors.concat(val1176359791.errors.flat(2));
  } else {
    result["idNotLike"] = val1176359791.value;
  }
  const val1117008789 = anonymousValidator1443576836(
    value["bucketName"],
    `${propertyPath}.bucketName`,
  );
  if (val1117008789.errors) {
    errors = errors.concat(val1117008789.errors.flat(2));
  } else {
    result["bucketName"] = val1117008789.value;
  }
  const val1125594410 = anonymousValidator1443576836(
    value["bucketNameNotEqual"],
    `${propertyPath}.bucketNameNotEqual`,
  );
  if (val1125594410.errors) {
    errors = errors.concat(val1125594410.errors.flat(2));
  } else {
    result["bucketNameNotEqual"] = val1125594410.value;
  }
  const val296375398 = anonymousValidator972289697(
    value["bucketNameIn"],
    `${propertyPath}.bucketNameIn`,
  );
  if (val296375398.errors) {
    errors = errors.concat(val296375398.errors.flat(2));
  } else {
    result["bucketNameIn"] = val296375398.value;
  }
  const val1138040003 = anonymousValidator972289697(
    value["bucketNameNotIn"],
    `${propertyPath}.bucketNameNotIn`,
  );
  if (val1138040003.errors) {
    errors = errors.concat(val1138040003.errors.flat(2));
  } else {
    result["bucketNameNotIn"] = val1138040003.value;
  }
  const val1348827956 = anonymousValidator1443576836(
    value["bucketNameLike"],
    `${propertyPath}.bucketNameLike`,
  );
  if (val1348827956.errors) {
    errors = errors.concat(val1348827956.errors.flat(2));
  } else {
    result["bucketNameLike"] = val1348827956.value;
  }
  const val1132370187 = anonymousValidator1443576836(
    value["bucketNameILike"],
    `${propertyPath}.bucketNameILike`,
  );
  if (val1132370187.errors) {
    errors = errors.concat(val1132370187.errors.flat(2));
  } else {
    result["bucketNameILike"] = val1132370187.value;
  }
  const val1560129611 = anonymousValidator1443576836(
    value["bucketNameNotLike"],
    `${propertyPath}.bucketNameNotLike`,
  );
  if (val1560129611.errors) {
    errors = errors.concat(val1560129611.errors.flat(2));
  } else {
    result["bucketNameNotLike"] = val1560129611.value;
  }
  const val598371643 = anonymousValidator1988053796(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1995047300 = anonymousValidator1988053796(
    value["createdAtNotEqual"],
    `${propertyPath}.createdAtNotEqual`,
  );
  if (val1995047300.errors) {
    errors = errors.concat(val1995047300.errors.flat(2));
  } else {
    result["createdAtNotEqual"] = val1995047300.value;
  }
  const val490466368 = anonymousValidator978954249(
    value["createdAtIn"],
    `${propertyPath}.createdAtIn`,
  );
  if (val490466368.errors) {
    errors = errors.concat(val490466368.errors.flat(2));
  } else {
    result["createdAtIn"] = val490466368.value;
  }
  const val66851 = anonymousValidator978954249(
    value["createdAtNotIn"],
    `${propertyPath}.createdAtNotIn`,
  );
  if (val66851.errors) {
    errors = errors.concat(val66851.errors.flat(2));
  } else {
    result["createdAtNotIn"] = val66851.value;
  }
  const val771827584 = anonymousValidator1988053796(
    value["createdAtGreaterThan"],
    `${propertyPath}.createdAtGreaterThan`,
  );
  if (val771827584.errors) {
    errors = errors.concat(val771827584.errors.flat(2));
  } else {
    result["createdAtGreaterThan"] = val771827584.value;
  }
  const val1181608263 = anonymousValidator1988053796(
    value["createdAtLowerThan"],
    `${propertyPath}.createdAtLowerThan`,
  );
  if (val1181608263.errors) {
    errors = errors.concat(val1181608263.errors.flat(2));
  } else {
    result["createdAtLowerThan"] = val1181608263.value;
  }
  const val142613780 = anonymousValidator196147222(
    value["createdAtIsNull"],
    `${propertyPath}.createdAtIsNull`,
  );
  if (val142613780.errors) {
    errors = errors.concat(val142613780.errors.flat(2));
  } else {
    result["createdAtIsNull"] = val142613780.value;
  }
  const val1049628811 = anonymousValidator196147222(
    value["createdAtIsNotNull"],
    `${propertyPath}.createdAtIsNotNull`,
  );
  if (val1049628811.errors) {
    errors = errors.concat(val1049628811.errors.flat(2));
  } else {
    result["createdAtIsNotNull"] = val1049628811.value;
  }
  const val1949194674 = anonymousValidator1988053796(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val403207311 = anonymousValidator1988053796(
    value["updatedAtNotEqual"],
    `${propertyPath}.updatedAtNotEqual`,
  );
  if (val403207311.errors) {
    errors = errors.concat(val403207311.errors.flat(2));
  } else {
    result["updatedAtNotEqual"] = val403207311.value;
  }
  const val570338285 = anonymousValidator978954249(
    value["updatedAtIn"],
    `${propertyPath}.updatedAtIn`,
  );
  if (val570338285.errors) {
    errors = errors.concat(val570338285.errors.flat(2));
  } else {
    result["updatedAtIn"] = val570338285.value;
  }
  const val52464214 = anonymousValidator978954249(
    value["updatedAtNotIn"],
    `${propertyPath}.updatedAtNotIn`,
  );
  if (val52464214.errors) {
    errors = errors.concat(val52464214.errors.flat(2));
  } else {
    result["updatedAtNotIn"] = val52464214.value;
  }
  const val1149680243 = anonymousValidator1988053796(
    value["updatedAtGreaterThan"],
    `${propertyPath}.updatedAtGreaterThan`,
  );
  if (val1149680243.errors) {
    errors = errors.concat(val1149680243.errors.flat(2));
  } else {
    result["updatedAtGreaterThan"] = val1149680243.value;
  }
  const val1781910124 = anonymousValidator1988053796(
    value["updatedAtLowerThan"],
    `${propertyPath}.updatedAtLowerThan`,
  );
  if (val1781910124.errors) {
    errors = errors.concat(val1781910124.errors.flat(2));
  } else {
    result["updatedAtLowerThan"] = val1781910124.value;
  }
  const val1766932033 = anonymousValidator196147222(
    value["updatedAtIsNull"],
    `${propertyPath}.updatedAtIsNull`,
  );
  if (val1766932033.errors) {
    errors = errors.concat(val1766932033.errors.flat(2));
  } else {
    result["updatedAtIsNull"] = val1766932033.value;
  }
  const val281820098 = anonymousValidator196147222(
    value["updatedAtIsNotNull"],
    `${propertyPath}.updatedAtIsNotNull`,
  );
  if (val281820098.errors) {
    errors = errors.concat(val281820098.errors.flat(2));
  } else {
    result["updatedAtIsNotNull"] = val281820098.value;
  }
  const val358705620 = anonymousValidator1988053796(
    value["deletedAt"],
    `${propertyPath}.deletedAt`,
  );
  if (val358705620.errors) {
    errors = errors.concat(val358705620.errors.flat(2));
  } else {
    result["deletedAt"] = val358705620.value;
  }
  const val1640932973 = anonymousValidator1988053796(
    value["deletedAtNotEqual"],
    `${propertyPath}.deletedAtNotEqual`,
  );
  if (val1640932973.errors) {
    errors = errors.concat(val1640932973.errors.flat(2));
  } else {
    result["deletedAtNotEqual"] = val1640932973.value;
  }
  const val1118714767 = anonymousValidator978954249(
    value["deletedAtIn"],
    `${propertyPath}.deletedAtIn`,
  );
  if (val1118714767.errors) {
    errors = errors.concat(val1118714767.errors.flat(2));
  } else {
    result["deletedAtIn"] = val1118714767.value;
  }
  const val1319354508 = anonymousValidator978954249(
    value["deletedAtNotIn"],
    `${propertyPath}.deletedAtNotIn`,
  );
  if (val1319354508.errors) {
    errors = errors.concat(val1319354508.errors.flat(2));
  } else {
    result["deletedAtNotIn"] = val1319354508.value;
  }
  const val358719761 = anonymousValidator1988053796(
    value["deletedAtGreaterThan"],
    `${propertyPath}.deletedAtGreaterThan`,
  );
  if (val358719761.errors) {
    errors = errors.concat(val358719761.errors.flat(2));
  } else {
    result["deletedAtGreaterThan"] = val358719761.value;
  }
  const val2067120266 = anonymousValidator1988053796(
    value["deletedAtLowerThan"],
    `${propertyPath}.deletedAtLowerThan`,
  );
  if (val2067120266.errors) {
    errors = errors.concat(val2067120266.errors.flat(2));
  } else {
    result["deletedAtLowerThan"] = val2067120266.value;
  }
  const val487235198 = anonymousValidator196147222(
    value["deletedAtIncludeNotNull"],
    `${propertyPath}.deletedAtIncludeNotNull`,
  );
  if (val487235198.errors) {
    errors = errors.concat(val487235198.errors.flat(2));
  } else {
    result["deletedAtIncludeNotNull"] = val487235198.value;
  }
  const val361937851 = anonymousValidator481156646(
    value["groupExists"],
    `${propertyPath}.groupExists`,
  );
  if (val361937851.errors) {
    errors = errors.concat(val361937851.errors.flat(2));
  } else {
    result["groupExists"] = val361937851.value;
  }
  const val94169424 = anonymousValidator481156646(
    value["groupNotExists"],
    `${propertyPath}.groupNotExists`,
  );
  if (val94169424.errors) {
    errors = errors.concat(val94169424.errors.flat(2));
  } else {
    result["groupNotExists"] = val94169424.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(StoreJobWhere)[], errors?: InternalError[] }}
 */
export function anonymousValidator807003800(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1257773835(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|number, errors?: InternalError[] }}
 */
export function anonymousValidator1108665246(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(number)[], errors?: InternalError[] }}
 */
export function anonymousValidator1033385158(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1483765921(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(number)[]|QueryPart<any>, errors?: InternalError[] }}
 */
export function anonymousValidator1971955962(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  let errors = [];
  /** @type {{ value?: undefined|(number)[]|QueryPart<any>, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator1033385158(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1585770956(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreJobWhere)[], "id"?: undefined|number, "idNotEqual"?: undefined|number, "idIn"?: undefined|(number)[]|QueryPart<any>, "idNotIn"?: undefined|(number)[]|QueryPart<any>, "idGreaterThan"?: undefined|number, "idLowerThan"?: undefined|number, "isComplete"?: undefined|boolean, "isCompleteIsNull"?: undefined|boolean, "isCompleteIsNotNull"?: undefined|boolean, "name"?: undefined|string, "nameNotEqual"?: undefined|string, "nameIn"?: undefined|(string)[]|QueryPart<any>, "nameNotIn"?: undefined|(string)[]|QueryPart<any>, "nameLike"?: undefined|string, "nameILike"?: undefined|string, "nameNotLike"?: undefined|string, "scheduledAt"?: undefined|Date, "scheduledAtNotEqual"?: undefined|Date, "scheduledAtIn"?: undefined|(Date)[]|QueryPart<any>, "scheduledAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "scheduledAtGreaterThan"?: undefined|Date, "scheduledAtLowerThan"?: undefined|Date, "scheduledAtIsNull"?: undefined|boolean, "scheduledAtIsNotNull"?: undefined|boolean, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator1257773835(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1257773835.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1185156 = anonymousValidator1585770956(
    value["$raw"],
    `${propertyPath}.$raw`,
  );
  if (val1185156.errors) {
    errors = errors.concat(val1185156.errors.flat(2));
  } else {
    result["$raw"] = val1185156.value;
  }
  const val38151 = anonymousValidator807003800(
    value["$or"],
    `${propertyPath}.$or`,
  );
  if (val38151.errors) {
    errors = errors.concat(val38151.errors.flat(2));
  } else {
    result["$or"] = val38151.value;
  }
  const val3355 = anonymousValidator1108665246(
    value["id"],
    `${propertyPath}.id`,
  );
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val2101198428 = anonymousValidator1108665246(
    value["idNotEqual"],
    `${propertyPath}.idNotEqual`,
  );
  if (val2101198428.errors) {
    errors = errors.concat(val2101198428.errors.flat(2));
  } else {
    result["idNotEqual"] = val2101198428.value;
  }
  const val3226528 = anonymousValidator1971955962(
    value["idIn"],
    `${propertyPath}.idIn`,
  );
  if (val3226528.errors) {
    errors = errors.concat(val3226528.errors.flat(2));
  } else {
    result["idIn"] = val3226528.value;
  }
  const val1636976381 = anonymousValidator1971955962(
    value["idNotIn"],
    `${propertyPath}.idNotIn`,
  );
  if (val1636976381.errors) {
    errors = errors.concat(val1636976381.errors.flat(2));
  } else {
    result["idNotIn"] = val1636976381.value;
  }
  const val1873841312 = anonymousValidator1108665246(
    value["idGreaterThan"],
    `${propertyPath}.idGreaterThan`,
  );
  if (val1873841312.errors) {
    errors = errors.concat(val1873841312.errors.flat(2));
  } else {
    result["idGreaterThan"] = val1873841312.value;
  }
  const val683793049 = anonymousValidator1108665246(
    value["idLowerThan"],
    `${propertyPath}.idLowerThan`,
  );
  if (val683793049.errors) {
    errors = errors.concat(val683793049.errors.flat(2));
  } else {
    result["idLowerThan"] = val683793049.value;
  }
  const val1392715645 = anonymousValidator196147222(
    value["isComplete"],
    `${propertyPath}.isComplete`,
  );
  if (val1392715645.errors) {
    errors = errors.concat(val1392715645.errors.flat(2));
  } else {
    result["isComplete"] = val1392715645.value;
  }
  const val690571212 = anonymousValidator196147222(
    value["isCompleteIsNull"],
    `${propertyPath}.isCompleteIsNull`,
  );
  if (val690571212.errors) {
    errors = errors.concat(val690571212.errors.flat(2));
  } else {
    result["isCompleteIsNull"] = val690571212.value;
  }
  const val78793427 = anonymousValidator196147222(
    value["isCompleteIsNotNull"],
    `${propertyPath}.isCompleteIsNotNull`,
  );
  if (val78793427.errors) {
    errors = errors.concat(val78793427.errors.flat(2));
  } else {
    result["isCompleteIsNotNull"] = val78793427.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val1683702836 = anonymousValidator1443576836(
    value["nameNotEqual"],
    `${propertyPath}.nameNotEqual`,
  );
  if (val1683702836.errors) {
    errors = errors.concat(val1683702836.errors.flat(2));
  } else {
    result["nameNotEqual"] = val1683702836.value;
  }
  const val1052832496 = anonymousValidator972289697(
    value["nameIn"],
    `${propertyPath}.nameIn`,
  );
  if (val1052832496.errors) {
    errors = errors.concat(val1052832496.errors.flat(2));
  } else {
    result["nameIn"] = val1052832496.value;
  }
  const val1218035597 = anonymousValidator972289697(
    value["nameNotIn"],
    `${propertyPath}.nameNotIn`,
  );
  if (val1218035597.errors) {
    errors = errors.concat(val1218035597.errors.flat(2));
  } else {
    result["nameNotIn"] = val1218035597.value;
  }
  const val1840341186 = anonymousValidator1443576836(
    value["nameLike"],
    `${propertyPath}.nameLike`,
  );
  if (val1840341186.errors) {
    errors = errors.concat(val1840341186.errors.flat(2));
  } else {
    result["nameLike"] = val1840341186.value;
  }
  const val1212365781 = anonymousValidator1443576836(
    value["nameILike"],
    `${propertyPath}.nameILike`,
  );
  if (val1212365781.errors) {
    errors = errors.concat(val1212365781.errors.flat(2));
  } else {
    result["nameILike"] = val1212365781.value;
  }
  const val1993775105 = anonymousValidator1443576836(
    value["nameNotLike"],
    `${propertyPath}.nameNotLike`,
  );
  if (val1993775105.errors) {
    errors = errors.concat(val1993775105.errors.flat(2));
  } else {
    result["nameNotLike"] = val1993775105.value;
  }
  const val176050624 = anonymousValidator1988053796(
    value["scheduledAt"],
    `${propertyPath}.scheduledAt`,
  );
  if (val176050624.errors) {
    errors = errors.concat(val176050624.errors.flat(2));
  } else {
    result["scheduledAt"] = val176050624.value;
  }
  const val413954559 = anonymousValidator1988053796(
    value["scheduledAtNotEqual"],
    `${propertyPath}.scheduledAtNotEqual`,
  );
  if (val413954559.errors) {
    errors = errors.concat(val413954559.errors.flat(2));
  } else {
    result["scheduledAtNotEqual"] = val413954559.value;
  }
  const val1680927493 = anonymousValidator978954249(
    value["scheduledAtIn"],
    `${propertyPath}.scheduledAtIn`,
  );
  if (val1680927493.errors) {
    errors = errors.concat(val1680927493.errors.flat(2));
  } else {
    result["scheduledAtIn"] = val1680927493.value;
  }
  const val1492001144 = anonymousValidator978954249(
    value["scheduledAtNotIn"],
    `${propertyPath}.scheduledAtNotIn`,
  );
  if (val1492001144.errors) {
    errors = errors.concat(val1492001144.errors.flat(2));
  } else {
    result["scheduledAtNotIn"] = val1492001144.value;
  }
  const val1344315685 = anonymousValidator1988053796(
    value["scheduledAtGreaterThan"],
    `${propertyPath}.scheduledAtGreaterThan`,
  );
  if (val1344315685.errors) {
    errors = errors.concat(val1344315685.errors.flat(2));
  } else {
    result["scheduledAtGreaterThan"] = val1344315685.value;
  }
  const val1344124318 = anonymousValidator1988053796(
    value["scheduledAtLowerThan"],
    `${propertyPath}.scheduledAtLowerThan`,
  );
  if (val1344124318.errors) {
    errors = errors.concat(val1344124318.errors.flat(2));
  } else {
    result["scheduledAtLowerThan"] = val1344124318.value;
  }
  const val1133146191 = anonymousValidator196147222(
    value["scheduledAtIsNull"],
    `${propertyPath}.scheduledAtIsNull`,
  );
  if (val1133146191.errors) {
    errors = errors.concat(val1133146191.errors.flat(2));
  } else {
    result["scheduledAtIsNull"] = val1133146191.value;
  }
  const val719605904 = anonymousValidator196147222(
    value["scheduledAtIsNotNull"],
    `${propertyPath}.scheduledAtIsNotNull`,
  );
  if (val719605904.errors) {
    errors = errors.concat(val719605904.errors.flat(2));
  } else {
    result["scheduledAtIsNotNull"] = val719605904.value;
  }
  const val598371643 = anonymousValidator1988053796(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1995047300 = anonymousValidator1988053796(
    value["createdAtNotEqual"],
    `${propertyPath}.createdAtNotEqual`,
  );
  if (val1995047300.errors) {
    errors = errors.concat(val1995047300.errors.flat(2));
  } else {
    result["createdAtNotEqual"] = val1995047300.value;
  }
  const val490466368 = anonymousValidator978954249(
    value["createdAtIn"],
    `${propertyPath}.createdAtIn`,
  );
  if (val490466368.errors) {
    errors = errors.concat(val490466368.errors.flat(2));
  } else {
    result["createdAtIn"] = val490466368.value;
  }
  const val66851 = anonymousValidator978954249(
    value["createdAtNotIn"],
    `${propertyPath}.createdAtNotIn`,
  );
  if (val66851.errors) {
    errors = errors.concat(val66851.errors.flat(2));
  } else {
    result["createdAtNotIn"] = val66851.value;
  }
  const val771827584 = anonymousValidator1988053796(
    value["createdAtGreaterThan"],
    `${propertyPath}.createdAtGreaterThan`,
  );
  if (val771827584.errors) {
    errors = errors.concat(val771827584.errors.flat(2));
  } else {
    result["createdAtGreaterThan"] = val771827584.value;
  }
  const val1181608263 = anonymousValidator1988053796(
    value["createdAtLowerThan"],
    `${propertyPath}.createdAtLowerThan`,
  );
  if (val1181608263.errors) {
    errors = errors.concat(val1181608263.errors.flat(2));
  } else {
    result["createdAtLowerThan"] = val1181608263.value;
  }
  const val142613780 = anonymousValidator196147222(
    value["createdAtIsNull"],
    `${propertyPath}.createdAtIsNull`,
  );
  if (val142613780.errors) {
    errors = errors.concat(val142613780.errors.flat(2));
  } else {
    result["createdAtIsNull"] = val142613780.value;
  }
  const val1049628811 = anonymousValidator196147222(
    value["createdAtIsNotNull"],
    `${propertyPath}.createdAtIsNotNull`,
  );
  if (val1049628811.errors) {
    errors = errors.concat(val1049628811.errors.flat(2));
  } else {
    result["createdAtIsNotNull"] = val1049628811.value;
  }
  const val1949194674 = anonymousValidator1988053796(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val403207311 = anonymousValidator1988053796(
    value["updatedAtNotEqual"],
    `${propertyPath}.updatedAtNotEqual`,
  );
  if (val403207311.errors) {
    errors = errors.concat(val403207311.errors.flat(2));
  } else {
    result["updatedAtNotEqual"] = val403207311.value;
  }
  const val570338285 = anonymousValidator978954249(
    value["updatedAtIn"],
    `${propertyPath}.updatedAtIn`,
  );
  if (val570338285.errors) {
    errors = errors.concat(val570338285.errors.flat(2));
  } else {
    result["updatedAtIn"] = val570338285.value;
  }
  const val52464214 = anonymousValidator978954249(
    value["updatedAtNotIn"],
    `${propertyPath}.updatedAtNotIn`,
  );
  if (val52464214.errors) {
    errors = errors.concat(val52464214.errors.flat(2));
  } else {
    result["updatedAtNotIn"] = val52464214.value;
  }
  const val1149680243 = anonymousValidator1988053796(
    value["updatedAtGreaterThan"],
    `${propertyPath}.updatedAtGreaterThan`,
  );
  if (val1149680243.errors) {
    errors = errors.concat(val1149680243.errors.flat(2));
  } else {
    result["updatedAtGreaterThan"] = val1149680243.value;
  }
  const val1781910124 = anonymousValidator1988053796(
    value["updatedAtLowerThan"],
    `${propertyPath}.updatedAtLowerThan`,
  );
  if (val1781910124.errors) {
    errors = errors.concat(val1781910124.errors.flat(2));
  } else {
    result["updatedAtLowerThan"] = val1781910124.value;
  }
  const val1766932033 = anonymousValidator196147222(
    value["updatedAtIsNull"],
    `${propertyPath}.updatedAtIsNull`,
  );
  if (val1766932033.errors) {
    errors = errors.concat(val1766932033.errors.flat(2));
  } else {
    result["updatedAtIsNull"] = val1766932033.value;
  }
  const val281820098 = anonymousValidator196147222(
    value["updatedAtIsNotNull"],
    `${propertyPath}.updatedAtIsNotNull`,
  );
  if (val281820098.errors) {
    errors = errors.concat(val281820098.errors.flat(2));
  } else {
    result["updatedAtIsNotNull"] = val281820098.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(StoreSessionWhere)[], errors?: InternalError[] }}
 */
export function anonymousValidator688866095(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator500057262(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreSessionWhere)[], "id"?: undefined|string, "idNotEqual"?: undefined|string, "idIn"?: undefined|(string)[]|QueryPart<any>, "idNotIn"?: undefined|(string)[]|QueryPart<any>, "idLike"?: undefined|string, "idNotLike"?: undefined|string, "expires"?: undefined|Date, "expiresNotEqual"?: undefined|Date, "expiresIn"?: undefined|(Date)[]|QueryPart<any>, "expiresNotIn"?: undefined|(Date)[]|QueryPart<any>, "expiresGreaterThan"?: undefined|Date, "expiresLowerThan"?: undefined|Date, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator500057262(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys500057262.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1185156 = anonymousValidator1585770956(
    value["$raw"],
    `${propertyPath}.$raw`,
  );
  if (val1185156.errors) {
    errors = errors.concat(val1185156.errors.flat(2));
  } else {
    result["$raw"] = val1185156.value;
  }
  const val38151 = anonymousValidator688866095(
    value["$or"],
    `${propertyPath}.$or`,
  );
  if (val38151.errors) {
    errors = errors.concat(val38151.errors.flat(2));
  } else {
    result["$or"] = val38151.value;
  }
  const val3355 = anonymousValidator1802076175(
    value["id"],
    `${propertyPath}.id`,
  );
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val2101198428 = anonymousValidator1802076175(
    value["idNotEqual"],
    `${propertyPath}.idNotEqual`,
  );
  if (val2101198428.errors) {
    errors = errors.concat(val2101198428.errors.flat(2));
  } else {
    result["idNotEqual"] = val2101198428.value;
  }
  const val3226528 = anonymousValidator1024905514(
    value["idIn"],
    `${propertyPath}.idIn`,
  );
  if (val3226528.errors) {
    errors = errors.concat(val3226528.errors.flat(2));
  } else {
    result["idIn"] = val3226528.value;
  }
  const val1636976381 = anonymousValidator1024905514(
    value["idNotIn"],
    `${propertyPath}.idNotIn`,
  );
  if (val1636976381.errors) {
    errors = errors.concat(val1636976381.errors.flat(2));
  } else {
    result["idNotIn"] = val1636976381.value;
  }
  const val1194185902 = anonymousValidator1802076175(
    value["idLike"],
    `${propertyPath}.idLike`,
  );
  if (val1194185902.errors) {
    errors = errors.concat(val1194185902.errors.flat(2));
  } else {
    result["idLike"] = val1194185902.value;
  }
  const val1176359791 = anonymousValidator1802076175(
    value["idNotLike"],
    `${propertyPath}.idNotLike`,
  );
  if (val1176359791.errors) {
    errors = errors.concat(val1176359791.errors.flat(2));
  } else {
    result["idNotLike"] = val1176359791.value;
  }
  const val1309235404 = anonymousValidator1988053796(
    value["expires"],
    `${propertyPath}.expires`,
  );
  if (val1309235404.errors) {
    errors = errors.concat(val1309235404.errors.flat(2));
  } else {
    result["expires"] = val1309235404.value;
  }
  const val2125016949 = anonymousValidator1988053796(
    value["expiresNotEqual"],
    `${propertyPath}.expiresNotEqual`,
  );
  if (val2125016949.errors) {
    errors = errors.concat(val2125016949.errors.flat(2));
  } else {
    result["expiresNotEqual"] = val2125016949.value;
  }
  const val250196857 = anonymousValidator978954249(
    value["expiresIn"],
    `${propertyPath}.expiresIn`,
  );
  if (val250196857.errors) {
    errors = errors.concat(val250196857.errors.flat(2));
  } else {
    result["expiresIn"] = val250196857.value;
  }
  const val1851069572 = anonymousValidator978954249(
    value["expiresNotIn"],
    `${propertyPath}.expiresNotIn`,
  );
  if (val1851069572.errors) {
    errors = errors.concat(val1851069572.errors.flat(2));
  } else {
    result["expiresNotIn"] = val1851069572.value;
  }
  const val1513170713 = anonymousValidator1988053796(
    value["expiresGreaterThan"],
    `${propertyPath}.expiresGreaterThan`,
  );
  if (val1513170713.errors) {
    errors = errors.concat(val1513170713.errors.flat(2));
  } else {
    result["expiresGreaterThan"] = val1513170713.value;
  }
  const val54581102 = anonymousValidator1988053796(
    value["expiresLowerThan"],
    `${propertyPath}.expiresLowerThan`,
  );
  if (val54581102.errors) {
    errors = errors.concat(val54581102.errors.flat(2));
  } else {
    result["expiresLowerThan"] = val54581102.value;
  }
  const val598371643 = anonymousValidator1988053796(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1995047300 = anonymousValidator1988053796(
    value["createdAtNotEqual"],
    `${propertyPath}.createdAtNotEqual`,
  );
  if (val1995047300.errors) {
    errors = errors.concat(val1995047300.errors.flat(2));
  } else {
    result["createdAtNotEqual"] = val1995047300.value;
  }
  const val490466368 = anonymousValidator978954249(
    value["createdAtIn"],
    `${propertyPath}.createdAtIn`,
  );
  if (val490466368.errors) {
    errors = errors.concat(val490466368.errors.flat(2));
  } else {
    result["createdAtIn"] = val490466368.value;
  }
  const val66851 = anonymousValidator978954249(
    value["createdAtNotIn"],
    `${propertyPath}.createdAtNotIn`,
  );
  if (val66851.errors) {
    errors = errors.concat(val66851.errors.flat(2));
  } else {
    result["createdAtNotIn"] = val66851.value;
  }
  const val771827584 = anonymousValidator1988053796(
    value["createdAtGreaterThan"],
    `${propertyPath}.createdAtGreaterThan`,
  );
  if (val771827584.errors) {
    errors = errors.concat(val771827584.errors.flat(2));
  } else {
    result["createdAtGreaterThan"] = val771827584.value;
  }
  const val1181608263 = anonymousValidator1988053796(
    value["createdAtLowerThan"],
    `${propertyPath}.createdAtLowerThan`,
  );
  if (val1181608263.errors) {
    errors = errors.concat(val1181608263.errors.flat(2));
  } else {
    result["createdAtLowerThan"] = val1181608263.value;
  }
  const val142613780 = anonymousValidator196147222(
    value["createdAtIsNull"],
    `${propertyPath}.createdAtIsNull`,
  );
  if (val142613780.errors) {
    errors = errors.concat(val142613780.errors.flat(2));
  } else {
    result["createdAtIsNull"] = val142613780.value;
  }
  const val1049628811 = anonymousValidator196147222(
    value["createdAtIsNotNull"],
    `${propertyPath}.createdAtIsNotNull`,
  );
  if (val1049628811.errors) {
    errors = errors.concat(val1049628811.errors.flat(2));
  } else {
    result["createdAtIsNotNull"] = val1049628811.value;
  }
  const val1949194674 = anonymousValidator1988053796(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val403207311 = anonymousValidator1988053796(
    value["updatedAtNotEqual"],
    `${propertyPath}.updatedAtNotEqual`,
  );
  if (val403207311.errors) {
    errors = errors.concat(val403207311.errors.flat(2));
  } else {
    result["updatedAtNotEqual"] = val403207311.value;
  }
  const val570338285 = anonymousValidator978954249(
    value["updatedAtIn"],
    `${propertyPath}.updatedAtIn`,
  );
  if (val570338285.errors) {
    errors = errors.concat(val570338285.errors.flat(2));
  } else {
    result["updatedAtIn"] = val570338285.value;
  }
  const val52464214 = anonymousValidator978954249(
    value["updatedAtNotIn"],
    `${propertyPath}.updatedAtNotIn`,
  );
  if (val52464214.errors) {
    errors = errors.concat(val52464214.errors.flat(2));
  } else {
    result["updatedAtNotIn"] = val52464214.value;
  }
  const val1149680243 = anonymousValidator1988053796(
    value["updatedAtGreaterThan"],
    `${propertyPath}.updatedAtGreaterThan`,
  );
  if (val1149680243.errors) {
    errors = errors.concat(val1149680243.errors.flat(2));
  } else {
    result["updatedAtGreaterThan"] = val1149680243.value;
  }
  const val1781910124 = anonymousValidator1988053796(
    value["updatedAtLowerThan"],
    `${propertyPath}.updatedAtLowerThan`,
  );
  if (val1781910124.errors) {
    errors = errors.concat(val1781910124.errors.flat(2));
  } else {
    result["updatedAtLowerThan"] = val1781910124.value;
  }
  const val1766932033 = anonymousValidator196147222(
    value["updatedAtIsNull"],
    `${propertyPath}.updatedAtIsNull`,
  );
  if (val1766932033.errors) {
    errors = errors.concat(val1766932033.errors.flat(2));
  } else {
    result["updatedAtIsNull"] = val1766932033.value;
  }
  const val281820098 = anonymousValidator196147222(
    value["updatedAtIsNotNull"],
    `${propertyPath}.updatedAtIsNotNull`,
  );
  if (val281820098.errors) {
    errors = errors.concat(val281820098.errors.flat(2));
  } else {
    result["updatedAtIsNotNull"] = val281820098.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: QueryPart<any>, errors?: InternalError[] }}
 */
export function anonymousValidator16847607(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  if (!isQueryPart(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "id"|"bucketName"|"createdAt"|"updatedAt"|"deletedAt", errors?: InternalError[] }}
 */
export function anonymousValidator237896171(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "bucketName" &&
    value !== "createdAt" &&
    value !== "updatedAt" &&
    value !== "deletedAt"
  ) {
    const oneOf = ["id", "bucketName", "createdAt", "updatedAt", "deletedAt"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ("id"|"bucketName"|"createdAt"|"updatedAt"|"deletedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator757309139(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator237896171(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: QueryPart<any>|("id"|"bucketName"|"createdAt"|"updatedAt"|"deletedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator1795948632(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: QueryPart<any>|("id"|"bucketName"|"createdAt"|"updatedAt"|"deletedAt")[], errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator16847607(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator757309139(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "ASC"|"DESC", errors?: InternalError[] }}
 */
export function anonymousValidator446238440(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "ASC" && value !== "DESC") {
    const oneOf = ["ASC", "DESC"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|CompasSqlOrderBy, errors?: InternalError[] }}
 */
export function anonymousValidator20803901(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator446238440(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "ASC"|"DESC"|"ASC NULLS FIRST"|"DESC NULLS LAST", errors?: InternalError[] }}
 */
export function anonymousValidator572766398(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "ASC" &&
    value !== "DESC" &&
    value !== "ASC NULLS FIRST" &&
    value !== "DESC NULLS LAST"
  ) {
    const oneOf = ["ASC", "DESC", "ASC NULLS FIRST", "DESC NULLS LAST"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|CompasSqlOrderByOptionalField, errors?: InternalError[] }}
 */
export function anonymousValidator198346889(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator572766398(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"id"?: undefined|CompasSqlOrderBy, "bucketName"?: undefined|CompasSqlOrderBy, "createdAt"?: undefined|CompasSqlOrderBy, "updatedAt"?: undefined|CompasSqlOrderBy, "deletedAt"?: undefined|CompasSqlOrderByOptionalField, }, errors?: InternalError[] }}
 */
export function anonymousValidator163358845(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys163358845.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3355 = anonymousValidator20803901(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val1117008789 = anonymousValidator20803901(
    value["bucketName"],
    `${propertyPath}.bucketName`,
  );
  if (val1117008789.errors) {
    errors = errors.concat(val1117008789.errors.flat(2));
  } else {
    result["bucketName"] = val1117008789.value;
  }
  const val598371643 = anonymousValidator20803901(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator20803901(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val358705620 = anonymousValidator198346889(
    value["deletedAt"],
    `${propertyPath}.deletedAt`,
  );
  if (val358705620.errors) {
    errors = errors.concat(val358705620.errors.flat(2));
  } else {
    result["deletedAt"] = val358705620.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "id"|"order"|"file"|"parent"|"createdAt"|"updatedAt"|"deletedAt", errors?: InternalError[] }}
 */
export function anonymousValidator1118242002(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "order" &&
    value !== "file" &&
    value !== "parent" &&
    value !== "createdAt" &&
    value !== "updatedAt" &&
    value !== "deletedAt"
  ) {
    const oneOf = [
      "id",
      "order",
      "file",
      "parent",
      "createdAt",
      "updatedAt",
      "deletedAt",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ("id"|"order"|"file"|"parent"|"createdAt"|"updatedAt"|"deletedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator938090836(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1118242002(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: QueryPart<any>|("id"|"order"|"file"|"parent"|"createdAt"|"updatedAt"|"deletedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator753972035(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: QueryPart<any>|("id"|"order"|"file"|"parent"|"createdAt"|"updatedAt"|"deletedAt")[], errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator16847607(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator938090836(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"id"?: undefined|CompasSqlOrderBy, "order"?: undefined|CompasSqlOrderByOptionalField, "file"?: undefined|CompasSqlOrderByOptionalField, "parent"?: undefined|CompasSqlOrderByOptionalField, "createdAt"?: undefined|CompasSqlOrderBy, "updatedAt"?: undefined|CompasSqlOrderBy, "deletedAt"?: undefined|CompasSqlOrderByOptionalField, }, errors?: InternalError[] }}
 */
export function anonymousValidator322356638(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys322356638.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3355 = anonymousValidator20803901(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val106006350 = anonymousValidator198346889(
    value["order"],
    `${propertyPath}.order`,
  );
  if (val106006350.errors) {
    errors = errors.concat(val106006350.errors.flat(2));
  } else {
    result["order"] = val106006350.value;
  }
  const val3143036 = anonymousValidator198346889(
    value["file"],
    `${propertyPath}.file`,
  );
  if (val3143036.errors) {
    errors = errors.concat(val3143036.errors.flat(2));
  } else {
    result["file"] = val3143036.value;
  }
  const val995424086 = anonymousValidator198346889(
    value["parent"],
    `${propertyPath}.parent`,
  );
  if (val995424086.errors) {
    errors = errors.concat(val995424086.errors.flat(2));
  } else {
    result["parent"] = val995424086.value;
  }
  const val598371643 = anonymousValidator20803901(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator20803901(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  const val358705620 = anonymousValidator198346889(
    value["deletedAt"],
    `${propertyPath}.deletedAt`,
  );
  if (val358705620.errors) {
    errors = errors.concat(val358705620.errors.flat(2));
  } else {
    result["deletedAt"] = val358705620.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt", errors?: InternalError[] }}
 */
export function anonymousValidator1072183914(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "isComplete" &&
    value !== "name" &&
    value !== "scheduledAt" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = [
      "id",
      "isComplete",
      "name",
      "scheduledAt",
      "createdAt",
      "updatedAt",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ("id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator1693224812(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1072183914(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: QueryPart<any>|("id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator685221527(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: QueryPart<any>|("id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt")[], errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator16847607(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1693224812(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"id"?: undefined|CompasSqlOrderBy, "isComplete"?: undefined|CompasSqlOrderByOptionalField, "name"?: undefined|CompasSqlOrderBy, "scheduledAt"?: undefined|CompasSqlOrderByOptionalField, "createdAt"?: undefined|CompasSqlOrderBy, "updatedAt"?: undefined|CompasSqlOrderBy, }, errors?: InternalError[] }}
 */
export function anonymousValidator280827708(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys280827708.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3355 = anonymousValidator20803901(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val1392715645 = anonymousValidator198346889(
    value["isComplete"],
    `${propertyPath}.isComplete`,
  );
  if (val1392715645.errors) {
    errors = errors.concat(val1392715645.errors.flat(2));
  } else {
    result["isComplete"] = val1392715645.value;
  }
  const val3373707 = anonymousValidator20803901(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val176050624 = anonymousValidator198346889(
    value["scheduledAt"],
    `${propertyPath}.scheduledAt`,
  );
  if (val176050624.errors) {
    errors = errors.concat(val176050624.errors.flat(2));
  } else {
    result["scheduledAt"] = val176050624.value;
  }
  const val598371643 = anonymousValidator20803901(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator20803901(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "id"|"expires"|"createdAt"|"updatedAt", errors?: InternalError[] }}
 */
export function anonymousValidator1263846070(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "expires" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = ["id", "expires", "createdAt", "updatedAt"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ("id"|"expires"|"createdAt"|"updatedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator196705720(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1263846070(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: QueryPart<any>|("id"|"expires"|"createdAt"|"updatedAt")[], errors?: InternalError[] }}
 */
export function anonymousValidator2038758416(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: QueryPart<any>|("id"|"expires"|"createdAt"|"updatedAt")[], errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator16847607(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator196705720(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"id"?: undefined|CompasSqlOrderBy, "expires"?: undefined|CompasSqlOrderBy, "createdAt"?: undefined|CompasSqlOrderBy, "updatedAt"?: undefined|CompasSqlOrderBy, }, errors?: InternalError[] }}
 */
export function anonymousValidator144635851(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys144635851.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3355 = anonymousValidator20803901(value["id"], `${propertyPath}.id`);
  if (val3355.errors) {
    errors = errors.concat(val3355.errors.flat(2));
  } else {
    result["id"] = val3355.value;
  }
  const val1309235404 = anonymousValidator20803901(
    value["expires"],
    `${propertyPath}.expires`,
  );
  if (val1309235404.errors) {
    errors = errors.concat(val1309235404.errors.flat(2));
  } else {
    result["expires"] = val1309235404.value;
  }
  const val598371643 = anonymousValidator20803901(
    value["createdAt"],
    `${propertyPath}.createdAt`,
  );
  if (val598371643.errors) {
    errors = errors.concat(val598371643.errors.flat(2));
  } else {
    result["createdAt"] = val598371643.value;
  }
  const val1949194674 = anonymousValidator20803901(
    value["updatedAt"],
    `${propertyPath}.updatedAt`,
  );
  if (val1949194674.errors) {
    errors = errors.concat(val1949194674.errors.flat(2));
  } else {
    result["updatedAt"] = val1949194674.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileWhere, errors?: InternalError[] }}
 */
export function anonymousValidator65842827(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator2074494218(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileOrderBy, errors?: InternalError[] }}
 */
export function anonymousValidator1370514093(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1795948632(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileOrderBySpec, errors?: InternalError[] }}
 */
export function anonymousValidator1745737810(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator163358845(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileGroupOrderBy, errors?: InternalError[] }}
 */
export function anonymousValidator1055135624(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator753972035(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileGroupOrderBySpec, errors?: InternalError[] }}
 */
export function anonymousValidator2018879405(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator322356638(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileQueryBuilder, errors?: InternalError[] }}
 */
export function anonymousValidator2119152283(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator310044624(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreFileGroupWhere, "limit"?: undefined|number, "offset"?: undefined|number, "viaFile"?: undefined|StoreFileQueryTraverser, "viaParent"?: undefined|StoreFileGroupQueryTraverser, "viaChildren"?: undefined|StoreFileGroupQueryTraverser, }, errors?: InternalError[] }}
 */
export function anonymousValidator1274599578(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1274599578.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator481156646(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  const val449084074 = anonymousValidator1978760330(
    value["viaFile"],
    `${propertyPath}.viaFile`,
  );
  if (val449084074.errors) {
    errors = errors.concat(val449084074.errors.flat(2));
  } else {
    result["viaFile"] = val449084074.value;
  }
  const val1942816168 = anonymousValidator514437691(
    value["viaParent"],
    `${propertyPath}.viaParent`,
  );
  if (val1942816168.errors) {
    errors = errors.concat(val1942816168.errors.flat(2));
  } else {
    result["viaParent"] = val1942816168.value;
  }
  const val1748802605 = anonymousValidator514437691(
    value["viaChildren"],
    `${propertyPath}.viaChildren`,
  );
  if (val1748802605.errors) {
    errors = errors.concat(val1748802605.errors.flat(2));
  } else {
    result["viaChildren"] = val1748802605.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileGroupQueryTraverser, errors?: InternalError[] }}
 */
export function anonymousValidator514437691(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1274599578(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreFileWhere, "limit"?: undefined|number, "offset"?: undefined|number, "viaGroup"?: undefined|StoreFileGroupQueryTraverser, }, errors?: InternalError[] }}
 */
export function anonymousValidator1069465749(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1069465749.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator65842827(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  const val1037899537 = anonymousValidator514437691(
    value["viaGroup"],
    `${propertyPath}.viaGroup`,
  );
  if (val1037899537.errors) {
    errors = errors.concat(val1037899537.errors.flat(2));
  } else {
    result["viaGroup"] = val1037899537.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileQueryTraverser, errors?: InternalError[] }}
 */
export function anonymousValidator1978760330(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1069465749(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreFileGroupWhere, "orderBy"?: undefined|StoreFileGroupOrderBy, "orderBySpec"?: undefined|StoreFileGroupOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, "file"?: undefined|StoreFileQueryBuilder, "viaFile"?: undefined|StoreFileQueryTraverser, "parent"?: undefined|StoreFileGroupQueryBuilder, "viaParent"?: undefined|StoreFileGroupQueryTraverser, "children"?: undefined|StoreFileGroupQueryBuilder, "viaChildren"?: undefined|StoreFileGroupQueryTraverser, }, errors?: InternalError[] }}
 */
export function anonymousValidator1862233461(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1862233461.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator481156646(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val1207110587 = anonymousValidator1055135624(
    value["orderBy"],
    `${propertyPath}.orderBy`,
  );
  if (val1207110587.errors) {
    errors = errors.concat(val1207110587.errors.flat(2));
  } else {
    result["orderBy"] = val1207110587.value;
  }
  const val1147581856 = anonymousValidator2018879405(
    value["orderBySpec"],
    `${propertyPath}.orderBySpec`,
  );
  if (val1147581856.errors) {
    errors = errors.concat(val1147581856.errors.flat(2));
  } else {
    result["orderBySpec"] = val1147581856.value;
  }
  const val3122 = anonymousValidator1443576836(
    value["as"],
    `${propertyPath}.as`,
  );
  if (val3122.errors) {
    errors = errors.concat(val3122.errors.flat(2));
  } else {
    result["as"] = val3122.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  const val3143036 = anonymousValidator2119152283(
    value["file"],
    `${propertyPath}.file`,
  );
  if (val3143036.errors) {
    errors = errors.concat(val3143036.errors.flat(2));
  } else {
    result["file"] = val3143036.value;
  }
  const val449084074 = anonymousValidator1978760330(
    value["viaFile"],
    `${propertyPath}.viaFile`,
  );
  if (val449084074.errors) {
    errors = errors.concat(val449084074.errors.flat(2));
  } else {
    result["viaFile"] = val449084074.value;
  }
  const val995424086 = anonymousValidator1996607136(
    value["parent"],
    `${propertyPath}.parent`,
  );
  if (val995424086.errors) {
    errors = errors.concat(val995424086.errors.flat(2));
  } else {
    result["parent"] = val995424086.value;
  }
  const val1942816168 = anonymousValidator514437691(
    value["viaParent"],
    `${propertyPath}.viaParent`,
  );
  if (val1942816168.errors) {
    errors = errors.concat(val1942816168.errors.flat(2));
  } else {
    result["viaParent"] = val1942816168.value;
  }
  const val1659526655 = anonymousValidator1996607136(
    value["children"],
    `${propertyPath}.children`,
  );
  if (val1659526655.errors) {
    errors = errors.concat(val1659526655.errors.flat(2));
  } else {
    result["children"] = val1659526655.value;
  }
  const val1748802605 = anonymousValidator514437691(
    value["viaChildren"],
    `${propertyPath}.viaChildren`,
  );
  if (val1748802605.errors) {
    errors = errors.concat(val1748802605.errors.flat(2));
  } else {
    result["viaChildren"] = val1748802605.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreFileGroupQueryBuilder, errors?: InternalError[] }}
 */
export function anonymousValidator1996607136(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1862233461(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreFileWhere, "orderBy"?: undefined|StoreFileOrderBy, "orderBySpec"?: undefined|StoreFileOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, "group"?: undefined|StoreFileGroupQueryBuilder, "viaGroup"?: undefined|StoreFileGroupQueryTraverser, }, errors?: InternalError[] }}
 */
export function anonymousValidator310044624(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys310044624.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator65842827(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val1207110587 = anonymousValidator1370514093(
    value["orderBy"],
    `${propertyPath}.orderBy`,
  );
  if (val1207110587.errors) {
    errors = errors.concat(val1207110587.errors.flat(2));
  } else {
    result["orderBy"] = val1207110587.value;
  }
  const val1147581856 = anonymousValidator1745737810(
    value["orderBySpec"],
    `${propertyPath}.orderBySpec`,
  );
  if (val1147581856.errors) {
    errors = errors.concat(val1147581856.errors.flat(2));
  } else {
    result["orderBySpec"] = val1147581856.value;
  }
  const val3122 = anonymousValidator1443576836(
    value["as"],
    `${propertyPath}.as`,
  );
  if (val3122.errors) {
    errors = errors.concat(val3122.errors.flat(2));
  } else {
    result["as"] = val3122.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  const val98629247 = anonymousValidator1996607136(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val1037899537 = anonymousValidator514437691(
    value["viaGroup"],
    `${propertyPath}.viaGroup`,
  );
  if (val1037899537.errors) {
    errors = errors.concat(val1037899537.errors.flat(2));
  } else {
    result["viaGroup"] = val1037899537.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreJobWhere, errors?: InternalError[] }}
 */
export function anonymousValidator634541376(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1257773835(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreJobOrderBy, errors?: InternalError[] }}
 */
export function anonymousValidator1683806814(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator685221527(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreJobOrderBySpec, errors?: InternalError[] }}
 */
export function anonymousValidator608966855(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator280827708(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreJobWhere, "orderBy"?: undefined|StoreJobOrderBy, "orderBySpec"?: undefined|StoreJobOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, }, errors?: InternalError[] }}
 */
export function anonymousValidator343387919(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys343387919.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator634541376(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val1207110587 = anonymousValidator1683806814(
    value["orderBy"],
    `${propertyPath}.orderBy`,
  );
  if (val1207110587.errors) {
    errors = errors.concat(val1207110587.errors.flat(2));
  } else {
    result["orderBy"] = val1207110587.value;
  }
  const val1147581856 = anonymousValidator608966855(
    value["orderBySpec"],
    `${propertyPath}.orderBySpec`,
  );
  if (val1147581856.errors) {
    errors = errors.concat(val1147581856.errors.flat(2));
  } else {
    result["orderBySpec"] = val1147581856.value;
  }
  const val3122 = anonymousValidator1443576836(
    value["as"],
    `${propertyPath}.as`,
  );
  if (val3122.errors) {
    errors = errors.concat(val3122.errors.flat(2));
  } else {
    result["as"] = val3122.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreJobWhere, "limit"?: undefined|number, "offset"?: undefined|number, }, errors?: InternalError[] }}
 */
export function anonymousValidator1952914356(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1952914356.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator634541376(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreSessionWhere, errors?: InternalError[] }}
 */
export function anonymousValidator196488441(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator500057262(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreSessionOrderBy, errors?: InternalError[] }}
 */
export function anonymousValidator1928069733(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator2038758416(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|StoreSessionOrderBySpec, errors?: InternalError[] }}
 */
export function anonymousValidator1053930432(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator144635851(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreSessionWhere, "orderBy"?: undefined|StoreSessionOrderBy, "orderBySpec"?: undefined|StoreSessionOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, }, errors?: InternalError[] }}
 */
export function anonymousValidator647856360(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys647856360.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator196488441(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val1207110587 = anonymousValidator1928069733(
    value["orderBy"],
    `${propertyPath}.orderBy`,
  );
  if (val1207110587.errors) {
    errors = errors.concat(val1207110587.errors.flat(2));
  } else {
    result["orderBy"] = val1207110587.value;
  }
  const val1147581856 = anonymousValidator1053930432(
    value["orderBySpec"],
    `${propertyPath}.orderBySpec`,
  );
  if (val1147581856.errors) {
    errors = errors.concat(val1147581856.errors.flat(2));
  } else {
    result["orderBySpec"] = val1147581856.value;
  }
  const val3122 = anonymousValidator1443576836(
    value["as"],
    `${propertyPath}.as`,
  );
  if (val3122.errors) {
    errors = errors.concat(val3122.errors.flat(2));
  } else {
    result["as"] = val3122.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"where"?: undefined|StoreSessionWhere, "limit"?: undefined|number, "offset"?: undefined|number, }, errors?: InternalError[] }}
 */
export function anonymousValidator1805657267(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1805657267.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val113097959 = anonymousValidator196488441(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val102976443 = anonymousValidator963028965(
    value["limit"],
    `${propertyPath}.limit`,
  );
  if (val102976443.errors) {
    errors = errors.concat(val102976443.errors.flat(2));
  } else {
    result["limit"] = val102976443.value;
  }
  const val1019779949 = anonymousValidator963028965(
    value["offset"],
    `${propertyPath}.offset`,
  );
  if (val1019779949.errors) {
    errors = errors.concat(val1019779949.errors.flat(2));
  } else {
    result["offset"] = val1019779949.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
