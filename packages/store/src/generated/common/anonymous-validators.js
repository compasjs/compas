// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";
import { isQueryPart } from "@compas/store";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

/**
 * @template T
 * @typedef {import("@compas/stdlib").EitherN<T, InternalError>} EitherN
 */

const objectKeys599447075 = new Set([
  "bucketName",
  "contentLength",
  "contentType",
  "name",
  "meta",
  "id",
  "createdAt",
  "updatedAt",
]);
const objectKeys2144828802 = new Set(["transforms", "transformedFromOriginal"]);
const objectKeys1781782332 = new Set([
  "id",
  "isComplete",
  "priority",
  "scheduledAt",
  "name",
  "data",
  "retryCount",
  "handlerTimeout",
  "createdAt",
  "updatedAt",
]);
const objectKeys503384244 = new Set([
  "data",
  "checksum",
  "revokedAt",
  "id",
  "createdAt",
  "updatedAt",
]);
const objectKeys1337490931 = new Set([
  "expiresAt",
  "revokedAt",
  "createdAt",
  "id",
  "session",
  "refreshToken",
]);
const objectKeys2074494218 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "bucketName",
  "bucketNameNotEqual",
  "bucketNameIn",
  "bucketNameNotIn",
  "bucketNameLike",
  "bucketNameILike",
  "bucketNameNotLike",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
]);
const objectKeys1257773835 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "idGreaterThan",
  "idLowerThan",
  "isComplete",
  "isCompleteIsNull",
  "isCompleteIsNotNull",
  "name",
  "nameNotEqual",
  "nameIn",
  "nameNotIn",
  "nameLike",
  "nameILike",
  "nameNotLike",
  "scheduledAt",
  "scheduledAtNotEqual",
  "scheduledAtIn",
  "scheduledAtNotIn",
  "scheduledAtGreaterThan",
  "scheduledAtLowerThan",
  "scheduledAtIsNull",
  "scheduledAtIsNotNull",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
]);
const objectKeys1334934277 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "createdAt",
  "createdAtNotEqual",
  "createdAtIn",
  "createdAtNotIn",
  "createdAtGreaterThan",
  "createdAtLowerThan",
  "createdAtIsNull",
  "createdAtIsNotNull",
  "updatedAt",
  "updatedAtNotEqual",
  "updatedAtIn",
  "updatedAtNotIn",
  "updatedAtGreaterThan",
  "updatedAtLowerThan",
  "updatedAtIsNull",
  "updatedAtIsNotNull",
  "viaAccessTokens",
  "accessTokensNotExists",
]);
const objectKeys600974204 = new Set(["where", "limit", "offset"]);
const objectKeys1430489818 = new Set([
  "$raw",
  "$or",
  "id",
  "idNotEqual",
  "idIn",
  "idNotIn",
  "session",
  "sessionNotEqual",
  "sessionIn",
  "sessionNotIn",
  "expiresAt",
  "expiresAtNotEqual",
  "expiresAtIn",
  "expiresAtNotIn",
  "expiresAtGreaterThan",
  "expiresAtLowerThan",
  "refreshToken",
  "refreshTokenNotEqual",
  "refreshTokenIn",
  "refreshTokenNotIn",
  "refreshTokenIsNull",
  "refreshTokenIsNotNull",
  "revokedAt",
  "revokedAtNotEqual",
  "revokedAtIn",
  "revokedAtNotIn",
  "revokedAtGreaterThan",
  "revokedAtLowerThan",
  "revokedAtIsNull",
  "revokedAtIsNotNull",
  "viaSession",
  "viaRefreshToken",
  "viaAccessToken",
  "accessTokenNotExists",
]);
const objectKeys1577551207 = new Set(["where", "limit", "offset"]);
const objectKeys617486747 = new Set([
  "bucketName",
  "contentLength",
  "contentType",
  "name",
  "meta",
  "createdAt",
  "updatedAt",
]);
const objectKeys2007164840 = new Set(["$append"]);
const objectKeys1511542790 = new Set(["$add"]);
const objectKeys1442950861 = new Set(["$subtract"]);
const objectKeys553023933 = new Set(["$multiply"]);
const objectKeys661036808 = new Set(["$divide"]);
const objectKeys1476139765 = new Set(["$set"]);
const objectKeys1925201648 = new Set(["path", "value"]);
const objectKeys1462381984 = new Set(["$remove"]);
const objectKeys1247704095 = new Set(["path"]);
const objectKeys1992090661 = new Set(["$add"]);
const objectKeys962402990 = new Set(["$subtract"]);
const objectKeys165104378 = new Set(["update", "where", "returning"]);
const objectKeys600940900 = new Set([
  "isComplete",
  "priority",
  "scheduledAt",
  "name",
  "data",
  "retryCount",
  "handlerTimeout",
  "createdAt",
  "updatedAt",
]);
const objectKeys1802084014 = new Set(["$negate"]);
const objectKeys286367525 = new Set(["update", "where", "returning"]);
const objectKeys2102646924 = new Set([
  "data",
  "checksum",
  "revokedAt",
  "createdAt",
  "updatedAt",
]);
const objectKeys1516794677 = new Set(["update", "where", "returning"]);
const objectKeys84897941 = new Set([
  "expiresAt",
  "revokedAt",
  "createdAt",
  "session",
  "refreshToken",
]);
const objectKeys1345595702 = new Set(["update", "where", "returning"]);
const objectKeys163358845 = new Set([
  "id",
  "bucketName",
  "createdAt",
  "updatedAt",
]);
const objectKeys280827708 = new Set([
  "id",
  "isComplete",
  "name",
  "scheduledAt",
  "createdAt",
  "updatedAt",
]);
const objectKeys362930508 = new Set(["id", "createdAt", "updatedAt"]);
const objectKeys1864958291 = new Set([
  "id",
  "session",
  "expiresAt",
  "refreshToken",
  "revokedAt",
]);
const objectKeys310044624 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
  "select",
]);
const objectKeys343387919 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
  "select",
]);
const objectKeys2093168415 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
  "select",
  "accessTokens",
]);
const objectKeys1856722848 = new Set([
  "where",
  "orderBy",
  "orderBySpec",
  "as",
  "limit",
  "offset",
  "select",
  "session",
  "refreshToken",
  "accessToken",
]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator186795873(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator293751998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|any>}
 */
export function anonymousValidator926956431(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1443576836(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"transforms"?: undefined|any, "transformedFromOriginal"?: undefined|string, }>}
 */
export function anonymousValidator2144828802(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2144828802.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2144828802],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["transforms", anonymousValidator926956431],
    ["transformedFromOriginal", anonymousValidator1443576836],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreFileMeta>}
 */
export function anonymousValidator329780902(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  return anonymousValidator2144828802(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator981662321(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  value = value.trim();
  if (value.length < 36) {
    const min = 36;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 36) {
    const max = 36;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  value = value.toLowerCase();
  if (
    !/^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
      value,
    )
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator56355924(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.uuid.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator981662321(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<Date>}
 */
export function anonymousValidator1389014320(value, propertyPath) {
  if (isNil(value)) {
    return { value: new Date() };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"bucketName": string, "contentLength": number, "contentType": string, "name": string, "meta": StoreFileMeta, "id": string, "createdAt": Date, "updatedAt": Date, }>}
 */
export function anonymousValidator599447075(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys599447075.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys599447075],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["bucketName", anonymousValidator186795873],
    ["contentLength", anonymousValidator293751998],
    ["contentType", anonymousValidator186795873],
    ["name", anonymousValidator186795873],
    ["meta", anonymousValidator329780902],
    ["id", anonymousValidator56355924],
    ["createdAt", anonymousValidator1389014320],
    ["updatedAt", anonymousValidator1389014320],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator760095765(value, propertyPath) {
  if (isNil(value)) {
    return { value: 75 };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 100) {
    const max = 100;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator2089226208(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 99999) {
    const max = 99999;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"q": number, "w": number, }>}
 */
export function anonymousValidator376443596(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["q", anonymousValidator760095765],
    ["w", anonymousValidator2089226208],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1483765921(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator1174857441(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator326842456(value, propertyPath) {
  if (isNil(value)) {
    return { value: 0 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<any>}
 */
export function anonymousValidator1462196493(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1103865757(value, propertyPath) {
  if (isNil(value)) {
    return { value: 0 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator1065942849(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 1000) {
    const min = 1000;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"id": number, "isComplete": boolean, "priority": number, "scheduledAt": Date, "name": string, "data": any, "retryCount": number, "handlerTimeout"?: undefined|number, "createdAt": Date, "updatedAt": Date, }>}
 */
export function anonymousValidator1781782332(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1781782332.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1781782332],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["id", anonymousValidator1483765921],
    ["isComplete", anonymousValidator1174857441],
    ["priority", anonymousValidator326842456],
    ["scheduledAt", anonymousValidator1389014320],
    ["name", anonymousValidator186795873],
    ["data", anonymousValidator1462196493],
    ["retryCount", anonymousValidator1103865757],
    ["handlerTimeout", anonymousValidator1065942849],
    ["createdAt", anonymousValidator1389014320],
    ["updatedAt", anonymousValidator1389014320],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"accessToken": string, "q": number, "w": number, }>}
 */
export function anonymousValidator1105075285(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["accessToken", anonymousValidator186795873],
    ["q", anonymousValidator760095765],
    ["w", anonymousValidator2089226208],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|Date>}
 */
export function anonymousValidator1988053796(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"data": any, "checksum": string, "revokedAt"?: undefined|Date, "id": string, "createdAt": Date, "updatedAt": Date, }>}
 */
export function anonymousValidator503384244(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys503384244.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys503384244],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["data", anonymousValidator1462196493],
    ["checksum", anonymousValidator186795873],
    ["revokedAt", anonymousValidator1988053796],
    ["id", anonymousValidator56355924],
    ["createdAt", anonymousValidator1389014320],
    ["updatedAt", anonymousValidator1389014320],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<Date>}
 */
export function anonymousValidator448481401(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.undefined",
          info: {},
        },
      ],
    };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator546012715(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.uuid.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator981662321(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1802076175(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator981662321(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"expiresAt": Date, "revokedAt"?: undefined|Date, "createdAt": Date, "id": string, "session": string, "refreshToken"?: undefined|string, }>}
 */
export function anonymousValidator1337490931(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1337490931.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1337490931],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["expiresAt", anonymousValidator448481401],
    ["revokedAt", anonymousValidator1988053796],
    ["createdAt", anonymousValidator448481401],
    ["id", anonymousValidator56355924],
    ["session", anonymousValidator546012715],
    ["refreshToken", anonymousValidator1802076175],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|QueryPart<any>>}
 */
export function anonymousValidator1930640707(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!isQueryPart(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(StoreFileWhere)[]>}
 */
export function anonymousValidator1804070323(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator2074494218(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator1899069927(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator56355924(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]|QueryPart<any>>}
 */
export function anonymousValidator888270707(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|(string)[]|QueryPart<any>>} */
  let result = { errors: [] };
  result = anonymousValidator1899069927(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1930640707(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator890105892(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]|QueryPart<any>>}
 */
export function anonymousValidator869204168(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|(string)[]|QueryPart<any>>} */
  let result = { errors: [] };
  result = anonymousValidator890105892(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1930640707(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(Date)[]>}
 */
export function anonymousValidator1891060044(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator448481401(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(Date)[]|QueryPart<any>>}
 */
export function anonymousValidator764760480(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|(Date)[]|QueryPart<any>>} */
  let result = { errors: [] };
  result = anonymousValidator1891060044(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1930640707(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|boolean>}
 */
export function anonymousValidator196147222(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreFileWhere)[], "id"?: undefined|string, "idNotEqual"?: undefined|string, "idIn"?: undefined|(string)[]|QueryPart<any>, "idNotIn"?: undefined|(string)[]|QueryPart<any>, "bucketName"?: undefined|string, "bucketNameNotEqual"?: undefined|string, "bucketNameIn"?: undefined|(string)[]|QueryPart<any>, "bucketNameNotIn"?: undefined|(string)[]|QueryPart<any>, "bucketNameLike"?: undefined|string, "bucketNameILike"?: undefined|string, "bucketNameNotLike"?: undefined|string, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, }>}
 */
export function anonymousValidator2074494218(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2074494218.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2074494218],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["$raw", anonymousValidator1930640707],
    ["$or", anonymousValidator1804070323],
    ["id", anonymousValidator1802076175],
    ["idNotEqual", anonymousValidator1802076175],
    ["idIn", anonymousValidator888270707],
    ["idNotIn", anonymousValidator888270707],
    ["bucketName", anonymousValidator1443576836],
    ["bucketNameNotEqual", anonymousValidator1443576836],
    ["bucketNameIn", anonymousValidator869204168],
    ["bucketNameNotIn", anonymousValidator869204168],
    ["bucketNameLike", anonymousValidator1443576836],
    ["bucketNameILike", anonymousValidator1443576836],
    ["bucketNameNotLike", anonymousValidator1443576836],
    ["createdAt", anonymousValidator1988053796],
    ["createdAtNotEqual", anonymousValidator1988053796],
    ["createdAtIn", anonymousValidator764760480],
    ["createdAtNotIn", anonymousValidator764760480],
    ["createdAtGreaterThan", anonymousValidator1988053796],
    ["createdAtLowerThan", anonymousValidator1988053796],
    ["createdAtIsNull", anonymousValidator196147222],
    ["createdAtIsNotNull", anonymousValidator196147222],
    ["updatedAt", anonymousValidator1988053796],
    ["updatedAtNotEqual", anonymousValidator1988053796],
    ["updatedAtIn", anonymousValidator764760480],
    ["updatedAtNotIn", anonymousValidator764760480],
    ["updatedAtGreaterThan", anonymousValidator1988053796],
    ["updatedAtLowerThan", anonymousValidator1988053796],
    ["updatedAtIsNull", anonymousValidator196147222],
    ["updatedAtIsNotNull", anonymousValidator196147222],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(StoreJobWhere)[]>}
 */
export function anonymousValidator807003800(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1257773835(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator1108665246(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number") {
    value = Number(value);
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(number)[]>}
 */
export function anonymousValidator1033385158(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1483765921(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(number)[]|QueryPart<any>>}
 */
export function anonymousValidator2059610435(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|(number)[]|QueryPart<any>>} */
  let result = { errors: [] };
  result = anonymousValidator1033385158(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1930640707(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreJobWhere)[], "id"?: undefined|number, "idNotEqual"?: undefined|number, "idIn"?: undefined|(number)[]|QueryPart<any>, "idNotIn"?: undefined|(number)[]|QueryPart<any>, "idGreaterThan"?: undefined|number, "idLowerThan"?: undefined|number, "isComplete"?: undefined|boolean, "isCompleteIsNull"?: undefined|boolean, "isCompleteIsNotNull"?: undefined|boolean, "name"?: undefined|string, "nameNotEqual"?: undefined|string, "nameIn"?: undefined|(string)[]|QueryPart<any>, "nameNotIn"?: undefined|(string)[]|QueryPart<any>, "nameLike"?: undefined|string, "nameILike"?: undefined|string, "nameNotLike"?: undefined|string, "scheduledAt"?: undefined|Date, "scheduledAtNotEqual"?: undefined|Date, "scheduledAtIn"?: undefined|(Date)[]|QueryPart<any>, "scheduledAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "scheduledAtGreaterThan"?: undefined|Date, "scheduledAtLowerThan"?: undefined|Date, "scheduledAtIsNull"?: undefined|boolean, "scheduledAtIsNotNull"?: undefined|boolean, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, }>}
 */
export function anonymousValidator1257773835(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1257773835.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1257773835],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["$raw", anonymousValidator1930640707],
    ["$or", anonymousValidator807003800],
    ["id", anonymousValidator1108665246],
    ["idNotEqual", anonymousValidator1108665246],
    ["idIn", anonymousValidator2059610435],
    ["idNotIn", anonymousValidator2059610435],
    ["idGreaterThan", anonymousValidator1108665246],
    ["idLowerThan", anonymousValidator1108665246],
    ["isComplete", anonymousValidator196147222],
    ["isCompleteIsNull", anonymousValidator196147222],
    ["isCompleteIsNotNull", anonymousValidator196147222],
    ["name", anonymousValidator1443576836],
    ["nameNotEqual", anonymousValidator1443576836],
    ["nameIn", anonymousValidator869204168],
    ["nameNotIn", anonymousValidator869204168],
    ["nameLike", anonymousValidator1443576836],
    ["nameILike", anonymousValidator1443576836],
    ["nameNotLike", anonymousValidator1443576836],
    ["scheduledAt", anonymousValidator1988053796],
    ["scheduledAtNotEqual", anonymousValidator1988053796],
    ["scheduledAtIn", anonymousValidator764760480],
    ["scheduledAtNotIn", anonymousValidator764760480],
    ["scheduledAtGreaterThan", anonymousValidator1988053796],
    ["scheduledAtLowerThan", anonymousValidator1988053796],
    ["scheduledAtIsNull", anonymousValidator196147222],
    ["scheduledAtIsNotNull", anonymousValidator196147222],
    ["createdAt", anonymousValidator1988053796],
    ["createdAtNotEqual", anonymousValidator1988053796],
    ["createdAtIn", anonymousValidator764760480],
    ["createdAtNotIn", anonymousValidator764760480],
    ["createdAtGreaterThan", anonymousValidator1988053796],
    ["createdAtLowerThan", anonymousValidator1988053796],
    ["createdAtIsNull", anonymousValidator196147222],
    ["createdAtIsNotNull", anonymousValidator196147222],
    ["updatedAt", anonymousValidator1988053796],
    ["updatedAtNotEqual", anonymousValidator1988053796],
    ["updatedAtIn", anonymousValidator764760480],
    ["updatedAtNotIn", anonymousValidator764760480],
    ["updatedAtGreaterThan", anonymousValidator1988053796],
    ["updatedAtLowerThan", anonymousValidator1988053796],
    ["updatedAtIsNull", anonymousValidator196147222],
    ["updatedAtIsNotNull", anonymousValidator196147222],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(StoreSessionStoreWhere)[]>}
 */
export function anonymousValidator51142462(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1334934277(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(StoreSessionStoreTokenWhere)[]>}
 */
export function anonymousValidator1886215561(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1430489818(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreWhere>}
 */
export function anonymousValidator1582696858(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1334934277(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator963028965(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"where"?: undefined|StoreSessionStoreWhere, "limit"?: undefined|number, "offset"?: undefined|number, }>}
 */
export function anonymousValidator1577551207(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1577551207.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1577551207],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["where", anonymousValidator1582696858],
    ["limit", anonymousValidator963028965],
    ["offset", anonymousValidator963028965],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreSessionStoreTokenWhere)[], "id"?: undefined|string, "idNotEqual"?: undefined|string, "idIn"?: undefined|(string)[]|QueryPart<any>, "idNotIn"?: undefined|(string)[]|QueryPart<any>, "session"?: undefined|string, "sessionNotEqual"?: undefined|string, "sessionIn"?: undefined|(string)[]|QueryPart<any>, "sessionNotIn"?: undefined|(string)[]|QueryPart<any>, "expiresAt"?: undefined|Date, "expiresAtNotEqual"?: undefined|Date, "expiresAtIn"?: undefined|(Date)[]|QueryPart<any>, "expiresAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "expiresAtGreaterThan"?: undefined|Date, "expiresAtLowerThan"?: undefined|Date, "refreshToken"?: undefined|string, "refreshTokenNotEqual"?: undefined|string, "refreshTokenIn"?: undefined|(string)[]|QueryPart<any>, "refreshTokenNotIn"?: undefined|(string)[]|QueryPart<any>, "refreshTokenIsNull"?: undefined|boolean, "refreshTokenIsNotNull"?: undefined|boolean, "revokedAt"?: undefined|Date, "revokedAtNotEqual"?: undefined|Date, "revokedAtIn"?: undefined|(Date)[]|QueryPart<any>, "revokedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "revokedAtGreaterThan"?: undefined|Date, "revokedAtLowerThan"?: undefined|Date, "revokedAtIsNull"?: undefined|boolean, "revokedAtIsNotNull"?: undefined|boolean, "viaSession"?: undefined|{"where"?: undefined|StoreSessionStoreWhere, "limit"?: undefined|number, "offset"?: undefined|number, }, "viaRefreshToken"?: undefined|{"where"?: undefined|StoreSessionStoreTokenWhere, "limit"?: undefined|number, "offset"?: undefined|number, }, "viaAccessToken"?: undefined|{"where"?: undefined|StoreSessionStoreTokenWhere, "limit"?: undefined|number, "offset"?: undefined|number, }, "accessTokenNotExists"?: undefined|StoreSessionStoreTokenWhere, }>}
 */
export function anonymousValidator1430489818(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1430489818.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1430489818],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["$raw", anonymousValidator1930640707],
    ["$or", anonymousValidator1886215561],
    ["id", anonymousValidator1802076175],
    ["idNotEqual", anonymousValidator1802076175],
    ["idIn", anonymousValidator888270707],
    ["idNotIn", anonymousValidator888270707],
    ["session", anonymousValidator1802076175],
    ["sessionNotEqual", anonymousValidator1802076175],
    ["sessionIn", anonymousValidator888270707],
    ["sessionNotIn", anonymousValidator888270707],
    ["expiresAt", anonymousValidator1988053796],
    ["expiresAtNotEqual", anonymousValidator1988053796],
    ["expiresAtIn", anonymousValidator764760480],
    ["expiresAtNotIn", anonymousValidator764760480],
    ["expiresAtGreaterThan", anonymousValidator1988053796],
    ["expiresAtLowerThan", anonymousValidator1988053796],
    ["refreshToken", anonymousValidator1802076175],
    ["refreshTokenNotEqual", anonymousValidator1802076175],
    ["refreshTokenIn", anonymousValidator888270707],
    ["refreshTokenNotIn", anonymousValidator888270707],
    ["refreshTokenIsNull", anonymousValidator196147222],
    ["refreshTokenIsNotNull", anonymousValidator196147222],
    ["revokedAt", anonymousValidator1988053796],
    ["revokedAtNotEqual", anonymousValidator1988053796],
    ["revokedAtIn", anonymousValidator764760480],
    ["revokedAtNotIn", anonymousValidator764760480],
    ["revokedAtGreaterThan", anonymousValidator1988053796],
    ["revokedAtLowerThan", anonymousValidator1988053796],
    ["revokedAtIsNull", anonymousValidator196147222],
    ["revokedAtIsNotNull", anonymousValidator196147222],
    ["viaSession", anonymousValidator1577551207],
    ["viaRefreshToken", anonymousValidator600974204],
    ["viaAccessToken", anonymousValidator600974204],
    ["accessTokenNotExists", anonymousValidator2065515599],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreTokenWhere>}
 */
export function anonymousValidator2065515599(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1430489818(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"where"?: undefined|StoreSessionStoreTokenWhere, "limit"?: undefined|number, "offset"?: undefined|number, }>}
 */
export function anonymousValidator600974204(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys600974204.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys600974204],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["where", anonymousValidator2065515599],
    ["limit", anonymousValidator963028965],
    ["offset", anonymousValidator963028965],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$raw"?: undefined|QueryPart<any>, "$or"?: undefined|(StoreSessionStoreWhere)[], "id"?: undefined|string, "idNotEqual"?: undefined|string, "idIn"?: undefined|(string)[]|QueryPart<any>, "idNotIn"?: undefined|(string)[]|QueryPart<any>, "createdAt"?: undefined|Date, "createdAtNotEqual"?: undefined|Date, "createdAtIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "createdAtGreaterThan"?: undefined|Date, "createdAtLowerThan"?: undefined|Date, "createdAtIsNull"?: undefined|boolean, "createdAtIsNotNull"?: undefined|boolean, "updatedAt"?: undefined|Date, "updatedAtNotEqual"?: undefined|Date, "updatedAtIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtNotIn"?: undefined|(Date)[]|QueryPart<any>, "updatedAtGreaterThan"?: undefined|Date, "updatedAtLowerThan"?: undefined|Date, "updatedAtIsNull"?: undefined|boolean, "updatedAtIsNotNull"?: undefined|boolean, "viaAccessTokens"?: undefined|{"where"?: undefined|StoreSessionStoreTokenWhere, "limit"?: undefined|number, "offset"?: undefined|number, }, "accessTokensNotExists"?: undefined|StoreSessionStoreTokenWhere, }>}
 */
export function anonymousValidator1334934277(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1334934277.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1334934277],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["$raw", anonymousValidator1930640707],
    ["$or", anonymousValidator51142462],
    ["id", anonymousValidator1802076175],
    ["idNotEqual", anonymousValidator1802076175],
    ["idIn", anonymousValidator888270707],
    ["idNotIn", anonymousValidator888270707],
    ["createdAt", anonymousValidator1988053796],
    ["createdAtNotEqual", anonymousValidator1988053796],
    ["createdAtIn", anonymousValidator764760480],
    ["createdAtNotIn", anonymousValidator764760480],
    ["createdAtGreaterThan", anonymousValidator1988053796],
    ["createdAtLowerThan", anonymousValidator1988053796],
    ["createdAtIsNull", anonymousValidator196147222],
    ["createdAtIsNotNull", anonymousValidator196147222],
    ["updatedAt", anonymousValidator1988053796],
    ["updatedAtNotEqual", anonymousValidator1988053796],
    ["updatedAtIn", anonymousValidator764760480],
    ["updatedAtNotIn", anonymousValidator764760480],
    ["updatedAtGreaterThan", anonymousValidator1988053796],
    ["updatedAtLowerThan", anonymousValidator1988053796],
    ["updatedAtIsNull", anonymousValidator196147222],
    ["updatedAtIsNotNull", anonymousValidator196147222],
    ["viaAccessTokens", anonymousValidator600974204],
    ["accessTokensNotExists", anonymousValidator2065515599],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1182955981(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$append": string, }>}
 */
export function anonymousValidator2007164840(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2007164840.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2007164840],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$append", anonymousValidator186795873]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string|{"$append": string, }>}
 */
export function anonymousValidator2011937852(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|string|{"$append": string, }>} */
  let result = { errors: [] };
  result = anonymousValidator1182955981(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2007164840(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator930071084(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$add": number, }>}
 */
export function anonymousValidator1511542790(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1511542790.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1511542790],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$add", anonymousValidator293751998]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$subtract": number, }>}
 */
export function anonymousValidator1442950861(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1442950861.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1442950861],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$subtract", anonymousValidator293751998]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$multiply": number, }>}
 */
export function anonymousValidator553023933(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys553023933.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys553023933],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$multiply", anonymousValidator293751998]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$divide": number, }>}
 */
export function anonymousValidator661036808(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys661036808.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys661036808],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$divide", anonymousValidator293751998]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>}
 */
export function anonymousValidator222290681(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>} */
  let result = { errors: [] };
  result = anonymousValidator930071084(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1511542790(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1442950861(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator553023933(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator661036808(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number|string>}
 */
export function anonymousValidator2035392241(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<number|string>} */
  let result = { errors: [] };
  result = anonymousValidator293751998(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator186795873(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(number|string)[]>}
 */
export function anonymousValidator418417331(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator2035392241(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<any>}
 */
export function anonymousValidator1027346252(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"path": (number|string)[], "value": any, }>}
 */
export function anonymousValidator1925201648(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1925201648.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1925201648],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["path", anonymousValidator418417331],
    ["value", anonymousValidator1027346252],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$set": {"path": (number|string)[], "value": any, }, }>}
 */
export function anonymousValidator1476139765(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1476139765.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1476139765],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$set", anonymousValidator1925201648]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"path": (number|string)[], }>}
 */
export function anonymousValidator1247704095(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1247704095.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1247704095],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["path", anonymousValidator418417331]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$remove": {"path": (number|string)[], }, }>}
 */
export function anonymousValidator1462381984(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1462381984.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1462381984],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$remove", anonymousValidator1247704095]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"transforms"?: undefined|any, "transformedFromOriginal"?: undefined|string, }|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }>}
 */
export function anonymousValidator127301142(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|{"transforms"?: undefined|any, "transformedFromOriginal"?: undefined|string, }|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }>} */
  let result = { errors: [] };
  result = anonymousValidator2144828802(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1476139765(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1462381984(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<Date>}
 */
export function anonymousValidator845268601(value, propertyPath) {
  if (isNil(value)) {
    return { value: new Date() };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$add": string, }>}
 */
export function anonymousValidator1992090661(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1992090661.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1992090661],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$add", anonymousValidator186795873]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$subtract": string, }>}
 */
export function anonymousValidator962402990(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys962402990.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys962402990],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$subtract", anonymousValidator186795873]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|Date|{"$add": string, }|{"$subtract": string, }>}
 */
export function anonymousValidator1398947189(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|Date|{"$add": string, }|{"$subtract": string, }>} */
  let result = { errors: [] };
  result = anonymousValidator845268601(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1992090661(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator962402990(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"bucketName"?: undefined|string|{"$append": string, }, "contentLength"?: undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }, "contentType"?: undefined|string|{"$append": string, }, "name"?: undefined|string|{"$append": string, }, "meta"?: undefined|{"transforms"?: undefined|any, "transformedFromOriginal"?: undefined|string, }|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }, "createdAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, "updatedAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, }>}
 */
export function anonymousValidator617486747(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys617486747.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys617486747],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["bucketName", anonymousValidator2011937852],
    ["contentLength", anonymousValidator222290681],
    ["contentType", anonymousValidator2011937852],
    ["name", anonymousValidator2011937852],
    ["meta", anonymousValidator127301142],
    ["createdAt", anonymousValidator1398947189],
    ["updatedAt", anonymousValidator1398947189],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreFileUpdatePartial>}
 */
export function anonymousValidator468289341(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator617486747(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreFileWhere>}
 */
export function anonymousValidator1623962574(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator2074494218(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"*">}
 */
export function anonymousValidator358976960(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "*") {
    const oneOf = ["*"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt">}
 */
export function anonymousValidator1543934225(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "bucketName" &&
    value !== "contentLength" &&
    value !== "contentType" &&
    value !== "name" &&
    value !== "meta" &&
    value !== "id" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = [
      "bucketName",
      "contentLength",
      "contentType",
      "name",
      "meta",
      "id",
      "createdAt",
      "updatedAt",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1324726735(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1543934225(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"*"|("bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator538169824(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|"*"|("bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator358976960(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1324726735(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"update": StoreFileUpdatePartial, "where": StoreFileWhere, "returning"?: undefined|"*"|("bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt")[], }>}
 */
export function anonymousValidator165104378(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys165104378.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys165104378],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["update", anonymousValidator468289341],
    ["where", anonymousValidator1623962574],
    ["returning", anonymousValidator538169824],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
* @param {*} value
* @param {string} propertyPath
* @returns {EitherN<<I extends StoreFileUpdate>(
sql: import("@compas/store").Postgres,
input: I,
) => Promise<
import("@compas/store").Returning<StoreFile, I["returning"]>
>>}
*/
export function anonymousValidator248484974(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator897743470(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator2047524467(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"$negate": boolean, }>}
 */
export function anonymousValidator1802084014(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1802084014.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1802084014],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [["$negate", anonymousValidator2047524467]];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|boolean|{"$negate": boolean, }>}
 */
export function anonymousValidator437126703(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|boolean|{"$negate": boolean, }>} */
  let result = { errors: [] };
  result = anonymousValidator897743470(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1802084014(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator2799495(value, propertyPath) {
  if (isNil(value)) {
    return { value: 0 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>}
 */
export function anonymousValidator1285764902(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>} */
  let result = { errors: [] };
  result = anonymousValidator2799495(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1511542790(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1442950861(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator553023933(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator661036808(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<any>}
 */
export function anonymousValidator721172342(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|any|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }>}
 */
export function anonymousValidator618537896(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|any|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }>} */
  let result = { errors: [] };
  result = anonymousValidator721172342(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1476139765(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1462381984(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator1983266932(value, propertyPath) {
  if (isNil(value)) {
    return { value: 0 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>}
 */
export function anonymousValidator58608997(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>} */
  let result = { errors: [] };
  result = anonymousValidator1983266932(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1511542790(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1442950861(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator553023933(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator661036808(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|null|number>}
 */
export function anonymousValidator371634527(value, propertyPath) {
  if (isNil(value)) {
    return { value: value };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < 1000) {
    const min = 1000;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|null|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>}
 */
export function anonymousValidator1048226008(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|null|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }>} */
  let result = { errors: [] };
  result = anonymousValidator371634527(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1511542790(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1442950861(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator553023933(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator661036808(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"isComplete"?: undefined|boolean|{"$negate": boolean, }, "priority"?: undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }, "scheduledAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, "name"?: undefined|string|{"$append": string, }, "data"?: undefined|any|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }, "retryCount"?: undefined|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }, "handlerTimeout"?: undefined|null|number|{"$add": number, }|{"$subtract": number, }|{"$multiply": number, }|{"$divide": number, }, "createdAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, "updatedAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, }>}
 */
export function anonymousValidator600940900(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys600940900.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys600940900],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["isComplete", anonymousValidator437126703],
    ["priority", anonymousValidator1285764902],
    ["scheduledAt", anonymousValidator1398947189],
    ["name", anonymousValidator2011937852],
    ["data", anonymousValidator618537896],
    ["retryCount", anonymousValidator58608997],
    ["handlerTimeout", anonymousValidator1048226008],
    ["createdAt", anonymousValidator1398947189],
    ["updatedAt", anonymousValidator1398947189],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreJobUpdatePartial>}
 */
export function anonymousValidator1605797260(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator600940900(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreJobWhere>}
 */
export function anonymousValidator1216835869(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1257773835(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt">}
 */
export function anonymousValidator1079091822(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "isComplete" &&
    value !== "priority" &&
    value !== "scheduledAt" &&
    value !== "name" &&
    value !== "data" &&
    value !== "retryCount" &&
    value !== "handlerTimeout" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = [
      "id",
      "isComplete",
      "priority",
      "scheduledAt",
      "name",
      "data",
      "retryCount",
      "handlerTimeout",
      "createdAt",
      "updatedAt",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator68688236(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1079091822(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"*"|("id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator2017242205(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|"*"|("id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator358976960(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator68688236(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"update": StoreJobUpdatePartial, "where": StoreJobWhere, "returning"?: undefined|"*"|("id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt")[], }>}
 */
export function anonymousValidator286367525(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys286367525.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys286367525],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["update", anonymousValidator1605797260],
    ["where", anonymousValidator1216835869],
    ["returning", anonymousValidator2017242205],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
* @param {*} value
* @param {string} propertyPath
* @returns {EitherN<<I extends StoreJobUpdate>(
sql: import("@compas/store").Postgres,
input: I,
) => Promise<
import("@compas/store").Returning<StoreJob, I["returning"]>
>>}
*/
export function anonymousValidator321286861(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|null|Date>}
 */
export function anonymousValidator795383528(value, propertyPath) {
  if (isNil(value)) {
    return { value: value };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|null|Date|{"$add": string, }|{"$subtract": string, }>}
 */
export function anonymousValidator1827465744(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|null|Date|{"$add": string, }|{"$subtract": string, }>} */
  let result = { errors: [] };
  result = anonymousValidator795383528(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1992090661(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator962402990(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"data"?: undefined|any|{"$set": {"path": (number|string)[], "value": any, }, }|{"$remove": {"path": (number|string)[], }, }, "checksum"?: undefined|string|{"$append": string, }, "revokedAt"?: undefined|null|Date|{"$add": string, }|{"$subtract": string, }, "createdAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, "updatedAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, }>}
 */
export function anonymousValidator2102646924(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2102646924.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2102646924],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["data", anonymousValidator618537896],
    ["checksum", anonymousValidator2011937852],
    ["revokedAt", anonymousValidator1827465744],
    ["createdAt", anonymousValidator1398947189],
    ["updatedAt", anonymousValidator1398947189],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreSessionStoreUpdatePartial>}
 */
export function anonymousValidator75403188(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator2102646924(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreSessionStoreWhere>}
 */
export function anonymousValidator1874256931(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1334934277(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt">}
 */
export function anonymousValidator1972584104(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "data" &&
    value !== "checksum" &&
    value !== "revokedAt" &&
    value !== "id" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = [
      "data",
      "checksum",
      "revokedAt",
      "id",
      "createdAt",
      "updatedAt",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator260152150(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1972584104(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"*"|("data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1317514041(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|"*"|("data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator358976960(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator260152150(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"update": StoreSessionStoreUpdatePartial, "where": StoreSessionStoreWhere, "returning"?: undefined|"*"|("data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt")[], }>}
 */
export function anonymousValidator1516794677(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1516794677.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1516794677],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["update", anonymousValidator75403188],
    ["where", anonymousValidator1874256931],
    ["returning", anonymousValidator1317514041],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
* @param {*} value
* @param {string} propertyPath
* @returns {EitherN<<I extends StoreSessionStoreUpdate>(
sql: import("@compas/store").Postgres,
input: I,
) => Promise<
import("@compas/store").Returning<StoreSessionStore, I["returning"]>
>>}
*/
export function anonymousValidator1645773533(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|Date>}
 */
export function anonymousValidator685440859(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|Date|{"$add": string, }|{"$subtract": string, }>}
 */
export function anonymousValidator2131524087(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|Date|{"$add": string, }|{"$subtract": string, }>} */
  let result = { errors: [] };
  result = anonymousValidator685440859(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1992090661(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator962402990(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1883545524(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|string>} */
  let result = { errors: [] };
  result = anonymousValidator1802076175(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|null|string>}
 */
export function anonymousValidator290546203(value, propertyPath) {
  if (isNil(value)) {
    return { value: value };
  }
  return anonymousValidator981662321(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|null|string>}
 */
export function anonymousValidator1314728024(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|null|string>} */
  let result = { errors: [] };
  result = anonymousValidator290546203(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"expiresAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, "revokedAt"?: undefined|null|Date|{"$add": string, }|{"$subtract": string, }, "createdAt"?: undefined|Date|{"$add": string, }|{"$subtract": string, }, "session"?: undefined|string, "refreshToken"?: undefined|null|string, }>}
 */
export function anonymousValidator84897941(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys84897941.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys84897941],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["expiresAt", anonymousValidator2131524087],
    ["revokedAt", anonymousValidator1827465744],
    ["createdAt", anonymousValidator2131524087],
    ["session", anonymousValidator1883545524],
    ["refreshToken", anonymousValidator1314728024],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreSessionStoreTokenUpdatePartial>}
 */
export function anonymousValidator383643325(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator84897941(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<StoreSessionStoreTokenWhere>}
 */
export function anonymousValidator1134585010(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1430489818(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken">}
 */
export function anonymousValidator1022399486(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "expiresAt" &&
    value !== "revokedAt" &&
    value !== "createdAt" &&
    value !== "id" &&
    value !== "session" &&
    value !== "refreshToken"
  ) {
    const oneOf = [
      "expiresAt",
      "revokedAt",
      "createdAt",
      "id",
      "session",
      "refreshToken",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken")[]>}
 */
export function anonymousValidator267319364(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1022399486(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"*"|("expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken")[]>}
 */
export function anonymousValidator17493427(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|"*"|("expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken")[]>} */
  let result = { errors: [] };
  result = anonymousValidator358976960(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator267319364(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"update": StoreSessionStoreTokenUpdatePartial, "where": StoreSessionStoreTokenWhere, "returning"?: undefined|"*"|("expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken")[], }>}
 */
export function anonymousValidator1345595702(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1345595702.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1345595702],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["update", anonymousValidator383643325],
    ["where", anonymousValidator1134585010],
    ["returning", anonymousValidator17493427],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
* @param {*} value
* @param {string} propertyPath
* @returns {EitherN<<I extends StoreSessionStoreTokenUpdate>(
sql: import("@compas/store").Postgres,
input: I,
) => Promise<
import("@compas/store").Returning<StoreSessionStoreToken, I["returning"]>
>>}
*/
export function anonymousValidator332315806(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<QueryPart<any>>}
 */
export function anonymousValidator62764704(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  if (!isQueryPart(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"id"|"bucketName"|"createdAt"|"updatedAt">}
 */
export function anonymousValidator988235265(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "bucketName" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = ["id", "bucketName", "createdAt", "updatedAt"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("id"|"bucketName"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1157993407(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator988235265(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<QueryPart<any>|("id"|"bucketName"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1795948632(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<QueryPart<any>|("id"|"bucketName"|"createdAt"|"updatedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator62764704(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1157993407(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"ASC"|"DESC">}
 */
export function anonymousValidator80886428(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "ASC" && value !== "DESC") {
    const oneOf = ["ASC", "DESC"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|CompasOrderBy>}
 */
export function anonymousValidator704118887(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator80886428(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"id"?: undefined|CompasOrderBy, "bucketName"?: undefined|CompasOrderBy, "createdAt"?: undefined|CompasOrderBy, "updatedAt"?: undefined|CompasOrderBy, }>}
 */
export function anonymousValidator163358845(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys163358845.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys163358845],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["id", anonymousValidator704118887],
    ["bucketName", anonymousValidator704118887],
    ["createdAt", anonymousValidator704118887],
    ["updatedAt", anonymousValidator704118887],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt">}
 */
export function anonymousValidator1072183914(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "isComplete" &&
    value !== "name" &&
    value !== "scheduledAt" &&
    value !== "createdAt" &&
    value !== "updatedAt"
  ) {
    const oneOf = [
      "id",
      "isComplete",
      "name",
      "scheduledAt",
      "createdAt",
      "updatedAt",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1693224812(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1072183914(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<QueryPart<any>|("id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator685221527(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<QueryPart<any>|("id"|"isComplete"|"name"|"scheduledAt"|"createdAt"|"updatedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator62764704(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1693224812(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"ASC"|"DESC"|"ASC NULLS FIRST"|"DESC NULLS LAST">}
 */
export function anonymousValidator293130468(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "ASC" &&
    value !== "DESC" &&
    value !== "ASC NULLS FIRST" &&
    value !== "DESC NULLS LAST"
  ) {
    const oneOf = ["ASC", "DESC", "ASC NULLS FIRST", "DESC NULLS LAST"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|CompasOrderByOptional>}
 */
export function anonymousValidator1515977191(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator293130468(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"id"?: undefined|CompasOrderBy, "isComplete"?: undefined|CompasOrderByOptional, "name"?: undefined|CompasOrderBy, "scheduledAt"?: undefined|CompasOrderByOptional, "createdAt"?: undefined|CompasOrderBy, "updatedAt"?: undefined|CompasOrderBy, }>}
 */
export function anonymousValidator280827708(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys280827708.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys280827708],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["id", anonymousValidator704118887],
    ["isComplete", anonymousValidator1515977191],
    ["name", anonymousValidator704118887],
    ["scheduledAt", anonymousValidator1515977191],
    ["createdAt", anonymousValidator704118887],
    ["updatedAt", anonymousValidator704118887],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"id"|"createdAt"|"updatedAt">}
 */
export function anonymousValidator1417351642(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "id" && value !== "createdAt" && value !== "updatedAt") {
    const oneOf = ["id", "createdAt", "updatedAt"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator800802652(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1417351642(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<QueryPart<any>|("id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1196685479(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<QueryPart<any>|("id"|"createdAt"|"updatedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator62764704(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator800802652(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"id"?: undefined|CompasOrderBy, "createdAt"?: undefined|CompasOrderBy, "updatedAt"?: undefined|CompasOrderBy, }>}
 */
export function anonymousValidator362930508(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys362930508.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys362930508],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["id", anonymousValidator704118887],
    ["createdAt", anonymousValidator704118887],
    ["updatedAt", anonymousValidator704118887],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"id"|"session"|"expiresAt"|"refreshToken"|"revokedAt">}
 */
export function anonymousValidator350591811(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "id" &&
    value !== "session" &&
    value !== "expiresAt" &&
    value !== "refreshToken" &&
    value !== "revokedAt"
  ) {
    const oneOf = ["id", "session", "expiresAt", "refreshToken", "revokedAt"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("id"|"session"|"expiresAt"|"refreshToken"|"revokedAt")[]>}
 */
export function anonymousValidator644613499(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator350591811(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<QueryPart<any>|("id"|"session"|"expiresAt"|"refreshToken"|"revokedAt")[]>}
 */
export function anonymousValidator2086080888(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<QueryPart<any>|("id"|"session"|"expiresAt"|"refreshToken"|"revokedAt")[]>} */
  let result = { errors: [] };
  result = anonymousValidator62764704(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator644613499(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"id"?: undefined|CompasOrderBy, "session"?: undefined|CompasOrderBy, "expiresAt"?: undefined|CompasOrderBy, "refreshToken"?: undefined|CompasOrderByOptional, "revokedAt"?: undefined|CompasOrderByOptional, }>}
 */
export function anonymousValidator1864958291(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1864958291.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1864958291],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["id", anonymousValidator704118887],
    ["session", anonymousValidator704118887],
    ["expiresAt", anonymousValidator704118887],
    ["refreshToken", anonymousValidator1515977191],
    ["revokedAt", anonymousValidator1515977191],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreFileWhere>}
 */
export function anonymousValidator65842827(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator2074494218(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreFileOrderBy>}
 */
export function anonymousValidator1370514093(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1795948632(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreFileOrderBySpec>}
 */
export function anonymousValidator1745737810(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator163358845(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1532767426(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: [
        "bucketName",
        "contentLength",
        "contentType",
        "name",
        "meta",
        "id",
        "createdAt",
        "updatedAt",
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.min",
          info: { min },
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1543934225(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"where"?: undefined|StoreFileWhere, "orderBy"?: undefined|StoreFileOrderBy, "orderBySpec"?: undefined|StoreFileOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, "select": ("bucketName"|"contentLength"|"contentType"|"name"|"meta"|"id"|"createdAt"|"updatedAt")[], }>}
 */
export function anonymousValidator310044624(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys310044624.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys310044624],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["where", anonymousValidator65842827],
    ["orderBy", anonymousValidator1370514093],
    ["orderBySpec", anonymousValidator1745737810],
    ["as", anonymousValidator1443576836],
    ["limit", anonymousValidator963028965],
    ["offset", anonymousValidator963028965],
    ["select", anonymousValidator1532767426],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreJobWhere>}
 */
export function anonymousValidator634541376(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1257773835(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreJobOrderBy>}
 */
export function anonymousValidator1683806814(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator685221527(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreJobOrderBySpec>}
 */
export function anonymousValidator608966855(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator280827708(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator582777968(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: [
        "id",
        "isComplete",
        "priority",
        "scheduledAt",
        "name",
        "data",
        "retryCount",
        "handlerTimeout",
        "createdAt",
        "updatedAt",
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.min",
          info: { min },
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1079091822(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"where"?: undefined|StoreJobWhere, "orderBy"?: undefined|StoreJobOrderBy, "orderBySpec"?: undefined|StoreJobOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, "select": ("id"|"isComplete"|"priority"|"scheduledAt"|"name"|"data"|"retryCount"|"handlerTimeout"|"createdAt"|"updatedAt")[], }>}
 */
export function anonymousValidator343387919(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys343387919.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys343387919],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["where", anonymousValidator634541376],
    ["orderBy", anonymousValidator1683806814],
    ["orderBySpec", anonymousValidator608966855],
    ["as", anonymousValidator1443576836],
    ["limit", anonymousValidator963028965],
    ["offset", anonymousValidator963028965],
    ["select", anonymousValidator582777968],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreOrderBy>}
 */
export function anonymousValidator1221642756(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1196685479(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreOrderBySpec>}
 */
export function anonymousValidator2142999519(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator362930508(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt")[]>}
 */
export function anonymousValidator1791620536(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: ["data", "checksum", "revokedAt", "id", "createdAt", "updatedAt"],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.min",
          info: { min },
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1972584104(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreTokenOrderBy>}
 */
export function anonymousValidator1834466899(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator2086080888(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreTokenOrderBySpec>}
 */
export function anonymousValidator1672671480(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1864958291(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<("expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken")[]>}
 */
export function anonymousValidator1139804596(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: [
        "expiresAt",
        "revokedAt",
        "createdAt",
        "id",
        "session",
        "refreshToken",
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.min",
          info: { min },
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1022399486(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreQueryBuilder>}
 */
export function anonymousValidator1827379372(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator2093168415(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"where"?: undefined|StoreSessionStoreTokenWhere, "orderBy"?: undefined|StoreSessionStoreTokenOrderBy, "orderBySpec"?: undefined|StoreSessionStoreTokenOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, "select": ("expiresAt"|"revokedAt"|"createdAt"|"id"|"session"|"refreshToken")[], "session"?: undefined|StoreSessionStoreQueryBuilder, "refreshToken"?: undefined|StoreSessionStoreTokenQueryBuilder, "accessToken"?: undefined|StoreSessionStoreTokenQueryBuilder, }>}
 */
export function anonymousValidator1856722848(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1856722848.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1856722848],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["where", anonymousValidator2065515599],
    ["orderBy", anonymousValidator1834466899],
    ["orderBySpec", anonymousValidator1672671480],
    ["as", anonymousValidator1443576836],
    ["limit", anonymousValidator963028965],
    ["offset", anonymousValidator963028965],
    ["select", anonymousValidator1139804596],
    ["session", anonymousValidator1827379372],
    ["refreshToken", anonymousValidator145903947],
    ["accessToken", anonymousValidator145903947],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|StoreSessionStoreTokenQueryBuilder>}
 */
export function anonymousValidator145903947(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1856722848(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"where"?: undefined|StoreSessionStoreWhere, "orderBy"?: undefined|StoreSessionStoreOrderBy, "orderBySpec"?: undefined|StoreSessionStoreOrderBySpec, "as"?: undefined|string, "limit"?: undefined|number, "offset"?: undefined|number, "select": ("data"|"checksum"|"revokedAt"|"id"|"createdAt"|"updatedAt")[], "accessTokens"?: undefined|StoreSessionStoreTokenQueryBuilder, }>}
 */
export function anonymousValidator2093168415(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2093168415.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2093168415],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  /**
   * @type {[string, (value: *, propertyPath: string) => EitherN<*>][]}
   */
  const validatorPairs = [
    ["where", anonymousValidator1582696858],
    ["orderBy", anonymousValidator1221642756],
    ["orderBySpec", anonymousValidator2142999519],
    ["as", anonymousValidator1443576836],
    ["limit", anonymousValidator963028965],
    ["offset", anonymousValidator963028965],
    ["select", anonymousValidator1791620536],
    ["accessTokens", anonymousValidator145903947],
  ];
  for (const [key, validator] of validatorPairs) {
    const validatorResult = validator(value[key], `${propertyPath}.${key}`);
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result[key] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
