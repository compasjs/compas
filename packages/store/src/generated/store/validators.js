// Generated by @compas/code-gen

import { isQueryPart } from "@compas/store";
/**
 * @template T, E
 * @typedef {{ value: T, error?: never}|{ value?: never, error: E }} Either
 */

/**
 * @typedef {Record<string, any|undefined>} ValidatorErrorMap
 */

const isRecord = (v) => !!v && typeof v === "object" && !Array.isArray(v);

/**
 * Postgres based file storage.
 *
 * @param {import("../common/types.js").StoreFileInput|any} value
 * @returns {Either<import("../common/types.js").StoreFile, ValidatorErrorMap>}
 */
export function validateStoreFile(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "contentLength",
        "bucketName",
        "contentType",
        "name",
        "meta",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        contentLength: undefined,
        bucketName: undefined,
        contentType: undefined,
        name: undefined,
        meta: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (
        value["contentLength"] === null ||
        value["contentLength"] === undefined
      ) {
        errorMap[`$.contentLength`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber2 = value["contentLength"];
        if (
          typeof convertedNumber2 !== "number" &&
          typeof convertedNumber2 === "string"
        ) {
          convertedNumber2 = Number(convertedNumber2);
        }
        if (
          typeof convertedNumber2 !== "number" ||
          isNaN(convertedNumber2) ||
          !isFinite(convertedNumber2) ||
          !Number.isInteger(convertedNumber2)
        ) {
          errorMap[`$.contentLength`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber2 < -2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber2 > 2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["contentLength"] = convertedNumber2;
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        errorMap[`$.bucketName`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString3 = value["bucketName"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length < 1) {
            errorMap[`$.bucketName`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["bucketName"] = convertedString3;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        errorMap[`$.contentType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString4 = value["contentType"];
        if (typeof convertedString4 !== "string") {
          errorMap[`$.contentType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString4.length < 1) {
            errorMap[`$.contentType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["contentType"] = convertedString4;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString5 = value["name"];
        if (typeof convertedString5 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString5.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString5;
          }
        }
      }
      if (value["meta"] === null || value["meta"] === undefined) {
        result["meta"] = {};
      } else {
        const refResult6 = validateStoreFileMeta(value["meta"]);

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.meta${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["meta"] = refResult6.value;
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * User definable, optional object to store whatever you want
 *
 * @param {import("../common/types.js").StoreFileMetaInput|any} value
 * @returns {Either<import("../common/types.js").StoreFileMeta, ValidatorErrorMap>}
 */
export function validateStoreFileMeta(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = {};
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "transforms",
        "transformedFromOriginal",
        "originalWidth",
        "originalHeight",
        "placeholderImage",
        "altText",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        transforms: undefined,
        transformedFromOriginal: undefined,
        originalWidth: undefined,
        originalHeight: undefined,
        placeholderImage: undefined,
        altText: undefined,
      };

      if (value["transforms"] === null || value["transforms"] === undefined) {
        result["transforms"] = undefined;
      } else {
        result["transforms"] = value["transforms"];
      }
      if (
        value["transformedFromOriginal"] === null ||
        value["transformedFromOriginal"] === undefined
      ) {
        result["transformedFromOriginal"] = undefined;
      } else {
        /** @type {string} */
        const convertedString2 = value["transformedFromOriginal"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.transformedFromOriginal`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length === 0) {
            result["transformedFromOriginal"] = undefined;
          } else {
            if (convertedString2.length < 1) {
              errorMap[`$.transformedFromOriginal`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["transformedFromOriginal"] = convertedString2;
            }
          }
        }
      }
      if (
        value["originalWidth"] === null ||
        value["originalWidth"] === undefined
      ) {
        result["originalWidth"] = undefined;
      } else {
        let convertedNumber3 = value["originalWidth"];
        if (
          typeof convertedNumber3 !== "number" &&
          typeof convertedNumber3 === "string"
        ) {
          convertedNumber3 = Number(convertedNumber3);
        }
        if (
          typeof convertedNumber3 !== "number" ||
          isNaN(convertedNumber3) ||
          !isFinite(convertedNumber3) ||
          !Number.isInteger(convertedNumber3)
        ) {
          errorMap[`$.originalWidth`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber3 < -2147483647) {
          errorMap[`$.originalWidth`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber3 > 2147483647) {
          errorMap[`$.originalWidth`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["originalWidth"] = convertedNumber3;
        }
      }
      if (
        value["originalHeight"] === null ||
        value["originalHeight"] === undefined
      ) {
        result["originalHeight"] = undefined;
      } else {
        let convertedNumber4 = value["originalHeight"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.originalHeight`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < -2147483647) {
          errorMap[`$.originalHeight`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber4 > 2147483647) {
          errorMap[`$.originalHeight`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["originalHeight"] = convertedNumber4;
        }
      }
      if (
        value["placeholderImage"] === null ||
        value["placeholderImage"] === undefined
      ) {
        result["placeholderImage"] = undefined;
      } else {
        /** @type {string} */
        const convertedString5 = value["placeholderImage"];
        if (typeof convertedString5 !== "string") {
          errorMap[`$.placeholderImage`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString5.length === 0) {
            result["placeholderImage"] = undefined;
          } else {
            if (convertedString5.length < 1) {
              errorMap[`$.placeholderImage`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["placeholderImage"] = convertedString5;
            }
          }
        }
      }
      if (value["altText"] === null || value["altText"] === undefined) {
        result["altText"] = undefined;
      } else {
        /** @type {string} */
        const convertedString6 = value["altText"];
        if (typeof convertedString6 !== "string") {
          errorMap[`$.altText`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString6.length === 0) {
            result["altText"] = undefined;
          } else {
            if (convertedString6.length < 1) {
              errorMap[`$.altText`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["altText"] = convertedString6;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileWhere|any} value
 * @returns {Either<import("../common/types.js").StoreFileWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreFileWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "$raw",
        "$or",
        "id",
        "idNotEqual",
        "idIn",
        "idNotIn",
        "bucketName",
        "bucketNameNotEqual",
        "bucketNameIn",
        "bucketNameNotIn",
        "bucketNameLike",
        "bucketNameILike",
        "bucketNameNotLike",
        "createdAt",
        "createdAtNotEqual",
        "createdAtIn",
        "createdAtNotIn",
        "createdAtGreaterThan",
        "createdAtLowerThan",
        "updatedAt",
        "updatedAtNotEqual",
        "updatedAtIn",
        "updatedAtNotIn",
        "updatedAtGreaterThan",
        "updatedAtLowerThan",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        $raw: undefined,
        $or: undefined,
        id: undefined,
        idNotEqual: undefined,
        idIn: undefined,
        idNotIn: undefined,
        bucketName: undefined,
        bucketNameNotEqual: undefined,
        bucketNameIn: undefined,
        bucketNameNotIn: undefined,
        bucketNameLike: undefined,
        bucketNameILike: undefined,
        bucketNameNotLike: undefined,
        createdAt: undefined,
        createdAtNotEqual: undefined,
        createdAtIn: undefined,
        createdAtNotIn: undefined,
        createdAtGreaterThan: undefined,
        createdAtLowerThan: undefined,
        updatedAt: undefined,
        updatedAtNotEqual: undefined,
        updatedAtIn: undefined,
        updatedAtNotIn: undefined,
        updatedAtGreaterThan: undefined,
        updatedAtLowerThan: undefined,
      };

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = value["$or"];

        if (!Array.isArray(intermediateValue3)) {
          errorMap[`$.$or`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          result["$or"] = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              const refResult3 = validateStoreFileWhereValidated(
                intermediateValue3[i3],
              );

              if (refResult3.error) {
                for (const errorKey of Object.keys(refResult3.error)) {
                  intermediateErrorMap3[`$.${i3}${errorKey.substring(1)}`] =
                    refResult3.error[errorKey];
                }
              }
              intermediateResult3[i3] = refResult3.value;
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          result["$or"] = intermediateResult3;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["idNotEqual"]))
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["idNotEqual"].length === 32) {
          result["idNotEqual"] = `${value["idNotEqual"].slice(0, 8)}-${value[
            "idNotEqual"
          ].slice(8, 12)}-${value["idNotEqual"].slice(12, 16)}-${value[
            "idNotEqual"
          ].slice(16, 20)}-${value["idNotEqual"].slice(20)}`;
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap8 = {};
            /** @type {Array<any>} */
            const intermediateResult8 = [];
            /** @type {any | Array<any>} */
            const intermediateValue8 = intermediateValue7;

            if (!Array.isArray(intermediateValue8)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.array",
                value: intermediateValue8,
              };
            } else {
              intermediateResult7 = [];
              for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                if (
                  intermediateValue8[i8] === null ||
                  intermediateValue8[i8] === undefined
                ) {
                  intermediateErrorMap8[`$.${i8}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue8[i8] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue8[i8],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue8[i8]))
                  ) {
                    intermediateErrorMap8[`$.${i8}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue8[i8].length === 32) {
                    intermediateResult8[i8] = `${intermediateValue8[i8].slice(
                      0,
                      8,
                    )}-${intermediateValue8[i8].slice(
                      8,
                      12,
                    )}-${intermediateValue8[i8].slice(
                      12,
                      16,
                    )}-${intermediateValue8[i8].slice(
                      16,
                      20,
                    )}-${intermediateValue8[i8].slice(20)}`;
                  } else {
                    intermediateResult8[i8] = intermediateValue8[i8];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap8).length) {
              for (const errorKey of Object.keys(intermediateErrorMap8)) {
                intermediateErrorMap7[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap8[errorKey];
              }
            } else {
              intermediateResult7 = intermediateResult8;
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue7)) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap9 = {};
            /** @type {Array<any>} */
            const intermediateResult9 = [];
            /** @type {any | Array<any>} */
            const intermediateValue9 = intermediateValue8;

            if (!Array.isArray(intermediateValue9)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.array",
                value: intermediateValue9,
              };
            } else {
              intermediateResult8 = [];
              for (let i9 = 0; i9 < intermediateValue9.length; ++i9) {
                if (
                  intermediateValue9[i9] === null ||
                  intermediateValue9[i9] === undefined
                ) {
                  intermediateErrorMap9[`$.${i9}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue9[i9] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue9[i9],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue9[i9]))
                  ) {
                    intermediateErrorMap9[`$.${i9}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue9[i9].length === 32) {
                    intermediateResult9[i9] = `${intermediateValue9[i9].slice(
                      0,
                      8,
                    )}-${intermediateValue9[i9].slice(
                      8,
                      12,
                    )}-${intermediateValue9[i9].slice(
                      12,
                      16,
                    )}-${intermediateValue9[i9].slice(
                      16,
                      20,
                    )}-${intermediateValue9[i9].slice(20)}`;
                  } else {
                    intermediateResult9[i9] = intermediateValue9[i9];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap9).length) {
              for (const errorKey of Object.keys(intermediateErrorMap9)) {
                intermediateErrorMap8[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap9[errorKey];
              }
            } else {
              intermediateResult8 = intermediateResult9;
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue8)) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        /** @type {string} */
        const convertedString7 = value["bucketName"];
        if (typeof convertedString7 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString7.length === 0) {
            result["bucketName"] = undefined;
          } else {
            if (convertedString7.length < 1) {
              errorMap[`$.bucketName`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketName"] = convertedString7;
            }
          }
        }
      }
      if (
        value["bucketNameNotEqual"] === null ||
        value["bucketNameNotEqual"] === undefined
      ) {
        result["bucketNameNotEqual"] = undefined;
      } else {
        /** @type {string} */
        const convertedString8 = value["bucketNameNotEqual"];
        if (typeof convertedString8 !== "string") {
          errorMap[`$.bucketNameNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString8.length === 0) {
            result["bucketNameNotEqual"] = undefined;
          } else {
            if (convertedString8.length < 1) {
              errorMap[`$.bucketNameNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameNotEqual"] = convertedString8;
            }
          }
        }
      }
      if (
        value["bucketNameIn"] === null ||
        value["bucketNameIn"] === undefined
      ) {
        result["bucketNameIn"] = undefined;
      } else {
        let hasAnyOfMatch9 = false;
        errorMap[`$.bucketNameIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["bucketNameIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap12 = {};
            /** @type {Array<any>} */
            const intermediateResult12 = [];
            /** @type {any | Array<any>} */
            const intermediateValue12 = intermediateValue11;

            if (!Array.isArray(intermediateValue12)) {
              intermediateErrorMap11[`$`] = {
                key: "validator.array",
                value: intermediateValue12,
              };
            } else {
              intermediateResult11 = [];
              for (let i12 = 0; i12 < intermediateValue12.length; ++i12) {
                if (
                  intermediateValue12[i12] === null ||
                  intermediateValue12[i12] === undefined
                ) {
                  intermediateErrorMap12[`$.${i12}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  const convertedString12 = intermediateValue12[i12];
                  if (typeof convertedString12 !== "string") {
                    intermediateErrorMap12[`$.${i12}`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString12.length < 1) {
                      intermediateErrorMap12[`$.${i12}`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult12[i12] = convertedString12;
                    }
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap12).length) {
              for (const errorKey of Object.keys(intermediateErrorMap12)) {
                intermediateErrorMap11[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap12[errorKey];
              }
            } else {
              intermediateResult11 = intermediateResult12;
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.bucketNameIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.bucketNameIn`];
            result["bucketNameIn"] = intermediateResult11;
          }
        }
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["bucketNameIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue11)) {
              intermediateResult11 = intermediateValue11;
            } else {
              intermediateErrorMap11[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.bucketNameIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.bucketNameIn`];
            result["bucketNameIn"] = intermediateResult11;
          }
        }
      }
      if (
        value["bucketNameNotIn"] === null ||
        value["bucketNameNotIn"] === undefined
      ) {
        result["bucketNameNotIn"] = undefined;
      } else {
        let hasAnyOfMatch10 = false;
        errorMap[`$.bucketNameNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          const intermediateValue12 = value["bucketNameNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap13 = {};
            /** @type {Array<any>} */
            const intermediateResult13 = [];
            /** @type {any | Array<any>} */
            const intermediateValue13 = intermediateValue12;

            if (!Array.isArray(intermediateValue13)) {
              intermediateErrorMap12[`$`] = {
                key: "validator.array",
                value: intermediateValue13,
              };
            } else {
              intermediateResult12 = [];
              for (let i13 = 0; i13 < intermediateValue13.length; ++i13) {
                if (
                  intermediateValue13[i13] === null ||
                  intermediateValue13[i13] === undefined
                ) {
                  intermediateErrorMap13[`$.${i13}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  const convertedString13 = intermediateValue13[i13];
                  if (typeof convertedString13 !== "string") {
                    intermediateErrorMap13[`$.${i13}`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString13.length < 1) {
                      intermediateErrorMap13[`$.${i13}`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult13[i13] = convertedString13;
                    }
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap13).length) {
              for (const errorKey of Object.keys(intermediateErrorMap13)) {
                intermediateErrorMap12[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap13[errorKey];
              }
            } else {
              intermediateResult12 = intermediateResult13;
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.bucketNameNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.bucketNameNotIn`];
            result["bucketNameNotIn"] = intermediateResult12;
          }
        }
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          const intermediateValue12 = value["bucketNameNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue12)) {
              intermediateResult12 = intermediateValue12;
            } else {
              intermediateErrorMap12[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.bucketNameNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.bucketNameNotIn`];
            result["bucketNameNotIn"] = intermediateResult12;
          }
        }
      }
      if (
        value["bucketNameLike"] === null ||
        value["bucketNameLike"] === undefined
      ) {
        result["bucketNameLike"] = undefined;
      } else {
        /** @type {string} */
        const convertedString11 = value["bucketNameLike"];
        if (typeof convertedString11 !== "string") {
          errorMap[`$.bucketNameLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString11.length === 0) {
            result["bucketNameLike"] = undefined;
          } else {
            if (convertedString11.length < 1) {
              errorMap[`$.bucketNameLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameLike"] = convertedString11;
            }
          }
        }
      }
      if (
        value["bucketNameILike"] === null ||
        value["bucketNameILike"] === undefined
      ) {
        result["bucketNameILike"] = undefined;
      } else {
        /** @type {string} */
        const convertedString12 = value["bucketNameILike"];
        if (typeof convertedString12 !== "string") {
          errorMap[`$.bucketNameILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString12.length === 0) {
            result["bucketNameILike"] = undefined;
          } else {
            if (convertedString12.length < 1) {
              errorMap[`$.bucketNameILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameILike"] = convertedString12;
            }
          }
        }
      }
      if (
        value["bucketNameNotLike"] === null ||
        value["bucketNameNotLike"] === undefined
      ) {
        result["bucketNameNotLike"] = undefined;
      } else {
        /** @type {string} */
        const convertedString13 = value["bucketNameNotLike"];
        if (typeof convertedString13 !== "string") {
          errorMap[`$.bucketNameNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString13.length === 0) {
            result["bucketNameNotLike"] = undefined;
          } else {
            if (convertedString13.length < 1) {
              errorMap[`$.bucketNameNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["bucketNameNotLike"] = convertedString13;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch16 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch16) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap18 = {};
          /** @type {any} */
          let intermediateResult18 = undefined;
          /** @type {any} */
          const intermediateValue18 = value["createdAtIn"];

          if (
            intermediateValue18 === null ||
            intermediateValue18 === undefined
          ) {
            intermediateErrorMap18[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap19 = {};
            /** @type {Array<any>} */
            const intermediateResult19 = [];
            /** @type {any | Array<any>} */
            const intermediateValue19 = intermediateValue18;

            if (!Array.isArray(intermediateValue19)) {
              intermediateErrorMap18[`$`] = {
                key: "validator.array",
                value: intermediateValue19,
              };
            } else {
              intermediateResult18 = [];
              for (let i19 = 0; i19 < intermediateValue19.length; ++i19) {
                if (
                  intermediateValue19[i19] === null ||
                  intermediateValue19[i19] === undefined
                ) {
                  intermediateErrorMap19[`$.${i19}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue19[i19] === "string" ||
                    typeof intermediateValue19[i19] === "number"
                  ) {
                    intermediateResult19[i19] = new Date(
                      intermediateValue19[i19],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue19[i19]) ===
                    "[object Date]"
                  ) {
                    intermediateResult19[i19] = intermediateValue19[i19];
                  } else {
                    intermediateErrorMap19[`$.${i19}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult19[i19]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap19[`$.${i19}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap19).length) {
              for (const errorKey of Object.keys(intermediateErrorMap19)) {
                intermediateErrorMap18[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap19[errorKey];
              }
            } else {
              intermediateResult18 = intermediateResult19;
            }
          }
          if (Object.keys(intermediateErrorMap18).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap18);
          } else {
            hasAnyOfMatch16 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult18;
          }
        }
        if (!hasAnyOfMatch16) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap18 = {};
          /** @type {any} */
          let intermediateResult18 = undefined;
          /** @type {any} */
          const intermediateValue18 = value["createdAtIn"];

          if (
            intermediateValue18 === null ||
            intermediateValue18 === undefined
          ) {
            intermediateErrorMap18[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue18)) {
              intermediateResult18 = intermediateValue18;
            } else {
              intermediateErrorMap18[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap18).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap18);
          } else {
            hasAnyOfMatch16 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult18;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch17 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch17) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap19 = {};
          /** @type {any} */
          let intermediateResult19 = undefined;
          /** @type {any} */
          const intermediateValue19 = value["createdAtNotIn"];

          if (
            intermediateValue19 === null ||
            intermediateValue19 === undefined
          ) {
            intermediateErrorMap19[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap20 = {};
            /** @type {Array<any>} */
            const intermediateResult20 = [];
            /** @type {any | Array<any>} */
            const intermediateValue20 = intermediateValue19;

            if (!Array.isArray(intermediateValue20)) {
              intermediateErrorMap19[`$`] = {
                key: "validator.array",
                value: intermediateValue20,
              };
            } else {
              intermediateResult19 = [];
              for (let i20 = 0; i20 < intermediateValue20.length; ++i20) {
                if (
                  intermediateValue20[i20] === null ||
                  intermediateValue20[i20] === undefined
                ) {
                  intermediateErrorMap20[`$.${i20}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue20[i20] === "string" ||
                    typeof intermediateValue20[i20] === "number"
                  ) {
                    intermediateResult20[i20] = new Date(
                      intermediateValue20[i20],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue20[i20]) ===
                    "[object Date]"
                  ) {
                    intermediateResult20[i20] = intermediateValue20[i20];
                  } else {
                    intermediateErrorMap20[`$.${i20}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult20[i20]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap20[`$.${i20}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap20).length) {
              for (const errorKey of Object.keys(intermediateErrorMap20)) {
                intermediateErrorMap19[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap20[errorKey];
              }
            } else {
              intermediateResult19 = intermediateResult20;
            }
          }
          if (Object.keys(intermediateErrorMap19).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap19);
          } else {
            hasAnyOfMatch17 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult19;
          }
        }
        if (!hasAnyOfMatch17) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap19 = {};
          /** @type {any} */
          let intermediateResult19 = undefined;
          /** @type {any} */
          const intermediateValue19 = value["createdAtNotIn"];

          if (
            intermediateValue19 === null ||
            intermediateValue19 === undefined
          ) {
            intermediateErrorMap19[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue19)) {
              intermediateResult19 = intermediateValue19;
            } else {
              intermediateErrorMap19[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap19).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap19);
          } else {
            hasAnyOfMatch17 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult19;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch22 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch22) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap24 = {};
          /** @type {any} */
          let intermediateResult24 = undefined;
          /** @type {any} */
          const intermediateValue24 = value["updatedAtIn"];

          if (
            intermediateValue24 === null ||
            intermediateValue24 === undefined
          ) {
            intermediateErrorMap24[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap25 = {};
            /** @type {Array<any>} */
            const intermediateResult25 = [];
            /** @type {any | Array<any>} */
            const intermediateValue25 = intermediateValue24;

            if (!Array.isArray(intermediateValue25)) {
              intermediateErrorMap24[`$`] = {
                key: "validator.array",
                value: intermediateValue25,
              };
            } else {
              intermediateResult24 = [];
              for (let i25 = 0; i25 < intermediateValue25.length; ++i25) {
                if (
                  intermediateValue25[i25] === null ||
                  intermediateValue25[i25] === undefined
                ) {
                  intermediateErrorMap25[`$.${i25}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue25[i25] === "string" ||
                    typeof intermediateValue25[i25] === "number"
                  ) {
                    intermediateResult25[i25] = new Date(
                      intermediateValue25[i25],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue25[i25]) ===
                    "[object Date]"
                  ) {
                    intermediateResult25[i25] = intermediateValue25[i25];
                  } else {
                    intermediateErrorMap25[`$.${i25}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult25[i25]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap25[`$.${i25}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap25).length) {
              for (const errorKey of Object.keys(intermediateErrorMap25)) {
                intermediateErrorMap24[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap25[errorKey];
              }
            } else {
              intermediateResult24 = intermediateResult25;
            }
          }
          if (Object.keys(intermediateErrorMap24).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap24);
          } else {
            hasAnyOfMatch22 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult24;
          }
        }
        if (!hasAnyOfMatch22) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap24 = {};
          /** @type {any} */
          let intermediateResult24 = undefined;
          /** @type {any} */
          const intermediateValue24 = value["updatedAtIn"];

          if (
            intermediateValue24 === null ||
            intermediateValue24 === undefined
          ) {
            intermediateErrorMap24[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue24)) {
              intermediateResult24 = intermediateValue24;
            } else {
              intermediateErrorMap24[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap24).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap24);
          } else {
            hasAnyOfMatch22 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult24;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch23 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch23) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap25 = {};
          /** @type {any} */
          let intermediateResult25 = undefined;
          /** @type {any} */
          const intermediateValue25 = value["updatedAtNotIn"];

          if (
            intermediateValue25 === null ||
            intermediateValue25 === undefined
          ) {
            intermediateErrorMap25[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap26 = {};
            /** @type {Array<any>} */
            const intermediateResult26 = [];
            /** @type {any | Array<any>} */
            const intermediateValue26 = intermediateValue25;

            if (!Array.isArray(intermediateValue26)) {
              intermediateErrorMap25[`$`] = {
                key: "validator.array",
                value: intermediateValue26,
              };
            } else {
              intermediateResult25 = [];
              for (let i26 = 0; i26 < intermediateValue26.length; ++i26) {
                if (
                  intermediateValue26[i26] === null ||
                  intermediateValue26[i26] === undefined
                ) {
                  intermediateErrorMap26[`$.${i26}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue26[i26] === "string" ||
                    typeof intermediateValue26[i26] === "number"
                  ) {
                    intermediateResult26[i26] = new Date(
                      intermediateValue26[i26],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue26[i26]) ===
                    "[object Date]"
                  ) {
                    intermediateResult26[i26] = intermediateValue26[i26];
                  } else {
                    intermediateErrorMap26[`$.${i26}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult26[i26]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap26[`$.${i26}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap26).length) {
              for (const errorKey of Object.keys(intermediateErrorMap26)) {
                intermediateErrorMap25[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap26[errorKey];
              }
            } else {
              intermediateResult25 = intermediateResult26;
            }
          }
          if (Object.keys(intermediateErrorMap25).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap25);
          } else {
            hasAnyOfMatch23 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult25;
          }
        }
        if (!hasAnyOfMatch23) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap25 = {};
          /** @type {any} */
          let intermediateResult25 = undefined;
          /** @type {any} */
          const intermediateValue25 = value["updatedAtNotIn"];

          if (
            intermediateValue25 === null ||
            intermediateValue25 === undefined
          ) {
            intermediateErrorMap25[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue25)) {
              intermediateResult25 = intermediateValue25;
            } else {
              intermediateErrorMap25[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap25).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap25);
          } else {
            hasAnyOfMatch23 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult25;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileOrderBy|any} value
 * @returns {Either<import("../common/types.js").StoreFileOrderBy, ValidatorErrorMap>}
 */
export function validateStoreFileOrderBy(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "bucketName" &&
                  convertedString3 !== "createdAt" &&
                  convertedString3 !== "updatedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "bucketName",
                      "createdAt",
                      "updatedAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileOrderBySpec|any} value
 * @returns {Either<import("../common/types.js").StoreFileOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreFileOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "bucketName",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        bucketName: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        const convertedString1 = value["id"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString1.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString1 !== "ASC" &&
              convertedString1 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString1,
              };
            } else {
              result["id"] = convertedString1;
            }
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        /** @type {string} */
        const convertedString2 = value["bucketName"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length === 0) {
            result["bucketName"] = undefined;
          } else {
            if (convertedString2.length < 1) {
              errorMap[`$.bucketName`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString2 !== "ASC" &&
              convertedString2 !== "DESC"
            ) {
              errorMap[`$.bucketName`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString2,
              };
            } else {
              result["bucketName"] = convertedString2;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString3 = value["createdAt"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString3.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString3 !== "ASC" &&
              convertedString3 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString3,
              };
            } else {
              result["createdAt"] = convertedString3;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString4 = value["updatedAt"];
        if (typeof convertedString4 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString4.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString4.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString4 !== "ASC" &&
              convertedString4 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString4,
              };
            } else {
              result["updatedAt"] = convertedString4;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileQueryBuilder|any} value
 * @returns {Either<import("../common/types.js").StoreFileQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreFileQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "where",
        "orderBy",
        "orderBySpec",
        "limit",
        "offset",
        "select",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        where: undefined,
        orderBy: undefined,
        orderBySpec: undefined,
        limit: undefined,
        offset: undefined,
        select: undefined,
      };

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult1 = validateStoreFileWhereValidated(value["where"]);

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["where"] = refResult1.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult2 = validateStoreFileOrderBy(value["orderBy"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["orderBy"] = refResult2.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult3 = validateStoreFileOrderBySpec(value["orderBySpec"]);

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult3.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber4 = value["limit"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber4;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber5 = value["offset"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber5;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "contentLength",
          "bucketName",
          "contentType",
          "name",
          "meta",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult6 = validateStoreFileReturning(value["select"]);

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["select"] = refResult6.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileReturning|any} value
 * @returns {Either<import("../common/types.js").StoreFileReturning, ValidatorErrorMap>}
 */
export function validateStoreFileReturning(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "contentLength" &&
                  convertedString3 !== "bucketName" &&
                  convertedString3 !== "contentType" &&
                  convertedString3 !== "name" &&
                  convertedString3 !== "meta" &&
                  convertedString3 !== "createdAt" &&
                  convertedString3 !== "updatedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "contentLength",
                      "bucketName",
                      "contentType",
                      "name",
                      "meta",
                      "createdAt",
                      "updatedAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileInsert|any} value
 * @returns {Either<import("../common/types.js").StoreFileInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreFileInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["insert", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { insert: undefined, returning: undefined };

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap2 = {};
        /** @type {Array<any>} */
        const intermediateResult2 = [];
        /** @type {any | Array<any>} */
        let intermediateValue2 = value["insert"];

        if (!Array.isArray(intermediateValue2)) {
          intermediateValue2 = [intermediateValue2];
        }
        if (intermediateValue2.length < 1) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            minLength: 1,
            foundLength: intermediateValue2.length,
          };
        }
        if (intermediateValue2.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue2.length,
          };
        }
        result["insert"] = [];
        for (let i2 = 0; i2 < intermediateValue2.length; ++i2) {
          if (
            intermediateValue2[i2] === null ||
            intermediateValue2[i2] === undefined
          ) {
            intermediateErrorMap2[`$.${i2}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult2 = validateStoreFileInsertPartialValidated(
              intermediateValue2[i2],
            );

            if (refResult2.error) {
              for (const errorKey of Object.keys(refResult2.error)) {
                intermediateErrorMap2[`$.${i2}${errorKey.substring(1)}`] =
                  refResult2.error[errorKey];
              }
            }
            intermediateResult2[i2] = refResult2.value;
          }
        }
        if (Object.keys(intermediateErrorMap2).length) {
          for (const errorKey of Object.keys(intermediateErrorMap2)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap2[errorKey];
          }
        } else {
          result["insert"] = intermediateResult2;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult2 = validateStoreFileReturning(value["returning"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["returning"] = refResult2.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileInsertPartial|any} value
 * @returns {Either<import("../common/types.js").StoreFileInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreFileInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "contentLength",
        "bucketName",
        "contentType",
        "name",
        "meta",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        contentLength: undefined,
        bucketName: undefined,
        contentType: undefined,
        name: undefined,
        meta: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (
        value["contentLength"] === null ||
        value["contentLength"] === undefined
      ) {
        errorMap[`$.contentLength`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber2 = value["contentLength"];
        if (
          typeof convertedNumber2 !== "number" &&
          typeof convertedNumber2 === "string"
        ) {
          convertedNumber2 = Number(convertedNumber2);
        }
        if (
          typeof convertedNumber2 !== "number" ||
          isNaN(convertedNumber2) ||
          !isFinite(convertedNumber2) ||
          !Number.isInteger(convertedNumber2)
        ) {
          errorMap[`$.contentLength`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber2 < -2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber2 > 2147483647) {
          errorMap[`$.contentLength`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["contentLength"] = convertedNumber2;
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        errorMap[`$.bucketName`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString3 = value["bucketName"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.bucketName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length < 1) {
            errorMap[`$.bucketName`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["bucketName"] = convertedString3;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        errorMap[`$.contentType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString4 = value["contentType"];
        if (typeof convertedString4 !== "string") {
          errorMap[`$.contentType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString4.length < 1) {
            errorMap[`$.contentType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["contentType"] = convertedString4;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString5 = value["name"];
        if (typeof convertedString5 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString5.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString5;
          }
        }
      }
      if (value["meta"] === null || value["meta"] === undefined) {
        result["meta"] = {};
      } else {
        const refResult6 = validateStoreFileMeta(value["meta"]);

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.meta${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["meta"] = refResult6.value;
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileUpdate|any} value
 * @returns {Either<import("../common/types.js").StoreFileUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreFileUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["update", "where", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { update: undefined, where: undefined, returning: undefined };

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult1 = validateStoreFileUpdatePartialValidated(
          value["update"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["update"] = refResult1.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 = validateStoreFileWhereValidated(value["where"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["where"] = refResult2.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult3 = validateStoreFileReturning(value["returning"]);

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["returning"] = refResult3.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileUpdatePartial|any} value
 * @returns {Either<import("../common/types.js").StoreFileUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreFileUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "contentLength",
        "bucketName",
        "contentType",
        "name",
        "meta",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        contentLength: undefined,
        bucketName: undefined,
        contentType: undefined,
        name: undefined,
        meta: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (
        value["contentLength"] === null ||
        value["contentLength"] === undefined
      ) {
        result["contentLength"] = undefined;
      } else {
        let hasAnyOfMatch1 = false;
        errorMap[`$.contentLength`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["contentLength"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue3)) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$divide"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = { $divide: undefined };

              if (
                intermediateValue3["$divide"] === null ||
                intermediateValue3["$divide"] === undefined
              ) {
                intermediateErrorMap3[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber4 = intermediateValue3["$divide"];
                if (
                  typeof convertedNumber4 !== "number" &&
                  typeof convertedNumber4 === "string"
                ) {
                  convertedNumber4 = Number(convertedNumber4);
                }
                if (
                  typeof convertedNumber4 !== "number" ||
                  isNaN(convertedNumber4) ||
                  !isFinite(convertedNumber4) ||
                  !Number.isInteger(convertedNumber4)
                ) {
                  intermediateErrorMap3[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber4 < -2147483647) {
                  intermediateErrorMap3[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber4 > 2147483647) {
                  intermediateErrorMap3[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3["$divide"] = convertedNumber4;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["contentLength"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue3)) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$multiply"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = { $multiply: undefined };

              if (
                intermediateValue3["$multiply"] === null ||
                intermediateValue3["$multiply"] === undefined
              ) {
                intermediateErrorMap3[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber4 = intermediateValue3["$multiply"];
                if (
                  typeof convertedNumber4 !== "number" &&
                  typeof convertedNumber4 === "string"
                ) {
                  convertedNumber4 = Number(convertedNumber4);
                }
                if (
                  typeof convertedNumber4 !== "number" ||
                  isNaN(convertedNumber4) ||
                  !isFinite(convertedNumber4) ||
                  !Number.isInteger(convertedNumber4)
                ) {
                  intermediateErrorMap3[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber4 < -2147483647) {
                  intermediateErrorMap3[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber4 > 2147483647) {
                  intermediateErrorMap3[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3["$multiply"] = convertedNumber4;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["contentLength"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue3)) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = { $subtract: undefined };

              if (
                intermediateValue3["$subtract"] === null ||
                intermediateValue3["$subtract"] === undefined
              ) {
                intermediateErrorMap3[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber4 = intermediateValue3["$subtract"];
                if (
                  typeof convertedNumber4 !== "number" &&
                  typeof convertedNumber4 === "string"
                ) {
                  convertedNumber4 = Number(convertedNumber4);
                }
                if (
                  typeof convertedNumber4 !== "number" ||
                  isNaN(convertedNumber4) ||
                  !isFinite(convertedNumber4) ||
                  !Number.isInteger(convertedNumber4)
                ) {
                  intermediateErrorMap3[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber4 < -2147483647) {
                  intermediateErrorMap3[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber4 > 2147483647) {
                  intermediateErrorMap3[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3["$subtract"] = convertedNumber4;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["contentLength"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue3)) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = { $add: undefined };

              if (
                intermediateValue3["$add"] === null ||
                intermediateValue3["$add"] === undefined
              ) {
                intermediateErrorMap3[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber4 = intermediateValue3["$add"];
                if (
                  typeof convertedNumber4 !== "number" &&
                  typeof convertedNumber4 === "string"
                ) {
                  convertedNumber4 = Number(convertedNumber4);
                }
                if (
                  typeof convertedNumber4 !== "number" ||
                  isNaN(convertedNumber4) ||
                  !isFinite(convertedNumber4) ||
                  !Number.isInteger(convertedNumber4)
                ) {
                  intermediateErrorMap3[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber4 < -2147483647) {
                  intermediateErrorMap3[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber4 > 2147483647) {
                  intermediateErrorMap3[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult3["$add"] = convertedNumber4;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["contentLength"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateResult3 = undefined;
          } else {
            let convertedNumber3 = intermediateValue3;
            if (
              typeof convertedNumber3 !== "number" &&
              typeof convertedNumber3 === "string"
            ) {
              convertedNumber3 = Number(convertedNumber3);
            }
            if (
              typeof convertedNumber3 !== "number" ||
              isNaN(convertedNumber3) ||
              !isFinite(convertedNumber3) ||
              !Number.isInteger(convertedNumber3)
            ) {
              intermediateErrorMap3[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber3 < -2147483647) {
              intermediateErrorMap3[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber3 > 2147483647) {
              intermediateErrorMap3[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult3 = convertedNumber3;
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.contentLength`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.contentLength`];
            result["contentLength"] = intermediateResult3;
          }
        }
      }
      if (value["bucketName"] === null || value["bucketName"] === undefined) {
        result["bucketName"] = undefined;
      } else {
        let hasAnyOfMatch2 = false;
        errorMap[`$.bucketName`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["bucketName"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $append: undefined };

              if (
                intermediateValue4["$append"] === null ||
                intermediateValue4["$append"] === undefined
              ) {
                intermediateErrorMap4[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString5 = intermediateValue4["$append"];
                if (typeof convertedString5 !== "string") {
                  intermediateErrorMap4[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString5.length < 1) {
                    intermediateErrorMap4[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult4["$append"] = convertedString5;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.bucketName`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.bucketName`];
            result["bucketName"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["bucketName"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateResult4 = undefined;
          } else {
            /** @type {string} */
            const convertedString4 = intermediateValue4;
            if (typeof convertedString4 !== "string") {
              intermediateErrorMap4[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString4.length === 0) {
                intermediateResult4 = undefined;
              } else {
                if (convertedString4.length < 1) {
                  intermediateErrorMap4[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult4 = convertedString4;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.bucketName`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.bucketName`];
            result["bucketName"] = intermediateResult4;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        result["contentType"] = undefined;
      } else {
        let hasAnyOfMatch3 = false;
        errorMap[`$.contentType`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["contentType"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $append: undefined };

              if (
                intermediateValue5["$append"] === null ||
                intermediateValue5["$append"] === undefined
              ) {
                intermediateErrorMap5[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString6 = intermediateValue5["$append"];
                if (typeof convertedString6 !== "string") {
                  intermediateErrorMap5[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString6.length < 1) {
                    intermediateErrorMap5[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult5["$append"] = convertedString6;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.contentType`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.contentType`];
            result["contentType"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["contentType"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateResult5 = undefined;
          } else {
            /** @type {string} */
            const convertedString5 = intermediateValue5;
            if (typeof convertedString5 !== "string") {
              intermediateErrorMap5[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString5.length === 0) {
                intermediateResult5 = undefined;
              } else {
                if (convertedString5.length < 1) {
                  intermediateErrorMap5[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult5 = convertedString5;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.contentType`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.contentType`];
            result["contentType"] = intermediateResult5;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        let hasAnyOfMatch4 = false;
        errorMap[`$.name`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["name"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $append: undefined };

              if (
                intermediateValue6["$append"] === null ||
                intermediateValue6["$append"] === undefined
              ) {
                intermediateErrorMap6[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString7 = intermediateValue6["$append"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$append"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["name"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateResult6 = undefined;
          } else {
            /** @type {string} */
            const convertedString6 = intermediateValue6;
            if (typeof convertedString6 !== "string") {
              intermediateErrorMap6[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString6.length === 0) {
                intermediateResult6 = undefined;
              } else {
                if (convertedString6.length < 1) {
                  intermediateErrorMap6[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult6 = convertedString6;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult6;
          }
        }
      }
      if (value["meta"] === null || value["meta"] === undefined) {
        result["meta"] = value["meta"];
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.meta`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["meta"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$set"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $set: undefined };

              if (
                intermediateValue7["$set"] === null ||
                intermediateValue7["$set"] === undefined
              ) {
                intermediateErrorMap7[`$.$set`] = {
                  key: "validator.undefined",
                };
              } else {
                if (!isRecord(intermediateValue7["$set"])) {
                  intermediateErrorMap7[`$.$set`] = {
                    key: "validator.object",
                    value: intermediateValue7["$set"],
                    foundType: typeof intermediateValue7["$set"],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys8 = new Set(["path", "value"]);
                  for (const key of Object.keys(intermediateValue7["$set"])) {
                    if (
                      !knownKeys8.has(key) &&
                      intermediateValue7["$set"][key] !== null &&
                      intermediateValue7["$set"][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys8];
                      const foundKeys = Object.keys(intermediateValue7["$set"]);
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys8.has(it),
                      );
                      intermediateErrorMap7[`$.$set`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  intermediateResult7["$set"] = {
                    path: undefined,
                    value: undefined,
                  };

                  if (
                    intermediateValue7["$set"]["path"] === null ||
                    intermediateValue7["$set"]["path"] === undefined
                  ) {
                    intermediateErrorMap7[`$.$set.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap10 = {};
                    /** @type {Array<any>} */
                    const intermediateResult10 = [];
                    /** @type {any | Array<any>} */
                    const intermediateValue10 =
                      intermediateValue7["$set"]["path"];

                    if (!Array.isArray(intermediateValue10)) {
                      intermediateErrorMap7[`$.$set.path`] = {
                        key: "validator.array",
                        value: intermediateValue10,
                      };
                    } else {
                      intermediateResult7["$set"]["path"] = [];
                      for (
                        let i10 = 0;
                        i10 < intermediateValue10.length;
                        ++i10
                      ) {
                        if (
                          intermediateValue10[i10] === null ||
                          intermediateValue10[i10] === undefined
                        ) {
                          intermediateErrorMap10[`$.${i10}`] = {
                            key: "validator.undefined",
                          };
                        } else {
                          let hasAnyOfMatch10 = false;
                          intermediateErrorMap10[`$.${i10}`] = {
                            key: "validator.anyOf",
                            errors: [],
                          };
                          if (!hasAnyOfMatch10) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap12 = {};
                            /** @type {any} */
                            let intermediateResult12 = undefined;
                            /** @type {any} */
                            const intermediateValue12 =
                              intermediateValue10[i10];

                            if (
                              intermediateValue12 === null ||
                              intermediateValue12 === undefined
                            ) {
                              intermediateErrorMap12[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              let convertedNumber12 = intermediateValue12;
                              if (
                                typeof convertedNumber12 !== "number" &&
                                typeof convertedNumber12 === "string"
                              ) {
                                convertedNumber12 = Number(convertedNumber12);
                              }
                              if (
                                typeof convertedNumber12 !== "number" ||
                                isNaN(convertedNumber12) ||
                                !isFinite(convertedNumber12) ||
                                !Number.isInteger(convertedNumber12)
                              ) {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.number",
                                  subType: "int",
                                };
                              } else if (convertedNumber12 < -2147483647) {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.range",
                                  minValue: -2147483647,
                                };
                              } else if (convertedNumber12 > 2147483647) {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.range",
                                  maxValue: 2147483647,
                                };
                              } else {
                                intermediateResult12 = convertedNumber12;
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap12).length > 0
                            ) {
                              intermediateErrorMap10[`$.${i10}`].errors.push(
                                intermediateErrorMap12,
                              );
                            } else {
                              hasAnyOfMatch10 = true;
                              delete intermediateErrorMap10[`$.${i10}`];
                              intermediateResult10[i10] = intermediateResult12;
                            }
                          }
                          if (!hasAnyOfMatch10) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap12 = {};
                            /** @type {any} */
                            let intermediateResult12 = undefined;
                            /** @type {any} */
                            const intermediateValue12 =
                              intermediateValue10[i10];

                            if (
                              intermediateValue12 === null ||
                              intermediateValue12 === undefined
                            ) {
                              intermediateErrorMap12[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              /** @type {string} */
                              const convertedString12 = intermediateValue12;
                              if (typeof convertedString12 !== "string") {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.string",
                                };
                              } else {
                                if (convertedString12.length < 1) {
                                  intermediateErrorMap12[`$`] = {
                                    key: "validator.length",
                                    minLength: 1,
                                  };
                                } else {
                                  intermediateResult12 = convertedString12;
                                }
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap12).length > 0
                            ) {
                              intermediateErrorMap10[`$.${i10}`].errors.push(
                                intermediateErrorMap12,
                              );
                            } else {
                              hasAnyOfMatch10 = true;
                              delete intermediateErrorMap10[`$.${i10}`];
                              intermediateResult10[i10] = intermediateResult12;
                            }
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap10).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap10,
                      )) {
                        intermediateErrorMap7[
                          `$.$set.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap10[errorKey];
                      }
                    } else {
                      intermediateResult7["$set"]["path"] =
                        intermediateResult10;
                    }
                  }
                  if (
                    intermediateValue7["$set"]["value"] === null ||
                    intermediateValue7["$set"]["value"] === undefined
                  ) {
                    intermediateErrorMap7[`$.$set.value`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    intermediateResult7["$set"]["value"] =
                      intermediateValue7["$set"]["value"];
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.meta`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.meta`];
            result["meta"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["meta"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$remove"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $remove: undefined };

              if (
                intermediateValue7["$remove"] === null ||
                intermediateValue7["$remove"] === undefined
              ) {
                intermediateErrorMap7[`$.$remove`] = {
                  key: "validator.undefined",
                };
              } else {
                if (!isRecord(intermediateValue7["$remove"])) {
                  intermediateErrorMap7[`$.$remove`] = {
                    key: "validator.object",
                    value: intermediateValue7["$remove"],
                    foundType: typeof intermediateValue7["$remove"],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys8 = new Set(["path"]);
                  for (const key of Object.keys(
                    intermediateValue7["$remove"],
                  )) {
                    if (
                      !knownKeys8.has(key) &&
                      intermediateValue7["$remove"][key] !== null &&
                      intermediateValue7["$remove"][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys8];
                      const foundKeys = Object.keys(
                        intermediateValue7["$remove"],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys8.has(it),
                      );
                      intermediateErrorMap7[`$.$remove`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  intermediateResult7["$remove"] = { path: undefined };

                  if (
                    intermediateValue7["$remove"]["path"] === null ||
                    intermediateValue7["$remove"]["path"] === undefined
                  ) {
                    intermediateErrorMap7[`$.$remove.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap10 = {};
                    /** @type {Array<any>} */
                    const intermediateResult10 = [];
                    /** @type {any | Array<any>} */
                    const intermediateValue10 =
                      intermediateValue7["$remove"]["path"];

                    if (!Array.isArray(intermediateValue10)) {
                      intermediateErrorMap7[`$.$remove.path`] = {
                        key: "validator.array",
                        value: intermediateValue10,
                      };
                    } else {
                      intermediateResult7["$remove"]["path"] = [];
                      for (
                        let i10 = 0;
                        i10 < intermediateValue10.length;
                        ++i10
                      ) {
                        if (
                          intermediateValue10[i10] === null ||
                          intermediateValue10[i10] === undefined
                        ) {
                          intermediateErrorMap10[`$.${i10}`] = {
                            key: "validator.undefined",
                          };
                        } else {
                          let hasAnyOfMatch10 = false;
                          intermediateErrorMap10[`$.${i10}`] = {
                            key: "validator.anyOf",
                            errors: [],
                          };
                          if (!hasAnyOfMatch10) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap12 = {};
                            /** @type {any} */
                            let intermediateResult12 = undefined;
                            /** @type {any} */
                            const intermediateValue12 =
                              intermediateValue10[i10];

                            if (
                              intermediateValue12 === null ||
                              intermediateValue12 === undefined
                            ) {
                              intermediateErrorMap12[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              let convertedNumber12 = intermediateValue12;
                              if (
                                typeof convertedNumber12 !== "number" &&
                                typeof convertedNumber12 === "string"
                              ) {
                                convertedNumber12 = Number(convertedNumber12);
                              }
                              if (
                                typeof convertedNumber12 !== "number" ||
                                isNaN(convertedNumber12) ||
                                !isFinite(convertedNumber12) ||
                                !Number.isInteger(convertedNumber12)
                              ) {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.number",
                                  subType: "int",
                                };
                              } else if (convertedNumber12 < -2147483647) {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.range",
                                  minValue: -2147483647,
                                };
                              } else if (convertedNumber12 > 2147483647) {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.range",
                                  maxValue: 2147483647,
                                };
                              } else {
                                intermediateResult12 = convertedNumber12;
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap12).length > 0
                            ) {
                              intermediateErrorMap10[`$.${i10}`].errors.push(
                                intermediateErrorMap12,
                              );
                            } else {
                              hasAnyOfMatch10 = true;
                              delete intermediateErrorMap10[`$.${i10}`];
                              intermediateResult10[i10] = intermediateResult12;
                            }
                          }
                          if (!hasAnyOfMatch10) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap12 = {};
                            /** @type {any} */
                            let intermediateResult12 = undefined;
                            /** @type {any} */
                            const intermediateValue12 =
                              intermediateValue10[i10];

                            if (
                              intermediateValue12 === null ||
                              intermediateValue12 === undefined
                            ) {
                              intermediateErrorMap12[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              /** @type {string} */
                              const convertedString12 = intermediateValue12;
                              if (typeof convertedString12 !== "string") {
                                intermediateErrorMap12[`$`] = {
                                  key: "validator.string",
                                };
                              } else {
                                if (convertedString12.length < 1) {
                                  intermediateErrorMap12[`$`] = {
                                    key: "validator.length",
                                    minLength: 1,
                                  };
                                } else {
                                  intermediateResult12 = convertedString12;
                                }
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap12).length > 0
                            ) {
                              intermediateErrorMap10[`$.${i10}`].errors.push(
                                intermediateErrorMap12,
                              );
                            } else {
                              hasAnyOfMatch10 = true;
                              delete intermediateErrorMap10[`$.${i10}`];
                              intermediateResult10[i10] = intermediateResult12;
                            }
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap10).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap10,
                      )) {
                        intermediateErrorMap7[
                          `$.$remove.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap10[errorKey];
                      }
                    } else {
                      intermediateResult7["$remove"]["path"] =
                        intermediateResult10;
                    }
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.meta`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.meta`];
            result["meta"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["meta"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateResult7 = {};
          } else {
            const refResult7 = validateStoreFileMeta(intermediateValue7);

            if (refResult7.error) {
              for (const errorKey of Object.keys(refResult7.error)) {
                intermediateErrorMap7[`$${errorKey.substring(1)}`] =
                  refResult7.error[errorKey];
              }
            }
            intermediateResult7 = refResult7.value;
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.meta`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.meta`];
            result["meta"] = intermediateResult7;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["createdAt"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue8)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.object",
                value: intermediateValue8,
                foundType: typeof intermediateValue8,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys8 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue8)) {
                if (
                  !knownKeys8.has(key) &&
                  intermediateValue8[key] !== null &&
                  intermediateValue8[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys8];
                  const foundKeys = Object.keys(intermediateValue8);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys8.has(it),
                  );
                  intermediateErrorMap8[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult8 = { $subtract: undefined };

              if (
                intermediateValue8["$subtract"] === null ||
                intermediateValue8["$subtract"] === undefined
              ) {
                intermediateErrorMap8[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString9 = intermediateValue8["$subtract"];
                if (typeof convertedString9 !== "string") {
                  intermediateErrorMap8[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString9.length < 1) {
                    intermediateErrorMap8[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult8["$subtract"] = convertedString9;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["createdAt"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue8)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.object",
                value: intermediateValue8,
                foundType: typeof intermediateValue8,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys8 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue8)) {
                if (
                  !knownKeys8.has(key) &&
                  intermediateValue8[key] !== null &&
                  intermediateValue8[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys8];
                  const foundKeys = Object.keys(intermediateValue8);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys8.has(it),
                  );
                  intermediateErrorMap8[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult8 = { $add: undefined };

              if (
                intermediateValue8["$add"] === null ||
                intermediateValue8["$add"] === undefined
              ) {
                intermediateErrorMap8[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString9 = intermediateValue8["$add"];
                if (typeof convertedString9 !== "string") {
                  intermediateErrorMap8[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString9.length < 1) {
                    intermediateErrorMap8[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult8["$add"] = convertedString9;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["createdAt"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateResult8 = undefined;
          } else {
            if (
              typeof intermediateValue8 === "string" ||
              typeof intermediateValue8 === "number"
            ) {
              intermediateResult8 = new Date(intermediateValue8);
            } else if (
              Object.prototype.toString.call(intermediateValue8) ===
              "[object Date]"
            ) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult8?.getTime() ?? undefined)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult8;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch7 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch7) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap9 = {};
          /** @type {any} */
          let intermediateResult9 = undefined;
          /** @type {any} */
          const intermediateValue9 = value["updatedAt"];

          if (intermediateValue9 === null || intermediateValue9 === undefined) {
            intermediateErrorMap9[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue9)) {
              intermediateErrorMap9[`$`] = {
                key: "validator.object",
                value: intermediateValue9,
                foundType: typeof intermediateValue9,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys9 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue9)) {
                if (
                  !knownKeys9.has(key) &&
                  intermediateValue9[key] !== null &&
                  intermediateValue9[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys9];
                  const foundKeys = Object.keys(intermediateValue9);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys9.has(it),
                  );
                  intermediateErrorMap9[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult9 = { $subtract: undefined };

              if (
                intermediateValue9["$subtract"] === null ||
                intermediateValue9["$subtract"] === undefined
              ) {
                intermediateErrorMap9[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString10 = intermediateValue9["$subtract"];
                if (typeof convertedString10 !== "string") {
                  intermediateErrorMap9[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString10.length < 1) {
                    intermediateErrorMap9[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult9["$subtract"] = convertedString10;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap9).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap9);
          } else {
            hasAnyOfMatch7 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult9;
          }
        }
        if (!hasAnyOfMatch7) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap9 = {};
          /** @type {any} */
          let intermediateResult9 = undefined;
          /** @type {any} */
          const intermediateValue9 = value["updatedAt"];

          if (intermediateValue9 === null || intermediateValue9 === undefined) {
            intermediateErrorMap9[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue9)) {
              intermediateErrorMap9[`$`] = {
                key: "validator.object",
                value: intermediateValue9,
                foundType: typeof intermediateValue9,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys9 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue9)) {
                if (
                  !knownKeys9.has(key) &&
                  intermediateValue9[key] !== null &&
                  intermediateValue9[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys9];
                  const foundKeys = Object.keys(intermediateValue9);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys9.has(it),
                  );
                  intermediateErrorMap9[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult9 = { $add: undefined };

              if (
                intermediateValue9["$add"] === null ||
                intermediateValue9["$add"] === undefined
              ) {
                intermediateErrorMap9[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString10 = intermediateValue9["$add"];
                if (typeof convertedString10 !== "string") {
                  intermediateErrorMap9[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString10.length < 1) {
                    intermediateErrorMap9[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult9["$add"] = convertedString10;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap9).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap9);
          } else {
            hasAnyOfMatch7 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult9;
          }
        }
        if (!hasAnyOfMatch7) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap9 = {};
          /** @type {any} */
          let intermediateResult9 = undefined;
          /** @type {any} */
          const intermediateValue9 = value["updatedAt"];

          if (intermediateValue9 === null || intermediateValue9 === undefined) {
            intermediateResult9 = undefined;
          } else {
            if (
              typeof intermediateValue9 === "string" ||
              typeof intermediateValue9 === "number"
            ) {
              intermediateResult9 = new Date(intermediateValue9);
            } else if (
              Object.prototype.toString.call(intermediateValue9) ===
              "[object Date]"
            ) {
              intermediateResult9 = intermediateValue9;
            } else {
              intermediateErrorMap9[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult9?.getTime() ?? undefined)) {
              intermediateErrorMap9[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap9).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap9);
          } else {
            hasAnyOfMatch7 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult9;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Postgres based job queue.
 *Use {@link queueWorkerAddJob} to insert new jobs in to the queue and {@link
 *queueWorkerRegisterCronJobs} for all your recurring jobs. Use {@link queueWorkerCreate} as a way
 *to pick up jobs.
 *
 * @param {import("../common/types.js").StoreJobInput|any} value
 * @returns {Either<import("../common/types.js").StoreJob, ValidatorErrorMap>}
 */
export function validateStoreJob(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "isComplete",
        "handlerTimeout",
        "priority",
        "retryCount",
        "name",
        "scheduledAt",
        "data",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        isComplete: undefined,
        handlerTimeout: undefined,
        priority: undefined,
        retryCount: undefined,
        name: undefined,
        scheduledAt: undefined,
        data: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        let convertedNumber1 = value["id"];
        if (
          typeof convertedNumber1 !== "number" &&
          typeof convertedNumber1 === "string"
        ) {
          convertedNumber1 = Number(convertedNumber1);
        }
        if (
          typeof convertedNumber1 !== "number" ||
          isNaN(convertedNumber1) ||
          !isFinite(convertedNumber1) ||
          !Number.isInteger(convertedNumber1)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber1 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber1 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber1;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = false;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1 ||
          value["isComplete"] === "1"
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0 ||
          value["isComplete"] === "0"
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["handlerTimeout"] === null ||
        value["handlerTimeout"] === undefined
      ) {
        result["handlerTimeout"] = undefined;
      } else {
        let convertedNumber3 = value["handlerTimeout"];
        if (
          typeof convertedNumber3 !== "number" &&
          typeof convertedNumber3 === "string"
        ) {
          convertedNumber3 = Number(convertedNumber3);
        }
        if (
          typeof convertedNumber3 !== "number" ||
          isNaN(convertedNumber3) ||
          !isFinite(convertedNumber3) ||
          !Number.isInteger(convertedNumber3)
        ) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber3 < 0) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["handlerTimeout"] = convertedNumber3;
        }
      }
      if (value["priority"] === null || value["priority"] === undefined) {
        result["priority"] = 0;
      } else {
        let convertedNumber4 = value["priority"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.priority`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 0) {
          errorMap[`$.priority`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["priority"] = convertedNumber4;
        }
      }
      if (value["retryCount"] === null || value["retryCount"] === undefined) {
        result["retryCount"] = 0;
      } else {
        let convertedNumber5 = value["retryCount"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.retryCount`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < -2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber5 > 2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["retryCount"] = convertedNumber5;
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString6 = value["name"];
        if (typeof convertedString6 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString6.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString6;
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = new Date();
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobWhere|any} value
 * @returns {Either<import("../common/types.js").StoreJobWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreJobWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "$raw",
        "$or",
        "id",
        "idNotEqual",
        "idIn",
        "idNotIn",
        "idGreaterThan",
        "idLowerThan",
        "isComplete",
        "isCompleteIsNull",
        "isCompleteIsNotNull",
        "name",
        "nameNotEqual",
        "nameIn",
        "nameNotIn",
        "nameLike",
        "nameILike",
        "nameNotLike",
        "scheduledAt",
        "scheduledAtNotEqual",
        "scheduledAtIn",
        "scheduledAtNotIn",
        "scheduledAtGreaterThan",
        "scheduledAtLowerThan",
        "scheduledAtIsNull",
        "scheduledAtIsNotNull",
        "createdAt",
        "createdAtNotEqual",
        "createdAtIn",
        "createdAtNotIn",
        "createdAtGreaterThan",
        "createdAtLowerThan",
        "updatedAt",
        "updatedAtNotEqual",
        "updatedAtIn",
        "updatedAtNotIn",
        "updatedAtGreaterThan",
        "updatedAtLowerThan",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        $raw: undefined,
        $or: undefined,
        id: undefined,
        idNotEqual: undefined,
        idIn: undefined,
        idNotIn: undefined,
        idGreaterThan: undefined,
        idLowerThan: undefined,
        isComplete: undefined,
        isCompleteIsNull: undefined,
        isCompleteIsNotNull: undefined,
        name: undefined,
        nameNotEqual: undefined,
        nameIn: undefined,
        nameNotIn: undefined,
        nameLike: undefined,
        nameILike: undefined,
        nameNotLike: undefined,
        scheduledAt: undefined,
        scheduledAtNotEqual: undefined,
        scheduledAtIn: undefined,
        scheduledAtNotIn: undefined,
        scheduledAtGreaterThan: undefined,
        scheduledAtLowerThan: undefined,
        scheduledAtIsNull: undefined,
        scheduledAtIsNotNull: undefined,
        createdAt: undefined,
        createdAtNotEqual: undefined,
        createdAtIn: undefined,
        createdAtNotIn: undefined,
        createdAtGreaterThan: undefined,
        createdAtLowerThan: undefined,
        updatedAt: undefined,
        updatedAtNotEqual: undefined,
        updatedAtIn: undefined,
        updatedAtNotIn: undefined,
        updatedAtGreaterThan: undefined,
        updatedAtLowerThan: undefined,
      };

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = value["$or"];

        if (!Array.isArray(intermediateValue3)) {
          errorMap[`$.$or`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          result["$or"] = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              const refResult3 = validateStoreJobWhereValidated(
                intermediateValue3[i3],
              );

              if (refResult3.error) {
                for (const errorKey of Object.keys(refResult3.error)) {
                  intermediateErrorMap3[`$.${i3}${errorKey.substring(1)}`] =
                    refResult3.error[errorKey];
                }
              }
              intermediateResult3[i3] = refResult3.value;
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          result["$or"] = intermediateResult3;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        let convertedNumber3 = value["id"];
        if (
          typeof convertedNumber3 !== "number" &&
          typeof convertedNumber3 === "string"
        ) {
          convertedNumber3 = Number(convertedNumber3);
        }
        if (
          typeof convertedNumber3 !== "number" ||
          isNaN(convertedNumber3) ||
          !isFinite(convertedNumber3) ||
          !Number.isInteger(convertedNumber3)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber3 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber3 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber3;
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        let convertedNumber4 = value["idNotEqual"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < -2147483647) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber4 > 2147483647) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idNotEqual"] = convertedNumber4;
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap8 = {};
            /** @type {Array<any>} */
            const intermediateResult8 = [];
            /** @type {any | Array<any>} */
            const intermediateValue8 = intermediateValue7;

            if (!Array.isArray(intermediateValue8)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.array",
                value: intermediateValue8,
              };
            } else {
              intermediateResult7 = [];
              for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                if (
                  intermediateValue8[i8] === null ||
                  intermediateValue8[i8] === undefined
                ) {
                  intermediateErrorMap8[`$.${i8}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  let convertedNumber8 = intermediateValue8[i8];
                  if (
                    typeof convertedNumber8 !== "number" &&
                    typeof convertedNumber8 === "string"
                  ) {
                    convertedNumber8 = Number(convertedNumber8);
                  }
                  if (
                    typeof convertedNumber8 !== "number" ||
                    isNaN(convertedNumber8) ||
                    !isFinite(convertedNumber8) ||
                    !Number.isInteger(convertedNumber8)
                  ) {
                    intermediateErrorMap8[`$.${i8}`] = {
                      key: "validator.number",
                      subType: "int",
                    };
                  } else if (convertedNumber8 < -2147483647) {
                    intermediateErrorMap8[`$.${i8}`] = {
                      key: "validator.range",
                      minValue: -2147483647,
                    };
                  } else if (convertedNumber8 > 2147483647) {
                    intermediateErrorMap8[`$.${i8}`] = {
                      key: "validator.range",
                      maxValue: 2147483647,
                    };
                  } else {
                    intermediateResult8[i8] = convertedNumber8;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap8).length) {
              for (const errorKey of Object.keys(intermediateErrorMap8)) {
                intermediateErrorMap7[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap8[errorKey];
              }
            } else {
              intermediateResult7 = intermediateResult8;
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue7)) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap9 = {};
            /** @type {Array<any>} */
            const intermediateResult9 = [];
            /** @type {any | Array<any>} */
            const intermediateValue9 = intermediateValue8;

            if (!Array.isArray(intermediateValue9)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.array",
                value: intermediateValue9,
              };
            } else {
              intermediateResult8 = [];
              for (let i9 = 0; i9 < intermediateValue9.length; ++i9) {
                if (
                  intermediateValue9[i9] === null ||
                  intermediateValue9[i9] === undefined
                ) {
                  intermediateErrorMap9[`$.${i9}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  let convertedNumber9 = intermediateValue9[i9];
                  if (
                    typeof convertedNumber9 !== "number" &&
                    typeof convertedNumber9 === "string"
                  ) {
                    convertedNumber9 = Number(convertedNumber9);
                  }
                  if (
                    typeof convertedNumber9 !== "number" ||
                    isNaN(convertedNumber9) ||
                    !isFinite(convertedNumber9) ||
                    !Number.isInteger(convertedNumber9)
                  ) {
                    intermediateErrorMap9[`$.${i9}`] = {
                      key: "validator.number",
                      subType: "int",
                    };
                  } else if (convertedNumber9 < -2147483647) {
                    intermediateErrorMap9[`$.${i9}`] = {
                      key: "validator.range",
                      minValue: -2147483647,
                    };
                  } else if (convertedNumber9 > 2147483647) {
                    intermediateErrorMap9[`$.${i9}`] = {
                      key: "validator.range",
                      maxValue: 2147483647,
                    };
                  } else {
                    intermediateResult9[i9] = convertedNumber9;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap9).length) {
              for (const errorKey of Object.keys(intermediateErrorMap9)) {
                intermediateErrorMap8[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap9[errorKey];
              }
            } else {
              intermediateResult8 = intermediateResult9;
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue8)) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
      }
      if (
        value["idGreaterThan"] === null ||
        value["idGreaterThan"] === undefined
      ) {
        result["idGreaterThan"] = undefined;
      } else {
        let convertedNumber7 = value["idGreaterThan"];
        if (
          typeof convertedNumber7 !== "number" &&
          typeof convertedNumber7 === "string"
        ) {
          convertedNumber7 = Number(convertedNumber7);
        }
        if (
          typeof convertedNumber7 !== "number" ||
          isNaN(convertedNumber7) ||
          !isFinite(convertedNumber7) ||
          !Number.isInteger(convertedNumber7)
        ) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber7 < -2147483647) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber7 > 2147483647) {
          errorMap[`$.idGreaterThan`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idGreaterThan"] = convertedNumber7;
        }
      }
      if (value["idLowerThan"] === null || value["idLowerThan"] === undefined) {
        result["idLowerThan"] = undefined;
      } else {
        let convertedNumber8 = value["idLowerThan"];
        if (
          typeof convertedNumber8 !== "number" &&
          typeof convertedNumber8 === "string"
        ) {
          convertedNumber8 = Number(convertedNumber8);
        }
        if (
          typeof convertedNumber8 !== "number" ||
          isNaN(convertedNumber8) ||
          !isFinite(convertedNumber8) ||
          !Number.isInteger(convertedNumber8)
        ) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber8 < -2147483647) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber8 > 2147483647) {
          errorMap[`$.idLowerThan`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["idLowerThan"] = convertedNumber8;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = undefined;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1 ||
          value["isComplete"] === "1"
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0 ||
          value["isComplete"] === "0"
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["isCompleteIsNull"] === null ||
        value["isCompleteIsNull"] === undefined
      ) {
        result["isCompleteIsNull"] = undefined;
      } else {
        if (
          value["isCompleteIsNull"] === true ||
          value["isCompleteIsNull"] === "true" ||
          value["isCompleteIsNull"] === 1 ||
          value["isCompleteIsNull"] === "1"
        ) {
          result["isCompleteIsNull"] = true;
        } else if (
          value["isCompleteIsNull"] === false ||
          value["isCompleteIsNull"] === "false" ||
          value["isCompleteIsNull"] === 0 ||
          value["isCompleteIsNull"] === "0"
        ) {
          result["isCompleteIsNull"] = false;
        } else {
          errorMap[`$.isCompleteIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["isCompleteIsNotNull"] === null ||
        value["isCompleteIsNotNull"] === undefined
      ) {
        result["isCompleteIsNotNull"] = undefined;
      } else {
        if (
          value["isCompleteIsNotNull"] === true ||
          value["isCompleteIsNotNull"] === "true" ||
          value["isCompleteIsNotNull"] === 1 ||
          value["isCompleteIsNotNull"] === "1"
        ) {
          result["isCompleteIsNotNull"] = true;
        } else if (
          value["isCompleteIsNotNull"] === false ||
          value["isCompleteIsNotNull"] === "false" ||
          value["isCompleteIsNotNull"] === 0 ||
          value["isCompleteIsNotNull"] === "0"
        ) {
          result["isCompleteIsNotNull"] = false;
        } else {
          errorMap[`$.isCompleteIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        const convertedString12 = value["name"];
        if (typeof convertedString12 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString12.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString12.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString12;
            }
          }
        }
      }
      if (
        value["nameNotEqual"] === null ||
        value["nameNotEqual"] === undefined
      ) {
        result["nameNotEqual"] = undefined;
      } else {
        /** @type {string} */
        const convertedString13 = value["nameNotEqual"];
        if (typeof convertedString13 !== "string") {
          errorMap[`$.nameNotEqual`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString13.length === 0) {
            result["nameNotEqual"] = undefined;
          } else {
            if (convertedString13.length < 1) {
              errorMap[`$.nameNotEqual`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameNotEqual"] = convertedString13;
            }
          }
        }
      }
      if (value["nameIn"] === null || value["nameIn"] === undefined) {
        result["nameIn"] = undefined;
      } else {
        let hasAnyOfMatch14 = false;
        errorMap[`$.nameIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch14) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap16 = {};
          /** @type {any} */
          let intermediateResult16 = undefined;
          /** @type {any} */
          const intermediateValue16 = value["nameIn"];

          if (
            intermediateValue16 === null ||
            intermediateValue16 === undefined
          ) {
            intermediateErrorMap16[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap17 = {};
            /** @type {Array<any>} */
            const intermediateResult17 = [];
            /** @type {any | Array<any>} */
            const intermediateValue17 = intermediateValue16;

            if (!Array.isArray(intermediateValue17)) {
              intermediateErrorMap16[`$`] = {
                key: "validator.array",
                value: intermediateValue17,
              };
            } else {
              intermediateResult16 = [];
              for (let i17 = 0; i17 < intermediateValue17.length; ++i17) {
                if (
                  intermediateValue17[i17] === null ||
                  intermediateValue17[i17] === undefined
                ) {
                  intermediateErrorMap17[`$.${i17}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  const convertedString17 = intermediateValue17[i17];
                  if (typeof convertedString17 !== "string") {
                    intermediateErrorMap17[`$.${i17}`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString17.length < 1) {
                      intermediateErrorMap17[`$.${i17}`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult17[i17] = convertedString17;
                    }
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap17).length) {
              for (const errorKey of Object.keys(intermediateErrorMap17)) {
                intermediateErrorMap16[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap17[errorKey];
              }
            } else {
              intermediateResult16 = intermediateResult17;
            }
          }
          if (Object.keys(intermediateErrorMap16).length > 0) {
            errorMap[`$.nameIn`].errors.push(intermediateErrorMap16);
          } else {
            hasAnyOfMatch14 = true;
            delete errorMap[`$.nameIn`];
            result["nameIn"] = intermediateResult16;
          }
        }
        if (!hasAnyOfMatch14) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap16 = {};
          /** @type {any} */
          let intermediateResult16 = undefined;
          /** @type {any} */
          const intermediateValue16 = value["nameIn"];

          if (
            intermediateValue16 === null ||
            intermediateValue16 === undefined
          ) {
            intermediateErrorMap16[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue16)) {
              intermediateResult16 = intermediateValue16;
            } else {
              intermediateErrorMap16[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap16).length > 0) {
            errorMap[`$.nameIn`].errors.push(intermediateErrorMap16);
          } else {
            hasAnyOfMatch14 = true;
            delete errorMap[`$.nameIn`];
            result["nameIn"] = intermediateResult16;
          }
        }
      }
      if (value["nameNotIn"] === null || value["nameNotIn"] === undefined) {
        result["nameNotIn"] = undefined;
      } else {
        let hasAnyOfMatch15 = false;
        errorMap[`$.nameNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch15) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap17 = {};
          /** @type {any} */
          let intermediateResult17 = undefined;
          /** @type {any} */
          const intermediateValue17 = value["nameNotIn"];

          if (
            intermediateValue17 === null ||
            intermediateValue17 === undefined
          ) {
            intermediateErrorMap17[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap18 = {};
            /** @type {Array<any>} */
            const intermediateResult18 = [];
            /** @type {any | Array<any>} */
            const intermediateValue18 = intermediateValue17;

            if (!Array.isArray(intermediateValue18)) {
              intermediateErrorMap17[`$`] = {
                key: "validator.array",
                value: intermediateValue18,
              };
            } else {
              intermediateResult17 = [];
              for (let i18 = 0; i18 < intermediateValue18.length; ++i18) {
                if (
                  intermediateValue18[i18] === null ||
                  intermediateValue18[i18] === undefined
                ) {
                  intermediateErrorMap18[`$.${i18}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  const convertedString18 = intermediateValue18[i18];
                  if (typeof convertedString18 !== "string") {
                    intermediateErrorMap18[`$.${i18}`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString18.length < 1) {
                      intermediateErrorMap18[`$.${i18}`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult18[i18] = convertedString18;
                    }
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap18).length) {
              for (const errorKey of Object.keys(intermediateErrorMap18)) {
                intermediateErrorMap17[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap18[errorKey];
              }
            } else {
              intermediateResult17 = intermediateResult18;
            }
          }
          if (Object.keys(intermediateErrorMap17).length > 0) {
            errorMap[`$.nameNotIn`].errors.push(intermediateErrorMap17);
          } else {
            hasAnyOfMatch15 = true;
            delete errorMap[`$.nameNotIn`];
            result["nameNotIn"] = intermediateResult17;
          }
        }
        if (!hasAnyOfMatch15) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap17 = {};
          /** @type {any} */
          let intermediateResult17 = undefined;
          /** @type {any} */
          const intermediateValue17 = value["nameNotIn"];

          if (
            intermediateValue17 === null ||
            intermediateValue17 === undefined
          ) {
            intermediateErrorMap17[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue17)) {
              intermediateResult17 = intermediateValue17;
            } else {
              intermediateErrorMap17[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap17).length > 0) {
            errorMap[`$.nameNotIn`].errors.push(intermediateErrorMap17);
          } else {
            hasAnyOfMatch15 = true;
            delete errorMap[`$.nameNotIn`];
            result["nameNotIn"] = intermediateResult17;
          }
        }
      }
      if (value["nameLike"] === null || value["nameLike"] === undefined) {
        result["nameLike"] = undefined;
      } else {
        /** @type {string} */
        const convertedString16 = value["nameLike"];
        if (typeof convertedString16 !== "string") {
          errorMap[`$.nameLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString16.length === 0) {
            result["nameLike"] = undefined;
          } else {
            if (convertedString16.length < 1) {
              errorMap[`$.nameLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameLike"] = convertedString16;
            }
          }
        }
      }
      if (value["nameILike"] === null || value["nameILike"] === undefined) {
        result["nameILike"] = undefined;
      } else {
        /** @type {string} */
        const convertedString17 = value["nameILike"];
        if (typeof convertedString17 !== "string") {
          errorMap[`$.nameILike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString17.length === 0) {
            result["nameILike"] = undefined;
          } else {
            if (convertedString17.length < 1) {
              errorMap[`$.nameILike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameILike"] = convertedString17;
            }
          }
        }
      }
      if (value["nameNotLike"] === null || value["nameNotLike"] === undefined) {
        result["nameNotLike"] = undefined;
      } else {
        /** @type {string} */
        const convertedString18 = value["nameNotLike"];
        if (typeof convertedString18 !== "string") {
          errorMap[`$.nameNotLike`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString18.length === 0) {
            result["nameNotLike"] = undefined;
          } else {
            if (convertedString18.length < 1) {
              errorMap[`$.nameNotLike`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["nameNotLike"] = convertedString18;
            }
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = undefined;
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtNotEqual"] === null ||
        value["scheduledAtNotEqual"] === undefined
      ) {
        result["scheduledAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["scheduledAtNotEqual"] === "string" ||
          typeof value["scheduledAtNotEqual"] === "number"
        ) {
          result["scheduledAtNotEqual"] = new Date(
            value["scheduledAtNotEqual"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["scheduledAtNotEqual"] = value["scheduledAtNotEqual"];
        } else {
          errorMap[`$.scheduledAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtIn"] === null ||
        value["scheduledAtIn"] === undefined
      ) {
        result["scheduledAtIn"] = undefined;
      } else {
        let hasAnyOfMatch21 = false;
        errorMap[`$.scheduledAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch21) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap23 = {};
          /** @type {any} */
          let intermediateResult23 = undefined;
          /** @type {any} */
          const intermediateValue23 = value["scheduledAtIn"];

          if (
            intermediateValue23 === null ||
            intermediateValue23 === undefined
          ) {
            intermediateErrorMap23[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap24 = {};
            /** @type {Array<any>} */
            const intermediateResult24 = [];
            /** @type {any | Array<any>} */
            const intermediateValue24 = intermediateValue23;

            if (!Array.isArray(intermediateValue24)) {
              intermediateErrorMap23[`$`] = {
                key: "validator.array",
                value: intermediateValue24,
              };
            } else {
              intermediateResult23 = [];
              for (let i24 = 0; i24 < intermediateValue24.length; ++i24) {
                if (
                  intermediateValue24[i24] === null ||
                  intermediateValue24[i24] === undefined
                ) {
                  intermediateErrorMap24[`$.${i24}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue24[i24] === "string" ||
                    typeof intermediateValue24[i24] === "number"
                  ) {
                    intermediateResult24[i24] = new Date(
                      intermediateValue24[i24],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue24[i24]) ===
                    "[object Date]"
                  ) {
                    intermediateResult24[i24] = intermediateValue24[i24];
                  } else {
                    intermediateErrorMap24[`$.${i24}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult24[i24]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap24[`$.${i24}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap24).length) {
              for (const errorKey of Object.keys(intermediateErrorMap24)) {
                intermediateErrorMap23[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap24[errorKey];
              }
            } else {
              intermediateResult23 = intermediateResult24;
            }
          }
          if (Object.keys(intermediateErrorMap23).length > 0) {
            errorMap[`$.scheduledAtIn`].errors.push(intermediateErrorMap23);
          } else {
            hasAnyOfMatch21 = true;
            delete errorMap[`$.scheduledAtIn`];
            result["scheduledAtIn"] = intermediateResult23;
          }
        }
        if (!hasAnyOfMatch21) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap23 = {};
          /** @type {any} */
          let intermediateResult23 = undefined;
          /** @type {any} */
          const intermediateValue23 = value["scheduledAtIn"];

          if (
            intermediateValue23 === null ||
            intermediateValue23 === undefined
          ) {
            intermediateErrorMap23[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue23)) {
              intermediateResult23 = intermediateValue23;
            } else {
              intermediateErrorMap23[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap23).length > 0) {
            errorMap[`$.scheduledAtIn`].errors.push(intermediateErrorMap23);
          } else {
            hasAnyOfMatch21 = true;
            delete errorMap[`$.scheduledAtIn`];
            result["scheduledAtIn"] = intermediateResult23;
          }
        }
      }
      if (
        value["scheduledAtNotIn"] === null ||
        value["scheduledAtNotIn"] === undefined
      ) {
        result["scheduledAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch22 = false;
        errorMap[`$.scheduledAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch22) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap24 = {};
          /** @type {any} */
          let intermediateResult24 = undefined;
          /** @type {any} */
          const intermediateValue24 = value["scheduledAtNotIn"];

          if (
            intermediateValue24 === null ||
            intermediateValue24 === undefined
          ) {
            intermediateErrorMap24[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap25 = {};
            /** @type {Array<any>} */
            const intermediateResult25 = [];
            /** @type {any | Array<any>} */
            const intermediateValue25 = intermediateValue24;

            if (!Array.isArray(intermediateValue25)) {
              intermediateErrorMap24[`$`] = {
                key: "validator.array",
                value: intermediateValue25,
              };
            } else {
              intermediateResult24 = [];
              for (let i25 = 0; i25 < intermediateValue25.length; ++i25) {
                if (
                  intermediateValue25[i25] === null ||
                  intermediateValue25[i25] === undefined
                ) {
                  intermediateErrorMap25[`$.${i25}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue25[i25] === "string" ||
                    typeof intermediateValue25[i25] === "number"
                  ) {
                    intermediateResult25[i25] = new Date(
                      intermediateValue25[i25],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue25[i25]) ===
                    "[object Date]"
                  ) {
                    intermediateResult25[i25] = intermediateValue25[i25];
                  } else {
                    intermediateErrorMap25[`$.${i25}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult25[i25]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap25[`$.${i25}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap25).length) {
              for (const errorKey of Object.keys(intermediateErrorMap25)) {
                intermediateErrorMap24[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap25[errorKey];
              }
            } else {
              intermediateResult24 = intermediateResult25;
            }
          }
          if (Object.keys(intermediateErrorMap24).length > 0) {
            errorMap[`$.scheduledAtNotIn`].errors.push(intermediateErrorMap24);
          } else {
            hasAnyOfMatch22 = true;
            delete errorMap[`$.scheduledAtNotIn`];
            result["scheduledAtNotIn"] = intermediateResult24;
          }
        }
        if (!hasAnyOfMatch22) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap24 = {};
          /** @type {any} */
          let intermediateResult24 = undefined;
          /** @type {any} */
          const intermediateValue24 = value["scheduledAtNotIn"];

          if (
            intermediateValue24 === null ||
            intermediateValue24 === undefined
          ) {
            intermediateErrorMap24[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue24)) {
              intermediateResult24 = intermediateValue24;
            } else {
              intermediateErrorMap24[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap24).length > 0) {
            errorMap[`$.scheduledAtNotIn`].errors.push(intermediateErrorMap24);
          } else {
            hasAnyOfMatch22 = true;
            delete errorMap[`$.scheduledAtNotIn`];
            result["scheduledAtNotIn"] = intermediateResult24;
          }
        }
      }
      if (
        value["scheduledAtGreaterThan"] === null ||
        value["scheduledAtGreaterThan"] === undefined
      ) {
        result["scheduledAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["scheduledAtGreaterThan"] === "string" ||
          typeof value["scheduledAtGreaterThan"] === "number"
        ) {
          result["scheduledAtGreaterThan"] = new Date(
            value["scheduledAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["scheduledAtGreaterThan"] = value["scheduledAtGreaterThan"];
        } else {
          errorMap[`$.scheduledAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtLowerThan"] === null ||
        value["scheduledAtLowerThan"] === undefined
      ) {
        result["scheduledAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["scheduledAtLowerThan"] === "string" ||
          typeof value["scheduledAtLowerThan"] === "number"
        ) {
          result["scheduledAtLowerThan"] = new Date(
            value["scheduledAtLowerThan"],
          );
        } else if (
          Object.prototype.toString.call(value["scheduledAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["scheduledAtLowerThan"] = value["scheduledAtLowerThan"];
        } else {
          errorMap[`$.scheduledAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["scheduledAtIsNull"] === null ||
        value["scheduledAtIsNull"] === undefined
      ) {
        result["scheduledAtIsNull"] = undefined;
      } else {
        if (
          value["scheduledAtIsNull"] === true ||
          value["scheduledAtIsNull"] === "true" ||
          value["scheduledAtIsNull"] === 1 ||
          value["scheduledAtIsNull"] === "1"
        ) {
          result["scheduledAtIsNull"] = true;
        } else if (
          value["scheduledAtIsNull"] === false ||
          value["scheduledAtIsNull"] === "false" ||
          value["scheduledAtIsNull"] === 0 ||
          value["scheduledAtIsNull"] === "0"
        ) {
          result["scheduledAtIsNull"] = false;
        } else {
          errorMap[`$.scheduledAtIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["scheduledAtIsNotNull"] === null ||
        value["scheduledAtIsNotNull"] === undefined
      ) {
        result["scheduledAtIsNotNull"] = undefined;
      } else {
        if (
          value["scheduledAtIsNotNull"] === true ||
          value["scheduledAtIsNotNull"] === "true" ||
          value["scheduledAtIsNotNull"] === 1 ||
          value["scheduledAtIsNotNull"] === "1"
        ) {
          result["scheduledAtIsNotNull"] = true;
        } else if (
          value["scheduledAtIsNotNull"] === false ||
          value["scheduledAtIsNotNull"] === "false" ||
          value["scheduledAtIsNotNull"] === 0 ||
          value["scheduledAtIsNotNull"] === "0"
        ) {
          result["scheduledAtIsNotNull"] = false;
        } else {
          errorMap[`$.scheduledAtIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch29 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch29) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap31 = {};
          /** @type {any} */
          let intermediateResult31 = undefined;
          /** @type {any} */
          const intermediateValue31 = value["createdAtIn"];

          if (
            intermediateValue31 === null ||
            intermediateValue31 === undefined
          ) {
            intermediateErrorMap31[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap32 = {};
            /** @type {Array<any>} */
            const intermediateResult32 = [];
            /** @type {any | Array<any>} */
            const intermediateValue32 = intermediateValue31;

            if (!Array.isArray(intermediateValue32)) {
              intermediateErrorMap31[`$`] = {
                key: "validator.array",
                value: intermediateValue32,
              };
            } else {
              intermediateResult31 = [];
              for (let i32 = 0; i32 < intermediateValue32.length; ++i32) {
                if (
                  intermediateValue32[i32] === null ||
                  intermediateValue32[i32] === undefined
                ) {
                  intermediateErrorMap32[`$.${i32}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue32[i32] === "string" ||
                    typeof intermediateValue32[i32] === "number"
                  ) {
                    intermediateResult32[i32] = new Date(
                      intermediateValue32[i32],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue32[i32]) ===
                    "[object Date]"
                  ) {
                    intermediateResult32[i32] = intermediateValue32[i32];
                  } else {
                    intermediateErrorMap32[`$.${i32}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult32[i32]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap32[`$.${i32}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap32).length) {
              for (const errorKey of Object.keys(intermediateErrorMap32)) {
                intermediateErrorMap31[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap32[errorKey];
              }
            } else {
              intermediateResult31 = intermediateResult32;
            }
          }
          if (Object.keys(intermediateErrorMap31).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap31);
          } else {
            hasAnyOfMatch29 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult31;
          }
        }
        if (!hasAnyOfMatch29) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap31 = {};
          /** @type {any} */
          let intermediateResult31 = undefined;
          /** @type {any} */
          const intermediateValue31 = value["createdAtIn"];

          if (
            intermediateValue31 === null ||
            intermediateValue31 === undefined
          ) {
            intermediateErrorMap31[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue31)) {
              intermediateResult31 = intermediateValue31;
            } else {
              intermediateErrorMap31[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap31).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap31);
          } else {
            hasAnyOfMatch29 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult31;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch30 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch30) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap32 = {};
          /** @type {any} */
          let intermediateResult32 = undefined;
          /** @type {any} */
          const intermediateValue32 = value["createdAtNotIn"];

          if (
            intermediateValue32 === null ||
            intermediateValue32 === undefined
          ) {
            intermediateErrorMap32[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap33 = {};
            /** @type {Array<any>} */
            const intermediateResult33 = [];
            /** @type {any | Array<any>} */
            const intermediateValue33 = intermediateValue32;

            if (!Array.isArray(intermediateValue33)) {
              intermediateErrorMap32[`$`] = {
                key: "validator.array",
                value: intermediateValue33,
              };
            } else {
              intermediateResult32 = [];
              for (let i33 = 0; i33 < intermediateValue33.length; ++i33) {
                if (
                  intermediateValue33[i33] === null ||
                  intermediateValue33[i33] === undefined
                ) {
                  intermediateErrorMap33[`$.${i33}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue33[i33] === "string" ||
                    typeof intermediateValue33[i33] === "number"
                  ) {
                    intermediateResult33[i33] = new Date(
                      intermediateValue33[i33],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue33[i33]) ===
                    "[object Date]"
                  ) {
                    intermediateResult33[i33] = intermediateValue33[i33];
                  } else {
                    intermediateErrorMap33[`$.${i33}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult33[i33]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap33[`$.${i33}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap33).length) {
              for (const errorKey of Object.keys(intermediateErrorMap33)) {
                intermediateErrorMap32[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap33[errorKey];
              }
            } else {
              intermediateResult32 = intermediateResult33;
            }
          }
          if (Object.keys(intermediateErrorMap32).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap32);
          } else {
            hasAnyOfMatch30 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult32;
          }
        }
        if (!hasAnyOfMatch30) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap32 = {};
          /** @type {any} */
          let intermediateResult32 = undefined;
          /** @type {any} */
          const intermediateValue32 = value["createdAtNotIn"];

          if (
            intermediateValue32 === null ||
            intermediateValue32 === undefined
          ) {
            intermediateErrorMap32[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue32)) {
              intermediateResult32 = intermediateValue32;
            } else {
              intermediateErrorMap32[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap32).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap32);
          } else {
            hasAnyOfMatch30 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult32;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch35 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch35) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap37 = {};
          /** @type {any} */
          let intermediateResult37 = undefined;
          /** @type {any} */
          const intermediateValue37 = value["updatedAtIn"];

          if (
            intermediateValue37 === null ||
            intermediateValue37 === undefined
          ) {
            intermediateErrorMap37[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap38 = {};
            /** @type {Array<any>} */
            const intermediateResult38 = [];
            /** @type {any | Array<any>} */
            const intermediateValue38 = intermediateValue37;

            if (!Array.isArray(intermediateValue38)) {
              intermediateErrorMap37[`$`] = {
                key: "validator.array",
                value: intermediateValue38,
              };
            } else {
              intermediateResult37 = [];
              for (let i38 = 0; i38 < intermediateValue38.length; ++i38) {
                if (
                  intermediateValue38[i38] === null ||
                  intermediateValue38[i38] === undefined
                ) {
                  intermediateErrorMap38[`$.${i38}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue38[i38] === "string" ||
                    typeof intermediateValue38[i38] === "number"
                  ) {
                    intermediateResult38[i38] = new Date(
                      intermediateValue38[i38],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue38[i38]) ===
                    "[object Date]"
                  ) {
                    intermediateResult38[i38] = intermediateValue38[i38];
                  } else {
                    intermediateErrorMap38[`$.${i38}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult38[i38]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap38[`$.${i38}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap38).length) {
              for (const errorKey of Object.keys(intermediateErrorMap38)) {
                intermediateErrorMap37[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap38[errorKey];
              }
            } else {
              intermediateResult37 = intermediateResult38;
            }
          }
          if (Object.keys(intermediateErrorMap37).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap37);
          } else {
            hasAnyOfMatch35 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult37;
          }
        }
        if (!hasAnyOfMatch35) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap37 = {};
          /** @type {any} */
          let intermediateResult37 = undefined;
          /** @type {any} */
          const intermediateValue37 = value["updatedAtIn"];

          if (
            intermediateValue37 === null ||
            intermediateValue37 === undefined
          ) {
            intermediateErrorMap37[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue37)) {
              intermediateResult37 = intermediateValue37;
            } else {
              intermediateErrorMap37[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap37).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap37);
          } else {
            hasAnyOfMatch35 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult37;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch36 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch36) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap38 = {};
          /** @type {any} */
          let intermediateResult38 = undefined;
          /** @type {any} */
          const intermediateValue38 = value["updatedAtNotIn"];

          if (
            intermediateValue38 === null ||
            intermediateValue38 === undefined
          ) {
            intermediateErrorMap38[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap39 = {};
            /** @type {Array<any>} */
            const intermediateResult39 = [];
            /** @type {any | Array<any>} */
            const intermediateValue39 = intermediateValue38;

            if (!Array.isArray(intermediateValue39)) {
              intermediateErrorMap38[`$`] = {
                key: "validator.array",
                value: intermediateValue39,
              };
            } else {
              intermediateResult38 = [];
              for (let i39 = 0; i39 < intermediateValue39.length; ++i39) {
                if (
                  intermediateValue39[i39] === null ||
                  intermediateValue39[i39] === undefined
                ) {
                  intermediateErrorMap39[`$.${i39}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue39[i39] === "string" ||
                    typeof intermediateValue39[i39] === "number"
                  ) {
                    intermediateResult39[i39] = new Date(
                      intermediateValue39[i39],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue39[i39]) ===
                    "[object Date]"
                  ) {
                    intermediateResult39[i39] = intermediateValue39[i39];
                  } else {
                    intermediateErrorMap39[`$.${i39}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult39[i39]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap39[`$.${i39}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap39).length) {
              for (const errorKey of Object.keys(intermediateErrorMap39)) {
                intermediateErrorMap38[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap39[errorKey];
              }
            } else {
              intermediateResult38 = intermediateResult39;
            }
          }
          if (Object.keys(intermediateErrorMap38).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap38);
          } else {
            hasAnyOfMatch36 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult38;
          }
        }
        if (!hasAnyOfMatch36) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap38 = {};
          /** @type {any} */
          let intermediateResult38 = undefined;
          /** @type {any} */
          const intermediateValue38 = value["updatedAtNotIn"];

          if (
            intermediateValue38 === null ||
            intermediateValue38 === undefined
          ) {
            intermediateErrorMap38[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue38)) {
              intermediateResult38 = intermediateValue38;
            } else {
              intermediateErrorMap38[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap38).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap38);
          } else {
            hasAnyOfMatch36 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult38;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobOrderBy|any} value
 * @returns {Either<import("../common/types.js").StoreJobOrderBy, ValidatorErrorMap>}
 */
export function validateStoreJobOrderBy(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "isComplete" &&
                  convertedString3 !== "name" &&
                  convertedString3 !== "scheduledAt" &&
                  convertedString3 !== "createdAt" &&
                  convertedString3 !== "updatedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "isComplete",
                      "name",
                      "scheduledAt",
                      "createdAt",
                      "updatedAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobOrderBySpec|any} value
 * @returns {Either<import("../common/types.js").StoreJobOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreJobOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "isComplete",
        "name",
        "scheduledAt",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        isComplete: undefined,
        name: undefined,
        scheduledAt: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        const convertedString1 = value["id"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString1.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString1 !== "ASC" &&
              convertedString1 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString1,
              };
            } else {
              result["id"] = convertedString1;
            }
          }
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = undefined;
      } else {
        /** @type {string} */
        const convertedString2 = value["isComplete"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.isComplete`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length === 0) {
            result["isComplete"] = undefined;
          } else {
            if (convertedString2.length < 1) {
              errorMap[`$.isComplete`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString2 !== "ASC" &&
              convertedString2 !== "DESC" &&
              convertedString2 !== "ASC NULLS FIRST" &&
              convertedString2 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.isComplete`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString2,
              };
            } else {
              result["isComplete"] = convertedString2;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        const convertedString3 = value["name"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString3.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString3 !== "ASC" &&
              convertedString3 !== "DESC"
            ) {
              errorMap[`$.name`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString3,
              };
            } else {
              result["name"] = convertedString3;
            }
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString4 = value["scheduledAt"];
        if (typeof convertedString4 !== "string") {
          errorMap[`$.scheduledAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString4.length === 0) {
            result["scheduledAt"] = undefined;
          } else {
            if (convertedString4.length < 1) {
              errorMap[`$.scheduledAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString4 !== "ASC" &&
              convertedString4 !== "DESC" &&
              convertedString4 !== "ASC NULLS FIRST" &&
              convertedString4 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.scheduledAt`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString4,
              };
            } else {
              result["scheduledAt"] = convertedString4;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString5 = value["createdAt"];
        if (typeof convertedString5 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString5.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString5.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString5 !== "ASC" &&
              convertedString5 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString5,
              };
            } else {
              result["createdAt"] = convertedString5;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString6 = value["updatedAt"];
        if (typeof convertedString6 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString6.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString6.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString6 !== "ASC" &&
              convertedString6 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString6,
              };
            } else {
              result["updatedAt"] = convertedString6;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobQueryBuilder|any} value
 * @returns {Either<import("../common/types.js").StoreJobQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreJobQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "where",
        "orderBy",
        "orderBySpec",
        "limit",
        "offset",
        "select",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        where: undefined,
        orderBy: undefined,
        orderBySpec: undefined,
        limit: undefined,
        offset: undefined,
        select: undefined,
      };

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult1 = validateStoreJobWhereValidated(value["where"]);

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["where"] = refResult1.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult2 = validateStoreJobOrderBy(value["orderBy"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["orderBy"] = refResult2.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult3 = validateStoreJobOrderBySpec(value["orderBySpec"]);

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult3.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber4 = value["limit"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber4;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber5 = value["offset"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber5;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "isComplete",
          "handlerTimeout",
          "priority",
          "retryCount",
          "name",
          "scheduledAt",
          "data",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult6 = validateStoreJobReturning(value["select"]);

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["select"] = refResult6.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobReturning|any} value
 * @returns {Either<import("../common/types.js").StoreJobReturning, ValidatorErrorMap>}
 */
export function validateStoreJobReturning(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "isComplete" &&
                  convertedString3 !== "handlerTimeout" &&
                  convertedString3 !== "priority" &&
                  convertedString3 !== "retryCount" &&
                  convertedString3 !== "name" &&
                  convertedString3 !== "scheduledAt" &&
                  convertedString3 !== "data" &&
                  convertedString3 !== "createdAt" &&
                  convertedString3 !== "updatedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "isComplete",
                      "handlerTimeout",
                      "priority",
                      "retryCount",
                      "name",
                      "scheduledAt",
                      "data",
                      "createdAt",
                      "updatedAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobInsert|any} value
 * @returns {Either<import("../common/types.js").StoreJobInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreJobInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["insert", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { insert: undefined, returning: undefined };

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap2 = {};
        /** @type {Array<any>} */
        const intermediateResult2 = [];
        /** @type {any | Array<any>} */
        let intermediateValue2 = value["insert"];

        if (!Array.isArray(intermediateValue2)) {
          intermediateValue2 = [intermediateValue2];
        }
        if (intermediateValue2.length < 1) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            minLength: 1,
            foundLength: intermediateValue2.length,
          };
        }
        if (intermediateValue2.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue2.length,
          };
        }
        result["insert"] = [];
        for (let i2 = 0; i2 < intermediateValue2.length; ++i2) {
          if (
            intermediateValue2[i2] === null ||
            intermediateValue2[i2] === undefined
          ) {
            intermediateErrorMap2[`$.${i2}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult2 = validateStoreJobInsertPartialValidated(
              intermediateValue2[i2],
            );

            if (refResult2.error) {
              for (const errorKey of Object.keys(refResult2.error)) {
                intermediateErrorMap2[`$.${i2}${errorKey.substring(1)}`] =
                  refResult2.error[errorKey];
              }
            }
            intermediateResult2[i2] = refResult2.value;
          }
        }
        if (Object.keys(intermediateErrorMap2).length) {
          for (const errorKey of Object.keys(intermediateErrorMap2)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap2[errorKey];
          }
        } else {
          result["insert"] = intermediateResult2;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult2 = validateStoreJobReturning(value["returning"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["returning"] = refResult2.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobInsertPartial|any} value
 * @returns {Either<import("../common/types.js").StoreJobInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreJobInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "isComplete",
        "handlerTimeout",
        "priority",
        "retryCount",
        "name",
        "scheduledAt",
        "data",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        isComplete: undefined,
        handlerTimeout: undefined,
        priority: undefined,
        retryCount: undefined,
        name: undefined,
        scheduledAt: undefined,
        data: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        let convertedNumber1 = value["id"];
        if (
          typeof convertedNumber1 !== "number" &&
          typeof convertedNumber1 === "string"
        ) {
          convertedNumber1 = Number(convertedNumber1);
        }
        if (
          typeof convertedNumber1 !== "number" ||
          isNaN(convertedNumber1) ||
          !isFinite(convertedNumber1) ||
          !Number.isInteger(convertedNumber1)
        ) {
          errorMap[`$.id`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber1 < -2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber1 > 2147483647) {
          errorMap[`$.id`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["id"] = convertedNumber1;
        }
      }
      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = false;
      } else {
        if (
          value["isComplete"] === true ||
          value["isComplete"] === "true" ||
          value["isComplete"] === 1 ||
          value["isComplete"] === "1"
        ) {
          result["isComplete"] = true;
        } else if (
          value["isComplete"] === false ||
          value["isComplete"] === "false" ||
          value["isComplete"] === 0 ||
          value["isComplete"] === "0"
        ) {
          result["isComplete"] = false;
        } else {
          errorMap[`$.isComplete`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["handlerTimeout"] === null ||
        value["handlerTimeout"] === undefined
      ) {
        result["handlerTimeout"] = value["handlerTimeout"];
      } else {
        let convertedNumber3 = value["handlerTimeout"];
        if (
          typeof convertedNumber3 !== "number" &&
          typeof convertedNumber3 === "string"
        ) {
          convertedNumber3 = Number(convertedNumber3);
        }
        if (
          typeof convertedNumber3 !== "number" ||
          isNaN(convertedNumber3) ||
          !isFinite(convertedNumber3) ||
          !Number.isInteger(convertedNumber3)
        ) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber3 < 0) {
          errorMap[`$.handlerTimeout`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["handlerTimeout"] = convertedNumber3;
        }
      }
      if (value["priority"] === null || value["priority"] === undefined) {
        result["priority"] = 0;
      } else {
        let convertedNumber4 = value["priority"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.priority`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 0) {
          errorMap[`$.priority`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["priority"] = convertedNumber4;
        }
      }
      if (value["retryCount"] === null || value["retryCount"] === undefined) {
        result["retryCount"] = 0;
      } else {
        let convertedNumber5 = value["retryCount"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.retryCount`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < -2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber5 > 2147483647) {
          errorMap[`$.retryCount`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["retryCount"] = convertedNumber5;
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString6 = value["name"];
        if (typeof convertedString6 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString6.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString6;
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = new Date();
      } else {
        if (
          typeof value["scheduledAt"] === "string" ||
          typeof value["scheduledAt"] === "number"
        ) {
          result["scheduledAt"] = new Date(value["scheduledAt"]);
        } else if (
          Object.prototype.toString.call(value["scheduledAt"]) ===
          "[object Date]"
        ) {
          result["scheduledAt"] = value["scheduledAt"];
        } else {
          errorMap[`$.scheduledAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["scheduledAt"]?.getTime() ?? undefined)) {
          errorMap[`$.scheduledAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobUpdate|any} value
 * @returns {Either<import("../common/types.js").StoreJobUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreJobUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["update", "where", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { update: undefined, where: undefined, returning: undefined };

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult1 = validateStoreJobUpdatePartialValidated(
          value["update"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["update"] = refResult1.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 = validateStoreJobWhereValidated(value["where"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["where"] = refResult2.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult3 = validateStoreJobReturning(value["returning"]);

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["returning"] = refResult3.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreJobUpdatePartial|any} value
 * @returns {Either<import("../common/types.js").StoreJobUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreJobUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "isComplete",
        "handlerTimeout",
        "priority",
        "retryCount",
        "name",
        "scheduledAt",
        "data",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        isComplete: undefined,
        handlerTimeout: undefined,
        priority: undefined,
        retryCount: undefined,
        name: undefined,
        scheduledAt: undefined,
        data: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["isComplete"] === null || value["isComplete"] === undefined) {
        result["isComplete"] = value["isComplete"];
      } else {
        let hasAnyOfMatch1 = false;
        errorMap[`$.isComplete`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["isComplete"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue3)) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$negate"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = { $negate: undefined };

              if (
                intermediateValue3["$negate"] === null ||
                intermediateValue3["$negate"] === undefined
              ) {
                intermediateErrorMap3[`$.$negate`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  intermediateValue3["$negate"] === true ||
                  intermediateValue3["$negate"] === "true" ||
                  intermediateValue3["$negate"] === 1 ||
                  intermediateValue3["$negate"] === "1"
                ) {
                  intermediateResult3["$negate"] = true;
                } else if (
                  intermediateValue3["$negate"] === false ||
                  intermediateValue3["$negate"] === "false" ||
                  intermediateValue3["$negate"] === 0 ||
                  intermediateValue3["$negate"] === "0"
                ) {
                  intermediateResult3["$negate"] = false;
                } else {
                  intermediateErrorMap3[`$.$negate`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.isComplete`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.isComplete`];
            result["isComplete"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["isComplete"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateResult3 = false;
          } else {
            if (
              intermediateValue3 === true ||
              intermediateValue3 === "true" ||
              intermediateValue3 === 1 ||
              intermediateValue3 === "1"
            ) {
              intermediateResult3 = true;
            } else if (
              intermediateValue3 === false ||
              intermediateValue3 === "false" ||
              intermediateValue3 === 0 ||
              intermediateValue3 === "0"
            ) {
              intermediateResult3 = false;
            } else {
              intermediateErrorMap3[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.isComplete`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.isComplete`];
            result["isComplete"] = intermediateResult3;
          }
        }
      }
      if (
        value["handlerTimeout"] === null ||
        value["handlerTimeout"] === undefined
      ) {
        result["handlerTimeout"] = value["handlerTimeout"];
      } else {
        let hasAnyOfMatch2 = false;
        errorMap[`$.handlerTimeout`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["handlerTimeout"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$divide"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $divide: undefined };

              if (
                intermediateValue4["$divide"] === null ||
                intermediateValue4["$divide"] === undefined
              ) {
                intermediateErrorMap4[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber5 = intermediateValue4["$divide"];
                if (
                  typeof convertedNumber5 !== "number" &&
                  typeof convertedNumber5 === "string"
                ) {
                  convertedNumber5 = Number(convertedNumber5);
                }
                if (
                  typeof convertedNumber5 !== "number" ||
                  isNaN(convertedNumber5) ||
                  !isFinite(convertedNumber5) ||
                  !Number.isInteger(convertedNumber5)
                ) {
                  intermediateErrorMap4[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber5 < -2147483647) {
                  intermediateErrorMap4[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber5 > 2147483647) {
                  intermediateErrorMap4[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult4["$divide"] = convertedNumber5;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["handlerTimeout"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$multiply"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $multiply: undefined };

              if (
                intermediateValue4["$multiply"] === null ||
                intermediateValue4["$multiply"] === undefined
              ) {
                intermediateErrorMap4[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber5 = intermediateValue4["$multiply"];
                if (
                  typeof convertedNumber5 !== "number" &&
                  typeof convertedNumber5 === "string"
                ) {
                  convertedNumber5 = Number(convertedNumber5);
                }
                if (
                  typeof convertedNumber5 !== "number" ||
                  isNaN(convertedNumber5) ||
                  !isFinite(convertedNumber5) ||
                  !Number.isInteger(convertedNumber5)
                ) {
                  intermediateErrorMap4[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber5 < -2147483647) {
                  intermediateErrorMap4[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber5 > 2147483647) {
                  intermediateErrorMap4[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult4["$multiply"] = convertedNumber5;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["handlerTimeout"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $subtract: undefined };

              if (
                intermediateValue4["$subtract"] === null ||
                intermediateValue4["$subtract"] === undefined
              ) {
                intermediateErrorMap4[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber5 = intermediateValue4["$subtract"];
                if (
                  typeof convertedNumber5 !== "number" &&
                  typeof convertedNumber5 === "string"
                ) {
                  convertedNumber5 = Number(convertedNumber5);
                }
                if (
                  typeof convertedNumber5 !== "number" ||
                  isNaN(convertedNumber5) ||
                  !isFinite(convertedNumber5) ||
                  !Number.isInteger(convertedNumber5)
                ) {
                  intermediateErrorMap4[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber5 < -2147483647) {
                  intermediateErrorMap4[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber5 > 2147483647) {
                  intermediateErrorMap4[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult4["$subtract"] = convertedNumber5;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["handlerTimeout"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $add: undefined };

              if (
                intermediateValue4["$add"] === null ||
                intermediateValue4["$add"] === undefined
              ) {
                intermediateErrorMap4[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber5 = intermediateValue4["$add"];
                if (
                  typeof convertedNumber5 !== "number" &&
                  typeof convertedNumber5 === "string"
                ) {
                  convertedNumber5 = Number(convertedNumber5);
                }
                if (
                  typeof convertedNumber5 !== "number" ||
                  isNaN(convertedNumber5) ||
                  !isFinite(convertedNumber5) ||
                  !Number.isInteger(convertedNumber5)
                ) {
                  intermediateErrorMap4[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber5 < -2147483647) {
                  intermediateErrorMap4[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber5 > 2147483647) {
                  intermediateErrorMap4[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult4["$add"] = convertedNumber5;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["handlerTimeout"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateResult4 = intermediateValue4;
          } else {
            let convertedNumber4 = intermediateValue4;
            if (
              typeof convertedNumber4 !== "number" &&
              typeof convertedNumber4 === "string"
            ) {
              convertedNumber4 = Number(convertedNumber4);
            }
            if (
              typeof convertedNumber4 !== "number" ||
              isNaN(convertedNumber4) ||
              !isFinite(convertedNumber4) ||
              !Number.isInteger(convertedNumber4)
            ) {
              intermediateErrorMap4[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber4 < 0) {
              intermediateErrorMap4[`$`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              intermediateResult4 = convertedNumber4;
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.handlerTimeout`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.handlerTimeout`];
            result["handlerTimeout"] = intermediateResult4;
          }
        }
      }
      if (value["priority"] === null || value["priority"] === undefined) {
        result["priority"] = value["priority"];
      } else {
        let hasAnyOfMatch3 = false;
        errorMap[`$.priority`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["priority"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$divide"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $divide: undefined };

              if (
                intermediateValue5["$divide"] === null ||
                intermediateValue5["$divide"] === undefined
              ) {
                intermediateErrorMap5[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber6 = intermediateValue5["$divide"];
                if (
                  typeof convertedNumber6 !== "number" &&
                  typeof convertedNumber6 === "string"
                ) {
                  convertedNumber6 = Number(convertedNumber6);
                }
                if (
                  typeof convertedNumber6 !== "number" ||
                  isNaN(convertedNumber6) ||
                  !isFinite(convertedNumber6) ||
                  !Number.isInteger(convertedNumber6)
                ) {
                  intermediateErrorMap5[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber6 < -2147483647) {
                  intermediateErrorMap5[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber6 > 2147483647) {
                  intermediateErrorMap5[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult5["$divide"] = convertedNumber6;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["priority"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$multiply"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $multiply: undefined };

              if (
                intermediateValue5["$multiply"] === null ||
                intermediateValue5["$multiply"] === undefined
              ) {
                intermediateErrorMap5[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber6 = intermediateValue5["$multiply"];
                if (
                  typeof convertedNumber6 !== "number" &&
                  typeof convertedNumber6 === "string"
                ) {
                  convertedNumber6 = Number(convertedNumber6);
                }
                if (
                  typeof convertedNumber6 !== "number" ||
                  isNaN(convertedNumber6) ||
                  !isFinite(convertedNumber6) ||
                  !Number.isInteger(convertedNumber6)
                ) {
                  intermediateErrorMap5[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber6 < -2147483647) {
                  intermediateErrorMap5[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber6 > 2147483647) {
                  intermediateErrorMap5[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult5["$multiply"] = convertedNumber6;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["priority"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $subtract: undefined };

              if (
                intermediateValue5["$subtract"] === null ||
                intermediateValue5["$subtract"] === undefined
              ) {
                intermediateErrorMap5[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber6 = intermediateValue5["$subtract"];
                if (
                  typeof convertedNumber6 !== "number" &&
                  typeof convertedNumber6 === "string"
                ) {
                  convertedNumber6 = Number(convertedNumber6);
                }
                if (
                  typeof convertedNumber6 !== "number" ||
                  isNaN(convertedNumber6) ||
                  !isFinite(convertedNumber6) ||
                  !Number.isInteger(convertedNumber6)
                ) {
                  intermediateErrorMap5[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber6 < -2147483647) {
                  intermediateErrorMap5[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber6 > 2147483647) {
                  intermediateErrorMap5[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult5["$subtract"] = convertedNumber6;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["priority"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $add: undefined };

              if (
                intermediateValue5["$add"] === null ||
                intermediateValue5["$add"] === undefined
              ) {
                intermediateErrorMap5[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber6 = intermediateValue5["$add"];
                if (
                  typeof convertedNumber6 !== "number" &&
                  typeof convertedNumber6 === "string"
                ) {
                  convertedNumber6 = Number(convertedNumber6);
                }
                if (
                  typeof convertedNumber6 !== "number" ||
                  isNaN(convertedNumber6) ||
                  !isFinite(convertedNumber6) ||
                  !Number.isInteger(convertedNumber6)
                ) {
                  intermediateErrorMap5[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber6 < -2147483647) {
                  intermediateErrorMap5[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber6 > 2147483647) {
                  intermediateErrorMap5[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult5["$add"] = convertedNumber6;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["priority"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateResult5 = 0;
          } else {
            let convertedNumber5 = intermediateValue5;
            if (
              typeof convertedNumber5 !== "number" &&
              typeof convertedNumber5 === "string"
            ) {
              convertedNumber5 = Number(convertedNumber5);
            }
            if (
              typeof convertedNumber5 !== "number" ||
              isNaN(convertedNumber5) ||
              !isFinite(convertedNumber5) ||
              !Number.isInteger(convertedNumber5)
            ) {
              intermediateErrorMap5[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber5 < 0) {
              intermediateErrorMap5[`$`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              intermediateResult5 = convertedNumber5;
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.priority`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.priority`];
            result["priority"] = intermediateResult5;
          }
        }
      }
      if (value["retryCount"] === null || value["retryCount"] === undefined) {
        result["retryCount"] = value["retryCount"];
      } else {
        let hasAnyOfMatch4 = false;
        errorMap[`$.retryCount`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["retryCount"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$divide"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $divide: undefined };

              if (
                intermediateValue6["$divide"] === null ||
                intermediateValue6["$divide"] === undefined
              ) {
                intermediateErrorMap6[`$.$divide`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber7 = intermediateValue6["$divide"];
                if (
                  typeof convertedNumber7 !== "number" &&
                  typeof convertedNumber7 === "string"
                ) {
                  convertedNumber7 = Number(convertedNumber7);
                }
                if (
                  typeof convertedNumber7 !== "number" ||
                  isNaN(convertedNumber7) ||
                  !isFinite(convertedNumber7) ||
                  !Number.isInteger(convertedNumber7)
                ) {
                  intermediateErrorMap6[`$.$divide`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber7 < -2147483647) {
                  intermediateErrorMap6[`$.$divide`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber7 > 2147483647) {
                  intermediateErrorMap6[`$.$divide`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult6["$divide"] = convertedNumber7;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["retryCount"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$multiply"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $multiply: undefined };

              if (
                intermediateValue6["$multiply"] === null ||
                intermediateValue6["$multiply"] === undefined
              ) {
                intermediateErrorMap6[`$.$multiply`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber7 = intermediateValue6["$multiply"];
                if (
                  typeof convertedNumber7 !== "number" &&
                  typeof convertedNumber7 === "string"
                ) {
                  convertedNumber7 = Number(convertedNumber7);
                }
                if (
                  typeof convertedNumber7 !== "number" ||
                  isNaN(convertedNumber7) ||
                  !isFinite(convertedNumber7) ||
                  !Number.isInteger(convertedNumber7)
                ) {
                  intermediateErrorMap6[`$.$multiply`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber7 < -2147483647) {
                  intermediateErrorMap6[`$.$multiply`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber7 > 2147483647) {
                  intermediateErrorMap6[`$.$multiply`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult6["$multiply"] = convertedNumber7;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["retryCount"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $subtract: undefined };

              if (
                intermediateValue6["$subtract"] === null ||
                intermediateValue6["$subtract"] === undefined
              ) {
                intermediateErrorMap6[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber7 = intermediateValue6["$subtract"];
                if (
                  typeof convertedNumber7 !== "number" &&
                  typeof convertedNumber7 === "string"
                ) {
                  convertedNumber7 = Number(convertedNumber7);
                }
                if (
                  typeof convertedNumber7 !== "number" ||
                  isNaN(convertedNumber7) ||
                  !isFinite(convertedNumber7) ||
                  !Number.isInteger(convertedNumber7)
                ) {
                  intermediateErrorMap6[`$.$subtract`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber7 < -2147483647) {
                  intermediateErrorMap6[`$.$subtract`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber7 > 2147483647) {
                  intermediateErrorMap6[`$.$subtract`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult6["$subtract"] = convertedNumber7;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["retryCount"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $add: undefined };

              if (
                intermediateValue6["$add"] === null ||
                intermediateValue6["$add"] === undefined
              ) {
                intermediateErrorMap6[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                let convertedNumber7 = intermediateValue6["$add"];
                if (
                  typeof convertedNumber7 !== "number" &&
                  typeof convertedNumber7 === "string"
                ) {
                  convertedNumber7 = Number(convertedNumber7);
                }
                if (
                  typeof convertedNumber7 !== "number" ||
                  isNaN(convertedNumber7) ||
                  !isFinite(convertedNumber7) ||
                  !Number.isInteger(convertedNumber7)
                ) {
                  intermediateErrorMap6[`$.$add`] = {
                    key: "validator.number",
                    subType: "int",
                  };
                } else if (convertedNumber7 < -2147483647) {
                  intermediateErrorMap6[`$.$add`] = {
                    key: "validator.range",
                    minValue: -2147483647,
                  };
                } else if (convertedNumber7 > 2147483647) {
                  intermediateErrorMap6[`$.$add`] = {
                    key: "validator.range",
                    maxValue: 2147483647,
                  };
                } else {
                  intermediateResult6["$add"] = convertedNumber7;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["retryCount"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateResult6 = 0;
          } else {
            let convertedNumber6 = intermediateValue6;
            if (
              typeof convertedNumber6 !== "number" &&
              typeof convertedNumber6 === "string"
            ) {
              convertedNumber6 = Number(convertedNumber6);
            }
            if (
              typeof convertedNumber6 !== "number" ||
              isNaN(convertedNumber6) ||
              !isFinite(convertedNumber6) ||
              !Number.isInteger(convertedNumber6)
            ) {
              intermediateErrorMap6[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber6 < -2147483647) {
              intermediateErrorMap6[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber6 > 2147483647) {
              intermediateErrorMap6[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult6 = convertedNumber6;
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.retryCount`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.retryCount`];
            result["retryCount"] = intermediateResult6;
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.name`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["name"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $append: undefined };

              if (
                intermediateValue7["$append"] === null ||
                intermediateValue7["$append"] === undefined
              ) {
                intermediateErrorMap7[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString8 = intermediateValue7["$append"];
                if (typeof convertedString8 !== "string") {
                  intermediateErrorMap7[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString8.length < 1) {
                    intermediateErrorMap7[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult7["$append"] = convertedString8;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["name"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateResult7 = undefined;
          } else {
            /** @type {string} */
            const convertedString7 = intermediateValue7;
            if (typeof convertedString7 !== "string") {
              intermediateErrorMap7[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString7.length === 0) {
                intermediateResult7 = undefined;
              } else {
                if (convertedString7.length < 1) {
                  intermediateErrorMap7[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult7 = convertedString7;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.name`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.name`];
            result["name"] = intermediateResult7;
          }
        }
      }
      if (value["scheduledAt"] === null || value["scheduledAt"] === undefined) {
        result["scheduledAt"] = value["scheduledAt"];
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.scheduledAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["scheduledAt"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue8)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.object",
                value: intermediateValue8,
                foundType: typeof intermediateValue8,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys8 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue8)) {
                if (
                  !knownKeys8.has(key) &&
                  intermediateValue8[key] !== null &&
                  intermediateValue8[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys8];
                  const foundKeys = Object.keys(intermediateValue8);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys8.has(it),
                  );
                  intermediateErrorMap8[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult8 = { $subtract: undefined };

              if (
                intermediateValue8["$subtract"] === null ||
                intermediateValue8["$subtract"] === undefined
              ) {
                intermediateErrorMap8[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString9 = intermediateValue8["$subtract"];
                if (typeof convertedString9 !== "string") {
                  intermediateErrorMap8[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString9.length < 1) {
                    intermediateErrorMap8[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult8["$subtract"] = convertedString9;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.scheduledAt`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.scheduledAt`];
            result["scheduledAt"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["scheduledAt"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue8)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.object",
                value: intermediateValue8,
                foundType: typeof intermediateValue8,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys8 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue8)) {
                if (
                  !knownKeys8.has(key) &&
                  intermediateValue8[key] !== null &&
                  intermediateValue8[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys8];
                  const foundKeys = Object.keys(intermediateValue8);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys8.has(it),
                  );
                  intermediateErrorMap8[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult8 = { $add: undefined };

              if (
                intermediateValue8["$add"] === null ||
                intermediateValue8["$add"] === undefined
              ) {
                intermediateErrorMap8[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString9 = intermediateValue8["$add"];
                if (typeof convertedString9 !== "string") {
                  intermediateErrorMap8[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString9.length < 1) {
                    intermediateErrorMap8[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult8["$add"] = convertedString9;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.scheduledAt`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.scheduledAt`];
            result["scheduledAt"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["scheduledAt"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateResult8 = new Date();
          } else {
            if (
              typeof intermediateValue8 === "string" ||
              typeof intermediateValue8 === "number"
            ) {
              intermediateResult8 = new Date(intermediateValue8);
            } else if (
              Object.prototype.toString.call(intermediateValue8) ===
              "[object Date]"
            ) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult8?.getTime() ?? undefined)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.scheduledAt`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.scheduledAt`];
            result["scheduledAt"] = intermediateResult8;
          }
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = value["data"];
      } else {
        let hasAnyOfMatch7 = false;
        errorMap[`$.data`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch7) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap9 = {};
          /** @type {any} */
          let intermediateResult9 = undefined;
          /** @type {any} */
          const intermediateValue9 = value["data"];

          if (intermediateValue9 === null || intermediateValue9 === undefined) {
            intermediateErrorMap9[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue9)) {
              intermediateErrorMap9[`$`] = {
                key: "validator.object",
                value: intermediateValue9,
                foundType: typeof intermediateValue9,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys9 = new Set(["$set"]);
              for (const key of Object.keys(intermediateValue9)) {
                if (
                  !knownKeys9.has(key) &&
                  intermediateValue9[key] !== null &&
                  intermediateValue9[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys9];
                  const foundKeys = Object.keys(intermediateValue9);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys9.has(it),
                  );
                  intermediateErrorMap9[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult9 = { $set: undefined };

              if (
                intermediateValue9["$set"] === null ||
                intermediateValue9["$set"] === undefined
              ) {
                intermediateErrorMap9[`$.$set`] = {
                  key: "validator.undefined",
                };
              } else {
                if (!isRecord(intermediateValue9["$set"])) {
                  intermediateErrorMap9[`$.$set`] = {
                    key: "validator.object",
                    value: intermediateValue9["$set"],
                    foundType: typeof intermediateValue9["$set"],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys10 = new Set(["path", "value"]);
                  for (const key of Object.keys(intermediateValue9["$set"])) {
                    if (
                      !knownKeys10.has(key) &&
                      intermediateValue9["$set"][key] !== null &&
                      intermediateValue9["$set"][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys10];
                      const foundKeys = Object.keys(intermediateValue9["$set"]);
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys10.has(it),
                      );
                      intermediateErrorMap9[`$.$set`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  intermediateResult9["$set"] = {
                    path: undefined,
                    value: undefined,
                  };

                  if (
                    intermediateValue9["$set"]["path"] === null ||
                    intermediateValue9["$set"]["path"] === undefined
                  ) {
                    intermediateErrorMap9[`$.$set.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap12 = {};
                    /** @type {Array<any>} */
                    const intermediateResult12 = [];
                    /** @type {any | Array<any>} */
                    const intermediateValue12 =
                      intermediateValue9["$set"]["path"];

                    if (!Array.isArray(intermediateValue12)) {
                      intermediateErrorMap9[`$.$set.path`] = {
                        key: "validator.array",
                        value: intermediateValue12,
                      };
                    } else {
                      intermediateResult9["$set"]["path"] = [];
                      for (
                        let i12 = 0;
                        i12 < intermediateValue12.length;
                        ++i12
                      ) {
                        if (
                          intermediateValue12[i12] === null ||
                          intermediateValue12[i12] === undefined
                        ) {
                          intermediateErrorMap12[`$.${i12}`] = {
                            key: "validator.undefined",
                          };
                        } else {
                          let hasAnyOfMatch12 = false;
                          intermediateErrorMap12[`$.${i12}`] = {
                            key: "validator.anyOf",
                            errors: [],
                          };
                          if (!hasAnyOfMatch12) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap14 = {};
                            /** @type {any} */
                            let intermediateResult14 = undefined;
                            /** @type {any} */
                            const intermediateValue14 =
                              intermediateValue12[i12];

                            if (
                              intermediateValue14 === null ||
                              intermediateValue14 === undefined
                            ) {
                              intermediateErrorMap14[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              let convertedNumber14 = intermediateValue14;
                              if (
                                typeof convertedNumber14 !== "number" &&
                                typeof convertedNumber14 === "string"
                              ) {
                                convertedNumber14 = Number(convertedNumber14);
                              }
                              if (
                                typeof convertedNumber14 !== "number" ||
                                isNaN(convertedNumber14) ||
                                !isFinite(convertedNumber14) ||
                                !Number.isInteger(convertedNumber14)
                              ) {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.number",
                                  subType: "int",
                                };
                              } else if (convertedNumber14 < -2147483647) {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.range",
                                  minValue: -2147483647,
                                };
                              } else if (convertedNumber14 > 2147483647) {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.range",
                                  maxValue: 2147483647,
                                };
                              } else {
                                intermediateResult14 = convertedNumber14;
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap14).length > 0
                            ) {
                              intermediateErrorMap12[`$.${i12}`].errors.push(
                                intermediateErrorMap14,
                              );
                            } else {
                              hasAnyOfMatch12 = true;
                              delete intermediateErrorMap12[`$.${i12}`];
                              intermediateResult12[i12] = intermediateResult14;
                            }
                          }
                          if (!hasAnyOfMatch12) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap14 = {};
                            /** @type {any} */
                            let intermediateResult14 = undefined;
                            /** @type {any} */
                            const intermediateValue14 =
                              intermediateValue12[i12];

                            if (
                              intermediateValue14 === null ||
                              intermediateValue14 === undefined
                            ) {
                              intermediateErrorMap14[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              /** @type {string} */
                              const convertedString14 = intermediateValue14;
                              if (typeof convertedString14 !== "string") {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.string",
                                };
                              } else {
                                if (convertedString14.length < 1) {
                                  intermediateErrorMap14[`$`] = {
                                    key: "validator.length",
                                    minLength: 1,
                                  };
                                } else {
                                  intermediateResult14 = convertedString14;
                                }
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap14).length > 0
                            ) {
                              intermediateErrorMap12[`$.${i12}`].errors.push(
                                intermediateErrorMap14,
                              );
                            } else {
                              hasAnyOfMatch12 = true;
                              delete intermediateErrorMap12[`$.${i12}`];
                              intermediateResult12[i12] = intermediateResult14;
                            }
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap12).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap12,
                      )) {
                        intermediateErrorMap9[
                          `$.$set.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap12[errorKey];
                      }
                    } else {
                      intermediateResult9["$set"]["path"] =
                        intermediateResult12;
                    }
                  }
                  if (
                    intermediateValue9["$set"]["value"] === null ||
                    intermediateValue9["$set"]["value"] === undefined
                  ) {
                    intermediateErrorMap9[`$.$set.value`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    intermediateResult9["$set"]["value"] =
                      intermediateValue9["$set"]["value"];
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap9).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap9);
          } else {
            hasAnyOfMatch7 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult9;
          }
        }
        if (!hasAnyOfMatch7) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap9 = {};
          /** @type {any} */
          let intermediateResult9 = undefined;
          /** @type {any} */
          const intermediateValue9 = value["data"];

          if (intermediateValue9 === null || intermediateValue9 === undefined) {
            intermediateErrorMap9[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue9)) {
              intermediateErrorMap9[`$`] = {
                key: "validator.object",
                value: intermediateValue9,
                foundType: typeof intermediateValue9,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys9 = new Set(["$remove"]);
              for (const key of Object.keys(intermediateValue9)) {
                if (
                  !knownKeys9.has(key) &&
                  intermediateValue9[key] !== null &&
                  intermediateValue9[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys9];
                  const foundKeys = Object.keys(intermediateValue9);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys9.has(it),
                  );
                  intermediateErrorMap9[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult9 = { $remove: undefined };

              if (
                intermediateValue9["$remove"] === null ||
                intermediateValue9["$remove"] === undefined
              ) {
                intermediateErrorMap9[`$.$remove`] = {
                  key: "validator.undefined",
                };
              } else {
                if (!isRecord(intermediateValue9["$remove"])) {
                  intermediateErrorMap9[`$.$remove`] = {
                    key: "validator.object",
                    value: intermediateValue9["$remove"],
                    foundType: typeof intermediateValue9["$remove"],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys10 = new Set(["path"]);
                  for (const key of Object.keys(
                    intermediateValue9["$remove"],
                  )) {
                    if (
                      !knownKeys10.has(key) &&
                      intermediateValue9["$remove"][key] !== null &&
                      intermediateValue9["$remove"][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys10];
                      const foundKeys = Object.keys(
                        intermediateValue9["$remove"],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys10.has(it),
                      );
                      intermediateErrorMap9[`$.$remove`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  intermediateResult9["$remove"] = { path: undefined };

                  if (
                    intermediateValue9["$remove"]["path"] === null ||
                    intermediateValue9["$remove"]["path"] === undefined
                  ) {
                    intermediateErrorMap9[`$.$remove.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap12 = {};
                    /** @type {Array<any>} */
                    const intermediateResult12 = [];
                    /** @type {any | Array<any>} */
                    const intermediateValue12 =
                      intermediateValue9["$remove"]["path"];

                    if (!Array.isArray(intermediateValue12)) {
                      intermediateErrorMap9[`$.$remove.path`] = {
                        key: "validator.array",
                        value: intermediateValue12,
                      };
                    } else {
                      intermediateResult9["$remove"]["path"] = [];
                      for (
                        let i12 = 0;
                        i12 < intermediateValue12.length;
                        ++i12
                      ) {
                        if (
                          intermediateValue12[i12] === null ||
                          intermediateValue12[i12] === undefined
                        ) {
                          intermediateErrorMap12[`$.${i12}`] = {
                            key: "validator.undefined",
                          };
                        } else {
                          let hasAnyOfMatch12 = false;
                          intermediateErrorMap12[`$.${i12}`] = {
                            key: "validator.anyOf",
                            errors: [],
                          };
                          if (!hasAnyOfMatch12) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap14 = {};
                            /** @type {any} */
                            let intermediateResult14 = undefined;
                            /** @type {any} */
                            const intermediateValue14 =
                              intermediateValue12[i12];

                            if (
                              intermediateValue14 === null ||
                              intermediateValue14 === undefined
                            ) {
                              intermediateErrorMap14[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              let convertedNumber14 = intermediateValue14;
                              if (
                                typeof convertedNumber14 !== "number" &&
                                typeof convertedNumber14 === "string"
                              ) {
                                convertedNumber14 = Number(convertedNumber14);
                              }
                              if (
                                typeof convertedNumber14 !== "number" ||
                                isNaN(convertedNumber14) ||
                                !isFinite(convertedNumber14) ||
                                !Number.isInteger(convertedNumber14)
                              ) {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.number",
                                  subType: "int",
                                };
                              } else if (convertedNumber14 < -2147483647) {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.range",
                                  minValue: -2147483647,
                                };
                              } else if (convertedNumber14 > 2147483647) {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.range",
                                  maxValue: 2147483647,
                                };
                              } else {
                                intermediateResult14 = convertedNumber14;
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap14).length > 0
                            ) {
                              intermediateErrorMap12[`$.${i12}`].errors.push(
                                intermediateErrorMap14,
                              );
                            } else {
                              hasAnyOfMatch12 = true;
                              delete intermediateErrorMap12[`$.${i12}`];
                              intermediateResult12[i12] = intermediateResult14;
                            }
                          }
                          if (!hasAnyOfMatch12) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap14 = {};
                            /** @type {any} */
                            let intermediateResult14 = undefined;
                            /** @type {any} */
                            const intermediateValue14 =
                              intermediateValue12[i12];

                            if (
                              intermediateValue14 === null ||
                              intermediateValue14 === undefined
                            ) {
                              intermediateErrorMap14[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              /** @type {string} */
                              const convertedString14 = intermediateValue14;
                              if (typeof convertedString14 !== "string") {
                                intermediateErrorMap14[`$`] = {
                                  key: "validator.string",
                                };
                              } else {
                                if (convertedString14.length < 1) {
                                  intermediateErrorMap14[`$`] = {
                                    key: "validator.length",
                                    minLength: 1,
                                  };
                                } else {
                                  intermediateResult14 = convertedString14;
                                }
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap14).length > 0
                            ) {
                              intermediateErrorMap12[`$.${i12}`].errors.push(
                                intermediateErrorMap14,
                              );
                            } else {
                              hasAnyOfMatch12 = true;
                              delete intermediateErrorMap12[`$.${i12}`];
                              intermediateResult12[i12] = intermediateResult14;
                            }
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap12).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap12,
                      )) {
                        intermediateErrorMap9[
                          `$.$remove.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap12[errorKey];
                      }
                    } else {
                      intermediateResult9["$remove"]["path"] =
                        intermediateResult12;
                    }
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap9).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap9);
          } else {
            hasAnyOfMatch7 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult9;
          }
        }
        if (!hasAnyOfMatch7) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap9 = {};
          /** @type {any} */
          let intermediateResult9 = undefined;
          /** @type {any} */
          const intermediateValue9 = value["data"];

          if (intermediateValue9 === null || intermediateValue9 === undefined) {
            intermediateResult9 = {};
          } else {
            intermediateResult9 = intermediateValue9;
          }
          if (Object.keys(intermediateErrorMap9).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap9);
          } else {
            hasAnyOfMatch7 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult9;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch8 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch8) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap10 = {};
          /** @type {any} */
          let intermediateResult10 = undefined;
          /** @type {any} */
          const intermediateValue10 = value["createdAt"];

          if (
            intermediateValue10 === null ||
            intermediateValue10 === undefined
          ) {
            intermediateErrorMap10[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue10)) {
              intermediateErrorMap10[`$`] = {
                key: "validator.object",
                value: intermediateValue10,
                foundType: typeof intermediateValue10,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys10 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue10)) {
                if (
                  !knownKeys10.has(key) &&
                  intermediateValue10[key] !== null &&
                  intermediateValue10[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys10];
                  const foundKeys = Object.keys(intermediateValue10);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys10.has(it),
                  );
                  intermediateErrorMap10[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult10 = { $subtract: undefined };

              if (
                intermediateValue10["$subtract"] === null ||
                intermediateValue10["$subtract"] === undefined
              ) {
                intermediateErrorMap10[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString11 = intermediateValue10["$subtract"];
                if (typeof convertedString11 !== "string") {
                  intermediateErrorMap10[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString11.length < 1) {
                    intermediateErrorMap10[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult10["$subtract"] = convertedString11;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap10).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap10);
          } else {
            hasAnyOfMatch8 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult10;
          }
        }
        if (!hasAnyOfMatch8) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap10 = {};
          /** @type {any} */
          let intermediateResult10 = undefined;
          /** @type {any} */
          const intermediateValue10 = value["createdAt"];

          if (
            intermediateValue10 === null ||
            intermediateValue10 === undefined
          ) {
            intermediateErrorMap10[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue10)) {
              intermediateErrorMap10[`$`] = {
                key: "validator.object",
                value: intermediateValue10,
                foundType: typeof intermediateValue10,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys10 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue10)) {
                if (
                  !knownKeys10.has(key) &&
                  intermediateValue10[key] !== null &&
                  intermediateValue10[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys10];
                  const foundKeys = Object.keys(intermediateValue10);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys10.has(it),
                  );
                  intermediateErrorMap10[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult10 = { $add: undefined };

              if (
                intermediateValue10["$add"] === null ||
                intermediateValue10["$add"] === undefined
              ) {
                intermediateErrorMap10[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString11 = intermediateValue10["$add"];
                if (typeof convertedString11 !== "string") {
                  intermediateErrorMap10[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString11.length < 1) {
                    intermediateErrorMap10[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult10["$add"] = convertedString11;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap10).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap10);
          } else {
            hasAnyOfMatch8 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult10;
          }
        }
        if (!hasAnyOfMatch8) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap10 = {};
          /** @type {any} */
          let intermediateResult10 = undefined;
          /** @type {any} */
          const intermediateValue10 = value["createdAt"];

          if (
            intermediateValue10 === null ||
            intermediateValue10 === undefined
          ) {
            intermediateResult10 = undefined;
          } else {
            if (
              typeof intermediateValue10 === "string" ||
              typeof intermediateValue10 === "number"
            ) {
              intermediateResult10 = new Date(intermediateValue10);
            } else if (
              Object.prototype.toString.call(intermediateValue10) ===
              "[object Date]"
            ) {
              intermediateResult10 = intermediateValue10;
            } else {
              intermediateErrorMap10[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult10?.getTime() ?? undefined)) {
              intermediateErrorMap10[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap10).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap10);
          } else {
            hasAnyOfMatch8 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult10;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch9 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["updatedAt"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue11)) {
              intermediateErrorMap11[`$`] = {
                key: "validator.object",
                value: intermediateValue11,
                foundType: typeof intermediateValue11,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys11 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue11)) {
                if (
                  !knownKeys11.has(key) &&
                  intermediateValue11[key] !== null &&
                  intermediateValue11[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys11];
                  const foundKeys = Object.keys(intermediateValue11);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys11.has(it),
                  );
                  intermediateErrorMap11[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult11 = { $subtract: undefined };

              if (
                intermediateValue11["$subtract"] === null ||
                intermediateValue11["$subtract"] === undefined
              ) {
                intermediateErrorMap11[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString12 = intermediateValue11["$subtract"];
                if (typeof convertedString12 !== "string") {
                  intermediateErrorMap11[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString12.length < 1) {
                    intermediateErrorMap11[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult11["$subtract"] = convertedString12;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult11;
          }
        }
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["updatedAt"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue11)) {
              intermediateErrorMap11[`$`] = {
                key: "validator.object",
                value: intermediateValue11,
                foundType: typeof intermediateValue11,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys11 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue11)) {
                if (
                  !knownKeys11.has(key) &&
                  intermediateValue11[key] !== null &&
                  intermediateValue11[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys11];
                  const foundKeys = Object.keys(intermediateValue11);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys11.has(it),
                  );
                  intermediateErrorMap11[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult11 = { $add: undefined };

              if (
                intermediateValue11["$add"] === null ||
                intermediateValue11["$add"] === undefined
              ) {
                intermediateErrorMap11[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString12 = intermediateValue11["$add"];
                if (typeof convertedString12 !== "string") {
                  intermediateErrorMap11[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString12.length < 1) {
                    intermediateErrorMap11[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult11["$add"] = convertedString12;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult11;
          }
        }
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["updatedAt"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateResult11 = undefined;
          } else {
            if (
              typeof intermediateValue11 === "string" ||
              typeof intermediateValue11 === "number"
            ) {
              intermediateResult11 = new Date(intermediateValue11);
            } else if (
              Object.prototype.toString.call(intermediateValue11) ===
              "[object Date]"
            ) {
              intermediateResult11 = intermediateValue11;
            } else {
              intermediateErrorMap11[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult11?.getTime() ?? undefined)) {
              intermediateErrorMap11[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult11;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Session data store, used by 'sessionStore\*' functions.
 *
 * @param {import("../common/types.js").StoreSessionStoreInput|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStore, ValidatorErrorMap>}
 */
export function validateStoreSessionStore(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "checksum",
        "revokedAt",
        "data",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        checksum: undefined,
        revokedAt: undefined,
        data: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["checksum"] === null || value["checksum"] === undefined) {
        errorMap[`$.checksum`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = value["checksum"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.checksum`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            errorMap[`$.checksum`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["checksum"] = convertedString2;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        errorMap[`$.updatedAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreWhere|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "$raw",
        "$or",
        "id",
        "idNotEqual",
        "idIn",
        "idNotIn",
        "createdAt",
        "createdAtNotEqual",
        "createdAtIn",
        "createdAtNotIn",
        "createdAtGreaterThan",
        "createdAtLowerThan",
        "updatedAt",
        "updatedAtNotEqual",
        "updatedAtIn",
        "updatedAtNotIn",
        "updatedAtGreaterThan",
        "updatedAtLowerThan",
        "viaAccessTokens",
        "accessTokensNotExists",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        $raw: undefined,
        $or: undefined,
        id: undefined,
        idNotEqual: undefined,
        idIn: undefined,
        idNotIn: undefined,
        createdAt: undefined,
        createdAtNotEqual: undefined,
        createdAtIn: undefined,
        createdAtNotIn: undefined,
        createdAtGreaterThan: undefined,
        createdAtLowerThan: undefined,
        updatedAt: undefined,
        updatedAtNotEqual: undefined,
        updatedAtIn: undefined,
        updatedAtNotIn: undefined,
        updatedAtGreaterThan: undefined,
        updatedAtLowerThan: undefined,
        viaAccessTokens: undefined,
        accessTokensNotExists: undefined,
      };

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = value["$or"];

        if (!Array.isArray(intermediateValue3)) {
          errorMap[`$.$or`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          result["$or"] = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              const refResult3 = validateStoreSessionStoreWhereValidated(
                intermediateValue3[i3],
              );

              if (refResult3.error) {
                for (const errorKey of Object.keys(refResult3.error)) {
                  intermediateErrorMap3[`$.${i3}${errorKey.substring(1)}`] =
                    refResult3.error[errorKey];
                }
              }
              intermediateResult3[i3] = refResult3.value;
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          result["$or"] = intermediateResult3;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["idNotEqual"]))
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["idNotEqual"].length === 32) {
          result["idNotEqual"] = `${value["idNotEqual"].slice(0, 8)}-${value[
            "idNotEqual"
          ].slice(8, 12)}-${value["idNotEqual"].slice(12, 16)}-${value[
            "idNotEqual"
          ].slice(16, 20)}-${value["idNotEqual"].slice(20)}`;
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap8 = {};
            /** @type {Array<any>} */
            const intermediateResult8 = [];
            /** @type {any | Array<any>} */
            const intermediateValue8 = intermediateValue7;

            if (!Array.isArray(intermediateValue8)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.array",
                value: intermediateValue8,
              };
            } else {
              intermediateResult7 = [];
              for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                if (
                  intermediateValue8[i8] === null ||
                  intermediateValue8[i8] === undefined
                ) {
                  intermediateErrorMap8[`$.${i8}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue8[i8] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue8[i8],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue8[i8]))
                  ) {
                    intermediateErrorMap8[`$.${i8}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue8[i8].length === 32) {
                    intermediateResult8[i8] = `${intermediateValue8[i8].slice(
                      0,
                      8,
                    )}-${intermediateValue8[i8].slice(
                      8,
                      12,
                    )}-${intermediateValue8[i8].slice(
                      12,
                      16,
                    )}-${intermediateValue8[i8].slice(
                      16,
                      20,
                    )}-${intermediateValue8[i8].slice(20)}`;
                  } else {
                    intermediateResult8[i8] = intermediateValue8[i8];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap8).length) {
              for (const errorKey of Object.keys(intermediateErrorMap8)) {
                intermediateErrorMap7[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap8[errorKey];
              }
            } else {
              intermediateResult7 = intermediateResult8;
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue7)) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap9 = {};
            /** @type {Array<any>} */
            const intermediateResult9 = [];
            /** @type {any | Array<any>} */
            const intermediateValue9 = intermediateValue8;

            if (!Array.isArray(intermediateValue9)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.array",
                value: intermediateValue9,
              };
            } else {
              intermediateResult8 = [];
              for (let i9 = 0; i9 < intermediateValue9.length; ++i9) {
                if (
                  intermediateValue9[i9] === null ||
                  intermediateValue9[i9] === undefined
                ) {
                  intermediateErrorMap9[`$.${i9}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue9[i9] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue9[i9],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue9[i9]))
                  ) {
                    intermediateErrorMap9[`$.${i9}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue9[i9].length === 32) {
                    intermediateResult9[i9] = `${intermediateValue9[i9].slice(
                      0,
                      8,
                    )}-${intermediateValue9[i9].slice(
                      8,
                      12,
                    )}-${intermediateValue9[i9].slice(
                      12,
                      16,
                    )}-${intermediateValue9[i9].slice(
                      16,
                      20,
                    )}-${intermediateValue9[i9].slice(20)}`;
                  } else {
                    intermediateResult9[i9] = intermediateValue9[i9];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap9).length) {
              for (const errorKey of Object.keys(intermediateErrorMap9)) {
                intermediateErrorMap8[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap9[errorKey];
              }
            } else {
              intermediateResult8 = intermediateResult9;
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue8)) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtNotEqual"] === null ||
        value["createdAtNotEqual"] === undefined
      ) {
        result["createdAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["createdAtNotEqual"] === "string" ||
          typeof value["createdAtNotEqual"] === "number"
        ) {
          result["createdAtNotEqual"] = new Date(value["createdAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["createdAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["createdAtNotEqual"] = value["createdAtNotEqual"];
        } else {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAtIn"] === null || value["createdAtIn"] === undefined) {
        result["createdAtIn"] = undefined;
      } else {
        let hasAnyOfMatch9 = false;
        errorMap[`$.createdAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["createdAtIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap12 = {};
            /** @type {Array<any>} */
            const intermediateResult12 = [];
            /** @type {any | Array<any>} */
            const intermediateValue12 = intermediateValue11;

            if (!Array.isArray(intermediateValue12)) {
              intermediateErrorMap11[`$`] = {
                key: "validator.array",
                value: intermediateValue12,
              };
            } else {
              intermediateResult11 = [];
              for (let i12 = 0; i12 < intermediateValue12.length; ++i12) {
                if (
                  intermediateValue12[i12] === null ||
                  intermediateValue12[i12] === undefined
                ) {
                  intermediateErrorMap12[`$.${i12}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue12[i12] === "string" ||
                    typeof intermediateValue12[i12] === "number"
                  ) {
                    intermediateResult12[i12] = new Date(
                      intermediateValue12[i12],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue12[i12]) ===
                    "[object Date]"
                  ) {
                    intermediateResult12[i12] = intermediateValue12[i12];
                  } else {
                    intermediateErrorMap12[`$.${i12}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult12[i12]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap12[`$.${i12}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap12).length) {
              for (const errorKey of Object.keys(intermediateErrorMap12)) {
                intermediateErrorMap11[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap12[errorKey];
              }
            } else {
              intermediateResult11 = intermediateResult12;
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult11;
          }
        }
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["createdAtIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue11)) {
              intermediateResult11 = intermediateValue11;
            } else {
              intermediateErrorMap11[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.createdAtIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.createdAtIn`];
            result["createdAtIn"] = intermediateResult11;
          }
        }
      }
      if (
        value["createdAtNotIn"] === null ||
        value["createdAtNotIn"] === undefined
      ) {
        result["createdAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch10 = false;
        errorMap[`$.createdAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          const intermediateValue12 = value["createdAtNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap13 = {};
            /** @type {Array<any>} */
            const intermediateResult13 = [];
            /** @type {any | Array<any>} */
            const intermediateValue13 = intermediateValue12;

            if (!Array.isArray(intermediateValue13)) {
              intermediateErrorMap12[`$`] = {
                key: "validator.array",
                value: intermediateValue13,
              };
            } else {
              intermediateResult12 = [];
              for (let i13 = 0; i13 < intermediateValue13.length; ++i13) {
                if (
                  intermediateValue13[i13] === null ||
                  intermediateValue13[i13] === undefined
                ) {
                  intermediateErrorMap13[`$.${i13}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue13[i13] === "string" ||
                    typeof intermediateValue13[i13] === "number"
                  ) {
                    intermediateResult13[i13] = new Date(
                      intermediateValue13[i13],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue13[i13]) ===
                    "[object Date]"
                  ) {
                    intermediateResult13[i13] = intermediateValue13[i13];
                  } else {
                    intermediateErrorMap13[`$.${i13}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult13[i13]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap13[`$.${i13}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap13).length) {
              for (const errorKey of Object.keys(intermediateErrorMap13)) {
                intermediateErrorMap12[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap13[errorKey];
              }
            } else {
              intermediateResult12 = intermediateResult13;
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult12;
          }
        }
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          const intermediateValue12 = value["createdAtNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue12)) {
              intermediateResult12 = intermediateValue12;
            } else {
              intermediateErrorMap12[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.createdAtNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.createdAtNotIn`];
            result["createdAtNotIn"] = intermediateResult12;
          }
        }
      }
      if (
        value["createdAtGreaterThan"] === null ||
        value["createdAtGreaterThan"] === undefined
      ) {
        result["createdAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["createdAtGreaterThan"] === "string" ||
          typeof value["createdAtGreaterThan"] === "number"
        ) {
          result["createdAtGreaterThan"] = new Date(
            value["createdAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["createdAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["createdAtGreaterThan"] = value["createdAtGreaterThan"];
        } else {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["createdAtLowerThan"] === null ||
        value["createdAtLowerThan"] === undefined
      ) {
        result["createdAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["createdAtLowerThan"] === "string" ||
          typeof value["createdAtLowerThan"] === "number"
        ) {
          result["createdAtLowerThan"] = new Date(value["createdAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["createdAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["createdAtLowerThan"] = value["createdAtLowerThan"];
        } else {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtNotEqual"] === null ||
        value["updatedAtNotEqual"] === undefined
      ) {
        result["updatedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["updatedAtNotEqual"] === "string" ||
          typeof value["updatedAtNotEqual"] === "number"
        ) {
          result["updatedAtNotEqual"] = new Date(value["updatedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["updatedAtNotEqual"] = value["updatedAtNotEqual"];
        } else {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAtIn"] === null || value["updatedAtIn"] === undefined) {
        result["updatedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch15 = false;
        errorMap[`$.updatedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch15) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap17 = {};
          /** @type {any} */
          let intermediateResult17 = undefined;
          /** @type {any} */
          const intermediateValue17 = value["updatedAtIn"];

          if (
            intermediateValue17 === null ||
            intermediateValue17 === undefined
          ) {
            intermediateErrorMap17[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap18 = {};
            /** @type {Array<any>} */
            const intermediateResult18 = [];
            /** @type {any | Array<any>} */
            const intermediateValue18 = intermediateValue17;

            if (!Array.isArray(intermediateValue18)) {
              intermediateErrorMap17[`$`] = {
                key: "validator.array",
                value: intermediateValue18,
              };
            } else {
              intermediateResult17 = [];
              for (let i18 = 0; i18 < intermediateValue18.length; ++i18) {
                if (
                  intermediateValue18[i18] === null ||
                  intermediateValue18[i18] === undefined
                ) {
                  intermediateErrorMap18[`$.${i18}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue18[i18] === "string" ||
                    typeof intermediateValue18[i18] === "number"
                  ) {
                    intermediateResult18[i18] = new Date(
                      intermediateValue18[i18],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue18[i18]) ===
                    "[object Date]"
                  ) {
                    intermediateResult18[i18] = intermediateValue18[i18];
                  } else {
                    intermediateErrorMap18[`$.${i18}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult18[i18]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap18[`$.${i18}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap18).length) {
              for (const errorKey of Object.keys(intermediateErrorMap18)) {
                intermediateErrorMap17[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap18[errorKey];
              }
            } else {
              intermediateResult17 = intermediateResult18;
            }
          }
          if (Object.keys(intermediateErrorMap17).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap17);
          } else {
            hasAnyOfMatch15 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult17;
          }
        }
        if (!hasAnyOfMatch15) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap17 = {};
          /** @type {any} */
          let intermediateResult17 = undefined;
          /** @type {any} */
          const intermediateValue17 = value["updatedAtIn"];

          if (
            intermediateValue17 === null ||
            intermediateValue17 === undefined
          ) {
            intermediateErrorMap17[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue17)) {
              intermediateResult17 = intermediateValue17;
            } else {
              intermediateErrorMap17[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap17).length > 0) {
            errorMap[`$.updatedAtIn`].errors.push(intermediateErrorMap17);
          } else {
            hasAnyOfMatch15 = true;
            delete errorMap[`$.updatedAtIn`];
            result["updatedAtIn"] = intermediateResult17;
          }
        }
      }
      if (
        value["updatedAtNotIn"] === null ||
        value["updatedAtNotIn"] === undefined
      ) {
        result["updatedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch16 = false;
        errorMap[`$.updatedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch16) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap18 = {};
          /** @type {any} */
          let intermediateResult18 = undefined;
          /** @type {any} */
          const intermediateValue18 = value["updatedAtNotIn"];

          if (
            intermediateValue18 === null ||
            intermediateValue18 === undefined
          ) {
            intermediateErrorMap18[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap19 = {};
            /** @type {Array<any>} */
            const intermediateResult19 = [];
            /** @type {any | Array<any>} */
            const intermediateValue19 = intermediateValue18;

            if (!Array.isArray(intermediateValue19)) {
              intermediateErrorMap18[`$`] = {
                key: "validator.array",
                value: intermediateValue19,
              };
            } else {
              intermediateResult18 = [];
              for (let i19 = 0; i19 < intermediateValue19.length; ++i19) {
                if (
                  intermediateValue19[i19] === null ||
                  intermediateValue19[i19] === undefined
                ) {
                  intermediateErrorMap19[`$.${i19}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue19[i19] === "string" ||
                    typeof intermediateValue19[i19] === "number"
                  ) {
                    intermediateResult19[i19] = new Date(
                      intermediateValue19[i19],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue19[i19]) ===
                    "[object Date]"
                  ) {
                    intermediateResult19[i19] = intermediateValue19[i19];
                  } else {
                    intermediateErrorMap19[`$.${i19}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult19[i19]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap19[`$.${i19}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap19).length) {
              for (const errorKey of Object.keys(intermediateErrorMap19)) {
                intermediateErrorMap18[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap19[errorKey];
              }
            } else {
              intermediateResult18 = intermediateResult19;
            }
          }
          if (Object.keys(intermediateErrorMap18).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap18);
          } else {
            hasAnyOfMatch16 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult18;
          }
        }
        if (!hasAnyOfMatch16) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap18 = {};
          /** @type {any} */
          let intermediateResult18 = undefined;
          /** @type {any} */
          const intermediateValue18 = value["updatedAtNotIn"];

          if (
            intermediateValue18 === null ||
            intermediateValue18 === undefined
          ) {
            intermediateErrorMap18[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue18)) {
              intermediateResult18 = intermediateValue18;
            } else {
              intermediateErrorMap18[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap18).length > 0) {
            errorMap[`$.updatedAtNotIn`].errors.push(intermediateErrorMap18);
          } else {
            hasAnyOfMatch16 = true;
            delete errorMap[`$.updatedAtNotIn`];
            result["updatedAtNotIn"] = intermediateResult18;
          }
        }
      }
      if (
        value["updatedAtGreaterThan"] === null ||
        value["updatedAtGreaterThan"] === undefined
      ) {
        result["updatedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtGreaterThan"] === "string" ||
          typeof value["updatedAtGreaterThan"] === "number"
        ) {
          result["updatedAtGreaterThan"] = new Date(
            value["updatedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["updatedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtGreaterThan"] = value["updatedAtGreaterThan"];
        } else {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["updatedAtLowerThan"] === null ||
        value["updatedAtLowerThan"] === undefined
      ) {
        result["updatedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["updatedAtLowerThan"] === "string" ||
          typeof value["updatedAtLowerThan"] === "number"
        ) {
          result["updatedAtLowerThan"] = new Date(value["updatedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["updatedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["updatedAtLowerThan"] = value["updatedAtLowerThan"];
        } else {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["viaAccessTokens"] === null ||
        value["viaAccessTokens"] === undefined
      ) {
        result["viaAccessTokens"] = undefined;
      } else {
        if (!isRecord(value["viaAccessTokens"])) {
          errorMap[`$.viaAccessTokens`] = {
            key: "validator.object",
            value: value["viaAccessTokens"],
            foundType: typeof value["viaAccessTokens"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys19 = new Set(["where", "limit", "offset"]);
          for (const key of Object.keys(value["viaAccessTokens"])) {
            if (
              !knownKeys19.has(key) &&
              value["viaAccessTokens"][key] !== null &&
              value["viaAccessTokens"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys19];
              const foundKeys = Object.keys(value["viaAccessTokens"]);
              const unknownKeys = foundKeys.filter(
                (it) => !knownKeys19.has(it),
              );
              errorMap[`$.viaAccessTokens`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["viaAccessTokens"] = {
            where: undefined,
            limit: undefined,
            offset: undefined,
          };

          if (
            value["viaAccessTokens"]["where"] === null ||
            value["viaAccessTokens"]["where"] === undefined
          ) {
            result["viaAccessTokens"]["where"] = {};
          } else {
            const refResult20 = validateStoreSessionStoreTokenWhereValidated(
              value["viaAccessTokens"]["where"],
            );

            if (refResult20.error) {
              for (const errorKey of Object.keys(refResult20.error)) {
                errorMap[`$.viaAccessTokens.where${errorKey.substring(1)}`] =
                  refResult20.error[errorKey];
              }
            }
            result["viaAccessTokens"]["where"] = refResult20.value;
          }
          if (
            value["viaAccessTokens"]["limit"] === null ||
            value["viaAccessTokens"]["limit"] === undefined
          ) {
            result["viaAccessTokens"]["limit"] = undefined;
          } else {
            let convertedNumber21 = value["viaAccessTokens"]["limit"];
            if (
              typeof convertedNumber21 !== "number" &&
              typeof convertedNumber21 === "string"
            ) {
              convertedNumber21 = Number(convertedNumber21);
            }
            if (
              typeof convertedNumber21 !== "number" ||
              isNaN(convertedNumber21) ||
              !isFinite(convertedNumber21) ||
              !Number.isInteger(convertedNumber21)
            ) {
              errorMap[`$.viaAccessTokens.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber21 < 1) {
              errorMap[`$.viaAccessTokens.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaAccessTokens"]["limit"] = convertedNumber21;
            }
          }
          if (
            value["viaAccessTokens"]["offset"] === null ||
            value["viaAccessTokens"]["offset"] === undefined
          ) {
            result["viaAccessTokens"]["offset"] = undefined;
          } else {
            let convertedNumber22 = value["viaAccessTokens"]["offset"];
            if (
              typeof convertedNumber22 !== "number" &&
              typeof convertedNumber22 === "string"
            ) {
              convertedNumber22 = Number(convertedNumber22);
            }
            if (
              typeof convertedNumber22 !== "number" ||
              isNaN(convertedNumber22) ||
              !isFinite(convertedNumber22) ||
              !Number.isInteger(convertedNumber22)
            ) {
              errorMap[`$.viaAccessTokens.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber22 < 0) {
              errorMap[`$.viaAccessTokens.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaAccessTokens"]["offset"] = convertedNumber22;
            }
          }
        }
      }
      if (
        value["accessTokensNotExists"] === null ||
        value["accessTokensNotExists"] === undefined
      ) {
        result["accessTokensNotExists"] = undefined;
      } else {
        const refResult20 = validateStoreSessionStoreTokenWhereValidated(
          value["accessTokensNotExists"],
        );

        if (refResult20.error) {
          for (const errorKey of Object.keys(refResult20.error)) {
            errorMap[`$.accessTokensNotExists${errorKey.substring(1)}`] =
              refResult20.error[errorKey];
          }
        }
        result["accessTokensNotExists"] = refResult20.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenWhere|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenWhereValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenWhereValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "$raw",
        "$or",
        "id",
        "idNotEqual",
        "idIn",
        "idNotIn",
        "session",
        "sessionNotEqual",
        "sessionIn",
        "sessionNotIn",
        "expiresAt",
        "expiresAtNotEqual",
        "expiresAtIn",
        "expiresAtNotIn",
        "expiresAtGreaterThan",
        "expiresAtLowerThan",
        "refreshToken",
        "refreshTokenNotEqual",
        "refreshTokenIn",
        "refreshTokenNotIn",
        "refreshTokenIsNull",
        "refreshTokenIsNotNull",
        "revokedAt",
        "revokedAtNotEqual",
        "revokedAtIn",
        "revokedAtNotIn",
        "revokedAtGreaterThan",
        "revokedAtLowerThan",
        "revokedAtIsNull",
        "revokedAtIsNotNull",
        "viaRefreshToken",
        "viaSession",
        "viaAccessToken",
        "accessTokenNotExists",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        $raw: undefined,
        $or: undefined,
        id: undefined,
        idNotEqual: undefined,
        idIn: undefined,
        idNotIn: undefined,
        session: undefined,
        sessionNotEqual: undefined,
        sessionIn: undefined,
        sessionNotIn: undefined,
        expiresAt: undefined,
        expiresAtNotEqual: undefined,
        expiresAtIn: undefined,
        expiresAtNotIn: undefined,
        expiresAtGreaterThan: undefined,
        expiresAtLowerThan: undefined,
        refreshToken: undefined,
        refreshTokenNotEqual: undefined,
        refreshTokenIn: undefined,
        refreshTokenNotIn: undefined,
        refreshTokenIsNull: undefined,
        refreshTokenIsNotNull: undefined,
        revokedAt: undefined,
        revokedAtNotEqual: undefined,
        revokedAtIn: undefined,
        revokedAtNotIn: undefined,
        revokedAtGreaterThan: undefined,
        revokedAtLowerThan: undefined,
        revokedAtIsNull: undefined,
        revokedAtIsNotNull: undefined,
        viaRefreshToken: undefined,
        viaSession: undefined,
        viaAccessToken: undefined,
        accessTokenNotExists: undefined,
      };

      if (value["$raw"] === null || value["$raw"] === undefined) {
        result["$raw"] = undefined;
      } else {
        if (isQueryPart(value["$raw"])) {
          result["$raw"] = value["$raw"];
        } else {
          errorMap[`$.$raw`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (value["$or"] === null || value["$or"] === undefined) {
        result["$or"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = value["$or"];

        if (!Array.isArray(intermediateValue3)) {
          errorMap[`$.$or`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          result["$or"] = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              const refResult3 = validateStoreSessionStoreTokenWhereValidated(
                intermediateValue3[i3],
              );

              if (refResult3.error) {
                for (const errorKey of Object.keys(refResult3.error)) {
                  intermediateErrorMap3[`$.${i3}${errorKey.substring(1)}`] =
                    refResult3.error[errorKey];
                }
              }
              intermediateResult3[i3] = refResult3.value;
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            errorMap[`$.$or${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          result["$or"] = intermediateResult3;
        }
      }
      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["idNotEqual"] === null || value["idNotEqual"] === undefined) {
        result["idNotEqual"] = undefined;
      } else {
        if (
          typeof value["idNotEqual"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["idNotEqual"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["idNotEqual"]))
        ) {
          errorMap[`$.idNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["idNotEqual"].length === 32) {
          result["idNotEqual"] = `${value["idNotEqual"].slice(0, 8)}-${value[
            "idNotEqual"
          ].slice(8, 12)}-${value["idNotEqual"].slice(12, 16)}-${value[
            "idNotEqual"
          ].slice(16, 20)}-${value["idNotEqual"].slice(20)}`;
        } else {
          result["idNotEqual"] = value["idNotEqual"];
        }
      }
      if (value["idIn"] === null || value["idIn"] === undefined) {
        result["idIn"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.idIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap8 = {};
            /** @type {Array<any>} */
            const intermediateResult8 = [];
            /** @type {any | Array<any>} */
            const intermediateValue8 = intermediateValue7;

            if (!Array.isArray(intermediateValue8)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.array",
                value: intermediateValue8,
              };
            } else {
              intermediateResult7 = [];
              for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                if (
                  intermediateValue8[i8] === null ||
                  intermediateValue8[i8] === undefined
                ) {
                  intermediateErrorMap8[`$.${i8}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue8[i8] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue8[i8],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue8[i8]))
                  ) {
                    intermediateErrorMap8[`$.${i8}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue8[i8].length === 32) {
                    intermediateResult8[i8] = `${intermediateValue8[i8].slice(
                      0,
                      8,
                    )}-${intermediateValue8[i8].slice(
                      8,
                      12,
                    )}-${intermediateValue8[i8].slice(
                      12,
                      16,
                    )}-${intermediateValue8[i8].slice(
                      16,
                      20,
                    )}-${intermediateValue8[i8].slice(20)}`;
                  } else {
                    intermediateResult8[i8] = intermediateValue8[i8];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap8).length) {
              for (const errorKey of Object.keys(intermediateErrorMap8)) {
                intermediateErrorMap7[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap8[errorKey];
              }
            } else {
              intermediateResult7 = intermediateResult8;
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["idIn"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue7)) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.idIn`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.idIn`];
            result["idIn"] = intermediateResult7;
          }
        }
      }
      if (value["idNotIn"] === null || value["idNotIn"] === undefined) {
        result["idNotIn"] = undefined;
      } else {
        let hasAnyOfMatch6 = false;
        errorMap[`$.idNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap9 = {};
            /** @type {Array<any>} */
            const intermediateResult9 = [];
            /** @type {any | Array<any>} */
            const intermediateValue9 = intermediateValue8;

            if (!Array.isArray(intermediateValue9)) {
              intermediateErrorMap8[`$`] = {
                key: "validator.array",
                value: intermediateValue9,
              };
            } else {
              intermediateResult8 = [];
              for (let i9 = 0; i9 < intermediateValue9.length; ++i9) {
                if (
                  intermediateValue9[i9] === null ||
                  intermediateValue9[i9] === undefined
                ) {
                  intermediateErrorMap9[`$.${i9}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue9[i9] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue9[i9],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue9[i9]))
                  ) {
                    intermediateErrorMap9[`$.${i9}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue9[i9].length === 32) {
                    intermediateResult9[i9] = `${intermediateValue9[i9].slice(
                      0,
                      8,
                    )}-${intermediateValue9[i9].slice(
                      8,
                      12,
                    )}-${intermediateValue9[i9].slice(
                      12,
                      16,
                    )}-${intermediateValue9[i9].slice(
                      16,
                      20,
                    )}-${intermediateValue9[i9].slice(20)}`;
                  } else {
                    intermediateResult9[i9] = intermediateValue9[i9];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap9).length) {
              for (const errorKey of Object.keys(intermediateErrorMap9)) {
                intermediateErrorMap8[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap9[errorKey];
              }
            } else {
              intermediateResult8 = intermediateResult9;
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
        if (!hasAnyOfMatch6) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap8 = {};
          /** @type {any} */
          let intermediateResult8 = undefined;
          /** @type {any} */
          const intermediateValue8 = value["idNotIn"];

          if (intermediateValue8 === null || intermediateValue8 === undefined) {
            intermediateErrorMap8[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue8)) {
              intermediateResult8 = intermediateValue8;
            } else {
              intermediateErrorMap8[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap8).length > 0) {
            errorMap[`$.idNotIn`].errors.push(intermediateErrorMap8);
          } else {
            hasAnyOfMatch6 = true;
            delete errorMap[`$.idNotIn`];
            result["idNotIn"] = intermediateResult8;
          }
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        if (
          typeof value["session"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["session"]))
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["session"].length === 32) {
          result["session"] = `${value["session"].slice(0, 8)}-${value[
            "session"
          ].slice(8, 12)}-${value["session"].slice(12, 16)}-${value[
            "session"
          ].slice(16, 20)}-${value["session"].slice(20)}`;
        } else {
          result["session"] = value["session"];
        }
      }
      if (
        value["sessionNotEqual"] === null ||
        value["sessionNotEqual"] === undefined
      ) {
        result["sessionNotEqual"] = undefined;
      } else {
        if (
          typeof value["sessionNotEqual"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["sessionNotEqual"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["sessionNotEqual"]))
        ) {
          errorMap[`$.sessionNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["sessionNotEqual"].length === 32) {
          result["sessionNotEqual"] = `${value["sessionNotEqual"].slice(
            0,
            8,
          )}-${value["sessionNotEqual"].slice(8, 12)}-${value[
            "sessionNotEqual"
          ].slice(12, 16)}-${value["sessionNotEqual"].slice(16, 20)}-${value[
            "sessionNotEqual"
          ].slice(20)}`;
        } else {
          result["sessionNotEqual"] = value["sessionNotEqual"];
        }
      }
      if (value["sessionIn"] === null || value["sessionIn"] === undefined) {
        result["sessionIn"] = undefined;
      } else {
        let hasAnyOfMatch9 = false;
        errorMap[`$.sessionIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["sessionIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap12 = {};
            /** @type {Array<any>} */
            const intermediateResult12 = [];
            /** @type {any | Array<any>} */
            const intermediateValue12 = intermediateValue11;

            if (!Array.isArray(intermediateValue12)) {
              intermediateErrorMap11[`$`] = {
                key: "validator.array",
                value: intermediateValue12,
              };
            } else {
              intermediateResult11 = [];
              for (let i12 = 0; i12 < intermediateValue12.length; ++i12) {
                if (
                  intermediateValue12[i12] === null ||
                  intermediateValue12[i12] === undefined
                ) {
                  intermediateErrorMap12[`$.${i12}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue12[i12] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue12[i12],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue12[i12]))
                  ) {
                    intermediateErrorMap12[`$.${i12}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue12[i12].length === 32) {
                    intermediateResult12[i12] = `${intermediateValue12[
                      i12
                    ].slice(0, 8)}-${intermediateValue12[i12].slice(
                      8,
                      12,
                    )}-${intermediateValue12[i12].slice(
                      12,
                      16,
                    )}-${intermediateValue12[i12].slice(
                      16,
                      20,
                    )}-${intermediateValue12[i12].slice(20)}`;
                  } else {
                    intermediateResult12[i12] = intermediateValue12[i12];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap12).length) {
              for (const errorKey of Object.keys(intermediateErrorMap12)) {
                intermediateErrorMap11[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap12[errorKey];
              }
            } else {
              intermediateResult11 = intermediateResult12;
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.sessionIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.sessionIn`];
            result["sessionIn"] = intermediateResult11;
          }
        }
        if (!hasAnyOfMatch9) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap11 = {};
          /** @type {any} */
          let intermediateResult11 = undefined;
          /** @type {any} */
          const intermediateValue11 = value["sessionIn"];

          if (
            intermediateValue11 === null ||
            intermediateValue11 === undefined
          ) {
            intermediateErrorMap11[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue11)) {
              intermediateResult11 = intermediateValue11;
            } else {
              intermediateErrorMap11[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap11).length > 0) {
            errorMap[`$.sessionIn`].errors.push(intermediateErrorMap11);
          } else {
            hasAnyOfMatch9 = true;
            delete errorMap[`$.sessionIn`];
            result["sessionIn"] = intermediateResult11;
          }
        }
      }
      if (
        value["sessionNotIn"] === null ||
        value["sessionNotIn"] === undefined
      ) {
        result["sessionNotIn"] = undefined;
      } else {
        let hasAnyOfMatch10 = false;
        errorMap[`$.sessionNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          const intermediateValue12 = value["sessionNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap13 = {};
            /** @type {Array<any>} */
            const intermediateResult13 = [];
            /** @type {any | Array<any>} */
            const intermediateValue13 = intermediateValue12;

            if (!Array.isArray(intermediateValue13)) {
              intermediateErrorMap12[`$`] = {
                key: "validator.array",
                value: intermediateValue13,
              };
            } else {
              intermediateResult12 = [];
              for (let i13 = 0; i13 < intermediateValue13.length; ++i13) {
                if (
                  intermediateValue13[i13] === null ||
                  intermediateValue13[i13] === undefined
                ) {
                  intermediateErrorMap13[`$.${i13}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue13[i13] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue13[i13],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue13[i13]))
                  ) {
                    intermediateErrorMap13[`$.${i13}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue13[i13].length === 32) {
                    intermediateResult13[i13] = `${intermediateValue13[
                      i13
                    ].slice(0, 8)}-${intermediateValue13[i13].slice(
                      8,
                      12,
                    )}-${intermediateValue13[i13].slice(
                      12,
                      16,
                    )}-${intermediateValue13[i13].slice(
                      16,
                      20,
                    )}-${intermediateValue13[i13].slice(20)}`;
                  } else {
                    intermediateResult13[i13] = intermediateValue13[i13];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap13).length) {
              for (const errorKey of Object.keys(intermediateErrorMap13)) {
                intermediateErrorMap12[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap13[errorKey];
              }
            } else {
              intermediateResult12 = intermediateResult13;
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.sessionNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.sessionNotIn`];
            result["sessionNotIn"] = intermediateResult12;
          }
        }
        if (!hasAnyOfMatch10) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap12 = {};
          /** @type {any} */
          let intermediateResult12 = undefined;
          /** @type {any} */
          const intermediateValue12 = value["sessionNotIn"];

          if (
            intermediateValue12 === null ||
            intermediateValue12 === undefined
          ) {
            intermediateErrorMap12[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue12)) {
              intermediateResult12 = intermediateValue12;
            } else {
              intermediateErrorMap12[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap12).length > 0) {
            errorMap[`$.sessionNotIn`].errors.push(intermediateErrorMap12);
          } else {
            hasAnyOfMatch10 = true;
            delete errorMap[`$.sessionNotIn`];
            result["sessionNotIn"] = intermediateResult12;
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["expiresAtNotEqual"] === null ||
        value["expiresAtNotEqual"] === undefined
      ) {
        result["expiresAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["expiresAtNotEqual"] === "string" ||
          typeof value["expiresAtNotEqual"] === "number"
        ) {
          result["expiresAtNotEqual"] = new Date(value["expiresAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["expiresAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["expiresAtNotEqual"] = value["expiresAtNotEqual"];
        } else {
          errorMap[`$.expiresAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["expiresAtIn"] === null || value["expiresAtIn"] === undefined) {
        result["expiresAtIn"] = undefined;
      } else {
        let hasAnyOfMatch13 = false;
        errorMap[`$.expiresAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch13) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap15 = {};
          /** @type {any} */
          let intermediateResult15 = undefined;
          /** @type {any} */
          const intermediateValue15 = value["expiresAtIn"];

          if (
            intermediateValue15 === null ||
            intermediateValue15 === undefined
          ) {
            intermediateErrorMap15[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap16 = {};
            /** @type {Array<any>} */
            const intermediateResult16 = [];
            /** @type {any | Array<any>} */
            const intermediateValue16 = intermediateValue15;

            if (!Array.isArray(intermediateValue16)) {
              intermediateErrorMap15[`$`] = {
                key: "validator.array",
                value: intermediateValue16,
              };
            } else {
              intermediateResult15 = [];
              for (let i16 = 0; i16 < intermediateValue16.length; ++i16) {
                if (
                  intermediateValue16[i16] === null ||
                  intermediateValue16[i16] === undefined
                ) {
                  intermediateErrorMap16[`$.${i16}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue16[i16] === "string" ||
                    typeof intermediateValue16[i16] === "number"
                  ) {
                    intermediateResult16[i16] = new Date(
                      intermediateValue16[i16],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue16[i16]) ===
                    "[object Date]"
                  ) {
                    intermediateResult16[i16] = intermediateValue16[i16];
                  } else {
                    intermediateErrorMap16[`$.${i16}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult16[i16]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap16[`$.${i16}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap16).length) {
              for (const errorKey of Object.keys(intermediateErrorMap16)) {
                intermediateErrorMap15[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap16[errorKey];
              }
            } else {
              intermediateResult15 = intermediateResult16;
            }
          }
          if (Object.keys(intermediateErrorMap15).length > 0) {
            errorMap[`$.expiresAtIn`].errors.push(intermediateErrorMap15);
          } else {
            hasAnyOfMatch13 = true;
            delete errorMap[`$.expiresAtIn`];
            result["expiresAtIn"] = intermediateResult15;
          }
        }
        if (!hasAnyOfMatch13) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap15 = {};
          /** @type {any} */
          let intermediateResult15 = undefined;
          /** @type {any} */
          const intermediateValue15 = value["expiresAtIn"];

          if (
            intermediateValue15 === null ||
            intermediateValue15 === undefined
          ) {
            intermediateErrorMap15[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue15)) {
              intermediateResult15 = intermediateValue15;
            } else {
              intermediateErrorMap15[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap15).length > 0) {
            errorMap[`$.expiresAtIn`].errors.push(intermediateErrorMap15);
          } else {
            hasAnyOfMatch13 = true;
            delete errorMap[`$.expiresAtIn`];
            result["expiresAtIn"] = intermediateResult15;
          }
        }
      }
      if (
        value["expiresAtNotIn"] === null ||
        value["expiresAtNotIn"] === undefined
      ) {
        result["expiresAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch14 = false;
        errorMap[`$.expiresAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch14) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap16 = {};
          /** @type {any} */
          let intermediateResult16 = undefined;
          /** @type {any} */
          const intermediateValue16 = value["expiresAtNotIn"];

          if (
            intermediateValue16 === null ||
            intermediateValue16 === undefined
          ) {
            intermediateErrorMap16[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap17 = {};
            /** @type {Array<any>} */
            const intermediateResult17 = [];
            /** @type {any | Array<any>} */
            const intermediateValue17 = intermediateValue16;

            if (!Array.isArray(intermediateValue17)) {
              intermediateErrorMap16[`$`] = {
                key: "validator.array",
                value: intermediateValue17,
              };
            } else {
              intermediateResult16 = [];
              for (let i17 = 0; i17 < intermediateValue17.length; ++i17) {
                if (
                  intermediateValue17[i17] === null ||
                  intermediateValue17[i17] === undefined
                ) {
                  intermediateErrorMap17[`$.${i17}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue17[i17] === "string" ||
                    typeof intermediateValue17[i17] === "number"
                  ) {
                    intermediateResult17[i17] = new Date(
                      intermediateValue17[i17],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue17[i17]) ===
                    "[object Date]"
                  ) {
                    intermediateResult17[i17] = intermediateValue17[i17];
                  } else {
                    intermediateErrorMap17[`$.${i17}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult17[i17]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap17[`$.${i17}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap17).length) {
              for (const errorKey of Object.keys(intermediateErrorMap17)) {
                intermediateErrorMap16[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap17[errorKey];
              }
            } else {
              intermediateResult16 = intermediateResult17;
            }
          }
          if (Object.keys(intermediateErrorMap16).length > 0) {
            errorMap[`$.expiresAtNotIn`].errors.push(intermediateErrorMap16);
          } else {
            hasAnyOfMatch14 = true;
            delete errorMap[`$.expiresAtNotIn`];
            result["expiresAtNotIn"] = intermediateResult16;
          }
        }
        if (!hasAnyOfMatch14) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap16 = {};
          /** @type {any} */
          let intermediateResult16 = undefined;
          /** @type {any} */
          const intermediateValue16 = value["expiresAtNotIn"];

          if (
            intermediateValue16 === null ||
            intermediateValue16 === undefined
          ) {
            intermediateErrorMap16[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue16)) {
              intermediateResult16 = intermediateValue16;
            } else {
              intermediateErrorMap16[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap16).length > 0) {
            errorMap[`$.expiresAtNotIn`].errors.push(intermediateErrorMap16);
          } else {
            hasAnyOfMatch14 = true;
            delete errorMap[`$.expiresAtNotIn`];
            result["expiresAtNotIn"] = intermediateResult16;
          }
        }
      }
      if (
        value["expiresAtGreaterThan"] === null ||
        value["expiresAtGreaterThan"] === undefined
      ) {
        result["expiresAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["expiresAtGreaterThan"] === "string" ||
          typeof value["expiresAtGreaterThan"] === "number"
        ) {
          result["expiresAtGreaterThan"] = new Date(
            value["expiresAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["expiresAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["expiresAtGreaterThan"] = value["expiresAtGreaterThan"];
        } else {
          errorMap[`$.expiresAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["expiresAtLowerThan"] === null ||
        value["expiresAtLowerThan"] === undefined
      ) {
        result["expiresAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["expiresAtLowerThan"] === "string" ||
          typeof value["expiresAtLowerThan"] === "number"
        ) {
          result["expiresAtLowerThan"] = new Date(value["expiresAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["expiresAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["expiresAtLowerThan"] = value["expiresAtLowerThan"];
        } else {
          errorMap[`$.expiresAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["refreshToken"]))
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["refreshToken"].length === 32) {
          result["refreshToken"] = `${value["refreshToken"].slice(
            0,
            8,
          )}-${value["refreshToken"].slice(8, 12)}-${value[
            "refreshToken"
          ].slice(12, 16)}-${value["refreshToken"].slice(16, 20)}-${value[
            "refreshToken"
          ].slice(20)}`;
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (
        value["refreshTokenNotEqual"] === null ||
        value["refreshTokenNotEqual"] === undefined
      ) {
        result["refreshTokenNotEqual"] = undefined;
      } else {
        if (
          typeof value["refreshTokenNotEqual"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshTokenNotEqual"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["refreshTokenNotEqual"]))
        ) {
          errorMap[`$.refreshTokenNotEqual`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["refreshTokenNotEqual"].length === 32) {
          result["refreshTokenNotEqual"] = `${value[
            "refreshTokenNotEqual"
          ].slice(0, 8)}-${value["refreshTokenNotEqual"].slice(8, 12)}-${value[
            "refreshTokenNotEqual"
          ].slice(12, 16)}-${value["refreshTokenNotEqual"].slice(
            16,
            20,
          )}-${value["refreshTokenNotEqual"].slice(20)}`;
        } else {
          result["refreshTokenNotEqual"] = value["refreshTokenNotEqual"];
        }
      }
      if (
        value["refreshTokenIn"] === null ||
        value["refreshTokenIn"] === undefined
      ) {
        result["refreshTokenIn"] = undefined;
      } else {
        let hasAnyOfMatch19 = false;
        errorMap[`$.refreshTokenIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch19) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap21 = {};
          /** @type {any} */
          let intermediateResult21 = undefined;
          /** @type {any} */
          const intermediateValue21 = value["refreshTokenIn"];

          if (
            intermediateValue21 === null ||
            intermediateValue21 === undefined
          ) {
            intermediateErrorMap21[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap22 = {};
            /** @type {Array<any>} */
            const intermediateResult22 = [];
            /** @type {any | Array<any>} */
            const intermediateValue22 = intermediateValue21;

            if (!Array.isArray(intermediateValue22)) {
              intermediateErrorMap21[`$`] = {
                key: "validator.array",
                value: intermediateValue22,
              };
            } else {
              intermediateResult21 = [];
              for (let i22 = 0; i22 < intermediateValue22.length; ++i22) {
                if (
                  intermediateValue22[i22] === null ||
                  intermediateValue22[i22] === undefined
                ) {
                  intermediateErrorMap22[`$.${i22}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue22[i22] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue22[i22],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue22[i22]))
                  ) {
                    intermediateErrorMap22[`$.${i22}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue22[i22].length === 32) {
                    intermediateResult22[i22] = `${intermediateValue22[
                      i22
                    ].slice(0, 8)}-${intermediateValue22[i22].slice(
                      8,
                      12,
                    )}-${intermediateValue22[i22].slice(
                      12,
                      16,
                    )}-${intermediateValue22[i22].slice(
                      16,
                      20,
                    )}-${intermediateValue22[i22].slice(20)}`;
                  } else {
                    intermediateResult22[i22] = intermediateValue22[i22];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap22).length) {
              for (const errorKey of Object.keys(intermediateErrorMap22)) {
                intermediateErrorMap21[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap22[errorKey];
              }
            } else {
              intermediateResult21 = intermediateResult22;
            }
          }
          if (Object.keys(intermediateErrorMap21).length > 0) {
            errorMap[`$.refreshTokenIn`].errors.push(intermediateErrorMap21);
          } else {
            hasAnyOfMatch19 = true;
            delete errorMap[`$.refreshTokenIn`];
            result["refreshTokenIn"] = intermediateResult21;
          }
        }
        if (!hasAnyOfMatch19) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap21 = {};
          /** @type {any} */
          let intermediateResult21 = undefined;
          /** @type {any} */
          const intermediateValue21 = value["refreshTokenIn"];

          if (
            intermediateValue21 === null ||
            intermediateValue21 === undefined
          ) {
            intermediateErrorMap21[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue21)) {
              intermediateResult21 = intermediateValue21;
            } else {
              intermediateErrorMap21[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap21).length > 0) {
            errorMap[`$.refreshTokenIn`].errors.push(intermediateErrorMap21);
          } else {
            hasAnyOfMatch19 = true;
            delete errorMap[`$.refreshTokenIn`];
            result["refreshTokenIn"] = intermediateResult21;
          }
        }
      }
      if (
        value["refreshTokenNotIn"] === null ||
        value["refreshTokenNotIn"] === undefined
      ) {
        result["refreshTokenNotIn"] = undefined;
      } else {
        let hasAnyOfMatch20 = false;
        errorMap[`$.refreshTokenNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch20) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap22 = {};
          /** @type {any} */
          let intermediateResult22 = undefined;
          /** @type {any} */
          const intermediateValue22 = value["refreshTokenNotIn"];

          if (
            intermediateValue22 === null ||
            intermediateValue22 === undefined
          ) {
            intermediateErrorMap22[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap23 = {};
            /** @type {Array<any>} */
            const intermediateResult23 = [];
            /** @type {any | Array<any>} */
            const intermediateValue23 = intermediateValue22;

            if (!Array.isArray(intermediateValue23)) {
              intermediateErrorMap22[`$`] = {
                key: "validator.array",
                value: intermediateValue23,
              };
            } else {
              intermediateResult22 = [];
              for (let i23 = 0; i23 < intermediateValue23.length; ++i23) {
                if (
                  intermediateValue23[i23] === null ||
                  intermediateValue23[i23] === undefined
                ) {
                  intermediateErrorMap23[`$.${i23}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue23[i23] !== "string" ||
                    (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                      intermediateValue23[i23],
                    ) &&
                      !/^[a-f0-9]{32}$/gi.test(intermediateValue23[i23]))
                  ) {
                    intermediateErrorMap23[`$.${i23}`] = {
                      key: "validator.pattern",
                      patternExplanation: "UUID",
                    };
                  } else if (intermediateValue23[i23].length === 32) {
                    intermediateResult23[i23] = `${intermediateValue23[
                      i23
                    ].slice(0, 8)}-${intermediateValue23[i23].slice(
                      8,
                      12,
                    )}-${intermediateValue23[i23].slice(
                      12,
                      16,
                    )}-${intermediateValue23[i23].slice(
                      16,
                      20,
                    )}-${intermediateValue23[i23].slice(20)}`;
                  } else {
                    intermediateResult23[i23] = intermediateValue23[i23];
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap23).length) {
              for (const errorKey of Object.keys(intermediateErrorMap23)) {
                intermediateErrorMap22[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap23[errorKey];
              }
            } else {
              intermediateResult22 = intermediateResult23;
            }
          }
          if (Object.keys(intermediateErrorMap22).length > 0) {
            errorMap[`$.refreshTokenNotIn`].errors.push(intermediateErrorMap22);
          } else {
            hasAnyOfMatch20 = true;
            delete errorMap[`$.refreshTokenNotIn`];
            result["refreshTokenNotIn"] = intermediateResult22;
          }
        }
        if (!hasAnyOfMatch20) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap22 = {};
          /** @type {any} */
          let intermediateResult22 = undefined;
          /** @type {any} */
          const intermediateValue22 = value["refreshTokenNotIn"];

          if (
            intermediateValue22 === null ||
            intermediateValue22 === undefined
          ) {
            intermediateErrorMap22[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue22)) {
              intermediateResult22 = intermediateValue22;
            } else {
              intermediateErrorMap22[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap22).length > 0) {
            errorMap[`$.refreshTokenNotIn`].errors.push(intermediateErrorMap22);
          } else {
            hasAnyOfMatch20 = true;
            delete errorMap[`$.refreshTokenNotIn`];
            result["refreshTokenNotIn"] = intermediateResult22;
          }
        }
      }
      if (
        value["refreshTokenIsNull"] === null ||
        value["refreshTokenIsNull"] === undefined
      ) {
        result["refreshTokenIsNull"] = undefined;
      } else {
        if (
          value["refreshTokenIsNull"] === true ||
          value["refreshTokenIsNull"] === "true" ||
          value["refreshTokenIsNull"] === 1 ||
          value["refreshTokenIsNull"] === "1"
        ) {
          result["refreshTokenIsNull"] = true;
        } else if (
          value["refreshTokenIsNull"] === false ||
          value["refreshTokenIsNull"] === "false" ||
          value["refreshTokenIsNull"] === 0 ||
          value["refreshTokenIsNull"] === "0"
        ) {
          result["refreshTokenIsNull"] = false;
        } else {
          errorMap[`$.refreshTokenIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["refreshTokenIsNotNull"] === null ||
        value["refreshTokenIsNotNull"] === undefined
      ) {
        result["refreshTokenIsNotNull"] = undefined;
      } else {
        if (
          value["refreshTokenIsNotNull"] === true ||
          value["refreshTokenIsNotNull"] === "true" ||
          value["refreshTokenIsNotNull"] === 1 ||
          value["refreshTokenIsNotNull"] === "1"
        ) {
          result["refreshTokenIsNotNull"] = true;
        } else if (
          value["refreshTokenIsNotNull"] === false ||
          value["refreshTokenIsNotNull"] === "false" ||
          value["refreshTokenIsNotNull"] === 0 ||
          value["refreshTokenIsNotNull"] === "0"
        ) {
          result["refreshTokenIsNotNull"] = false;
        } else {
          errorMap[`$.refreshTokenIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtNotEqual"] === null ||
        value["revokedAtNotEqual"] === undefined
      ) {
        result["revokedAtNotEqual"] = undefined;
      } else {
        if (
          typeof value["revokedAtNotEqual"] === "string" ||
          typeof value["revokedAtNotEqual"] === "number"
        ) {
          result["revokedAtNotEqual"] = new Date(value["revokedAtNotEqual"]);
        } else if (
          Object.prototype.toString.call(value["revokedAtNotEqual"]) ===
          "[object Date]"
        ) {
          result["revokedAtNotEqual"] = value["revokedAtNotEqual"];
        } else {
          errorMap[`$.revokedAtNotEqual`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtNotEqual"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtNotEqual`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["revokedAtIn"] === null || value["revokedAtIn"] === undefined) {
        result["revokedAtIn"] = undefined;
      } else {
        let hasAnyOfMatch25 = false;
        errorMap[`$.revokedAtIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch25) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap27 = {};
          /** @type {any} */
          let intermediateResult27 = undefined;
          /** @type {any} */
          const intermediateValue27 = value["revokedAtIn"];

          if (
            intermediateValue27 === null ||
            intermediateValue27 === undefined
          ) {
            intermediateErrorMap27[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap28 = {};
            /** @type {Array<any>} */
            const intermediateResult28 = [];
            /** @type {any | Array<any>} */
            const intermediateValue28 = intermediateValue27;

            if (!Array.isArray(intermediateValue28)) {
              intermediateErrorMap27[`$`] = {
                key: "validator.array",
                value: intermediateValue28,
              };
            } else {
              intermediateResult27 = [];
              for (let i28 = 0; i28 < intermediateValue28.length; ++i28) {
                if (
                  intermediateValue28[i28] === null ||
                  intermediateValue28[i28] === undefined
                ) {
                  intermediateErrorMap28[`$.${i28}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue28[i28] === "string" ||
                    typeof intermediateValue28[i28] === "number"
                  ) {
                    intermediateResult28[i28] = new Date(
                      intermediateValue28[i28],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue28[i28]) ===
                    "[object Date]"
                  ) {
                    intermediateResult28[i28] = intermediateValue28[i28];
                  } else {
                    intermediateErrorMap28[`$.${i28}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult28[i28]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap28[`$.${i28}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap28).length) {
              for (const errorKey of Object.keys(intermediateErrorMap28)) {
                intermediateErrorMap27[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap28[errorKey];
              }
            } else {
              intermediateResult27 = intermediateResult28;
            }
          }
          if (Object.keys(intermediateErrorMap27).length > 0) {
            errorMap[`$.revokedAtIn`].errors.push(intermediateErrorMap27);
          } else {
            hasAnyOfMatch25 = true;
            delete errorMap[`$.revokedAtIn`];
            result["revokedAtIn"] = intermediateResult27;
          }
        }
        if (!hasAnyOfMatch25) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap27 = {};
          /** @type {any} */
          let intermediateResult27 = undefined;
          /** @type {any} */
          const intermediateValue27 = value["revokedAtIn"];

          if (
            intermediateValue27 === null ||
            intermediateValue27 === undefined
          ) {
            intermediateErrorMap27[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue27)) {
              intermediateResult27 = intermediateValue27;
            } else {
              intermediateErrorMap27[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap27).length > 0) {
            errorMap[`$.revokedAtIn`].errors.push(intermediateErrorMap27);
          } else {
            hasAnyOfMatch25 = true;
            delete errorMap[`$.revokedAtIn`];
            result["revokedAtIn"] = intermediateResult27;
          }
        }
      }
      if (
        value["revokedAtNotIn"] === null ||
        value["revokedAtNotIn"] === undefined
      ) {
        result["revokedAtNotIn"] = undefined;
      } else {
        let hasAnyOfMatch26 = false;
        errorMap[`$.revokedAtNotIn`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch26) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap28 = {};
          /** @type {any} */
          let intermediateResult28 = undefined;
          /** @type {any} */
          const intermediateValue28 = value["revokedAtNotIn"];

          if (
            intermediateValue28 === null ||
            intermediateValue28 === undefined
          ) {
            intermediateErrorMap28[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap29 = {};
            /** @type {Array<any>} */
            const intermediateResult29 = [];
            /** @type {any | Array<any>} */
            const intermediateValue29 = intermediateValue28;

            if (!Array.isArray(intermediateValue29)) {
              intermediateErrorMap28[`$`] = {
                key: "validator.array",
                value: intermediateValue29,
              };
            } else {
              intermediateResult28 = [];
              for (let i29 = 0; i29 < intermediateValue29.length; ++i29) {
                if (
                  intermediateValue29[i29] === null ||
                  intermediateValue29[i29] === undefined
                ) {
                  intermediateErrorMap29[`$.${i29}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  if (
                    typeof intermediateValue29[i29] === "string" ||
                    typeof intermediateValue29[i29] === "number"
                  ) {
                    intermediateResult29[i29] = new Date(
                      intermediateValue29[i29],
                    );
                  } else if (
                    Object.prototype.toString.call(intermediateValue29[i29]) ===
                    "[object Date]"
                  ) {
                    intermediateResult29[i29] = intermediateValue29[i29];
                  } else {
                    intermediateErrorMap29[`$.${i29}`] = {
                      key: "validator.type",
                      expectedType: "Date|string",
                    };
                  }
                  if (
                    isNaN(intermediateResult29[i29]?.getTime() ?? undefined)
                  ) {
                    intermediateErrorMap29[`$.${i29}`] = {
                      key: "validator.date.invalid",
                    };
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap29).length) {
              for (const errorKey of Object.keys(intermediateErrorMap29)) {
                intermediateErrorMap28[`$${errorKey.substring(1)}`] =
                  intermediateErrorMap29[errorKey];
              }
            } else {
              intermediateResult28 = intermediateResult29;
            }
          }
          if (Object.keys(intermediateErrorMap28).length > 0) {
            errorMap[`$.revokedAtNotIn`].errors.push(intermediateErrorMap28);
          } else {
            hasAnyOfMatch26 = true;
            delete errorMap[`$.revokedAtNotIn`];
            result["revokedAtNotIn"] = intermediateResult28;
          }
        }
        if (!hasAnyOfMatch26) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap28 = {};
          /** @type {any} */
          let intermediateResult28 = undefined;
          /** @type {any} */
          const intermediateValue28 = value["revokedAtNotIn"];

          if (
            intermediateValue28 === null ||
            intermediateValue28 === undefined
          ) {
            intermediateErrorMap28[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (isQueryPart(intermediateValue28)) {
              intermediateResult28 = intermediateValue28;
            } else {
              intermediateErrorMap28[`$`] = {
                key: "validator.any",
                message:
                  "Custom validator error. See the input type for more information.",
              };
            }
          }
          if (Object.keys(intermediateErrorMap28).length > 0) {
            errorMap[`$.revokedAtNotIn`].errors.push(intermediateErrorMap28);
          } else {
            hasAnyOfMatch26 = true;
            delete errorMap[`$.revokedAtNotIn`];
            result["revokedAtNotIn"] = intermediateResult28;
          }
        }
      }
      if (
        value["revokedAtGreaterThan"] === null ||
        value["revokedAtGreaterThan"] === undefined
      ) {
        result["revokedAtGreaterThan"] = undefined;
      } else {
        if (
          typeof value["revokedAtGreaterThan"] === "string" ||
          typeof value["revokedAtGreaterThan"] === "number"
        ) {
          result["revokedAtGreaterThan"] = new Date(
            value["revokedAtGreaterThan"],
          );
        } else if (
          Object.prototype.toString.call(value["revokedAtGreaterThan"]) ===
          "[object Date]"
        ) {
          result["revokedAtGreaterThan"] = value["revokedAtGreaterThan"];
        } else {
          errorMap[`$.revokedAtGreaterThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtGreaterThan"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtGreaterThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtLowerThan"] === null ||
        value["revokedAtLowerThan"] === undefined
      ) {
        result["revokedAtLowerThan"] = undefined;
      } else {
        if (
          typeof value["revokedAtLowerThan"] === "string" ||
          typeof value["revokedAtLowerThan"] === "number"
        ) {
          result["revokedAtLowerThan"] = new Date(value["revokedAtLowerThan"]);
        } else if (
          Object.prototype.toString.call(value["revokedAtLowerThan"]) ===
          "[object Date]"
        ) {
          result["revokedAtLowerThan"] = value["revokedAtLowerThan"];
        } else {
          errorMap[`$.revokedAtLowerThan`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAtLowerThan"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAtLowerThan`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["revokedAtIsNull"] === null ||
        value["revokedAtIsNull"] === undefined
      ) {
        result["revokedAtIsNull"] = undefined;
      } else {
        if (
          value["revokedAtIsNull"] === true ||
          value["revokedAtIsNull"] === "true" ||
          value["revokedAtIsNull"] === 1 ||
          value["revokedAtIsNull"] === "1"
        ) {
          result["revokedAtIsNull"] = true;
        } else if (
          value["revokedAtIsNull"] === false ||
          value["revokedAtIsNull"] === "false" ||
          value["revokedAtIsNull"] === 0 ||
          value["revokedAtIsNull"] === "0"
        ) {
          result["revokedAtIsNull"] = false;
        } else {
          errorMap[`$.revokedAtIsNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["revokedAtIsNotNull"] === null ||
        value["revokedAtIsNotNull"] === undefined
      ) {
        result["revokedAtIsNotNull"] = undefined;
      } else {
        if (
          value["revokedAtIsNotNull"] === true ||
          value["revokedAtIsNotNull"] === "true" ||
          value["revokedAtIsNotNull"] === 1 ||
          value["revokedAtIsNotNull"] === "1"
        ) {
          result["revokedAtIsNotNull"] = true;
        } else if (
          value["revokedAtIsNotNull"] === false ||
          value["revokedAtIsNotNull"] === "false" ||
          value["revokedAtIsNotNull"] === 0 ||
          value["revokedAtIsNotNull"] === "0"
        ) {
          result["revokedAtIsNotNull"] = false;
        } else {
          errorMap[`$.revokedAtIsNotNull`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["viaRefreshToken"] === null ||
        value["viaRefreshToken"] === undefined
      ) {
        result["viaRefreshToken"] = undefined;
      } else {
        if (!isRecord(value["viaRefreshToken"])) {
          errorMap[`$.viaRefreshToken`] = {
            key: "validator.object",
            value: value["viaRefreshToken"],
            foundType: typeof value["viaRefreshToken"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys31 = new Set(["where", "limit", "offset"]);
          for (const key of Object.keys(value["viaRefreshToken"])) {
            if (
              !knownKeys31.has(key) &&
              value["viaRefreshToken"][key] !== null &&
              value["viaRefreshToken"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys31];
              const foundKeys = Object.keys(value["viaRefreshToken"]);
              const unknownKeys = foundKeys.filter(
                (it) => !knownKeys31.has(it),
              );
              errorMap[`$.viaRefreshToken`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["viaRefreshToken"] = {
            where: undefined,
            limit: undefined,
            offset: undefined,
          };

          if (
            value["viaRefreshToken"]["where"] === null ||
            value["viaRefreshToken"]["where"] === undefined
          ) {
            result["viaRefreshToken"]["where"] = {};
          } else {
            const refResult32 = validateStoreSessionStoreTokenWhereValidated(
              value["viaRefreshToken"]["where"],
            );

            if (refResult32.error) {
              for (const errorKey of Object.keys(refResult32.error)) {
                errorMap[`$.viaRefreshToken.where${errorKey.substring(1)}`] =
                  refResult32.error[errorKey];
              }
            }
            result["viaRefreshToken"]["where"] = refResult32.value;
          }
          if (
            value["viaRefreshToken"]["limit"] === null ||
            value["viaRefreshToken"]["limit"] === undefined
          ) {
            result["viaRefreshToken"]["limit"] = undefined;
          } else {
            let convertedNumber33 = value["viaRefreshToken"]["limit"];
            if (
              typeof convertedNumber33 !== "number" &&
              typeof convertedNumber33 === "string"
            ) {
              convertedNumber33 = Number(convertedNumber33);
            }
            if (
              typeof convertedNumber33 !== "number" ||
              isNaN(convertedNumber33) ||
              !isFinite(convertedNumber33) ||
              !Number.isInteger(convertedNumber33)
            ) {
              errorMap[`$.viaRefreshToken.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber33 < 1) {
              errorMap[`$.viaRefreshToken.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaRefreshToken"]["limit"] = convertedNumber33;
            }
          }
          if (
            value["viaRefreshToken"]["offset"] === null ||
            value["viaRefreshToken"]["offset"] === undefined
          ) {
            result["viaRefreshToken"]["offset"] = undefined;
          } else {
            let convertedNumber34 = value["viaRefreshToken"]["offset"];
            if (
              typeof convertedNumber34 !== "number" &&
              typeof convertedNumber34 === "string"
            ) {
              convertedNumber34 = Number(convertedNumber34);
            }
            if (
              typeof convertedNumber34 !== "number" ||
              isNaN(convertedNumber34) ||
              !isFinite(convertedNumber34) ||
              !Number.isInteger(convertedNumber34)
            ) {
              errorMap[`$.viaRefreshToken.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber34 < 0) {
              errorMap[`$.viaRefreshToken.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaRefreshToken"]["offset"] = convertedNumber34;
            }
          }
        }
      }
      if (value["viaSession"] === null || value["viaSession"] === undefined) {
        result["viaSession"] = undefined;
      } else {
        if (!isRecord(value["viaSession"])) {
          errorMap[`$.viaSession`] = {
            key: "validator.object",
            value: value["viaSession"],
            foundType: typeof value["viaSession"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys32 = new Set(["where", "limit", "offset"]);
          for (const key of Object.keys(value["viaSession"])) {
            if (
              !knownKeys32.has(key) &&
              value["viaSession"][key] !== null &&
              value["viaSession"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys32];
              const foundKeys = Object.keys(value["viaSession"]);
              const unknownKeys = foundKeys.filter(
                (it) => !knownKeys32.has(it),
              );
              errorMap[`$.viaSession`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["viaSession"] = {
            where: undefined,
            limit: undefined,
            offset: undefined,
          };

          if (
            value["viaSession"]["where"] === null ||
            value["viaSession"]["where"] === undefined
          ) {
            result["viaSession"]["where"] = {};
          } else {
            const refResult33 = validateStoreSessionStoreWhereValidated(
              value["viaSession"]["where"],
            );

            if (refResult33.error) {
              for (const errorKey of Object.keys(refResult33.error)) {
                errorMap[`$.viaSession.where${errorKey.substring(1)}`] =
                  refResult33.error[errorKey];
              }
            }
            result["viaSession"]["where"] = refResult33.value;
          }
          if (
            value["viaSession"]["limit"] === null ||
            value["viaSession"]["limit"] === undefined
          ) {
            result["viaSession"]["limit"] = undefined;
          } else {
            let convertedNumber34 = value["viaSession"]["limit"];
            if (
              typeof convertedNumber34 !== "number" &&
              typeof convertedNumber34 === "string"
            ) {
              convertedNumber34 = Number(convertedNumber34);
            }
            if (
              typeof convertedNumber34 !== "number" ||
              isNaN(convertedNumber34) ||
              !isFinite(convertedNumber34) ||
              !Number.isInteger(convertedNumber34)
            ) {
              errorMap[`$.viaSession.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber34 < 1) {
              errorMap[`$.viaSession.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaSession"]["limit"] = convertedNumber34;
            }
          }
          if (
            value["viaSession"]["offset"] === null ||
            value["viaSession"]["offset"] === undefined
          ) {
            result["viaSession"]["offset"] = undefined;
          } else {
            let convertedNumber35 = value["viaSession"]["offset"];
            if (
              typeof convertedNumber35 !== "number" &&
              typeof convertedNumber35 === "string"
            ) {
              convertedNumber35 = Number(convertedNumber35);
            }
            if (
              typeof convertedNumber35 !== "number" ||
              isNaN(convertedNumber35) ||
              !isFinite(convertedNumber35) ||
              !Number.isInteger(convertedNumber35)
            ) {
              errorMap[`$.viaSession.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber35 < 0) {
              errorMap[`$.viaSession.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaSession"]["offset"] = convertedNumber35;
            }
          }
        }
      }
      if (
        value["viaAccessToken"] === null ||
        value["viaAccessToken"] === undefined
      ) {
        result["viaAccessToken"] = undefined;
      } else {
        if (!isRecord(value["viaAccessToken"])) {
          errorMap[`$.viaAccessToken`] = {
            key: "validator.object",
            value: value["viaAccessToken"],
            foundType: typeof value["viaAccessToken"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys33 = new Set(["where", "limit", "offset"]);
          for (const key of Object.keys(value["viaAccessToken"])) {
            if (
              !knownKeys33.has(key) &&
              value["viaAccessToken"][key] !== null &&
              value["viaAccessToken"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys33];
              const foundKeys = Object.keys(value["viaAccessToken"]);
              const unknownKeys = foundKeys.filter(
                (it) => !knownKeys33.has(it),
              );
              errorMap[`$.viaAccessToken`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["viaAccessToken"] = {
            where: undefined,
            limit: undefined,
            offset: undefined,
          };

          if (
            value["viaAccessToken"]["where"] === null ||
            value["viaAccessToken"]["where"] === undefined
          ) {
            result["viaAccessToken"]["where"] = {};
          } else {
            const refResult34 = validateStoreSessionStoreTokenWhereValidated(
              value["viaAccessToken"]["where"],
            );

            if (refResult34.error) {
              for (const errorKey of Object.keys(refResult34.error)) {
                errorMap[`$.viaAccessToken.where${errorKey.substring(1)}`] =
                  refResult34.error[errorKey];
              }
            }
            result["viaAccessToken"]["where"] = refResult34.value;
          }
          if (
            value["viaAccessToken"]["limit"] === null ||
            value["viaAccessToken"]["limit"] === undefined
          ) {
            result["viaAccessToken"]["limit"] = undefined;
          } else {
            let convertedNumber35 = value["viaAccessToken"]["limit"];
            if (
              typeof convertedNumber35 !== "number" &&
              typeof convertedNumber35 === "string"
            ) {
              convertedNumber35 = Number(convertedNumber35);
            }
            if (
              typeof convertedNumber35 !== "number" ||
              isNaN(convertedNumber35) ||
              !isFinite(convertedNumber35) ||
              !Number.isInteger(convertedNumber35)
            ) {
              errorMap[`$.viaAccessToken.limit`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber35 < 1) {
              errorMap[`$.viaAccessToken.limit`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else {
              result["viaAccessToken"]["limit"] = convertedNumber35;
            }
          }
          if (
            value["viaAccessToken"]["offset"] === null ||
            value["viaAccessToken"]["offset"] === undefined
          ) {
            result["viaAccessToken"]["offset"] = undefined;
          } else {
            let convertedNumber36 = value["viaAccessToken"]["offset"];
            if (
              typeof convertedNumber36 !== "number" &&
              typeof convertedNumber36 === "string"
            ) {
              convertedNumber36 = Number(convertedNumber36);
            }
            if (
              typeof convertedNumber36 !== "number" ||
              isNaN(convertedNumber36) ||
              !isFinite(convertedNumber36) ||
              !Number.isInteger(convertedNumber36)
            ) {
              errorMap[`$.viaAccessToken.offset`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber36 < 0) {
              errorMap[`$.viaAccessToken.offset`] = {
                key: "validator.range",
                minValue: 0,
              };
            } else {
              result["viaAccessToken"]["offset"] = convertedNumber36;
            }
          }
        }
      }
      if (
        value["accessTokenNotExists"] === null ||
        value["accessTokenNotExists"] === undefined
      ) {
        result["accessTokenNotExists"] = undefined;
      } else {
        const refResult34 = validateStoreSessionStoreTokenWhereValidated(
          value["accessTokenNotExists"],
        );

        if (refResult34.error) {
          for (const errorKey of Object.keys(refResult34.error)) {
            errorMap[`$.accessTokenNotExists${errorKey.substring(1)}`] =
              refResult34.error[errorKey];
          }
        }
        result["accessTokenNotExists"] = refResult34.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreOrderBy|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreOrderBy, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreOrderBy(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "createdAt" &&
                  convertedString3 !== "updatedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: ["id", "createdAt", "updatedAt"],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreOrderBySpec|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["id", "createdAt", "updatedAt"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { id: undefined, createdAt: undefined, updatedAt: undefined };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        const convertedString1 = value["id"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString1.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString1 !== "ASC" &&
              convertedString1 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString1,
              };
            } else {
              result["id"] = convertedString1;
            }
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString2 = value["createdAt"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.createdAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length === 0) {
            result["createdAt"] = undefined;
          } else {
            if (convertedString2.length < 1) {
              errorMap[`$.createdAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString2 !== "ASC" &&
              convertedString2 !== "DESC"
            ) {
              errorMap[`$.createdAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString2,
              };
            } else {
              result["createdAt"] = convertedString2;
            }
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString3 = value["updatedAt"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.updatedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length === 0) {
            result["updatedAt"] = undefined;
          } else {
            if (convertedString3.length < 1) {
              errorMap[`$.updatedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString3 !== "ASC" &&
              convertedString3 !== "DESC"
            ) {
              errorMap[`$.updatedAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString3,
              };
            } else {
              result["updatedAt"] = convertedString3;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreQueryBuilder|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "where",
        "orderBy",
        "orderBySpec",
        "limit",
        "offset",
        "select",
        "accessTokens",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        where: undefined,
        orderBy: undefined,
        orderBySpec: undefined,
        limit: undefined,
        offset: undefined,
        select: undefined,
        accessTokens: undefined,
      };

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult1 = validateStoreSessionStoreWhereValidated(
          value["where"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["where"] = refResult1.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult2 = validateStoreSessionStoreOrderBy(value["orderBy"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["orderBy"] = refResult2.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult3 = validateStoreSessionStoreOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult3.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber4 = value["limit"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber4;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber5 = value["offset"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber5;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "checksum",
          "revokedAt",
          "data",
          "createdAt",
          "updatedAt",
        ];
      } else {
        const refResult6 = validateStoreSessionStoreReturning(value["select"]);

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["select"] = refResult6.value;
      }
      if (
        value["accessTokens"] === null ||
        value["accessTokens"] === undefined
      ) {
        result["accessTokens"] = undefined;
      } else {
        const refResult7 = validateStoreSessionStoreTokenQueryBuilderValidated(
          value["accessTokens"],
        );

        if (refResult7.error) {
          for (const errorKey of Object.keys(refResult7.error)) {
            errorMap[`$.accessTokens${errorKey.substring(1)}`] =
              refResult7.error[errorKey];
          }
        }
        result["accessTokens"] = refResult7.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreReturning|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreReturning, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreReturning(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "checksum" &&
                  convertedString3 !== "revokedAt" &&
                  convertedString3 !== "data" &&
                  convertedString3 !== "createdAt" &&
                  convertedString3 !== "updatedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "checksum",
                      "revokedAt",
                      "data",
                      "createdAt",
                      "updatedAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenQueryBuilder|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenQueryBuilderValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenQueryBuilderValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "where",
        "orderBy",
        "orderBySpec",
        "limit",
        "offset",
        "select",
        "refreshToken",
        "session",
        "accessToken",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        where: undefined,
        orderBy: undefined,
        orderBySpec: undefined,
        limit: undefined,
        offset: undefined,
        select: undefined,
        refreshToken: undefined,
        session: undefined,
        accessToken: undefined,
      };

      if (value["where"] === null || value["where"] === undefined) {
        result["where"] = undefined;
      } else {
        const refResult1 = validateStoreSessionStoreTokenWhereValidated(
          value["where"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["where"] = refResult1.value;
      }
      if (value["orderBy"] === null || value["orderBy"] === undefined) {
        result["orderBy"] = undefined;
      } else {
        const refResult2 = validateStoreSessionStoreTokenOrderBy(
          value["orderBy"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.orderBy${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["orderBy"] = refResult2.value;
      }
      if (value["orderBySpec"] === null || value["orderBySpec"] === undefined) {
        result["orderBySpec"] = undefined;
      } else {
        const refResult3 = validateStoreSessionStoreTokenOrderBySpec(
          value["orderBySpec"],
        );

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.orderBySpec${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["orderBySpec"] = refResult3.value;
      }
      if (value["limit"] === null || value["limit"] === undefined) {
        result["limit"] = undefined;
      } else {
        let convertedNumber4 = value["limit"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.limit`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < 1) {
          errorMap[`$.limit`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else {
          result["limit"] = convertedNumber4;
        }
      }
      if (value["offset"] === null || value["offset"] === undefined) {
        result["offset"] = undefined;
      } else {
        let convertedNumber5 = value["offset"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.offset`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < 0) {
          errorMap[`$.offset`] = {
            key: "validator.range",
            minValue: 0,
          };
        } else {
          result["offset"] = convertedNumber5;
        }
      }
      if (value["select"] === null || value["select"] === undefined) {
        result["select"] = [
          "id",
          "session",
          "expiresAt",
          "refreshToken",
          "revokedAt",
          "createdAt",
        ];
      } else {
        const refResult6 = validateStoreSessionStoreTokenReturning(
          value["select"],
        );

        if (refResult6.error) {
          for (const errorKey of Object.keys(refResult6.error)) {
            errorMap[`$.select${errorKey.substring(1)}`] =
              refResult6.error[errorKey];
          }
        }
        result["select"] = refResult6.value;
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        const refResult7 = validateStoreSessionStoreTokenQueryBuilderValidated(
          value["refreshToken"],
        );

        if (refResult7.error) {
          for (const errorKey of Object.keys(refResult7.error)) {
            errorMap[`$.refreshToken${errorKey.substring(1)}`] =
              refResult7.error[errorKey];
          }
        }
        result["refreshToken"] = refResult7.value;
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        const refResult8 = validateStoreSessionStoreQueryBuilderValidated(
          value["session"],
        );

        if (refResult8.error) {
          for (const errorKey of Object.keys(refResult8.error)) {
            errorMap[`$.session${errorKey.substring(1)}`] =
              refResult8.error[errorKey];
          }
        }
        result["session"] = refResult8.value;
      }
      if (value["accessToken"] === null || value["accessToken"] === undefined) {
        result["accessToken"] = undefined;
      } else {
        const refResult9 = validateStoreSessionStoreTokenQueryBuilderValidated(
          value["accessToken"],
        );

        if (refResult9.error) {
          for (const errorKey of Object.keys(refResult9.error)) {
            errorMap[`$.accessToken${errorKey.substring(1)}`] =
              refResult9.error[errorKey];
          }
        }
        result["accessToken"] = refResult9.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenOrderBy|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenOrderBy, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenOrderBy(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        if (isQueryPart(intermediateValue2)) {
          intermediateResult2 = intermediateValue2;
        } else {
          intermediateErrorMap2[`$`] = {
            key: "validator.any",
            message:
              "Custom validator error. See the input type for more information.",
          };
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "session" &&
                  convertedString3 !== "expiresAt" &&
                  convertedString3 !== "refreshToken" &&
                  convertedString3 !== "revokedAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "session",
                      "expiresAt",
                      "refreshToken",
                      "revokedAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenOrderBySpec|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenOrderBySpec, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenOrderBySpec(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "session",
        "expiresAt",
        "refreshToken",
        "revokedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        session: undefined,
        expiresAt: undefined,
        refreshToken: undefined,
        revokedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        /** @type {string} */
        const convertedString1 = value["id"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.id`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length === 0) {
            result["id"] = undefined;
          } else {
            if (convertedString1.length < 1) {
              errorMap[`$.id`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString1 !== "ASC" &&
              convertedString1 !== "DESC"
            ) {
              errorMap[`$.id`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString1,
              };
            } else {
              result["id"] = convertedString1;
            }
          }
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        /** @type {string} */
        const convertedString2 = value["session"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.session`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length === 0) {
            result["session"] = undefined;
          } else {
            if (convertedString2.length < 1) {
              errorMap[`$.session`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString2 !== "ASC" &&
              convertedString2 !== "DESC"
            ) {
              errorMap[`$.session`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString2,
              };
            } else {
              result["session"] = convertedString2;
            }
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString3 = value["expiresAt"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.expiresAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length === 0) {
            result["expiresAt"] = undefined;
          } else {
            if (convertedString3.length < 1) {
              errorMap[`$.expiresAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString3 !== "ASC" &&
              convertedString3 !== "DESC"
            ) {
              errorMap[`$.expiresAt`] = {
                key: "validator.oneOf",
                allowedValues: ["ASC", "DESC"],
                foundValue: convertedString3,
              };
            } else {
              result["expiresAt"] = convertedString3;
            }
          }
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        /** @type {string} */
        const convertedString4 = value["refreshToken"];
        if (typeof convertedString4 !== "string") {
          errorMap[`$.refreshToken`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString4.length === 0) {
            result["refreshToken"] = undefined;
          } else {
            if (convertedString4.length < 1) {
              errorMap[`$.refreshToken`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString4 !== "ASC" &&
              convertedString4 !== "DESC" &&
              convertedString4 !== "ASC NULLS FIRST" &&
              convertedString4 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.refreshToken`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString4,
              };
            } else {
              result["refreshToken"] = convertedString4;
            }
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        /** @type {string} */
        const convertedString5 = value["revokedAt"];
        if (typeof convertedString5 !== "string") {
          errorMap[`$.revokedAt`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString5.length === 0) {
            result["revokedAt"] = undefined;
          } else {
            if (convertedString5.length < 1) {
              errorMap[`$.revokedAt`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString5 !== "ASC" &&
              convertedString5 !== "DESC" &&
              convertedString5 !== "ASC NULLS FIRST" &&
              convertedString5 !== "DESC NULLS LAST"
            ) {
              errorMap[`$.revokedAt`] = {
                key: "validator.oneOf",
                allowedValues: [
                  "ASC",
                  "DESC",
                  "ASC NULLS FIRST",
                  "DESC NULLS LAST",
                ],
                foundValue: convertedString5,
              };
            } else {
              result["revokedAt"] = convertedString5;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenReturning|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenReturning, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenReturning(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = intermediateValue2;
        if (typeof convertedString2 !== "string") {
          intermediateErrorMap2[`$`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            intermediateErrorMap2[`$`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString2 !== "*") {
            intermediateErrorMap2[`$`] = {
              key: "validator.oneOf",
              allowedValues: ["*"],
              foundValue: convertedString2,
            };
          } else {
            intermediateResult2 = convertedString2;
          }
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      const intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {Array<any>} */
        const intermediateResult3 = [];
        /** @type {any | Array<any>} */
        const intermediateValue3 = intermediateValue2;

        if (!Array.isArray(intermediateValue3)) {
          intermediateErrorMap2[`$`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          intermediateResult2 = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              const convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString3 !== "id" &&
                  convertedString3 !== "session" &&
                  convertedString3 !== "expiresAt" &&
                  convertedString3 !== "refreshToken" &&
                  convertedString3 !== "revokedAt" &&
                  convertedString3 !== "createdAt"
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.oneOf",
                    allowedValues: [
                      "id",
                      "session",
                      "expiresAt",
                      "refreshToken",
                      "revokedAt",
                      "createdAt",
                    ],
                    foundValue: convertedString3,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          intermediateResult2 = intermediateResult3;
        }
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreInsert|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["insert", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { insert: undefined, returning: undefined };

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap2 = {};
        /** @type {Array<any>} */
        const intermediateResult2 = [];
        /** @type {any | Array<any>} */
        let intermediateValue2 = value["insert"];

        if (!Array.isArray(intermediateValue2)) {
          intermediateValue2 = [intermediateValue2];
        }
        if (intermediateValue2.length < 1) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            minLength: 1,
            foundLength: intermediateValue2.length,
          };
        }
        if (intermediateValue2.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue2.length,
          };
        }
        result["insert"] = [];
        for (let i2 = 0; i2 < intermediateValue2.length; ++i2) {
          if (
            intermediateValue2[i2] === null ||
            intermediateValue2[i2] === undefined
          ) {
            intermediateErrorMap2[`$.${i2}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult2 = validateStoreSessionStoreInsertPartialValidated(
              intermediateValue2[i2],
            );

            if (refResult2.error) {
              for (const errorKey of Object.keys(refResult2.error)) {
                intermediateErrorMap2[`$.${i2}${errorKey.substring(1)}`] =
                  refResult2.error[errorKey];
              }
            }
            intermediateResult2[i2] = refResult2.value;
          }
        }
        if (Object.keys(intermediateErrorMap2).length) {
          for (const errorKey of Object.keys(intermediateErrorMap2)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap2[errorKey];
          }
        } else {
          result["insert"] = intermediateResult2;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult2 = validateStoreSessionStoreReturning(
          value["returning"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["returning"] = refResult2.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreInsertPartial|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "checksum",
        "revokedAt",
        "data",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        checksum: undefined,
        revokedAt: undefined,
        data: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["checksum"] === null || value["checksum"] === undefined) {
        errorMap[`$.checksum`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = value["checksum"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.checksum`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            errorMap[`$.checksum`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["checksum"] = convertedString2;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = value["revokedAt"];
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = {};
      } else {
        result["data"] = value["data"];
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = value["createdAt"];
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = value["updatedAt"];
      } else {
        if (
          typeof value["updatedAt"] === "string" ||
          typeof value["updatedAt"] === "number"
        ) {
          result["updatedAt"] = new Date(value["updatedAt"]);
        } else if (
          Object.prototype.toString.call(value["updatedAt"]) === "[object Date]"
        ) {
          result["updatedAt"] = value["updatedAt"];
        } else {
          errorMap[`$.updatedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["updatedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.updatedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreUpdate|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["update", "where", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { update: undefined, where: undefined, returning: undefined };

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult1 = validateStoreSessionStoreUpdatePartialValidated(
          value["update"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["update"] = refResult1.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 = validateStoreSessionStoreWhereValidated(
          value["where"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["where"] = refResult2.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult3 = validateStoreSessionStoreReturning(
          value["returning"],
        );

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["returning"] = refResult3.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreUpdatePartial|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "checksum",
        "revokedAt",
        "data",
        "createdAt",
        "updatedAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        checksum: undefined,
        revokedAt: undefined,
        data: undefined,
        createdAt: undefined,
        updatedAt: undefined,
      };

      if (value["checksum"] === null || value["checksum"] === undefined) {
        result["checksum"] = undefined;
      } else {
        let hasAnyOfMatch1 = false;
        errorMap[`$.checksum`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["checksum"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateErrorMap3[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue3)) {
              intermediateErrorMap3[`$`] = {
                key: "validator.object",
                value: intermediateValue3,
                foundType: typeof intermediateValue3,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["$append"]);
              for (const key of Object.keys(intermediateValue3)) {
                if (
                  !knownKeys3.has(key) &&
                  intermediateValue3[key] !== null &&
                  intermediateValue3[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(intermediateValue3);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  intermediateErrorMap3[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult3 = { $append: undefined };

              if (
                intermediateValue3["$append"] === null ||
                intermediateValue3["$append"] === undefined
              ) {
                intermediateErrorMap3[`$.$append`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString4 = intermediateValue3["$append"];
                if (typeof convertedString4 !== "string") {
                  intermediateErrorMap3[`$.$append`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString4.length < 1) {
                    intermediateErrorMap3[`$.$append`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult3["$append"] = convertedString4;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.checksum`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.checksum`];
            result["checksum"] = intermediateResult3;
          }
        }
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["checksum"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateResult3 = undefined;
          } else {
            /** @type {string} */
            const convertedString3 = intermediateValue3;
            if (typeof convertedString3 !== "string") {
              intermediateErrorMap3[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString3.length === 0) {
                intermediateResult3 = undefined;
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult3 = convertedString3;
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.checksum`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.checksum`];
            result["checksum"] = intermediateResult3;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = value["revokedAt"];
      } else {
        let hasAnyOfMatch2 = false;
        errorMap[`$.revokedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["revokedAt"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $subtract: undefined };

              if (
                intermediateValue4["$subtract"] === null ||
                intermediateValue4["$subtract"] === undefined
              ) {
                intermediateErrorMap4[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString5 = intermediateValue4["$subtract"];
                if (typeof convertedString5 !== "string") {
                  intermediateErrorMap4[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString5.length < 1) {
                    intermediateErrorMap4[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult4["$subtract"] = convertedString5;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["revokedAt"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $add: undefined };

              if (
                intermediateValue4["$add"] === null ||
                intermediateValue4["$add"] === undefined
              ) {
                intermediateErrorMap4[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString5 = intermediateValue4["$add"];
                if (typeof convertedString5 !== "string") {
                  intermediateErrorMap4[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString5.length < 1) {
                    intermediateErrorMap4[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult4["$add"] = convertedString5;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["revokedAt"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateResult4 = intermediateValue4;
          } else {
            if (
              typeof intermediateValue4 === "string" ||
              typeof intermediateValue4 === "number"
            ) {
              intermediateResult4 = new Date(intermediateValue4);
            } else if (
              Object.prototype.toString.call(intermediateValue4) ===
              "[object Date]"
            ) {
              intermediateResult4 = intermediateValue4;
            } else {
              intermediateErrorMap4[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult4?.getTime() ?? undefined)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult4;
          }
        }
      }
      if (value["data"] === null || value["data"] === undefined) {
        result["data"] = value["data"];
      } else {
        let hasAnyOfMatch3 = false;
        errorMap[`$.data`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["data"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$set"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $set: undefined };

              if (
                intermediateValue5["$set"] === null ||
                intermediateValue5["$set"] === undefined
              ) {
                intermediateErrorMap5[`$.$set`] = {
                  key: "validator.undefined",
                };
              } else {
                if (!isRecord(intermediateValue5["$set"])) {
                  intermediateErrorMap5[`$.$set`] = {
                    key: "validator.object",
                    value: intermediateValue5["$set"],
                    foundType: typeof intermediateValue5["$set"],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys6 = new Set(["path", "value"]);
                  for (const key of Object.keys(intermediateValue5["$set"])) {
                    if (
                      !knownKeys6.has(key) &&
                      intermediateValue5["$set"][key] !== null &&
                      intermediateValue5["$set"][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys6];
                      const foundKeys = Object.keys(intermediateValue5["$set"]);
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys6.has(it),
                      );
                      intermediateErrorMap5[`$.$set`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  intermediateResult5["$set"] = {
                    path: undefined,
                    value: undefined,
                  };

                  if (
                    intermediateValue5["$set"]["path"] === null ||
                    intermediateValue5["$set"]["path"] === undefined
                  ) {
                    intermediateErrorMap5[`$.$set.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap8 = {};
                    /** @type {Array<any>} */
                    const intermediateResult8 = [];
                    /** @type {any | Array<any>} */
                    const intermediateValue8 =
                      intermediateValue5["$set"]["path"];

                    if (!Array.isArray(intermediateValue8)) {
                      intermediateErrorMap5[`$.$set.path`] = {
                        key: "validator.array",
                        value: intermediateValue8,
                      };
                    } else {
                      intermediateResult5["$set"]["path"] = [];
                      for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                        if (
                          intermediateValue8[i8] === null ||
                          intermediateValue8[i8] === undefined
                        ) {
                          intermediateErrorMap8[`$.${i8}`] = {
                            key: "validator.undefined",
                          };
                        } else {
                          let hasAnyOfMatch8 = false;
                          intermediateErrorMap8[`$.${i8}`] = {
                            key: "validator.anyOf",
                            errors: [],
                          };
                          if (!hasAnyOfMatch8) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap10 = {};
                            /** @type {any} */
                            let intermediateResult10 = undefined;
                            /** @type {any} */
                            const intermediateValue10 = intermediateValue8[i8];

                            if (
                              intermediateValue10 === null ||
                              intermediateValue10 === undefined
                            ) {
                              intermediateErrorMap10[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              let convertedNumber10 = intermediateValue10;
                              if (
                                typeof convertedNumber10 !== "number" &&
                                typeof convertedNumber10 === "string"
                              ) {
                                convertedNumber10 = Number(convertedNumber10);
                              }
                              if (
                                typeof convertedNumber10 !== "number" ||
                                isNaN(convertedNumber10) ||
                                !isFinite(convertedNumber10) ||
                                !Number.isInteger(convertedNumber10)
                              ) {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.number",
                                  subType: "int",
                                };
                              } else if (convertedNumber10 < -2147483647) {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.range",
                                  minValue: -2147483647,
                                };
                              } else if (convertedNumber10 > 2147483647) {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.range",
                                  maxValue: 2147483647,
                                };
                              } else {
                                intermediateResult10 = convertedNumber10;
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap10).length > 0
                            ) {
                              intermediateErrorMap8[`$.${i8}`].errors.push(
                                intermediateErrorMap10,
                              );
                            } else {
                              hasAnyOfMatch8 = true;
                              delete intermediateErrorMap8[`$.${i8}`];
                              intermediateResult8[i8] = intermediateResult10;
                            }
                          }
                          if (!hasAnyOfMatch8) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap10 = {};
                            /** @type {any} */
                            let intermediateResult10 = undefined;
                            /** @type {any} */
                            const intermediateValue10 = intermediateValue8[i8];

                            if (
                              intermediateValue10 === null ||
                              intermediateValue10 === undefined
                            ) {
                              intermediateErrorMap10[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              /** @type {string} */
                              const convertedString10 = intermediateValue10;
                              if (typeof convertedString10 !== "string") {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.string",
                                };
                              } else {
                                if (convertedString10.length < 1) {
                                  intermediateErrorMap10[`$`] = {
                                    key: "validator.length",
                                    minLength: 1,
                                  };
                                } else {
                                  intermediateResult10 = convertedString10;
                                }
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap10).length > 0
                            ) {
                              intermediateErrorMap8[`$.${i8}`].errors.push(
                                intermediateErrorMap10,
                              );
                            } else {
                              hasAnyOfMatch8 = true;
                              delete intermediateErrorMap8[`$.${i8}`];
                              intermediateResult8[i8] = intermediateResult10;
                            }
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap8).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap8,
                      )) {
                        intermediateErrorMap5[
                          `$.$set.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap8[errorKey];
                      }
                    } else {
                      intermediateResult5["$set"]["path"] = intermediateResult8;
                    }
                  }
                  if (
                    intermediateValue5["$set"]["value"] === null ||
                    intermediateValue5["$set"]["value"] === undefined
                  ) {
                    intermediateErrorMap5[`$.$set.value`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    intermediateResult5["$set"]["value"] =
                      intermediateValue5["$set"]["value"];
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["data"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue5)) {
              intermediateErrorMap5[`$`] = {
                key: "validator.object",
                value: intermediateValue5,
                foundType: typeof intermediateValue5,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys5 = new Set(["$remove"]);
              for (const key of Object.keys(intermediateValue5)) {
                if (
                  !knownKeys5.has(key) &&
                  intermediateValue5[key] !== null &&
                  intermediateValue5[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys5];
                  const foundKeys = Object.keys(intermediateValue5);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys5.has(it),
                  );
                  intermediateErrorMap5[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult5 = { $remove: undefined };

              if (
                intermediateValue5["$remove"] === null ||
                intermediateValue5["$remove"] === undefined
              ) {
                intermediateErrorMap5[`$.$remove`] = {
                  key: "validator.undefined",
                };
              } else {
                if (!isRecord(intermediateValue5["$remove"])) {
                  intermediateErrorMap5[`$.$remove`] = {
                    key: "validator.object",
                    value: intermediateValue5["$remove"],
                    foundType: typeof intermediateValue5["$remove"],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys6 = new Set(["path"]);
                  for (const key of Object.keys(
                    intermediateValue5["$remove"],
                  )) {
                    if (
                      !knownKeys6.has(key) &&
                      intermediateValue5["$remove"][key] !== null &&
                      intermediateValue5["$remove"][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys6];
                      const foundKeys = Object.keys(
                        intermediateValue5["$remove"],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys6.has(it),
                      );
                      intermediateErrorMap5[`$.$remove`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  intermediateResult5["$remove"] = { path: undefined };

                  if (
                    intermediateValue5["$remove"]["path"] === null ||
                    intermediateValue5["$remove"]["path"] === undefined
                  ) {
                    intermediateErrorMap5[`$.$remove.path`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {ValidatorErrorMap} */
                    const intermediateErrorMap8 = {};
                    /** @type {Array<any>} */
                    const intermediateResult8 = [];
                    /** @type {any | Array<any>} */
                    const intermediateValue8 =
                      intermediateValue5["$remove"]["path"];

                    if (!Array.isArray(intermediateValue8)) {
                      intermediateErrorMap5[`$.$remove.path`] = {
                        key: "validator.array",
                        value: intermediateValue8,
                      };
                    } else {
                      intermediateResult5["$remove"]["path"] = [];
                      for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                        if (
                          intermediateValue8[i8] === null ||
                          intermediateValue8[i8] === undefined
                        ) {
                          intermediateErrorMap8[`$.${i8}`] = {
                            key: "validator.undefined",
                          };
                        } else {
                          let hasAnyOfMatch8 = false;
                          intermediateErrorMap8[`$.${i8}`] = {
                            key: "validator.anyOf",
                            errors: [],
                          };
                          if (!hasAnyOfMatch8) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap10 = {};
                            /** @type {any} */
                            let intermediateResult10 = undefined;
                            /** @type {any} */
                            const intermediateValue10 = intermediateValue8[i8];

                            if (
                              intermediateValue10 === null ||
                              intermediateValue10 === undefined
                            ) {
                              intermediateErrorMap10[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              let convertedNumber10 = intermediateValue10;
                              if (
                                typeof convertedNumber10 !== "number" &&
                                typeof convertedNumber10 === "string"
                              ) {
                                convertedNumber10 = Number(convertedNumber10);
                              }
                              if (
                                typeof convertedNumber10 !== "number" ||
                                isNaN(convertedNumber10) ||
                                !isFinite(convertedNumber10) ||
                                !Number.isInteger(convertedNumber10)
                              ) {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.number",
                                  subType: "int",
                                };
                              } else if (convertedNumber10 < -2147483647) {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.range",
                                  minValue: -2147483647,
                                };
                              } else if (convertedNumber10 > 2147483647) {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.range",
                                  maxValue: 2147483647,
                                };
                              } else {
                                intermediateResult10 = convertedNumber10;
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap10).length > 0
                            ) {
                              intermediateErrorMap8[`$.${i8}`].errors.push(
                                intermediateErrorMap10,
                              );
                            } else {
                              hasAnyOfMatch8 = true;
                              delete intermediateErrorMap8[`$.${i8}`];
                              intermediateResult8[i8] = intermediateResult10;
                            }
                          }
                          if (!hasAnyOfMatch8) {
                            /** @type {ValidatorErrorMap} */
                            const intermediateErrorMap10 = {};
                            /** @type {any} */
                            let intermediateResult10 = undefined;
                            /** @type {any} */
                            const intermediateValue10 = intermediateValue8[i8];

                            if (
                              intermediateValue10 === null ||
                              intermediateValue10 === undefined
                            ) {
                              intermediateErrorMap10[`$`] = {
                                key: "validator.undefined",
                              };
                            } else {
                              /** @type {string} */
                              const convertedString10 = intermediateValue10;
                              if (typeof convertedString10 !== "string") {
                                intermediateErrorMap10[`$`] = {
                                  key: "validator.string",
                                };
                              } else {
                                if (convertedString10.length < 1) {
                                  intermediateErrorMap10[`$`] = {
                                    key: "validator.length",
                                    minLength: 1,
                                  };
                                } else {
                                  intermediateResult10 = convertedString10;
                                }
                              }
                            }
                            if (
                              Object.keys(intermediateErrorMap10).length > 0
                            ) {
                              intermediateErrorMap8[`$.${i8}`].errors.push(
                                intermediateErrorMap10,
                              );
                            } else {
                              hasAnyOfMatch8 = true;
                              delete intermediateErrorMap8[`$.${i8}`];
                              intermediateResult8[i8] = intermediateResult10;
                            }
                          }
                        }
                      }
                    }
                    if (Object.keys(intermediateErrorMap8).length) {
                      for (const errorKey of Object.keys(
                        intermediateErrorMap8,
                      )) {
                        intermediateErrorMap5[
                          `$.$remove.path${errorKey.substring(1)}`
                        ] = intermediateErrorMap8[errorKey];
                      }
                    } else {
                      intermediateResult5["$remove"]["path"] =
                        intermediateResult8;
                    }
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["data"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateResult5 = {};
          } else {
            intermediateResult5 = intermediateValue5;
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.data`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.data`];
            result["data"] = intermediateResult5;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch4 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["createdAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $subtract: undefined };

              if (
                intermediateValue6["$subtract"] === null ||
                intermediateValue6["$subtract"] === undefined
              ) {
                intermediateErrorMap6[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString7 = intermediateValue6["$subtract"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$subtract"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["createdAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $add: undefined };

              if (
                intermediateValue6["$add"] === null ||
                intermediateValue6["$add"] === undefined
              ) {
                intermediateErrorMap6[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString7 = intermediateValue6["$add"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$add"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["createdAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateResult6 = undefined;
          } else {
            if (
              typeof intermediateValue6 === "string" ||
              typeof intermediateValue6 === "number"
            ) {
              intermediateResult6 = new Date(intermediateValue6);
            } else if (
              Object.prototype.toString.call(intermediateValue6) ===
              "[object Date]"
            ) {
              intermediateResult6 = intermediateValue6;
            } else {
              intermediateErrorMap6[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult6?.getTime() ?? undefined)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult6;
          }
        }
      }
      if (value["updatedAt"] === null || value["updatedAt"] === undefined) {
        result["updatedAt"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.updatedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["updatedAt"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $subtract: undefined };

              if (
                intermediateValue7["$subtract"] === null ||
                intermediateValue7["$subtract"] === undefined
              ) {
                intermediateErrorMap7[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString8 = intermediateValue7["$subtract"];
                if (typeof convertedString8 !== "string") {
                  intermediateErrorMap7[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString8.length < 1) {
                    intermediateErrorMap7[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult7["$subtract"] = convertedString8;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["updatedAt"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $add: undefined };

              if (
                intermediateValue7["$add"] === null ||
                intermediateValue7["$add"] === undefined
              ) {
                intermediateErrorMap7[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString8 = intermediateValue7["$add"];
                if (typeof convertedString8 !== "string") {
                  intermediateErrorMap7[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString8.length < 1) {
                    intermediateErrorMap7[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult7["$add"] = convertedString8;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["updatedAt"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateResult7 = undefined;
          } else {
            if (
              typeof intermediateValue7 === "string" ||
              typeof intermediateValue7 === "number"
            ) {
              intermediateResult7 = new Date(intermediateValue7);
            } else if (
              Object.prototype.toString.call(intermediateValue7) ===
              "[object Date]"
            ) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult7?.getTime() ?? undefined)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.updatedAt`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.updatedAt`];
            result["updatedAt"] = intermediateResult7;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Store all tokens that belong to a session.
 *
 * @param {import("../common/types.js").StoreSessionStoreTokenInput|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreToken, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreToken(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "session",
        "expiresAt",
        "refreshToken",
        "revokedAt",
        "createdAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        session: undefined,
        expiresAt: undefined,
        refreshToken: undefined,
        revokedAt: undefined,
        createdAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        errorMap[`$.session`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["session"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["session"]))
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["session"].length === 32) {
          result["session"] = `${value["session"].slice(0, 8)}-${value[
            "session"
          ].slice(8, 12)}-${value["session"].slice(12, 16)}-${value[
            "session"
          ].slice(16, 20)}-${value["session"].slice(20)}`;
        } else {
          result["session"] = value["session"];
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        errorMap[`$.expiresAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = undefined;
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["refreshToken"]))
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["refreshToken"].length === 32) {
          result["refreshToken"] = `${value["refreshToken"].slice(
            0,
            8,
          )}-${value["refreshToken"].slice(8, 12)}-${value[
            "refreshToken"
          ].slice(12, 16)}-${value["refreshToken"].slice(16, 20)}-${value[
            "refreshToken"
          ].slice(20)}`;
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = undefined;
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenInsert|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenInsertValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenInsertValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["insert", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { insert: undefined, returning: undefined };

      if (value["insert"] === null || value["insert"] === undefined) {
        errorMap[`$.insert`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap2 = {};
        /** @type {Array<any>} */
        const intermediateResult2 = [];
        /** @type {any | Array<any>} */
        let intermediateValue2 = value["insert"];

        if (!Array.isArray(intermediateValue2)) {
          intermediateValue2 = [intermediateValue2];
        }
        if (intermediateValue2.length < 1) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            minLength: 1,
            foundLength: intermediateValue2.length,
          };
        }
        if (intermediateValue2.length > 50000) {
          errorMap[`$.insert`] = {
            key: "validator.length",
            maxLength: 50000,
            foundLength: intermediateValue2.length,
          };
        }
        result["insert"] = [];
        for (let i2 = 0; i2 < intermediateValue2.length; ++i2) {
          if (
            intermediateValue2[i2] === null ||
            intermediateValue2[i2] === undefined
          ) {
            intermediateErrorMap2[`$.${i2}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult2 =
              validateStoreSessionStoreTokenInsertPartialValidated(
                intermediateValue2[i2],
              );

            if (refResult2.error) {
              for (const errorKey of Object.keys(refResult2.error)) {
                intermediateErrorMap2[`$.${i2}${errorKey.substring(1)}`] =
                  refResult2.error[errorKey];
              }
            }
            intermediateResult2[i2] = refResult2.value;
          }
        }
        if (Object.keys(intermediateErrorMap2).length) {
          for (const errorKey of Object.keys(intermediateErrorMap2)) {
            errorMap[`$.insert${errorKey.substring(1)}`] =
              intermediateErrorMap2[errorKey];
          }
        } else {
          result["insert"] = intermediateResult2;
        }
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult2 = validateStoreSessionStoreTokenReturning(
          value["returning"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["returning"] = refResult2.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenInsertPartial|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenInsertPartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenInsertPartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "session",
        "expiresAt",
        "refreshToken",
        "revokedAt",
        "createdAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        session: undefined,
        expiresAt: undefined,
        refreshToken: undefined,
        revokedAt: undefined,
        createdAt: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        result["id"] = undefined;
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["session"] === null || value["session"] === undefined) {
        errorMap[`$.session`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["session"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["session"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["session"]))
        ) {
          errorMap[`$.session`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["session"].length === 32) {
          result["session"] = `${value["session"].slice(0, 8)}-${value[
            "session"
          ].slice(8, 12)}-${value["session"].slice(12, 16)}-${value[
            "session"
          ].slice(16, 20)}-${value["session"].slice(20)}`;
        } else {
          result["session"] = value["session"];
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        errorMap[`$.expiresAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["expiresAt"] === "string" ||
          typeof value["expiresAt"] === "number"
        ) {
          result["expiresAt"] = new Date(value["expiresAt"]);
        } else if (
          Object.prototype.toString.call(value["expiresAt"]) === "[object Date]"
        ) {
          result["expiresAt"] = value["expiresAt"];
        } else {
          errorMap[`$.expiresAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["expiresAt"]?.getTime() ?? undefined)) {
          errorMap[`$.expiresAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = value["refreshToken"];
      } else {
        if (
          typeof value["refreshToken"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["refreshToken"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["refreshToken"]))
        ) {
          errorMap[`$.refreshToken`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["refreshToken"].length === 32) {
          result["refreshToken"] = `${value["refreshToken"].slice(
            0,
            8,
          )}-${value["refreshToken"].slice(8, 12)}-${value[
            "refreshToken"
          ].slice(12, 16)}-${value["refreshToken"].slice(16, 20)}-${value[
            "refreshToken"
          ].slice(20)}`;
        } else {
          result["refreshToken"] = value["refreshToken"];
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = value["revokedAt"];
      } else {
        if (
          typeof value["revokedAt"] === "string" ||
          typeof value["revokedAt"] === "number"
        ) {
          result["revokedAt"] = new Date(value["revokedAt"]);
        } else if (
          Object.prototype.toString.call(value["revokedAt"]) === "[object Date]"
        ) {
          result["revokedAt"] = value["revokedAt"];
        } else {
          errorMap[`$.revokedAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["revokedAt"]?.getTime() ?? undefined)) {
          errorMap[`$.revokedAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        errorMap[`$.createdAt`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["createdAt"] === "string" ||
          typeof value["createdAt"] === "number"
        ) {
          result["createdAt"] = new Date(value["createdAt"]);
        } else if (
          Object.prototype.toString.call(value["createdAt"]) === "[object Date]"
        ) {
          result["createdAt"] = value["createdAt"];
        } else {
          errorMap[`$.createdAt`] = {
            key: "validator.type",
            expectedType: "Date|string",
          };
        }
        if (isNaN(result["createdAt"]?.getTime() ?? undefined)) {
          errorMap[`$.createdAt`] = {
            key: "validator.date.invalid",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenUpdate|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenUpdateValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenUpdateValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set(["update", "where", "returning"]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = { update: undefined, where: undefined, returning: undefined };

      if (value["update"] === null || value["update"] === undefined) {
        errorMap[`$.update`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult1 = validateStoreSessionStoreTokenUpdatePartialValidated(
          value["update"],
        );

        if (refResult1.error) {
          for (const errorKey of Object.keys(refResult1.error)) {
            errorMap[`$.update${errorKey.substring(1)}`] =
              refResult1.error[errorKey];
          }
        }
        result["update"] = refResult1.value;
      }
      if (value["where"] === null || value["where"] === undefined) {
        errorMap[`$.where`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 = validateStoreSessionStoreTokenWhereValidated(
          value["where"],
        );

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.where${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["where"] = refResult2.value;
      }
      if (value["returning"] === null || value["returning"] === undefined) {
        result["returning"] = undefined;
      } else {
        const refResult3 = validateStoreSessionStoreTokenReturning(
          value["returning"],
        );

        if (refResult3.error) {
          for (const errorKey of Object.keys(refResult3.error)) {
            errorMap[`$.returning${errorKey.substring(1)}`] =
              refResult3.error[errorKey];
          }
        }
        result["returning"] = refResult3.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreSessionStoreTokenUpdatePartial|any} value
 * @returns {Either<import("../common/types.js").StoreSessionStoreTokenUpdatePartialValidated, ValidatorErrorMap>}
 */
export function validateStoreSessionStoreTokenUpdatePartialValidated(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "session",
        "expiresAt",
        "refreshToken",
        "revokedAt",
        "createdAt",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        session: undefined,
        expiresAt: undefined,
        refreshToken: undefined,
        revokedAt: undefined,
        createdAt: undefined,
      };

      if (value["session"] === null || value["session"] === undefined) {
        result["session"] = undefined;
      } else {
        let hasAnyOfMatch1 = false;
        errorMap[`$.session`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch1) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap3 = {};
          /** @type {any} */
          let intermediateResult3 = undefined;
          /** @type {any} */
          const intermediateValue3 = value["session"];

          if (intermediateValue3 === null || intermediateValue3 === undefined) {
            intermediateResult3 = undefined;
          } else {
            if (
              typeof intermediateValue3 !== "string" ||
              (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                intermediateValue3,
              ) &&
                !/^[a-f0-9]{32}$/gi.test(intermediateValue3))
            ) {
              intermediateErrorMap3[`$`] = {
                key: "validator.pattern",
                patternExplanation: "UUID",
              };
            } else if (intermediateValue3.length === 32) {
              intermediateResult3 = `${intermediateValue3.slice(
                0,
                8,
              )}-${intermediateValue3.slice(8, 12)}-${intermediateValue3.slice(
                12,
                16,
              )}-${intermediateValue3.slice(16, 20)}-${intermediateValue3.slice(
                20,
              )}`;
            } else {
              intermediateResult3 = intermediateValue3;
            }
          }
          if (Object.keys(intermediateErrorMap3).length > 0) {
            errorMap[`$.session`].errors.push(intermediateErrorMap3);
          } else {
            hasAnyOfMatch1 = true;
            delete errorMap[`$.session`];
            result["session"] = intermediateResult3;
          }
        }
      }
      if (value["expiresAt"] === null || value["expiresAt"] === undefined) {
        result["expiresAt"] = undefined;
      } else {
        let hasAnyOfMatch2 = false;
        errorMap[`$.expiresAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["expiresAt"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $subtract: undefined };

              if (
                intermediateValue4["$subtract"] === null ||
                intermediateValue4["$subtract"] === undefined
              ) {
                intermediateErrorMap4[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString5 = intermediateValue4["$subtract"];
                if (typeof convertedString5 !== "string") {
                  intermediateErrorMap4[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString5.length < 1) {
                    intermediateErrorMap4[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult4["$subtract"] = convertedString5;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.expiresAt`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.expiresAt`];
            result["expiresAt"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["expiresAt"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue4)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.object",
                value: intermediateValue4,
                foundType: typeof intermediateValue4,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue4)) {
                if (
                  !knownKeys4.has(key) &&
                  intermediateValue4[key] !== null &&
                  intermediateValue4[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(intermediateValue4);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  intermediateErrorMap4[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult4 = { $add: undefined };

              if (
                intermediateValue4["$add"] === null ||
                intermediateValue4["$add"] === undefined
              ) {
                intermediateErrorMap4[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString5 = intermediateValue4["$add"];
                if (typeof convertedString5 !== "string") {
                  intermediateErrorMap4[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString5.length < 1) {
                    intermediateErrorMap4[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult4["$add"] = convertedString5;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.expiresAt`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.expiresAt`];
            result["expiresAt"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["expiresAt"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateResult4 = undefined;
          } else {
            if (
              typeof intermediateValue4 === "string" ||
              typeof intermediateValue4 === "number"
            ) {
              intermediateResult4 = new Date(intermediateValue4);
            } else if (
              Object.prototype.toString.call(intermediateValue4) ===
              "[object Date]"
            ) {
              intermediateResult4 = intermediateValue4;
            } else {
              intermediateErrorMap4[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult4?.getTime() ?? undefined)) {
              intermediateErrorMap4[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.expiresAt`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.expiresAt`];
            result["expiresAt"] = intermediateResult4;
          }
        }
      }
      if (
        value["refreshToken"] === null ||
        value["refreshToken"] === undefined
      ) {
        result["refreshToken"] = value["refreshToken"];
      } else {
        let hasAnyOfMatch3 = false;
        errorMap[`$.refreshToken`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["refreshToken"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateResult5 = intermediateValue5;
          } else {
            if (
              typeof intermediateValue5 !== "string" ||
              (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
                intermediateValue5,
              ) &&
                !/^[a-f0-9]{32}$/gi.test(intermediateValue5))
            ) {
              intermediateErrorMap5[`$`] = {
                key: "validator.pattern",
                patternExplanation: "UUID",
              };
            } else if (intermediateValue5.length === 32) {
              intermediateResult5 = `${intermediateValue5.slice(
                0,
                8,
              )}-${intermediateValue5.slice(8, 12)}-${intermediateValue5.slice(
                12,
                16,
              )}-${intermediateValue5.slice(16, 20)}-${intermediateValue5.slice(
                20,
              )}`;
            } else {
              intermediateResult5 = intermediateValue5;
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.refreshToken`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.refreshToken`];
            result["refreshToken"] = intermediateResult5;
          }
        }
      }
      if (value["revokedAt"] === null || value["revokedAt"] === undefined) {
        result["revokedAt"] = value["revokedAt"];
      } else {
        let hasAnyOfMatch4 = false;
        errorMap[`$.revokedAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["revokedAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $subtract: undefined };

              if (
                intermediateValue6["$subtract"] === null ||
                intermediateValue6["$subtract"] === undefined
              ) {
                intermediateErrorMap6[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString7 = intermediateValue6["$subtract"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$subtract"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["revokedAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateErrorMap6[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue6)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.object",
                value: intermediateValue6,
                foundType: typeof intermediateValue6,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys6 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue6)) {
                if (
                  !knownKeys6.has(key) &&
                  intermediateValue6[key] !== null &&
                  intermediateValue6[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys6];
                  const foundKeys = Object.keys(intermediateValue6);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys6.has(it),
                  );
                  intermediateErrorMap6[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult6 = { $add: undefined };

              if (
                intermediateValue6["$add"] === null ||
                intermediateValue6["$add"] === undefined
              ) {
                intermediateErrorMap6[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString7 = intermediateValue6["$add"];
                if (typeof convertedString7 !== "string") {
                  intermediateErrorMap6[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString7.length < 1) {
                    intermediateErrorMap6[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult6["$add"] = convertedString7;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult6;
          }
        }
        if (!hasAnyOfMatch4) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap6 = {};
          /** @type {any} */
          let intermediateResult6 = undefined;
          /** @type {any} */
          const intermediateValue6 = value["revokedAt"];

          if (intermediateValue6 === null || intermediateValue6 === undefined) {
            intermediateResult6 = intermediateValue6;
          } else {
            if (
              typeof intermediateValue6 === "string" ||
              typeof intermediateValue6 === "number"
            ) {
              intermediateResult6 = new Date(intermediateValue6);
            } else if (
              Object.prototype.toString.call(intermediateValue6) ===
              "[object Date]"
            ) {
              intermediateResult6 = intermediateValue6;
            } else {
              intermediateErrorMap6[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult6?.getTime() ?? undefined)) {
              intermediateErrorMap6[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap6).length > 0) {
            errorMap[`$.revokedAt`].errors.push(intermediateErrorMap6);
          } else {
            hasAnyOfMatch4 = true;
            delete errorMap[`$.revokedAt`];
            result["revokedAt"] = intermediateResult6;
          }
        }
      }
      if (value["createdAt"] === null || value["createdAt"] === undefined) {
        result["createdAt"] = undefined;
      } else {
        let hasAnyOfMatch5 = false;
        errorMap[`$.createdAt`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["createdAt"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$subtract"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $subtract: undefined };

              if (
                intermediateValue7["$subtract"] === null ||
                intermediateValue7["$subtract"] === undefined
              ) {
                intermediateErrorMap7[`$.$subtract`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString8 = intermediateValue7["$subtract"];
                if (typeof convertedString8 !== "string") {
                  intermediateErrorMap7[`$.$subtract`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString8.length < 1) {
                    intermediateErrorMap7[`$.$subtract`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult7["$subtract"] = convertedString8;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["createdAt"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateErrorMap7[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (!isRecord(intermediateValue7)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.object",
                value: intermediateValue7,
                foundType: typeof intermediateValue7,
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys7 = new Set(["$add"]);
              for (const key of Object.keys(intermediateValue7)) {
                if (
                  !knownKeys7.has(key) &&
                  intermediateValue7[key] !== null &&
                  intermediateValue7[key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys7];
                  const foundKeys = Object.keys(intermediateValue7);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys7.has(it),
                  );
                  intermediateErrorMap7[`$`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              intermediateResult7 = { $add: undefined };

              if (
                intermediateValue7["$add"] === null ||
                intermediateValue7["$add"] === undefined
              ) {
                intermediateErrorMap7[`$.$add`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                const convertedString8 = intermediateValue7["$add"];
                if (typeof convertedString8 !== "string") {
                  intermediateErrorMap7[`$.$add`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString8.length < 1) {
                    intermediateErrorMap7[`$.$add`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult7["$add"] = convertedString8;
                  }
                }
              }
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult7;
          }
        }
        if (!hasAnyOfMatch5) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap7 = {};
          /** @type {any} */
          let intermediateResult7 = undefined;
          /** @type {any} */
          const intermediateValue7 = value["createdAt"];

          if (intermediateValue7 === null || intermediateValue7 === undefined) {
            intermediateResult7 = undefined;
          } else {
            if (
              typeof intermediateValue7 === "string" ||
              typeof intermediateValue7 === "number"
            ) {
              intermediateResult7 = new Date(intermediateValue7);
            } else if (
              Object.prototype.toString.call(intermediateValue7) ===
              "[object Date]"
            ) {
              intermediateResult7 = intermediateValue7;
            } else {
              intermediateErrorMap7[`$`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(intermediateResult7?.getTime() ?? undefined)) {
              intermediateErrorMap7[`$`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (Object.keys(intermediateErrorMap7).length > 0) {
            errorMap[`$.createdAt`].errors.push(intermediateErrorMap7);
          } else {
            hasAnyOfMatch5 = true;
            delete errorMap[`$.createdAt`];
            result["createdAt"] = intermediateResult7;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").StoreFileResponseInput|any} value
 * @returns {Either<import("../common/types.js").StoreFileResponse, ValidatorErrorMap>}
 */
export function validateStoreFileResponse(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      /** @type {Set<string>} */
      const knownKeys0 = new Set([
        "id",
        "name",
        "contentType",
        "originalWidth",
        "originalHeight",
        "url",
        "placeholderImage",
        "altText",
      ]);
      for (const key of Object.keys(value)) {
        if (
          !knownKeys0.has(key) &&
          value[key] !== null &&
          value[key] !== undefined
        ) {
          const expectedKeys = [...knownKeys0];
          const foundKeys = Object.keys(value);
          const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
          errorMap[`$`] = {
            key: "validator.keys",
            unknownKeys,
            expectedKeys,
            foundKeys,
          };
          break;
        }
      }
      result = {
        id: undefined,
        name: undefined,
        contentType: undefined,
        originalWidth: undefined,
        originalHeight: undefined,
        url: undefined,
        placeholderImage: undefined,
        altText: undefined,
      };

      if (value["id"] === null || value["id"] === undefined) {
        errorMap[`$.id`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["id"] !== "string" ||
          (!/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/gi.test(
            value["id"],
          ) &&
            !/^[a-f0-9]{32}$/gi.test(value["id"]))
        ) {
          errorMap[`$.id`] = {
            key: "validator.pattern",
            patternExplanation: "UUID",
          };
        } else if (value["id"].length === 32) {
          result["id"] = `${value["id"].slice(0, 8)}-${value["id"].slice(
            8,
            12,
          )}-${value["id"].slice(12, 16)}-${value["id"].slice(16, 20)}-${value[
            "id"
          ].slice(20)}`;
        } else {
          result["id"] = value["id"];
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        errorMap[`$.name`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString2 = value["name"];
        if (typeof convertedString2 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString2.length < 1) {
            errorMap[`$.name`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["name"] = convertedString2;
          }
        }
      }
      if (value["contentType"] === null || value["contentType"] === undefined) {
        errorMap[`$.contentType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString3 = value["contentType"];
        if (typeof convertedString3 !== "string") {
          errorMap[`$.contentType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString3.length < 1) {
            errorMap[`$.contentType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["contentType"] = convertedString3;
          }
        }
      }
      if (
        value["originalWidth"] === null ||
        value["originalWidth"] === undefined
      ) {
        result["originalWidth"] = undefined;
      } else {
        let convertedNumber4 = value["originalWidth"];
        if (
          typeof convertedNumber4 !== "number" &&
          typeof convertedNumber4 === "string"
        ) {
          convertedNumber4 = Number(convertedNumber4);
        }
        if (
          typeof convertedNumber4 !== "number" ||
          isNaN(convertedNumber4) ||
          !isFinite(convertedNumber4) ||
          !Number.isInteger(convertedNumber4)
        ) {
          errorMap[`$.originalWidth`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber4 < -2147483647) {
          errorMap[`$.originalWidth`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber4 > 2147483647) {
          errorMap[`$.originalWidth`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["originalWidth"] = convertedNumber4;
        }
      }
      if (
        value["originalHeight"] === null ||
        value["originalHeight"] === undefined
      ) {
        result["originalHeight"] = undefined;
      } else {
        let convertedNumber5 = value["originalHeight"];
        if (
          typeof convertedNumber5 !== "number" &&
          typeof convertedNumber5 === "string"
        ) {
          convertedNumber5 = Number(convertedNumber5);
        }
        if (
          typeof convertedNumber5 !== "number" ||
          isNaN(convertedNumber5) ||
          !isFinite(convertedNumber5) ||
          !Number.isInteger(convertedNumber5)
        ) {
          errorMap[`$.originalHeight`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber5 < -2147483647) {
          errorMap[`$.originalHeight`] = {
            key: "validator.range",
            minValue: -2147483647,
          };
        } else if (convertedNumber5 > 2147483647) {
          errorMap[`$.originalHeight`] = {
            key: "validator.range",
            maxValue: 2147483647,
          };
        } else {
          result["originalHeight"] = convertedNumber5;
        }
      }
      if (value["url"] === null || value["url"] === undefined) {
        errorMap[`$.url`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString6 = value["url"];
        if (typeof convertedString6 !== "string") {
          errorMap[`$.url`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString6.length < 1) {
            errorMap[`$.url`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["url"] = convertedString6;
          }
        }
      }
      if (
        value["placeholderImage"] === null ||
        value["placeholderImage"] === undefined
      ) {
        result["placeholderImage"] = undefined;
      } else {
        /** @type {string} */
        const convertedString7 = value["placeholderImage"];
        if (typeof convertedString7 !== "string") {
          errorMap[`$.placeholderImage`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString7.length === 0) {
            result["placeholderImage"] = undefined;
          } else {
            if (convertedString7.length < 1) {
              errorMap[`$.placeholderImage`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["placeholderImage"] = convertedString7;
            }
          }
        }
      }
      if (value["altText"] === null || value["altText"] === undefined) {
        result["altText"] = undefined;
      } else {
        /** @type {string} */
        const convertedString8 = value["altText"];
        if (typeof convertedString8 !== "string") {
          errorMap[`$.altText`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString8.length === 0) {
            result["altText"] = undefined;
          } else {
            if (convertedString8.length < 1) {
              errorMap[`$.altText`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["altText"] = convertedString8;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Set as '.query(T.reference("store", "imageTransformOptions"))' of routes that use
 * 'sendTransformedImage'.
 *
 * @param {import("../common/types.js").StoreImageTransformOptionsInput|any} value
 * @returns {Either<import("../common/types.js").StoreImageTransformOptions, ValidatorErrorMap>}
 */
export function validateStoreImageTransformOptions(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = { q: undefined, w: undefined };

      if (value["q"] === null || value["q"] === undefined) {
        result["q"] = 75;
      } else {
        let convertedNumber1 = value["q"];
        if (
          typeof convertedNumber1 !== "number" &&
          typeof convertedNumber1 === "string"
        ) {
          convertedNumber1 = Number(convertedNumber1);
        }
        if (
          typeof convertedNumber1 !== "number" ||
          isNaN(convertedNumber1) ||
          !isFinite(convertedNumber1) ||
          !Number.isInteger(convertedNumber1)
        ) {
          errorMap[`$.q`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber1 < 1) {
          errorMap[`$.q`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else if (convertedNumber1 > 100) {
          errorMap[`$.q`] = {
            key: "validator.range",
            maxValue: 100,
          };
        } else {
          result["q"] = convertedNumber1;
        }
      }
      if (value["w"] === null || value["w"] === undefined) {
        errorMap[`$.w`] = {
          key: "validator.undefined",
        };
      } else {
        let hasAnyOfMatch2 = false;
        errorMap[`$.w`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["w"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber4 = intermediateValue4;
            if (
              typeof convertedNumber4 !== "number" &&
              typeof convertedNumber4 === "string"
            ) {
              convertedNumber4 = Number(convertedNumber4);
            }
            if (
              typeof convertedNumber4 !== "number" ||
              isNaN(convertedNumber4) ||
              !isFinite(convertedNumber4) ||
              !Number.isInteger(convertedNumber4)
            ) {
              intermediateErrorMap4[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber4 < 1) {
              intermediateErrorMap4[`$`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else if (convertedNumber4 > 99999) {
              intermediateErrorMap4[`$`] = {
                key: "validator.range",
                maxValue: 99999,
              };
            } else {
              intermediateResult4 = convertedNumber4;
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.w`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.w`];
            result["w"] = intermediateResult4;
          }
        }
        if (!hasAnyOfMatch2) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap4 = {};
          /** @type {any} */
          let intermediateResult4 = undefined;
          /** @type {any} */
          const intermediateValue4 = value["w"];

          if (intermediateValue4 === null || intermediateValue4 === undefined) {
            intermediateErrorMap4[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            const convertedString4 = intermediateValue4;
            if (typeof convertedString4 !== "string") {
              intermediateErrorMap4[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString4.length < 1) {
                intermediateErrorMap4[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (convertedString4 !== "original") {
                intermediateErrorMap4[`$`] = {
                  key: "validator.oneOf",
                  allowedValues: ["original"],
                  foundValue: convertedString4,
                };
              } else {
                intermediateResult4 = convertedString4;
              }
            }
          }
          if (Object.keys(intermediateErrorMap4).length > 0) {
            errorMap[`$.w`].errors.push(intermediateErrorMap4);
          } else {
            hasAnyOfMatch2 = true;
            delete errorMap[`$.w`];
            result["w"] = intermediateResult4;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * Set as '.query(T.reference("store", "secureImageTransformOptions"))' of routes that use
 * 'sendTransformedImage' and 'fileVerifyAccessToken'.
 *
 * @param {import("../common/types.js").StoreSecureImageTransformOptionsInput|any} value
 * @returns {Either<import("../common/types.js").StoreSecureImageTransformOptions, ValidatorErrorMap>}
 */
export function validateStoreSecureImageTransformOptions(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (!isRecord(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = { accessToken: undefined, q: undefined, w: undefined };

      if (value["accessToken"] === null || value["accessToken"] === undefined) {
        errorMap[`$.accessToken`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        const convertedString1 = value["accessToken"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.accessToken`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length < 1) {
            errorMap[`$.accessToken`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["accessToken"] = convertedString1;
          }
        }
      }
      if (value["q"] === null || value["q"] === undefined) {
        result["q"] = 75;
      } else {
        let convertedNumber2 = value["q"];
        if (
          typeof convertedNumber2 !== "number" &&
          typeof convertedNumber2 === "string"
        ) {
          convertedNumber2 = Number(convertedNumber2);
        }
        if (
          typeof convertedNumber2 !== "number" ||
          isNaN(convertedNumber2) ||
          !isFinite(convertedNumber2) ||
          !Number.isInteger(convertedNumber2)
        ) {
          errorMap[`$.q`] = {
            key: "validator.number",
            subType: "int",
          };
        } else if (convertedNumber2 < 1) {
          errorMap[`$.q`] = {
            key: "validator.range",
            minValue: 1,
          };
        } else if (convertedNumber2 > 100) {
          errorMap[`$.q`] = {
            key: "validator.range",
            maxValue: 100,
          };
        } else {
          result["q"] = convertedNumber2;
        }
      }
      if (value["w"] === null || value["w"] === undefined) {
        errorMap[`$.w`] = {
          key: "validator.undefined",
        };
      } else {
        let hasAnyOfMatch3 = false;
        errorMap[`$.w`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["w"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber5 = intermediateValue5;
            if (
              typeof convertedNumber5 !== "number" &&
              typeof convertedNumber5 === "string"
            ) {
              convertedNumber5 = Number(convertedNumber5);
            }
            if (
              typeof convertedNumber5 !== "number" ||
              isNaN(convertedNumber5) ||
              !isFinite(convertedNumber5) ||
              !Number.isInteger(convertedNumber5)
            ) {
              intermediateErrorMap5[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber5 < 1) {
              intermediateErrorMap5[`$`] = {
                key: "validator.range",
                minValue: 1,
              };
            } else if (convertedNumber5 > 99999) {
              intermediateErrorMap5[`$`] = {
                key: "validator.range",
                maxValue: 99999,
              };
            } else {
              intermediateResult5 = convertedNumber5;
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.w`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.w`];
            result["w"] = intermediateResult5;
          }
        }
        if (!hasAnyOfMatch3) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap5 = {};
          /** @type {any} */
          let intermediateResult5 = undefined;
          /** @type {any} */
          const intermediateValue5 = value["w"];

          if (intermediateValue5 === null || intermediateValue5 === undefined) {
            intermediateErrorMap5[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            const convertedString5 = intermediateValue5;
            if (typeof convertedString5 !== "string") {
              intermediateErrorMap5[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString5.length < 1) {
                intermediateErrorMap5[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else if (convertedString5 !== "original") {
                intermediateErrorMap5[`$`] = {
                  key: "validator.oneOf",
                  allowedValues: ["original"],
                  foundValue: convertedString5,
                };
              } else {
                intermediateResult5 = convertedString5;
              }
            }
          }
          if (Object.keys(intermediateErrorMap5).length > 0) {
            errorMap[`$.w`].errors.push(intermediateErrorMap5);
          } else {
            hasAnyOfMatch3 = true;
            delete errorMap[`$.w`];
            result["w"] = intermediateResult5;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}
