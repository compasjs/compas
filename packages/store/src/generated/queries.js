// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

import { uuid } from "@lbu/stdlib";

export const storeQueries = {
  /**
   * @param {Postgres} sql
   * @param { StoreFileStoreWhere} [where]
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreSelect: (sql, where) => sql`
SELECT
fs."id", fs."bucketName", fs."contentLength", fs."contentType", fs."filename", fs."createdAt", fs."updatedAt"
FROM "fileStore" fs
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR fs."id" = ${
    where?.id ?? null
  }) AND (COALESCE(${
    where?.idIn ?? null
  }, NULL) IS NULL OR fs."id" = ANY (${sql.array(
    where?.idIn ?? [],
  )}::uuid[])) AND (COALESCE(${
    where?.bucketName ?? null
  }, NULL) IS NULL OR fs."bucketName" = ${
    where?.bucketName ?? null
  }) AND (COALESCE(${
    where?.bucketNameLike ?? null
  }, NULL) IS NULL OR fs."bucketName" LIKE ${`%${where?.bucketNameLike}%`}) AND (COALESCE(${
    where?.createdAt ?? null
  }, NULL) IS NULL OR fs."createdAt" = ${
    where?.createdAt ?? null
  }) AND (COALESCE(${
    where?.createdAtGreaterThan ?? null
  }, NULL) IS NULL OR fs."createdAt" > ${
    where?.createdAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.createdAtLowerThan ?? null
  }, NULL) IS NULL OR fs."createdAt" < ${
    where?.createdAtLowerThan ?? null
  }) AND (COALESCE(${
    where?.updatedAt ?? null
  }, NULL) IS NULL OR fs."updatedAt" = ${
    where?.updatedAt ?? null
  }) AND (COALESCE(${
    where?.updatedAtGreaterThan ?? null
  }, NULL) IS NULL OR fs."updatedAt" > ${
    where?.updatedAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.updatedAtLowerThan ?? null
  }, NULL) IS NULL OR fs."updatedAt" < ${where?.updatedAtLowerThan ?? null})
ORDER BY fs."createdAt", fs."updatedAt" , fs."id"
`,

  /**
   * @param {Postgres} sql
   * @param { StoreFileStoreWhere} [where]
   * @returns {Promise<number>}
   */
  fileStoreCount: async (sql, where) => {
    const result = await sql`
SELECT count(*) AS "genCount" FROM "fileStore" fs 
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR fs."id" = ${
      where?.id ?? null
    }) AND (COALESCE(${
      where?.idIn ?? null
    }, NULL) IS NULL OR fs."id" = ANY (${sql.array(
      where?.idIn ?? [],
    )}::uuid[])) AND (COALESCE(${
      where?.bucketName ?? null
    }, NULL) IS NULL OR fs."bucketName" = ${
      where?.bucketName ?? null
    }) AND (COALESCE(${
      where?.bucketNameLike ?? null
    }, NULL) IS NULL OR fs."bucketName" LIKE ${`%${where?.bucketNameLike}%`}) AND (COALESCE(${
      where?.createdAt ?? null
    }, NULL) IS NULL OR fs."createdAt" = ${
      where?.createdAt ?? null
    }) AND (COALESCE(${
      where?.createdAtGreaterThan ?? null
    }, NULL) IS NULL OR fs."createdAt" > ${
      where?.createdAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.createdAtLowerThan ?? null
    }, NULL) IS NULL OR fs."createdAt" < ${
      where?.createdAtLowerThan ?? null
    }) AND (COALESCE(${
      where?.updatedAt ?? null
    }, NULL) IS NULL OR fs."updatedAt" = ${
      where?.updatedAt ?? null
    }) AND (COALESCE(${
      where?.updatedAtGreaterThan ?? null
    }, NULL) IS NULL OR fs."updatedAt" > ${
      where?.updatedAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.updatedAtLowerThan ?? null
    }, NULL) IS NULL OR fs."updatedAt" < ${where?.updatedAtLowerThan ?? null})
`;
    return parseInt(result?.[0]?.genCount ?? "0");
  },

  /**
   * @param {Postgres} sql
   * @param { StoreFileStoreWhere} [where]
   * @returns {Promise<[]>}
   */
  fileStoreDelete: (sql, where) => sql`
DELETE FROM "fileStore" fs
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR fs."id" = ${
    where?.id ?? null
  }) AND (COALESCE(${
    where?.idIn ?? null
  }, NULL) IS NULL OR fs."id" = ANY (${sql.array(
    where?.idIn ?? [],
  )}::uuid[])) AND (COALESCE(${
    where?.bucketName ?? null
  }, NULL) IS NULL OR fs."bucketName" = ${
    where?.bucketName ?? null
  }) AND (COALESCE(${
    where?.bucketNameLike ?? null
  }, NULL) IS NULL OR fs."bucketName" LIKE ${`%${where?.bucketNameLike}%`}) AND (COALESCE(${
    where?.createdAt ?? null
  }, NULL) IS NULL OR fs."createdAt" = ${
    where?.createdAt ?? null
  }) AND (COALESCE(${
    where?.createdAtGreaterThan ?? null
  }, NULL) IS NULL OR fs."createdAt" > ${
    where?.createdAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.createdAtLowerThan ?? null
  }, NULL) IS NULL OR fs."createdAt" < ${
    where?.createdAtLowerThan ?? null
  }) AND (COALESCE(${
    where?.updatedAt ?? null
  }, NULL) IS NULL OR fs."updatedAt" = ${
    where?.updatedAt ?? null
  }) AND (COALESCE(${
    where?.updatedAtGreaterThan ?? null
  }, NULL) IS NULL OR fs."updatedAt" > ${
    where?.updatedAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.updatedAtLowerThan ?? null
  }, NULL) IS NULL OR fs."updatedAt" < ${where?.updatedAtLowerThan ?? null})
`,

  /**
   * @param {Postgres} sql
   * @param { StoreFileStoreInsertPartial_Input|StoreFileStoreInsertPartial_Input[]} insert
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreInsert: (sql, insert) => {
    const data = Array.isArray(insert) ? insert : [insert];
    if (data.length === 0) {
      return [];
    }
    let query = `INSERT INTO "fileStore" ("bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt") VALUES `;
    const argList = [];
    let idx = 1;
    for (const it of data) {
      argList.push(
        it.bucketName ?? null,
        it.contentLength ?? null,
        it.contentType ?? null,
        it.filename ?? null,
        it.createdAt ?? new Date(),
        it.updatedAt ?? new Date(),
      );
      query += `($${idx++}, $${idx++}, $${idx++}, $${idx++}, $${idx++}, $${idx++}),`;
    }
    // Remove trailing comma
    query = query.substring(0, query.length - 1);
    query += ` RETURNING "id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"`;
    return sql.unsafe(query, argList);
  },

  /**
   * @param {Postgres} sql
   * @param { StoreFileStoreInsertPartial_Input} value
   * @param { StoreFileStoreWhere} [where]
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreUpdate: (sql, value, where) => {
    let query = `UPDATE "fileStore" fs SET `;
    const argList = [];
    let idx = 1;
    if (value["bucketName"] !== undefined) {
      query += `"bucketName" = $${idx++}, `;
      argList.push(value["bucketName"]);
    }
    if (value["contentLength"] !== undefined) {
      query += `"contentLength" = $${idx++}, `;
      argList.push(value["contentLength"]);
    }
    if (value["contentType"] !== undefined) {
      query += `"contentType" = $${idx++}, `;
      argList.push(value["contentType"]);
    }
    if (value["filename"] !== undefined) {
      query += `"filename" = $${idx++}, `;
      argList.push(value["filename"]);
    }
    if (value["createdAt"] !== undefined) {
      query += `"createdAt" = $${idx++}, `;
      argList.push(value["createdAt"]);
    }
    query += `"updatedAt" = $${idx++}, `;
    argList.push(new Date());
    query = query.substring(0, query.length - 2);
    query += ` WHERE `;
    if (where.id !== undefined) {
      query += `fs."id" `;
      query += `= $${idx++}`;
      argList.push(where.id);
      query += " AND ";
    }
    if (where.idIn !== undefined) {
      query += `fs."id" `;
      query += `= ANY (ARRAY[`;
      let addOne = false;
      for (const value of where.idIn || []) {
        addOne = true;
        query += `$${idx++},`;
        argList.push(value);
      }
      query = `${query.substring(
        0,
        query.length - (addOne ? 1 : 0),
      )}]::uuid[])`;
      query += " AND ";
    }
    if (where.bucketName !== undefined) {
      query += `fs."bucketName" `;
      query += `= $${idx++}`;
      argList.push(where.bucketName);
      query += " AND ";
    }
    if (where.bucketNameLike !== undefined) {
      query += `fs."bucketName" `;
      query += `LIKE $${idx++}`;
      argList.push(`%${where.bucketNameLike}%`);
      query += " AND ";
    }
    if (where.createdAt !== undefined) {
      query += `fs."createdAt" `;
      query += `= $${idx++}`;
      argList.push(where.createdAt);
      query += " AND ";
    }
    if (where.createdAtGreaterThan !== undefined) {
      query += `fs."createdAt" `;
      query += `> $${idx++}`;
      argList.push(where.createdAtGreaterThan);
      query += " AND ";
    }
    if (where.createdAtLowerThan !== undefined) {
      query += `fs."createdAt" `;
      query += `< $${idx++}`;
      argList.push(where.createdAtLowerThan);
      query += " AND ";
    }
    if (where.updatedAt !== undefined) {
      query += `fs."updatedAt" `;
      query += `= $${idx++}`;
      argList.push(where.updatedAt);
      query += " AND ";
    }
    if (where.updatedAtGreaterThan !== undefined) {
      query += `fs."updatedAt" `;
      query += `> $${idx++}`;
      argList.push(where.updatedAtGreaterThan);
      query += " AND ";
    }
    if (where.updatedAtLowerThan !== undefined) {
      query += `fs."updatedAt" `;
      query += `< $${idx++}`;
      argList.push(where.updatedAtLowerThan);
      query += " AND ";
    }
    query = query.substring(0, query.length - 4);
    query += ` RETURNING fs."id", fs."bucketName", fs."contentLength", fs."contentType", fs."filename", fs."createdAt", fs."updatedAt"`;
    return sql.unsafe(query, argList);
  },

  /**
   * Note: Use only when id has a unique constraint
   * @param {Postgres} sql
   * @param { StoreFileStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreUpsert: (sql, it) => {
    return sql`
INSERT INTO "fileStore" ("id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.bucketName ?? null}, ${it.contentLength ?? null}, ${
      it.contentType ?? null
    }, ${it.filename ?? null}, ${it.createdAt ?? new Date()}, ${
      it.updatedAt ?? new Date()
    }
) ON CONFLICT("id") DO UPDATE SET
"bucketName" = EXCLUDED."bucketName", "contentLength" = EXCLUDED."contentLength", "contentType" = EXCLUDED."contentType", "filename" = EXCLUDED."filename", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when bucketName has a unique constraint
   * @param {Postgres} sql
   * @param { StoreFileStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreUpsertByBucketName: (sql, it) => {
    return sql`
INSERT INTO "fileStore" ("id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.bucketName ?? null}, ${it.contentLength ?? null}, ${
      it.contentType ?? null
    }, ${it.filename ?? null}, ${it.createdAt ?? new Date()}, ${
      it.updatedAt ?? new Date()
    }
) ON CONFLICT("bucketName") DO UPDATE SET
"contentLength" = EXCLUDED."contentLength", "contentType" = EXCLUDED."contentType", "filename" = EXCLUDED."filename", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when createdAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreFileStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreUpsertByCreatedAt: (sql, it) => {
    return sql`
INSERT INTO "fileStore" ("id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.bucketName ?? null}, ${it.contentLength ?? null}, ${
      it.contentType ?? null
    }, ${it.filename ?? null}, ${it.createdAt ?? new Date()}, ${
      it.updatedAt ?? new Date()
    }
) ON CONFLICT("createdAt") DO UPDATE SET
"bucketName" = EXCLUDED."bucketName", "contentLength" = EXCLUDED."contentLength", "contentType" = EXCLUDED."contentType", "filename" = EXCLUDED."filename", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when updatedAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreFileStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreFileStore[]>}
   */
  fileStoreUpsertByUpdatedAt: (sql, it) => {
    return sql`
INSERT INTO "fileStore" ("id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.bucketName ?? null}, ${it.contentLength ?? null}, ${
      it.contentType ?? null
    }, ${it.filename ?? null}, ${it.createdAt ?? new Date()}, ${
      it.updatedAt ?? new Date()
    }
) ON CONFLICT("updatedAt") DO UPDATE SET
"bucketName" = EXCLUDED."bucketName", "contentLength" = EXCLUDED."contentLength", "contentType" = EXCLUDED."contentType", "filename" = EXCLUDED."filename"
RETURNING "id", "bucketName", "contentLength", "contentType", "filename", "createdAt", "updatedAt"
`;
  },

  /**
   * @param {Postgres} sql
   * @param { StoreJobQueueWhere} [where]
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueSelect: (sql, where) => sql`
SELECT
jq."id", jq."isComplete", jq."priority", jq."scheduledAt", jq."name", jq."data", jq."createdAt", jq."updatedAt"
FROM "jobQueue" jq
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR jq."id" = ${
    where?.id ?? null
  }) AND (COALESCE(${
    where?.idGreaterThan ?? null
  }, NULL) IS NULL OR jq."id" > ${
    where?.idGreaterThan ?? null
  }) AND (COALESCE(${where?.idLowerThan ?? null}, NULL) IS NULL OR jq."id" < ${
    where?.idLowerThan ?? null
  }) AND (COALESCE(${
    where?.scheduledAt ?? null
  }, NULL) IS NULL OR jq."scheduledAt" = ${
    where?.scheduledAt ?? null
  }) AND (COALESCE(${
    where?.scheduledAtGreaterThan ?? null
  }, NULL) IS NULL OR jq."scheduledAt" > ${
    where?.scheduledAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.scheduledAtLowerThan ?? null
  }, NULL) IS NULL OR jq."scheduledAt" < ${
    where?.scheduledAtLowerThan ?? null
  }) AND (COALESCE(${where?.name ?? null}, NULL) IS NULL OR jq."name" = ${
    where?.name ?? null
  }) AND (COALESCE(${
    where?.nameLike ?? null
  }, NULL) IS NULL OR jq."name" LIKE ${`%${where?.nameLike}%`}) AND (COALESCE(${
    where?.createdAt ?? null
  }, NULL) IS NULL OR jq."createdAt" = ${
    where?.createdAt ?? null
  }) AND (COALESCE(${
    where?.createdAtGreaterThan ?? null
  }, NULL) IS NULL OR jq."createdAt" > ${
    where?.createdAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.createdAtLowerThan ?? null
  }, NULL) IS NULL OR jq."createdAt" < ${
    where?.createdAtLowerThan ?? null
  }) AND (COALESCE(${
    where?.updatedAt ?? null
  }, NULL) IS NULL OR jq."updatedAt" = ${
    where?.updatedAt ?? null
  }) AND (COALESCE(${
    where?.updatedAtGreaterThan ?? null
  }, NULL) IS NULL OR jq."updatedAt" > ${
    where?.updatedAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.updatedAtLowerThan ?? null
  }, NULL) IS NULL OR jq."updatedAt" < ${where?.updatedAtLowerThan ?? null})
ORDER BY jq."createdAt", jq."updatedAt" , jq."id"
`,

  /**
   * @param {Postgres} sql
   * @param { StoreJobQueueWhere} [where]
   * @returns {Promise<number>}
   */
  jobQueueCount: async (sql, where) => {
    const result = await sql`
SELECT count(*) AS "genCount" FROM "jobQueue" jq 
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR jq."id" = ${
      where?.id ?? null
    }) AND (COALESCE(${
      where?.idGreaterThan ?? null
    }, NULL) IS NULL OR jq."id" > ${
      where?.idGreaterThan ?? null
    }) AND (COALESCE(${
      where?.idLowerThan ?? null
    }, NULL) IS NULL OR jq."id" < ${
      where?.idLowerThan ?? null
    }) AND (COALESCE(${
      where?.scheduledAt ?? null
    }, NULL) IS NULL OR jq."scheduledAt" = ${
      where?.scheduledAt ?? null
    }) AND (COALESCE(${
      where?.scheduledAtGreaterThan ?? null
    }, NULL) IS NULL OR jq."scheduledAt" > ${
      where?.scheduledAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.scheduledAtLowerThan ?? null
    }, NULL) IS NULL OR jq."scheduledAt" < ${
      where?.scheduledAtLowerThan ?? null
    }) AND (COALESCE(${where?.name ?? null}, NULL) IS NULL OR jq."name" = ${
      where?.name ?? null
    }) AND (COALESCE(${
      where?.nameLike ?? null
    }, NULL) IS NULL OR jq."name" LIKE ${`%${where?.nameLike}%`}) AND (COALESCE(${
      where?.createdAt ?? null
    }, NULL) IS NULL OR jq."createdAt" = ${
      where?.createdAt ?? null
    }) AND (COALESCE(${
      where?.createdAtGreaterThan ?? null
    }, NULL) IS NULL OR jq."createdAt" > ${
      where?.createdAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.createdAtLowerThan ?? null
    }, NULL) IS NULL OR jq."createdAt" < ${
      where?.createdAtLowerThan ?? null
    }) AND (COALESCE(${
      where?.updatedAt ?? null
    }, NULL) IS NULL OR jq."updatedAt" = ${
      where?.updatedAt ?? null
    }) AND (COALESCE(${
      where?.updatedAtGreaterThan ?? null
    }, NULL) IS NULL OR jq."updatedAt" > ${
      where?.updatedAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.updatedAtLowerThan ?? null
    }, NULL) IS NULL OR jq."updatedAt" < ${where?.updatedAtLowerThan ?? null})
`;
    return parseInt(result?.[0]?.genCount ?? "0");
  },

  /**
   * @param {Postgres} sql
   * @param { StoreJobQueueWhere} [where]
   * @returns {Promise<[]>}
   */
  jobQueueDelete: (sql, where) => sql`
DELETE FROM "jobQueue" jq
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR jq."id" = ${
    where?.id ?? null
  }) AND (COALESCE(${
    where?.idGreaterThan ?? null
  }, NULL) IS NULL OR jq."id" > ${
    where?.idGreaterThan ?? null
  }) AND (COALESCE(${where?.idLowerThan ?? null}, NULL) IS NULL OR jq."id" < ${
    where?.idLowerThan ?? null
  }) AND (COALESCE(${
    where?.scheduledAt ?? null
  }, NULL) IS NULL OR jq."scheduledAt" = ${
    where?.scheduledAt ?? null
  }) AND (COALESCE(${
    where?.scheduledAtGreaterThan ?? null
  }, NULL) IS NULL OR jq."scheduledAt" > ${
    where?.scheduledAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.scheduledAtLowerThan ?? null
  }, NULL) IS NULL OR jq."scheduledAt" < ${
    where?.scheduledAtLowerThan ?? null
  }) AND (COALESCE(${where?.name ?? null}, NULL) IS NULL OR jq."name" = ${
    where?.name ?? null
  }) AND (COALESCE(${
    where?.nameLike ?? null
  }, NULL) IS NULL OR jq."name" LIKE ${`%${where?.nameLike}%`}) AND (COALESCE(${
    where?.createdAt ?? null
  }, NULL) IS NULL OR jq."createdAt" = ${
    where?.createdAt ?? null
  }) AND (COALESCE(${
    where?.createdAtGreaterThan ?? null
  }, NULL) IS NULL OR jq."createdAt" > ${
    where?.createdAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.createdAtLowerThan ?? null
  }, NULL) IS NULL OR jq."createdAt" < ${
    where?.createdAtLowerThan ?? null
  }) AND (COALESCE(${
    where?.updatedAt ?? null
  }, NULL) IS NULL OR jq."updatedAt" = ${
    where?.updatedAt ?? null
  }) AND (COALESCE(${
    where?.updatedAtGreaterThan ?? null
  }, NULL) IS NULL OR jq."updatedAt" > ${
    where?.updatedAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.updatedAtLowerThan ?? null
  }, NULL) IS NULL OR jq."updatedAt" < ${where?.updatedAtLowerThan ?? null})
`,

  /**
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input|StoreJobQueueInsertPartial_Input[]} insert
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueInsert: (sql, insert) => {
    const data = Array.isArray(insert) ? insert : [insert];
    if (data.length === 0) {
      return [];
    }
    let query = `INSERT INTO "jobQueue" ("isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt") VALUES `;
    const argList = [];
    let idx = 1;
    for (const it of data) {
      argList.push(
        it.isComplete ?? false,
        it.priority ?? 0,
        it.scheduledAt ?? new Date(),
        it.name ?? null,
        JSON.stringify(it.data ?? {}),
        it.createdAt ?? new Date(),
        it.updatedAt ?? new Date(),
      );
      query += `($${idx++}, $${idx++}, $${idx++}, $${idx++}, $${idx++}, $${idx++}, $${idx++}),`;
    }
    // Remove trailing comma
    query = query.substring(0, query.length - 1);
    query += ` RETURNING "id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"`;
    return sql.unsafe(query, argList);
  },

  /**
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input} value
   * @param { StoreJobQueueWhere} [where]
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueUpdate: (sql, value, where) => {
    let query = `UPDATE "jobQueue" jq SET `;
    const argList = [];
    let idx = 1;
    if (value["isComplete"] !== undefined) {
      query += `"isComplete" = $${idx++}, `;
      argList.push(value["isComplete"]);
    }
    if (value["priority"] !== undefined) {
      query += `"priority" = $${idx++}, `;
      argList.push(value["priority"]);
    }
    if (value["scheduledAt"] !== undefined) {
      query += `"scheduledAt" = $${idx++}, `;
      argList.push(value["scheduledAt"]);
    }
    if (value["name"] !== undefined) {
      query += `"name" = $${idx++}, `;
      argList.push(value["name"]);
    }
    if (value["data"] !== undefined) {
      query += `"data" = $${idx++}, `;
      argList.push(JSON.stringify(value["data"]));
    }
    if (value["createdAt"] !== undefined) {
      query += `"createdAt" = $${idx++}, `;
      argList.push(value["createdAt"]);
    }
    query += `"updatedAt" = $${idx++}, `;
    argList.push(new Date());
    query = query.substring(0, query.length - 2);
    query += ` WHERE `;
    if (where.id !== undefined) {
      query += `jq."id" `;
      query += `= $${idx++}`;
      argList.push(where.id);
      query += " AND ";
    }
    if (where.idGreaterThan !== undefined) {
      query += `jq."id" `;
      query += `> $${idx++}`;
      argList.push(where.idGreaterThan);
      query += " AND ";
    }
    if (where.idLowerThan !== undefined) {
      query += `jq."id" `;
      query += `< $${idx++}`;
      argList.push(where.idLowerThan);
      query += " AND ";
    }
    if (where.scheduledAt !== undefined) {
      query += `jq."scheduledAt" `;
      query += `= $${idx++}`;
      argList.push(where.scheduledAt);
      query += " AND ";
    }
    if (where.scheduledAtGreaterThan !== undefined) {
      query += `jq."scheduledAt" `;
      query += `> $${idx++}`;
      argList.push(where.scheduledAtGreaterThan);
      query += " AND ";
    }
    if (where.scheduledAtLowerThan !== undefined) {
      query += `jq."scheduledAt" `;
      query += `< $${idx++}`;
      argList.push(where.scheduledAtLowerThan);
      query += " AND ";
    }
    if (where.name !== undefined) {
      query += `jq."name" `;
      query += `= $${idx++}`;
      argList.push(where.name);
      query += " AND ";
    }
    if (where.nameLike !== undefined) {
      query += `jq."name" `;
      query += `LIKE $${idx++}`;
      argList.push(`%${where.nameLike}%`);
      query += " AND ";
    }
    if (where.createdAt !== undefined) {
      query += `jq."createdAt" `;
      query += `= $${idx++}`;
      argList.push(where.createdAt);
      query += " AND ";
    }
    if (where.createdAtGreaterThan !== undefined) {
      query += `jq."createdAt" `;
      query += `> $${idx++}`;
      argList.push(where.createdAtGreaterThan);
      query += " AND ";
    }
    if (where.createdAtLowerThan !== undefined) {
      query += `jq."createdAt" `;
      query += `< $${idx++}`;
      argList.push(where.createdAtLowerThan);
      query += " AND ";
    }
    if (where.updatedAt !== undefined) {
      query += `jq."updatedAt" `;
      query += `= $${idx++}`;
      argList.push(where.updatedAt);
      query += " AND ";
    }
    if (where.updatedAtGreaterThan !== undefined) {
      query += `jq."updatedAt" `;
      query += `> $${idx++}`;
      argList.push(where.updatedAtGreaterThan);
      query += " AND ";
    }
    if (where.updatedAtLowerThan !== undefined) {
      query += `jq."updatedAt" `;
      query += `< $${idx++}`;
      argList.push(where.updatedAtLowerThan);
      query += " AND ";
    }
    query = query.substring(0, query.length - 4);
    query += ` RETURNING jq."id", jq."isComplete", jq."priority", jq."scheduledAt", jq."name", jq."data", jq."createdAt", jq."updatedAt"`;
    return sql.unsafe(query, argList);
  },

  /**
   * Note: Use only when id has a unique constraint
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input & { id?: number } } it
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueUpsert: (sql, it) => {
    return sql`
INSERT INTO "jobQueue" ("id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.isComplete ?? false}, ${it.priority ?? 0}, ${
      it.scheduledAt ?? new Date()
    }, ${it.name ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("id") DO UPDATE SET
"isComplete" = EXCLUDED."isComplete", "priority" = EXCLUDED."priority", "scheduledAt" = EXCLUDED."scheduledAt", "name" = EXCLUDED."name", "data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when scheduledAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input & { id?: number } } it
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueUpsertByScheduledAt: (sql, it) => {
    return sql`
INSERT INTO "jobQueue" ("id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.isComplete ?? false}, ${it.priority ?? 0}, ${
      it.scheduledAt ?? new Date()
    }, ${it.name ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("scheduledAt") DO UPDATE SET
"isComplete" = EXCLUDED."isComplete", "priority" = EXCLUDED."priority", "name" = EXCLUDED."name", "data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when name has a unique constraint
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input & { id?: number } } it
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueUpsertByName: (sql, it) => {
    return sql`
INSERT INTO "jobQueue" ("id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.isComplete ?? false}, ${it.priority ?? 0}, ${
      it.scheduledAt ?? new Date()
    }, ${it.name ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("name") DO UPDATE SET
"isComplete" = EXCLUDED."isComplete", "priority" = EXCLUDED."priority", "scheduledAt" = EXCLUDED."scheduledAt", "data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when createdAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input & { id?: number } } it
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueUpsertByCreatedAt: (sql, it) => {
    return sql`
INSERT INTO "jobQueue" ("id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.isComplete ?? false}, ${it.priority ?? 0}, ${
      it.scheduledAt ?? new Date()
    }, ${it.name ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("createdAt") DO UPDATE SET
"isComplete" = EXCLUDED."isComplete", "priority" = EXCLUDED."priority", "scheduledAt" = EXCLUDED."scheduledAt", "name" = EXCLUDED."name", "data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when updatedAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreJobQueueInsertPartial_Input & { id?: number } } it
   * @returns {Promise<StoreJobQueue[]>}
   */
  jobQueueUpsertByUpdatedAt: (sql, it) => {
    return sql`
INSERT INTO "jobQueue" ("id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.isComplete ?? false}, ${it.priority ?? 0}, ${
      it.scheduledAt ?? new Date()
    }, ${it.name ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("updatedAt") DO UPDATE SET
"isComplete" = EXCLUDED."isComplete", "priority" = EXCLUDED."priority", "scheduledAt" = EXCLUDED."scheduledAt", "name" = EXCLUDED."name", "data" = EXCLUDED."data"
RETURNING "id", "isComplete", "priority", "scheduledAt", "name", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * @param {Postgres} sql
   * @param { StoreSessionStoreWhere} [where]
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreSelect: (sql, where) => sql`
SELECT
ss."id", ss."expires", ss."data", ss."createdAt", ss."updatedAt"
FROM "sessionStore" ss
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR ss."id" = ${
    where?.id ?? null
  }) AND (COALESCE(${
    where?.idIn ?? null
  }, NULL) IS NULL OR ss."id" = ANY (${sql.array(
    where?.idIn ?? [],
  )}::uuid[])) AND (COALESCE(${
    where?.expires ?? null
  }, NULL) IS NULL OR ss."expires" = ${where?.expires ?? null}) AND (COALESCE(${
    where?.expiresGreaterThan ?? null
  }, NULL) IS NULL OR ss."expires" > ${
    where?.expiresGreaterThan ?? null
  }) AND (COALESCE(${
    where?.expiresLowerThan ?? null
  }, NULL) IS NULL OR ss."expires" < ${
    where?.expiresLowerThan ?? null
  }) AND (COALESCE(${
    where?.createdAt ?? null
  }, NULL) IS NULL OR ss."createdAt" = ${
    where?.createdAt ?? null
  }) AND (COALESCE(${
    where?.createdAtGreaterThan ?? null
  }, NULL) IS NULL OR ss."createdAt" > ${
    where?.createdAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.createdAtLowerThan ?? null
  }, NULL) IS NULL OR ss."createdAt" < ${
    where?.createdAtLowerThan ?? null
  }) AND (COALESCE(${
    where?.updatedAt ?? null
  }, NULL) IS NULL OR ss."updatedAt" = ${
    where?.updatedAt ?? null
  }) AND (COALESCE(${
    where?.updatedAtGreaterThan ?? null
  }, NULL) IS NULL OR ss."updatedAt" > ${
    where?.updatedAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.updatedAtLowerThan ?? null
  }, NULL) IS NULL OR ss."updatedAt" < ${where?.updatedAtLowerThan ?? null})
ORDER BY ss."createdAt", ss."updatedAt" , ss."id"
`,

  /**
   * @param {Postgres} sql
   * @param { StoreSessionStoreWhere} [where]
   * @returns {Promise<number>}
   */
  sessionStoreCount: async (sql, where) => {
    const result = await sql`
SELECT count(*) AS "genCount" FROM "sessionStore" ss 
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR ss."id" = ${
      where?.id ?? null
    }) AND (COALESCE(${
      where?.idIn ?? null
    }, NULL) IS NULL OR ss."id" = ANY (${sql.array(
      where?.idIn ?? [],
    )}::uuid[])) AND (COALESCE(${
      where?.expires ?? null
    }, NULL) IS NULL OR ss."expires" = ${
      where?.expires ?? null
    }) AND (COALESCE(${
      where?.expiresGreaterThan ?? null
    }, NULL) IS NULL OR ss."expires" > ${
      where?.expiresGreaterThan ?? null
    }) AND (COALESCE(${
      where?.expiresLowerThan ?? null
    }, NULL) IS NULL OR ss."expires" < ${
      where?.expiresLowerThan ?? null
    }) AND (COALESCE(${
      where?.createdAt ?? null
    }, NULL) IS NULL OR ss."createdAt" = ${
      where?.createdAt ?? null
    }) AND (COALESCE(${
      where?.createdAtGreaterThan ?? null
    }, NULL) IS NULL OR ss."createdAt" > ${
      where?.createdAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.createdAtLowerThan ?? null
    }, NULL) IS NULL OR ss."createdAt" < ${
      where?.createdAtLowerThan ?? null
    }) AND (COALESCE(${
      where?.updatedAt ?? null
    }, NULL) IS NULL OR ss."updatedAt" = ${
      where?.updatedAt ?? null
    }) AND (COALESCE(${
      where?.updatedAtGreaterThan ?? null
    }, NULL) IS NULL OR ss."updatedAt" > ${
      where?.updatedAtGreaterThan ?? null
    }) AND (COALESCE(${
      where?.updatedAtLowerThan ?? null
    }, NULL) IS NULL OR ss."updatedAt" < ${where?.updatedAtLowerThan ?? null})
`;
    return parseInt(result?.[0]?.genCount ?? "0");
  },

  /**
   * @param {Postgres} sql
   * @param { StoreSessionStoreWhere} [where]
   * @returns {Promise<[]>}
   */
  sessionStoreDelete: (sql, where) => sql`
DELETE FROM "sessionStore" ss
WHERE (COALESCE(${where?.id ?? null}, NULL) IS NULL OR ss."id" = ${
    where?.id ?? null
  }) AND (COALESCE(${
    where?.idIn ?? null
  }, NULL) IS NULL OR ss."id" = ANY (${sql.array(
    where?.idIn ?? [],
  )}::uuid[])) AND (COALESCE(${
    where?.expires ?? null
  }, NULL) IS NULL OR ss."expires" = ${where?.expires ?? null}) AND (COALESCE(${
    where?.expiresGreaterThan ?? null
  }, NULL) IS NULL OR ss."expires" > ${
    where?.expiresGreaterThan ?? null
  }) AND (COALESCE(${
    where?.expiresLowerThan ?? null
  }, NULL) IS NULL OR ss."expires" < ${
    where?.expiresLowerThan ?? null
  }) AND (COALESCE(${
    where?.createdAt ?? null
  }, NULL) IS NULL OR ss."createdAt" = ${
    where?.createdAt ?? null
  }) AND (COALESCE(${
    where?.createdAtGreaterThan ?? null
  }, NULL) IS NULL OR ss."createdAt" > ${
    where?.createdAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.createdAtLowerThan ?? null
  }, NULL) IS NULL OR ss."createdAt" < ${
    where?.createdAtLowerThan ?? null
  }) AND (COALESCE(${
    where?.updatedAt ?? null
  }, NULL) IS NULL OR ss."updatedAt" = ${
    where?.updatedAt ?? null
  }) AND (COALESCE(${
    where?.updatedAtGreaterThan ?? null
  }, NULL) IS NULL OR ss."updatedAt" > ${
    where?.updatedAtGreaterThan ?? null
  }) AND (COALESCE(${
    where?.updatedAtLowerThan ?? null
  }, NULL) IS NULL OR ss."updatedAt" < ${where?.updatedAtLowerThan ?? null})
`,

  /**
   * @param {Postgres} sql
   * @param { StoreSessionStoreInsertPartial_Input|StoreSessionStoreInsertPartial_Input[]} insert
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreInsert: (sql, insert) => {
    const data = Array.isArray(insert) ? insert : [insert];
    if (data.length === 0) {
      return [];
    }
    let query = `INSERT INTO "sessionStore" ("expires", "data", "createdAt", "updatedAt") VALUES `;
    const argList = [];
    let idx = 1;
    for (const it of data) {
      argList.push(
        it.expires ?? null,
        JSON.stringify(it.data ?? {}),
        it.createdAt ?? new Date(),
        it.updatedAt ?? new Date(),
      );
      query += `($${idx++}, $${idx++}, $${idx++}, $${idx++}),`;
    }
    // Remove trailing comma
    query = query.substring(0, query.length - 1);
    query += ` RETURNING "id", "expires", "data", "createdAt", "updatedAt"`;
    return sql.unsafe(query, argList);
  },

  /**
   * @param {Postgres} sql
   * @param { StoreSessionStoreInsertPartial_Input} value
   * @param { StoreSessionStoreWhere} [where]
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreUpdate: (sql, value, where) => {
    let query = `UPDATE "sessionStore" ss SET `;
    const argList = [];
    let idx = 1;
    if (value["expires"] !== undefined) {
      query += `"expires" = $${idx++}, `;
      argList.push(value["expires"]);
    }
    if (value["data"] !== undefined) {
      query += `"data" = $${idx++}, `;
      argList.push(JSON.stringify(value["data"]));
    }
    if (value["createdAt"] !== undefined) {
      query += `"createdAt" = $${idx++}, `;
      argList.push(value["createdAt"]);
    }
    query += `"updatedAt" = $${idx++}, `;
    argList.push(new Date());
    query = query.substring(0, query.length - 2);
    query += ` WHERE `;
    if (where.id !== undefined) {
      query += `ss."id" `;
      query += `= $${idx++}`;
      argList.push(where.id);
      query += " AND ";
    }
    if (where.idIn !== undefined) {
      query += `ss."id" `;
      query += `= ANY (ARRAY[`;
      let addOne = false;
      for (const value of where.idIn || []) {
        addOne = true;
        query += `$${idx++},`;
        argList.push(value);
      }
      query = `${query.substring(
        0,
        query.length - (addOne ? 1 : 0),
      )}]::uuid[])`;
      query += " AND ";
    }
    if (where.expires !== undefined) {
      query += `ss."expires" `;
      query += `= $${idx++}`;
      argList.push(where.expires);
      query += " AND ";
    }
    if (where.expiresGreaterThan !== undefined) {
      query += `ss."expires" `;
      query += `> $${idx++}`;
      argList.push(where.expiresGreaterThan);
      query += " AND ";
    }
    if (where.expiresLowerThan !== undefined) {
      query += `ss."expires" `;
      query += `< $${idx++}`;
      argList.push(where.expiresLowerThan);
      query += " AND ";
    }
    if (where.createdAt !== undefined) {
      query += `ss."createdAt" `;
      query += `= $${idx++}`;
      argList.push(where.createdAt);
      query += " AND ";
    }
    if (where.createdAtGreaterThan !== undefined) {
      query += `ss."createdAt" `;
      query += `> $${idx++}`;
      argList.push(where.createdAtGreaterThan);
      query += " AND ";
    }
    if (where.createdAtLowerThan !== undefined) {
      query += `ss."createdAt" `;
      query += `< $${idx++}`;
      argList.push(where.createdAtLowerThan);
      query += " AND ";
    }
    if (where.updatedAt !== undefined) {
      query += `ss."updatedAt" `;
      query += `= $${idx++}`;
      argList.push(where.updatedAt);
      query += " AND ";
    }
    if (where.updatedAtGreaterThan !== undefined) {
      query += `ss."updatedAt" `;
      query += `> $${idx++}`;
      argList.push(where.updatedAtGreaterThan);
      query += " AND ";
    }
    if (where.updatedAtLowerThan !== undefined) {
      query += `ss."updatedAt" `;
      query += `< $${idx++}`;
      argList.push(where.updatedAtLowerThan);
      query += " AND ";
    }
    query = query.substring(0, query.length - 4);
    query += ` RETURNING ss."id", ss."expires", ss."data", ss."createdAt", ss."updatedAt"`;
    return sql.unsafe(query, argList);
  },

  /**
   * Note: Use only when id has a unique constraint
   * @param {Postgres} sql
   * @param { StoreSessionStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreUpsert: (sql, it) => {
    return sql`
INSERT INTO "sessionStore" ("id", "expires", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.expires ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("id") DO UPDATE SET
"expires" = EXCLUDED."expires", "data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "expires", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when expires has a unique constraint
   * @param {Postgres} sql
   * @param { StoreSessionStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreUpsertByExpires: (sql, it) => {
    return sql`
INSERT INTO "sessionStore" ("id", "expires", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.expires ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("expires") DO UPDATE SET
"data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "expires", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when createdAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreSessionStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreUpsertByCreatedAt: (sql, it) => {
    return sql`
INSERT INTO "sessionStore" ("id", "expires", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.expires ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("createdAt") DO UPDATE SET
"expires" = EXCLUDED."expires", "data" = EXCLUDED."data", "updatedAt" = EXCLUDED."updatedAt"
RETURNING "id", "expires", "data", "createdAt", "updatedAt"
`;
  },

  /**
   * Note: Use only when updatedAt has a unique constraint
   * @param {Postgres} sql
   * @param { StoreSessionStoreInsertPartial_Input & { id?: string } } it
   * @returns {Promise<StoreSessionStore[]>}
   */
  sessionStoreUpsertByUpdatedAt: (sql, it) => {
    return sql`
INSERT INTO "sessionStore" ("id", "expires", "data", "createdAt", "updatedAt"
) VALUES (
${it.id ?? uuid()}, ${it.expires ?? null}, ${JSON.stringify(it.data ?? {})}, ${
      it.createdAt ?? new Date()
    }, ${it.updatedAt ?? new Date()}
) ON CONFLICT("updatedAt") DO UPDATE SET
"expires" = EXCLUDED."expires", "data" = EXCLUDED."data"
RETURNING "id", "expires", "data", "createdAt", "updatedAt"
`;
  },
};
