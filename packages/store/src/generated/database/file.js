// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { AppError, isNil, isPlainObject, isStaging } from "@compas/stdlib";
import { generatedWhereBuilderHelper, isQueryPart, query } from "@compas/store";
import {
  validateStoreFileOrderBy,
  validateStoreFileOrderBySpec,
  validateStoreFileQueryBuilder,
  validateStoreFileWhere,
} from "../store/validators.js";
import {
  fileGroupOrderBy,
  fileGroupQueries,
  fileGroupWhere,
  fileGroupWhereSpec,
  internalQueryFileGroup,
  transformFileGroup,
} from "./fileGroup.js";

const fileFieldSet = new Set([
  "bucketName",
  "contentLength",
  "contentType",
  "name",
  "meta",
  "id",
  "createdAt",
  "updatedAt",
  "deletedAt",
]);
/**
 * Get all fields for file
 *
 * @param {string} [tableName="f."]
 * @param {{ excludePrimaryKey?: boolean }} [options={}]
 * @returns {QueryPart}
 */
export function fileFields(tableName = "f.", options = {}) {
  if (tableName.length > 0 && !tableName.endsWith(".")) {
    tableName = `${tableName}.`;
  }
  if (options.excludePrimaryKey) {
    return query([
      `${tableName}"contentLength", ${tableName}"bucketName", ${tableName}"contentType", ${tableName}"name", ${tableName}"meta", ${tableName}"createdAt", ${tableName}"updatedAt", ${tableName}"deletedAt"`,
    ]);
  }
  return query([
    `${tableName}"id", ${tableName}"contentLength", ${tableName}"bucketName", ${tableName}"contentType", ${tableName}"name", ${tableName}"meta", ${tableName}"createdAt", ${tableName}"updatedAt", ${tableName}"deletedAt"`,
  ]);
}
/** @type {any} */
export const fileWhereSpec = {
  fieldSpecification: [
    {
      tableKey: "id",
      keyType: "uuid",
      matchers: [
        { matcherKey: "id", matcherType: "equal" },
        { matcherKey: "idNotEqual", matcherType: "notEqual" },
        { matcherKey: "idIn", matcherType: "in" },
        { matcherKey: "idNotIn", matcherType: "notIn" },
      ],
    },
    {
      tableKey: "bucketName",
      keyType: "varchar",
      matchers: [
        { matcherKey: "bucketName", matcherType: "equal" },
        { matcherKey: "bucketNameNotEqual", matcherType: "notEqual" },
        { matcherKey: "bucketNameIn", matcherType: "in" },
        { matcherKey: "bucketNameNotIn", matcherType: "notIn" },
        { matcherKey: "bucketNameLike", matcherType: "like" },
        { matcherKey: "bucketNameILike", matcherType: "iLike" },
        { matcherKey: "bucketNameNotLike", matcherType: "notLike" },
      ],
    },
    {
      tableKey: "createdAt",
      keyType: "timestamptz",
      matchers: [
        { matcherKey: "createdAt", matcherType: "equal" },
        { matcherKey: "createdAtNotEqual", matcherType: "notEqual" },
        { matcherKey: "createdAtIn", matcherType: "in" },
        { matcherKey: "createdAtNotIn", matcherType: "notIn" },
        { matcherKey: "createdAtGreaterThan", matcherType: "greaterThan" },
        { matcherKey: "createdAtLowerThan", matcherType: "lowerThan" },
        { matcherKey: "createdAtIsNull", matcherType: "isNull" },
        { matcherKey: "createdAtIsNotNull", matcherType: "isNotNull" },
      ],
    },
    {
      tableKey: "updatedAt",
      keyType: "timestamptz",
      matchers: [
        { matcherKey: "updatedAt", matcherType: "equal" },
        { matcherKey: "updatedAtNotEqual", matcherType: "notEqual" },
        { matcherKey: "updatedAtIn", matcherType: "in" },
        { matcherKey: "updatedAtNotIn", matcherType: "notIn" },
        { matcherKey: "updatedAtGreaterThan", matcherType: "greaterThan" },
        { matcherKey: "updatedAtLowerThan", matcherType: "lowerThan" },
        { matcherKey: "updatedAtIsNull", matcherType: "isNull" },
        { matcherKey: "updatedAtIsNotNull", matcherType: "isNotNull" },
      ],
    },
    {
      tableKey: "deletedAt",
      keyType: "timestamptz",
      matchers: [
        { matcherKey: "deletedAt", matcherType: "equal" },
        { matcherKey: "deletedAtNotEqual", matcherType: "notEqual" },
        { matcherKey: "deletedAtIn", matcherType: "in" },
        { matcherKey: "deletedAtNotIn", matcherType: "notIn" },
        { matcherKey: "deletedAtGreaterThan", matcherType: "greaterThan" },
        { matcherKey: "deletedAtLowerThan", matcherType: "lowerThan" },
        {
          matcherKey: "deletedAtIncludeNotNull",
          matcherType: "includeNotNull",
        },
      ],
    },
    {
      tableKey: "group",
      keyType: "undefined",
      matchers: [
        {
          matcherKey: "viaGroup",
          matcherType: "via",
          relation: {
            entityName: "fileGroup",
            shortName: "fg",
            entityKey: "file",
            referencedKey: "id",
            where: () => fileGroupWhereSpec,
          },
        },
        {
          matcherKey: "groupNotExists",
          matcherType: "notExists",
          relation: {
            entityName: "fileGroup",
            shortName: "fg",
            entityKey: "file",
            referencedKey: "id",
            where: () => fileGroupWhereSpec,
          },
        },
      ],
    },
  ],
};
/**
 * Build 'WHERE ' part for file
 *
 * @param {StoreFileWhere} [where={}]
 * @param {string} [tableName="f."]
 * @param {{ skipValidator?: boolean|undefined }} [options={}]
 * @returns {QueryPart}
 */
export function fileWhere(where = {}, tableName = "f.", options = {}) {
  if (tableName.length > 0 && !tableName.endsWith(".")) {
    tableName = `${tableName}.`;
  }
  if (!options.skipValidator) {
    const whereValidated = validateStoreFileWhere(where, "$.fileWhere");
    if (whereValidated.error) {
      throw whereValidated.error;
    }
    where = whereValidated.value;
  }
  return generatedWhereBuilderHelper(fileWhereSpec, where, tableName);
}
/**
 * Build 'ORDER BY ' part for file
 *
 * @param {StoreFileOrderBy} [orderBy=["createdAt", "updatedAt", "id"]]
 * @param {StoreFileOrderBySpec} [orderBySpec={}]
 * @param {string} [tableName="f."]
 * @param {{ skipValidator?: boolean|undefined }} [options={}]
 * @returns {QueryPart}
 */
export function fileOrderBy(
  orderBy = ["createdAt", "updatedAt", "id"],
  orderBySpec = {},
  tableName = "f.",
  options = {},
) {
  if (tableName.length > 0 && !tableName.endsWith(".")) {
    tableName = `${tableName}.`;
  }
  if (!options.skipValidator) {
    const orderByValidated = validateStoreFileOrderBy(
      orderBy,
      "$.StoreFileOrderBy",
    );
    if (orderByValidated.error) {
      throw orderByValidated.error;
    }
    orderBy = orderByValidated.value;
    const orderBySpecValidated = validateStoreFileOrderBySpec(
      orderBySpec,
      "$.StoreFileOrderBySpec",
    );
    if (orderBySpecValidated.error) {
      throw orderBySpecValidated.error;
    }
    orderBySpec = orderBySpecValidated.value;
  }
  if (isQueryPart(orderBy)) {
    return orderBy;
  }
  const strings = [];
  const values = [];
  let i = 0;
  for (const value of orderBy) {
    if (i !== 0) {
      strings.push(", ");
      values.push(undefined);
    }
    i++;
    strings.push(`${tableName}"${value}" `, orderBySpec[value] ?? "ASC");
    values.push(undefined, undefined);
  }
  strings.push("");
  return query(strings, ...values);
}
/**
 * Build 'VALUES ' part for file
 *
 * @param {StoreFileInsertPartial|StoreFileInsertPartial[]} insert
 * @param {{ includePrimaryKey?: boolean }} [options={}]
 * @returns {QueryPart}
 */
export function fileInsertValues(insert, options = {}) {
  if (!Array.isArray(insert)) {
    insert = [insert];
  }
  const str = [];
  const args = [];
  for (let i = 0; i < insert.length; ++i) {
    const it = insert[i];
    checkFieldsInSet("file", "insert", fileFieldSet, it);
    str.push("(");
    if (options?.includePrimaryKey) {
      args.push(it.id);
      str.push(", ");
    }
    args.push(it.contentLength ?? null);
    str.push(", ");
    args.push(it.bucketName ?? null);
    str.push(", ");
    args.push(it.contentType ?? null);
    str.push(", ");
    args.push(it.name ?? null);
    str.push(", ");
    args.push(JSON.stringify(it.meta ?? {}));
    str.push(", ");
    args.push(it.createdAt ?? new Date());
    str.push(", ");
    args.push(it.updatedAt ?? new Date());
    str.push(", ");
    args.push(it.deletedAt ?? null);
    str.push(", ");
    // Fixup last comma & add undefined arg so strings are concatted correctly
    const lastStrIdx = str.length - 1;
    str[lastStrIdx] = str[lastStrIdx].substring(0, str[lastStrIdx].length - 2);
    args.push(undefined);
    str.push(")");
    args.push(undefined);
    if (i !== insert.length - 1) {
      args.push(undefined);
      str.push(",");
    }
  }
  return query(str, ...args);
}
/**
 * Build 'SET ' part for file
 *
 * @param {StoreFileUpdatePartial} update
 * @returns {QueryPart}
 */
export function fileUpdateSet(update) {
  const strings = [];
  const values = [];
  checkFieldsInSet("file", "update", fileFieldSet, update);
  if (update.contentLength !== undefined) {
    strings.push(`, "contentLength" = `);
    values.push(update.contentLength ?? null);
  }
  if (update.bucketName !== undefined) {
    strings.push(`, "bucketName" = `);
    values.push(update.bucketName ?? null);
  }
  if (update.contentType !== undefined) {
    strings.push(`, "contentType" = `);
    values.push(update.contentType ?? null);
  }
  if (update.name !== undefined) {
    strings.push(`, "name" = `);
    values.push(update.name ?? null);
  }
  if (update.meta !== undefined) {
    strings.push(`, "meta" = `);
    values.push(JSON.stringify(update.meta ?? {}));
  }
  if (update.createdAt !== undefined) {
    strings.push(`, "createdAt" = `);
    values.push(update.createdAt ?? new Date());
  }
  strings.push(`, "updatedAt" = `);
  values.push(new Date());
  if (update.deletedAt !== undefined) {
    strings.push(`, "deletedAt" = `);
    values.push(update.deletedAt ?? null);
  }
  // Remove the comma suffix
  if (strings.length === 0) {
    throw AppError.validationError("file.updateSet.emptyUpdateStatement");
  }
  strings[0] = strings[0].substring(2);
  strings.push("");
  return query(strings, ...values);
}
/**
 * @param {string} entity
 * @param {string} subType
 * @param {Set} set
 * @param {*} value
 */
function checkFieldsInSet(entity, subType, set, value) {
  if (isStaging()) {
    for (const key of Object.keys(value)) {
      if (!set.has(key) && value[key] !== undefined) {
        throw new AppError(`query.${entity}.${subType}Fields`, 500, {
          extraKey: key,
          knownKeys: [...set],
        });
      }
    }
  }
}
/**
 * @param {Postgres} sql
 * @param {StoreFileWhere} [where]
 * @returns {Promise<number>}
 */
async function fileCount(sql, where) {
  const [result] = await query`
SELECT COUNT(f."id") as "countResult"
FROM "file" f
WHERE ${fileWhere(where)}
`.exec(sql);
  return Number(result?.countResult ?? "0");
}
/**
 * @param {Postgres} sql
 * @param {StoreFileWhere} [where={}]
 * @returns {Promise<void>}
 */
async function fileDeletePermanent(sql, where = {}) {
  where.deletedAtIncludeNotNull = true;
  return await query`
DELETE FROM "file" f
WHERE ${fileWhere(where)}
`.exec(sql);
}
/**
 * @param {Postgres} sql
 * @param {StoreFileInsertPartial|(StoreFileInsertPartial[])} insert
 * @param {{ withPrimaryKey?: boolean }} [options={}]
 * @returns {Promise<StoreFile[]>}
 */
async function fileInsert(sql, insert, options = {}) {
  if (insert === undefined || (Array.isArray(insert) && insert.length === 0)) {
    return [];
  }
  options.withPrimaryKey = options.withPrimaryKey ?? false;
  const result = await query`
INSERT INTO "file" (${fileFields("", {
    excludePrimaryKey: !options.withPrimaryKey,
  })})
VALUES ${fileInsertValues(insert, {
    includePrimaryKey: options.withPrimaryKey,
  })}
RETURNING ${fileFields("")}
`.exec(sql);
  transformFile(result);
  return result;
}
/**
 * @param {Postgres} sql
 * @param {StoreFileInsertPartial|(StoreFileInsertPartial[])} insert
 * @param {{}} [options={}]
 * @returns {Promise<StoreFile[]>}
 */
async function fileUpsertOnId(sql, insert, options = {}) {
  if (insert === undefined || (Array.isArray(insert) && insert.length === 0)) {
    return [];
  }
  const fieldString = [...fileFieldSet]
    .filter((it) => it !== "id" && it !== "createdAt")
    .map(
      (column) =>
        `"${column}" = COALESCE(EXCLUDED."${column}", "file"."${column}")`,
    )
    .join(",");
  const result = await query`
INSERT INTO "file" (${fileFields("", { excludePrimaryKey: false })})
VALUES ${fileInsertValues(insert, { includePrimaryKey: true })}
ON CONFLICT ("id") DO UPDATE SET ${query([fieldString])}
RETURNING ${fileFields("")}
`.exec(sql);
  transformFile(result);
  return result;
}
/**
 * @param {Postgres} sql
 * @param {StoreFileUpdatePartial} update
 * @param {StoreFileWhere} [where={}]
 * @returns {Promise<StoreFile[]>}
 */
async function fileUpdate(sql, update, where = {}) {
  const result = await query`
UPDATE "file" f
SET ${fileUpdateSet(update)}
WHERE ${fileWhere(where)}
RETURNING ${fileFields()}
`.exec(sql);
  transformFile(result);
  return result;
}
/**
 * @param {Postgres} sql
 * @param {StoreFileWhere} [where={}]
 * @param {{ skipCascade?: boolean }} [options={}]
 * @returns {Promise<void>}
 */
async function fileDelete(sql, where = {}, options = {}) {
  const result = await query`
UPDATE "file" f
SET "deletedAt" = now()
WHERE ${fileWhere(where)}
RETURNING "id"
`.exec(sql);
  if (options.skipCascade || result.length === 0) {
    return;
  }
  const ids = result.map((it) => it.id);
  await Promise.all([fileGroupQueries.fileGroupDelete(sql, { fileIn: ids })]);
}
export const fileQueries = {
  fileCount,
  fileDelete,
  fileInsert,
  fileUpsertOnId,
  fileUpdate,
  fileDeletePermanent,
};
/**
 * @param {StoreFileQueryBuilder & StoreFileQueryTraverser} builder
 * @param {QueryPart|undefined} [wherePartial]
 * @returns {QueryPart}
 */
export function internalQueryFile(builder, wherePartial) {
  const joinQb = query``;
  if (builder.viaGroup) {
    builder.where = builder.where ?? {};
    // Prepare idIn
    if (isQueryPart(builder.where.idIn)) {
      builder.where.idIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.idIn) &&
      builder.where.idIn.length > 0
    ) {
      builder.where.idIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.idIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.idIn,
      );
    } else {
      builder.where.idIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaGroup.offset)
      ? query`OFFSET ${builder.viaGroup.offset}`
      : query``;
    if (!isNil(builder.viaGroup.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaGroup.limit} ROWS ONLY`,
      );
    }
    builder.where.idIn.append(query`
SELECT DISTINCT fg."file"
${internalQueryFileGroup(builder.viaGroup ?? {})}
${offsetLimitQb}
`);
  }
  if (builder.group) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.group.offset)
      ? query`OFFSET ${builder.group.offset}`
      : query``;
    if (!isNil(builder.group.limit)) {
      offsetLimitQb.append(query`FETCH NEXT ${builder.group.limit} ROWS ONLY`);
    }
    if (builder.group.file) {
      joinedKeys.push(
        `'${builder.group.file?.as ?? "file"}'`,
        `"fg_f_0"."result"`,
      );
    }
    if (builder.group.parent) {
      joinedKeys.push(
        `'${builder.group.parent?.as ?? "parent"}'`,
        `"fg_fg_0"."result"`,
      );
    }
    if (builder.group.children) {
      joinedKeys.push(
        `'${builder.group.children?.as ?? "children"}'`,
        `coalesce("fg_fg_1"."result", '{}')`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT to_jsonb(fg.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])}) as "result"
${internalQueryFileGroup(builder.group ?? {}, query`AND fg."file" = f."id"`)}
ORDER BY ${fileGroupOrderBy(
      builder.group.orderBy,
      builder.group.orderBySpec,
      "fg.",
    )}
${offsetLimitQb}
) as "f_fg_0" ON TRUE`);
  }
  return query`
FROM "file" f
${joinQb}
WHERE ${fileWhere(builder.where, "f.", { skipValidator: true })} ${wherePartial}
`;
}
/**
 * Query Builder for file
 * Note that nested limit and offset don't work yet.
 *
 * @param {StoreFileQueryBuilder} [builder={}]
 * @returns {{
 *  then: () => void,
 *  exec: (sql: Postgres) => Promise<QueryResultStoreFile[]>,
 *  execRaw: (sql: Postgres) => Promise<any[]>,
 *  queryPart: QueryPart<any>,
 * }}
 */
export function queryFile(builder = {}) {
  const joinedKeys = [];
  const builderValidated = validateStoreFileQueryBuilder(
    builder,
    "$.fileBuilder",
  );
  if (builderValidated.error) {
    throw builderValidated.error;
  }
  builder = builderValidated.value;
  if (builder.group) {
    joinedKeys.push(`'${builder.group?.as ?? "group"}'`, `"f_fg_0"."result"`);
  }
  const qb = query`
SELECT to_jsonb(f.*) || jsonb_build_object(${query([
    joinedKeys.join(","),
  ])}) as "result"
${internalQueryFile(builder ?? {})}
ORDER BY ${fileOrderBy(builder.orderBy, builder.orderBySpec)}
`;
  if (!isNil(builder.offset)) {
    qb.append(query`OFFSET ${builder.offset}`);
  }
  if (!isNil(builder.limit)) {
    qb.append(query`FETCH NEXT ${builder.limit} ROWS ONLY`);
  }
  return {
    then: () => {
      throw AppError.serverError({
        message:
          "Awaited 'queryFile' directly. Please use '.exec' or '.execRaw'.",
      });
    },
    execRaw: async (sql) => await qb.exec(sql),
    exec: async (sql) => {
      const result = await qb.exec(sql);
      transformFile(result, builder);
      return result;
    },
    get queryPart() {
      return qb;
    },
  };
}
/**
 * NOTE: At the moment only intended for internal use by the generated queries!
 *
 * Transform results from the query builder that adhere to the known structure
 * of 'file' and its relations.
 *
 * @param {any[]} values
 * @param {StoreFileQueryBuilder} [builder={}]
 */
export function transformFile(values, builder = {}) {
  for (let i = 0; i < values.length; ++i) {
    let value = values[i];
    if (isPlainObject(value.result) && Object.keys(value).length === 1) {
      values[i] = value.result;
      value = value.result;
    }
    if (typeof value.createdAt === "string") {
      value.createdAt = new Date(value.createdAt);
    }
    if (typeof value.updatedAt === "string") {
      value.updatedAt = new Date(value.updatedAt);
    }
    value.deletedAt = value.deletedAt ?? undefined;
    if (typeof value.deletedAt === "string") {
      value.deletedAt = new Date(value.deletedAt);
    }
    value[builder.group?.as ?? "group"] =
      value[builder.group?.as ?? "group"] ?? undefined;
    if (isPlainObject(value[builder.group?.as ?? "group"])) {
      const arr = [value[builder.group?.as ?? "group"]];
      transformFileGroup(arr, builder.group);
      value[builder.group?.as ?? "group"] = arr[0];
    }
  }
}
