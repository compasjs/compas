// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { AppError, isNil, isPlainObject, isStaging } from "@compas/stdlib";
import { isQueryPart, query } from "@compas/store";
import {
  validateStoreFileGroupViewOrderBy,
  validateStoreFileGroupViewOrderBySpec,
  validateStoreFileGroupViewQueryBuilder,
  validateStoreFileGroupViewWhere,
} from "../store/validators.js";
import {
  fileOrderBy,
  fileWhere,
  internalQueryFile,
  transformFile,
} from "./file.js";
/**
 * Get all fields for fileGroupView
 *
 * @param {string} [tableName="fgv."]
 * @param {{ excludePrimaryKey: boolean }} [options={}]
 * @returns {QueryPart}
 */
export function fileGroupViewFields(tableName = "fgv.", options = {}) {
  if (tableName.length > 0 && !tableName.endsWith(".")) {
    tableName = `${tableName}.`;
  }
  if (options.excludePrimaryKey) {
    return query([
      `${tableName}"isDirectory", ${tableName}"order", ${tableName}"file", ${tableName}"parent", ${tableName}"name", ${tableName}"meta", ${tableName}"createdAt", ${tableName}"updatedAt", ${tableName}"deletedAt"`,
    ]);
  }
  return query([
    `${tableName}"id", ${tableName}"isDirectory", ${tableName}"order", ${tableName}"file", ${tableName}"parent", ${tableName}"name", ${tableName}"meta", ${tableName}"createdAt", ${tableName}"updatedAt", ${tableName}"deletedAt"`,
  ]);
}
/**
 * Build 'WHERE ' part for fileGroupView
 *
 * @param {StoreFileGroupViewWhere} [where={}]
 * @param {string} [tableName="fgv."]
 * @param {{ skipValidator?: boolean|undefined }} [options={}]
 * @returns {QueryPart}
 */
export function fileGroupViewWhere(
  where = {},
  tableName = "fgv.",
  options = {},
) {
  if (tableName.length > 0 && !tableName.endsWith(".")) {
    tableName = `${tableName}.`;
  }
  if (!options.skipValidator) {
    where = validateStoreFileGroupViewWhere(where, "$.fileGroupViewWhere");
  }
  const strings = ["1 = 1"];
  const values = [undefined];
  if (!isNil(where.$raw) && isQueryPart(where.$raw)) {
    strings.push(" AND ");
    values.push(where.$raw);
  }
  if (Array.isArray(where.$or) && where.$or.length > 0) {
    strings.push(" AND ((");
    for (let i = 0; i < where.$or.length; i++) {
      values.push(fileGroupViewWhere(where.$or[i], tableName));
      if (i === where.$or.length - 1) {
        strings.push("))");
        values.push(undefined);
      } else {
        strings.push(") OR (");
      }
    }
  }
  if (where.id !== undefined) {
    strings.push(` AND ${tableName}"id" = `);
    values.push(where.id);
  }
  if (where.idNotEqual !== undefined) {
    strings.push(` AND ${tableName}"id" != `);
    values.push(where.idNotEqual);
  }
  if (where.idIn !== undefined) {
    if (isQueryPart(where.idIn)) {
      strings.push(` AND ${tableName}"id" = ANY(`, ")");
      values.push(where.idIn, undefined);
    } else if (Array.isArray(where.idIn)) {
      strings.push(` AND ${tableName}"id" = ANY(ARRAY[`);
      for (let i = 0; i < where.idIn.length; ++i) {
        values.push(where.idIn[i]);
        if (i !== where.idIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::uuid[])");
      if (where.idIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.idNotIn !== undefined) {
    if (isQueryPart(where.idNotIn)) {
      strings.push(` AND ${tableName}"id" != ANY(`, ")");
      values.push(where.idNotIn, undefined);
    } else if (Array.isArray(where.idNotIn)) {
      strings.push(` AND NOT (${tableName}"id" = ANY(ARRAY[`);
      for (let i = 0; i < where.idNotIn.length; ++i) {
        values.push(where.idNotIn[i]);
        if (i !== where.idNotIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::uuid[]))");
      if (where.idNotIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.idLike !== undefined) {
    strings.push(` AND ${tableName}"id" LIKE `);
    values.push(`%${where.idLike}%`);
  }
  if (where.idNotLike !== undefined) {
    strings.push(` AND ${tableName}"id" NOT LIKE `);
    values.push(`%${where.idNotLike}%`);
  }
  if (where.isDirectory !== undefined) {
    strings.push(` AND ${tableName}"isDirectory" = `);
    values.push(where.isDirectory);
  }
  if (where.file !== undefined) {
    strings.push(` AND ${tableName}"file" = `);
    values.push(where.file);
  }
  if (where.fileNotEqual !== undefined) {
    strings.push(` AND ${tableName}"file" != `);
    values.push(where.fileNotEqual);
  }
  if (where.fileIn !== undefined) {
    if (isQueryPart(where.fileIn)) {
      strings.push(` AND ${tableName}"file" = ANY(`, ")");
      values.push(where.fileIn, undefined);
    } else if (Array.isArray(where.fileIn)) {
      strings.push(` AND ${tableName}"file" = ANY(ARRAY[`);
      for (let i = 0; i < where.fileIn.length; ++i) {
        values.push(where.fileIn[i]);
        if (i !== where.fileIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::uuid[])");
      if (where.fileIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.fileNotIn !== undefined) {
    if (isQueryPart(where.fileNotIn)) {
      strings.push(` AND ${tableName}"file" != ANY(`, ")");
      values.push(where.fileNotIn, undefined);
    } else if (Array.isArray(where.fileNotIn)) {
      strings.push(` AND NOT (${tableName}"file" = ANY(ARRAY[`);
      for (let i = 0; i < where.fileNotIn.length; ++i) {
        values.push(where.fileNotIn[i]);
        if (i !== where.fileNotIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::uuid[]))");
      if (where.fileNotIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.fileLike !== undefined) {
    strings.push(` AND ${tableName}"file" LIKE `);
    values.push(`%${where.fileLike}%`);
  }
  if (where.fileNotLike !== undefined) {
    strings.push(` AND ${tableName}"file" NOT LIKE `);
    values.push(`%${where.fileNotLike}%`);
  }
  if (where.fileIsNull !== undefined) {
    strings.push(` AND ${tableName}"file" IS NULL `);
    values.push(undefined);
  }
  if (where.fileIsNotNull !== undefined) {
    strings.push(` AND ${tableName}"file" IS NOT NULL `);
    values.push(undefined);
  }
  if (where.parent !== undefined) {
    strings.push(` AND ${tableName}"parent" = `);
    values.push(where.parent);
  }
  if (where.parentNotEqual !== undefined) {
    strings.push(` AND ${tableName}"parent" != `);
    values.push(where.parentNotEqual);
  }
  if (where.parentIn !== undefined) {
    if (isQueryPart(where.parentIn)) {
      strings.push(` AND ${tableName}"parent" = ANY(`, ")");
      values.push(where.parentIn, undefined);
    } else if (Array.isArray(where.parentIn)) {
      strings.push(` AND ${tableName}"parent" = ANY(ARRAY[`);
      for (let i = 0; i < where.parentIn.length; ++i) {
        values.push(where.parentIn[i]);
        if (i !== where.parentIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::uuid[])");
      if (where.parentIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.parentNotIn !== undefined) {
    if (isQueryPart(where.parentNotIn)) {
      strings.push(` AND ${tableName}"parent" != ANY(`, ")");
      values.push(where.parentNotIn, undefined);
    } else if (Array.isArray(where.parentNotIn)) {
      strings.push(` AND NOT (${tableName}"parent" = ANY(ARRAY[`);
      for (let i = 0; i < where.parentNotIn.length; ++i) {
        values.push(where.parentNotIn[i]);
        if (i !== where.parentNotIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::uuid[]))");
      if (where.parentNotIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.parentLike !== undefined) {
    strings.push(` AND ${tableName}"parent" LIKE `);
    values.push(`%${where.parentLike}%`);
  }
  if (where.parentNotLike !== undefined) {
    strings.push(` AND ${tableName}"parent" NOT LIKE `);
    values.push(`%${where.parentNotLike}%`);
  }
  if (where.parentIsNull !== undefined) {
    strings.push(` AND ${tableName}"parent" IS NULL `);
    values.push(undefined);
  }
  if (where.parentIsNotNull !== undefined) {
    strings.push(` AND ${tableName}"parent" IS NOT NULL `);
    values.push(undefined);
  }
  if (where.createdAt !== undefined) {
    strings.push(` AND ${tableName}"createdAt" = `);
    values.push(where.createdAt);
  }
  if (where.createdAtNotEqual !== undefined) {
    strings.push(` AND ${tableName}"createdAt" != `);
    values.push(where.createdAtNotEqual);
  }
  if (where.createdAtIn !== undefined) {
    if (isQueryPart(where.createdAtIn)) {
      strings.push(` AND ${tableName}"createdAt" = ANY(`, ")");
      values.push(where.createdAtIn, undefined);
    } else if (Array.isArray(where.createdAtIn)) {
      strings.push(` AND ${tableName}"createdAt" = ANY(ARRAY[`);
      for (let i = 0; i < where.createdAtIn.length; ++i) {
        values.push(where.createdAtIn[i]);
        if (i !== where.createdAtIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::timestamptz[])");
      if (where.createdAtIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.createdAtNotIn !== undefined) {
    if (isQueryPart(where.createdAtNotIn)) {
      strings.push(` AND ${tableName}"createdAt" != ANY(`, ")");
      values.push(where.createdAtNotIn, undefined);
    } else if (Array.isArray(where.createdAtNotIn)) {
      strings.push(` AND NOT (${tableName}"createdAt" = ANY(ARRAY[`);
      for (let i = 0; i < where.createdAtNotIn.length; ++i) {
        values.push(where.createdAtNotIn[i]);
        if (i !== where.createdAtNotIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::timestamptz[]))");
      if (where.createdAtNotIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.createdAtGreaterThan !== undefined) {
    strings.push(` AND ${tableName}"createdAt" > `);
    values.push(where.createdAtGreaterThan);
  }
  if (where.createdAtLowerThan !== undefined) {
    strings.push(` AND ${tableName}"createdAt" < `);
    values.push(where.createdAtLowerThan);
  }
  if (where.createdAtIsNull !== undefined) {
    strings.push(` AND ${tableName}"createdAt" IS NULL `);
    values.push(undefined);
  }
  if (where.createdAtIsNotNull !== undefined) {
    strings.push(` AND ${tableName}"createdAt" IS NOT NULL `);
    values.push(undefined);
  }
  if (where.updatedAt !== undefined) {
    strings.push(` AND ${tableName}"updatedAt" = `);
    values.push(where.updatedAt);
  }
  if (where.updatedAtNotEqual !== undefined) {
    strings.push(` AND ${tableName}"updatedAt" != `);
    values.push(where.updatedAtNotEqual);
  }
  if (where.updatedAtIn !== undefined) {
    if (isQueryPart(where.updatedAtIn)) {
      strings.push(` AND ${tableName}"updatedAt" = ANY(`, ")");
      values.push(where.updatedAtIn, undefined);
    } else if (Array.isArray(where.updatedAtIn)) {
      strings.push(` AND ${tableName}"updatedAt" = ANY(ARRAY[`);
      for (let i = 0; i < where.updatedAtIn.length; ++i) {
        values.push(where.updatedAtIn[i]);
        if (i !== where.updatedAtIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::timestamptz[])");
      if (where.updatedAtIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.updatedAtNotIn !== undefined) {
    if (isQueryPart(where.updatedAtNotIn)) {
      strings.push(` AND ${tableName}"updatedAt" != ANY(`, ")");
      values.push(where.updatedAtNotIn, undefined);
    } else if (Array.isArray(where.updatedAtNotIn)) {
      strings.push(` AND NOT (${tableName}"updatedAt" = ANY(ARRAY[`);
      for (let i = 0; i < where.updatedAtNotIn.length; ++i) {
        values.push(where.updatedAtNotIn[i]);
        if (i !== where.updatedAtNotIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::timestamptz[]))");
      if (where.updatedAtNotIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.updatedAtGreaterThan !== undefined) {
    strings.push(` AND ${tableName}"updatedAt" > `);
    values.push(where.updatedAtGreaterThan);
  }
  if (where.updatedAtLowerThan !== undefined) {
    strings.push(` AND ${tableName}"updatedAt" < `);
    values.push(where.updatedAtLowerThan);
  }
  if (where.updatedAtIsNull !== undefined) {
    strings.push(` AND ${tableName}"updatedAt" IS NULL `);
    values.push(undefined);
  }
  if (where.updatedAtIsNotNull !== undefined) {
    strings.push(` AND ${tableName}"updatedAt" IS NOT NULL `);
    values.push(undefined);
  }
  if (where.deletedAt !== undefined) {
    strings.push(` AND ${tableName}"deletedAt" = `);
    values.push(where.deletedAt);
  }
  if (where.deletedAtNotEqual !== undefined) {
    strings.push(` AND ${tableName}"deletedAt" != `);
    values.push(where.deletedAtNotEqual);
  }
  if (where.deletedAtIn !== undefined) {
    if (isQueryPart(where.deletedAtIn)) {
      strings.push(` AND ${tableName}"deletedAt" = ANY(`, ")");
      values.push(where.deletedAtIn, undefined);
    } else if (Array.isArray(where.deletedAtIn)) {
      strings.push(` AND ${tableName}"deletedAt" = ANY(ARRAY[`);
      for (let i = 0; i < where.deletedAtIn.length; ++i) {
        values.push(where.deletedAtIn[i]);
        if (i !== where.deletedAtIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::timestamptz[])");
      if (where.deletedAtIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.deletedAtNotIn !== undefined) {
    if (isQueryPart(where.deletedAtNotIn)) {
      strings.push(` AND ${tableName}"deletedAt" != ANY(`, ")");
      values.push(where.deletedAtNotIn, undefined);
    } else if (Array.isArray(where.deletedAtNotIn)) {
      strings.push(` AND NOT (${tableName}"deletedAt" = ANY(ARRAY[`);
      for (let i = 0; i < where.deletedAtNotIn.length; ++i) {
        values.push(where.deletedAtNotIn[i]);
        if (i !== where.deletedAtNotIn.length - 1) {
          strings.push(", ");
        }
      }
      strings.push("]::timestamptz[]))");
      if (where.deletedAtNotIn.length === 0) {
        values.push(undefined);
      }
      values.push(undefined);
    }
  }
  if (where.deletedAtGreaterThan !== undefined) {
    strings.push(` AND ${tableName}"deletedAt" > `);
    values.push(where.deletedAtGreaterThan);
  }
  if (where.deletedAtLowerThan !== undefined) {
    strings.push(` AND ${tableName}"deletedAt" < `);
    values.push(where.deletedAtLowerThan);
  }
  if ((where.deletedAtIncludeNotNull ?? false) === false) {
    strings.push(
      ` AND (${tableName}"deletedAt" IS NULL OR ${tableName}"deletedAt" > now()) `,
    );
    values.push(undefined);
  }
  if (where.childrenExists) {
    strings.push(
      ` AND EXISTS (SELECT FROM "fileGroupView" fgv2 WHERE `,
      ` AND fgv2."parent" = ${tableName}"id")`,
    );
    values.push(
      fileGroupViewWhere(where.childrenExists, "fgv2.", {
        skipValidator: true,
      }),
      undefined,
    );
  }
  if (where.childrenNotExists) {
    strings.push(
      ` AND NOT EXISTS (SELECT FROM "fileGroupView" fgv2 WHERE `,
      ` AND fgv2."parent" = ${tableName}"id")`,
    );
    values.push(
      fileGroupViewWhere(where.childrenNotExists, "fgv2.", {
        skipValidator: true,
      }),
      undefined,
    );
  }
  strings.push("");
  return query(strings, ...values);
}
/**
 * Build 'ORDER BY ' part for fileGroupView
 *
 * @param {StoreFileGroupViewOrderBy} [orderBy=["createdAt", "updatedAt", "id"]]
 * @param {StoreFileGroupViewOrderBySpec} [orderBySpec={}]
 * @param {string} [tableName="fgv."]
 * @param {{ skipValidator?: boolean|undefined }} [options={}]
 * @returns {QueryPart}
 */
export function fileGroupViewOrderBy(
  orderBy = ["createdAt", "updatedAt", "id"],
  orderBySpec = {},
  tableName = "fgv.",
  options = {},
) {
  if (tableName.length > 0 && !tableName.endsWith(".")) {
    tableName = `${tableName}.`;
  }
  if (!options.skipValidator) {
    orderBy = validateStoreFileGroupViewOrderBy(
      orderBy,
      "$.StoreFileGroupViewOrderBy",
    );
    orderBySpec = validateStoreFileGroupViewOrderBySpec(
      orderBySpec,
      "$.StoreFileGroupViewOrderBySpec",
    );
  }
  if (isQueryPart(orderBy)) {
    return orderBy;
  }
  const strings = [];
  const values = [];
  let i = 0;
  for (const value of orderBy) {
    if (i !== 0) {
      strings.push(", ");
      values.push(undefined);
    }
    i++;
    strings.push(`${tableName}"${value}" `, orderBySpec[value] ?? "ASC");
    values.push(undefined, undefined);
  }
  strings.push("");
  return query(strings, ...values);
}
/**
 * @param {string} entity
 * @param {string} subType
 * @param {Set} set
 * @param {*} value
 */
function checkFieldsInSet(entity, subType, set, value) {
  if (isStaging()) {
    for (const key of Object.keys(value)) {
      if (!set.has(key) && value[key] !== undefined) {
        throw new AppError(`query.${entity}.${subType}Fields`, 500, {
          extraKey: key,
          knownKeys: [...set],
        });
      }
    }
  }
}
/**
 * @param {Postgres} sql
 * @param {StoreFileGroupViewWhere} [where]
 * @returns {Promise<number>}
 */
async function fileGroupViewCount(sql, where) {
  const [result] = await query`
SELECT COUNT(fgv."id") as "countResult"
FROM "fileGroupView" fgv
WHERE ${fileGroupViewWhere(where)}
`.exec(sql);
  return Number(result?.countResult ?? "0");
}
export const fileGroupViewQueries = { fileGroupViewCount };
/**
 * @param {StoreFileGroupViewQueryBuilder|StoreFileGroupViewQueryTraverser} [builder={}]
 * @param {QueryPart} wherePartial
 * @returns {QueryPart}
 */
export function internalQueryFileGroupView2(builder = {}, wherePartial) {
  const joinQb = query``;
  if (builder.viaFile) {
    builder.where = builder.where ?? {};
    // Prepare fileIn
    if (isQueryPart(builder.where.fileIn)) {
      builder.where.fileIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.fileIn) &&
      builder.where.fileIn.length > 0
    ) {
      builder.where.fileIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.fileIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.fileIn,
      );
    } else {
      builder.where.fileIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaFile.offset)
      ? query`OFFSET ${builder.viaFile.offset}`
      : query``;
    if (!isNil(builder.viaFile.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaFile.limit} ROWS ONLY`,
      );
    }
    builder.where.fileIn.append(query`
SELECT DISTINCT f."id"
${internalQueryFile(builder.viaFile)}
${offsetLimitQb}
`);
  }
  if (builder.viaParent) {
    builder.where = builder.where ?? {};
    // Prepare parentIn
    if (isQueryPart(builder.where.parentIn)) {
      builder.where.parentIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.parentIn) &&
      builder.where.parentIn.length > 0
    ) {
      builder.where.parentIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.parentIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.parentIn,
      );
    } else {
      builder.where.parentIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaParent.offset)
      ? query`OFFSET ${builder.viaParent.offset}`
      : query``;
    if (!isNil(builder.viaParent.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaParent.limit} ROWS ONLY`,
      );
    }
    builder.where.parentIn.append(query`
SELECT DISTINCT fgv."id"
${internalQueryFileGroupView(builder.viaParent)}
${offsetLimitQb}
`);
  }
  if (builder.viaChildren) {
    builder.where = builder.where ?? {};
    // Prepare idIn
    if (isQueryPart(builder.where.idIn)) {
      builder.where.idIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.idIn) &&
      builder.where.idIn.length > 0
    ) {
      builder.where.idIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.idIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.idIn,
      );
    } else {
      builder.where.idIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaChildren.offset)
      ? query`OFFSET ${builder.viaChildren.offset}`
      : query``;
    if (!isNil(builder.viaChildren.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaChildren.limit} ROWS ONLY`,
      );
    }
    builder.where.idIn.append(query`
SELECT DISTINCT fgv."parent"
${internalQueryFileGroupView(builder.viaChildren)}
${offsetLimitQb}
`);
  }
  if (builder.file) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.file.offset)
      ? query`OFFSET ${builder.file.offset}`
      : query``;
    if (!isNil(builder.file.limit)) {
      offsetLimitQb.append(query`FETCH NEXT ${builder.file.limit} ROWS ONLY`);
    }
    if (builder.file.group) {
      joinedKeys.push(
        `'${builder.file.group?.as ?? "group"}'`,
        `"f_fg_0"."result"`,
      );
    }
    if (builder.file.groupView) {
      joinedKeys.push(
        `'${builder.file.groupView?.as ?? "groupView"}'`,
        `"f_fgv_0"."result"`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT to_jsonb(f.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])}) as "result"
${internalQueryFile(builder.file, query`AND f."id" = fgv2."file"`)}
ORDER BY ${fileOrderBy(builder.file.orderBy, builder.file.orderBySpec, "f.")}
${offsetLimitQb}
) as "fgv_f_0" ON TRUE`);
  }
  if (builder.parent) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.parent.offset)
      ? query`OFFSET ${builder.parent.offset}`
      : query``;
    if (!isNil(builder.parent.limit)) {
      offsetLimitQb.append(query`FETCH NEXT ${builder.parent.limit} ROWS ONLY`);
    }
    if (builder.parent.file) {
      joinedKeys.push(
        `'${builder.parent.file?.as ?? "file"}'`,
        `"fgv_f_0"."result"`,
      );
    }
    if (builder.parent.parent) {
      joinedKeys.push(
        `'${builder.parent.parent?.as ?? "parent"}'`,
        `"fgv_fgv_0"."result"`,
      );
    }
    if (builder.parent.children) {
      joinedKeys.push(
        `'${builder.parent.children?.as ?? "children"}'`,
        `coalesce("fgv_fgv_1"."result", '{}')`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT to_jsonb(fgv.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])}) as "result"
${internalQueryFileGroupView(
  builder.parent,
  query`AND fgv."id" = fgv2."parent"`,
)}
ORDER BY ${fileGroupViewOrderBy(
      builder.parent.orderBy,
      builder.parent.orderBySpec,
      "fgv.",
    )}
${offsetLimitQb}
) as "fgv_fgv_0" ON TRUE`);
  }
  if (builder.children) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.children.offset)
      ? query`OFFSET ${builder.children.offset}`
      : query``;
    if (!isNil(builder.children.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.children.limit} ROWS ONLY`,
      );
    }
    if (builder.children.file) {
      joinedKeys.push(
        `'${builder.children.file?.as ?? "file"}'`,
        `"fgv_f_0"."result"`,
      );
    }
    if (builder.children.parent) {
      joinedKeys.push(
        `'${builder.children.parent?.as ?? "parent"}'`,
        `"fgv_fgv_0"."result"`,
      );
    }
    if (builder.children.children) {
      joinedKeys.push(
        `'${builder.children.children?.as ?? "children"}'`,
        `coalesce("fgv_fgv_1"."result", '{}')`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT ARRAY (SELECT to_jsonb(fgv.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])})
${internalQueryFileGroupView(
  builder.children,
  query`AND fgv."parent" = fgv2."id"`,
)}
ORDER BY ${fileGroupViewOrderBy(
      builder.children.orderBy,
      builder.children.orderBySpec,
      "fgv.",
    )}
${offsetLimitQb}
) as result) as "fgv_fgv_1" ON TRUE`);
  }
  return query`
FROM "fileGroupView" fgv2
${joinQb}
WHERE ${fileGroupViewWhere(builder.where, "fgv2.", {
    skipValidator: true,
  })} ${wherePartial}
`;
}
/**
 * @param {StoreFileGroupViewQueryBuilder|StoreFileGroupViewQueryTraverser} [builder={}]
 * @param {QueryPart} wherePartial
 * @returns {QueryPart}
 */
export function internalQueryFileGroupView(builder = {}, wherePartial) {
  const joinQb = query``;
  if (builder.viaFile) {
    builder.where = builder.where ?? {};
    // Prepare fileIn
    if (isQueryPart(builder.where.fileIn)) {
      builder.where.fileIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.fileIn) &&
      builder.where.fileIn.length > 0
    ) {
      builder.where.fileIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.fileIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.fileIn,
      );
    } else {
      builder.where.fileIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaFile.offset)
      ? query`OFFSET ${builder.viaFile.offset}`
      : query``;
    if (!isNil(builder.viaFile.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaFile.limit} ROWS ONLY`,
      );
    }
    builder.where.fileIn.append(query`
SELECT DISTINCT f."id"
${internalQueryFile(builder.viaFile)}
${offsetLimitQb}
`);
  }
  if (builder.viaParent) {
    builder.where = builder.where ?? {};
    // Prepare parentIn
    if (isQueryPart(builder.where.parentIn)) {
      builder.where.parentIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.parentIn) &&
      builder.where.parentIn.length > 0
    ) {
      builder.where.parentIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.parentIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.parentIn,
      );
    } else {
      builder.where.parentIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaParent.offset)
      ? query`OFFSET ${builder.viaParent.offset}`
      : query``;
    if (!isNil(builder.viaParent.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaParent.limit} ROWS ONLY`,
      );
    }
    builder.where.parentIn.append(query`
SELECT DISTINCT fgv2."id"
${internalQueryFileGroupView2(builder.viaParent)}
${offsetLimitQb}
`);
  }
  if (builder.viaChildren) {
    builder.where = builder.where ?? {};
    // Prepare idIn
    if (isQueryPart(builder.where.idIn)) {
      builder.where.idIn.append(query` INTERSECT `);
    } else if (
      Array.isArray(builder.where.idIn) &&
      builder.where.idIn.length > 0
    ) {
      builder.where.idIn = query(
        [
          "(SELECT value::uuid FROM(values (",
          ...Array.from({ length: builder.where.idIn.length - 1 }).map(
            () => "), (",
          ),
          ")) as ids(value)) INTERSECT ",
        ],
        ...builder.where.idIn,
      );
    } else {
      builder.where.idIn = query``;
    }
    const offsetLimitQb = !isNil(builder.viaChildren.offset)
      ? query`OFFSET ${builder.viaChildren.offset}`
      : query``;
    if (!isNil(builder.viaChildren.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.viaChildren.limit} ROWS ONLY`,
      );
    }
    builder.where.idIn.append(query`
SELECT DISTINCT fgv2."parent"
${internalQueryFileGroupView2(builder.viaChildren)}
${offsetLimitQb}
`);
  }
  if (builder.file) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.file.offset)
      ? query`OFFSET ${builder.file.offset}`
      : query``;
    if (!isNil(builder.file.limit)) {
      offsetLimitQb.append(query`FETCH NEXT ${builder.file.limit} ROWS ONLY`);
    }
    if (builder.file.group) {
      joinedKeys.push(
        `'${builder.file.group?.as ?? "group"}'`,
        `"f_fg_0"."result"`,
      );
    }
    if (builder.file.groupView) {
      joinedKeys.push(
        `'${builder.file.groupView?.as ?? "groupView"}'`,
        `"f_fgv_0"."result"`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT to_jsonb(f.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])}) as "result"
${internalQueryFile(builder.file, query`AND f."id" = fgv."file"`)}
ORDER BY ${fileOrderBy(builder.file.orderBy, builder.file.orderBySpec, "f.")}
${offsetLimitQb}
) as "fgv_f_0" ON TRUE`);
  }
  if (builder.parent) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.parent.offset)
      ? query`OFFSET ${builder.parent.offset}`
      : query``;
    if (!isNil(builder.parent.limit)) {
      offsetLimitQb.append(query`FETCH NEXT ${builder.parent.limit} ROWS ONLY`);
    }
    if (builder.parent.file) {
      joinedKeys.push(
        `'${builder.parent.file?.as ?? "file"}'`,
        `"fgv_f_0"."result"`,
      );
    }
    if (builder.parent.parent) {
      joinedKeys.push(
        `'${builder.parent.parent?.as ?? "parent"}'`,
        `"fgv_fgv_0"."result"`,
      );
    }
    if (builder.parent.children) {
      joinedKeys.push(
        `'${builder.parent.children?.as ?? "children"}'`,
        `coalesce("fgv_fgv_1"."result", '{}')`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT to_jsonb(fgv2.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])}) as "result"
${internalQueryFileGroupView2(
  builder.parent,
  query`AND fgv2."id" = fgv."parent"`,
)}
ORDER BY ${fileGroupViewOrderBy(
      builder.parent.orderBy,
      builder.parent.orderBySpec,
      "fgv2.",
    )}
${offsetLimitQb}
) as "fgv_fgv_0" ON TRUE`);
  }
  if (builder.children) {
    const joinedKeys = [];
    const offsetLimitQb = !isNil(builder.children.offset)
      ? query`OFFSET ${builder.children.offset}`
      : query``;
    if (!isNil(builder.children.limit)) {
      offsetLimitQb.append(
        query`FETCH NEXT ${builder.children.limit} ROWS ONLY`,
      );
    }
    if (builder.children.file) {
      joinedKeys.push(
        `'${builder.children.file?.as ?? "file"}'`,
        `"fgv_f_0"."result"`,
      );
    }
    if (builder.children.parent) {
      joinedKeys.push(
        `'${builder.children.parent?.as ?? "parent"}'`,
        `"fgv_fgv_0"."result"`,
      );
    }
    if (builder.children.children) {
      joinedKeys.push(
        `'${builder.children.children?.as ?? "children"}'`,
        `coalesce("fgv_fgv_1"."result", '{}')`,
      );
    }
    joinQb.append(query`LEFT JOIN LATERAL (
SELECT ARRAY (SELECT to_jsonb(fgv2.*) || jsonb_build_object(${query([
      joinedKeys.join(","),
    ])})
${internalQueryFileGroupView2(
  builder.children,
  query`AND fgv2."parent" = fgv."id"`,
)}
ORDER BY ${fileGroupViewOrderBy(
      builder.children.orderBy,
      builder.children.orderBySpec,
      "fgv2.",
    )}
${offsetLimitQb}
) as result) as "fgv_fgv_1" ON TRUE`);
  }
  return query`
FROM "fileGroupView" fgv
${joinQb}
WHERE ${fileGroupViewWhere(builder.where, "fgv.", {
    skipValidator: true,
  })} ${wherePartial}
`;
}
/**
 * @typedef {StoreFileGroupView} QueryResultStoreFileGroupView
 * @property {QueryResultStoreFile|string|number} [file]
 * @property {QueryResultStoreFileGroupView|string|number} [parent]
 * @property {QueryResultStoreFileGroupView[]} [children]
 */
/**
 * Query Builder for fileGroupView
 * Note that nested limit and offset don't work yet.
 *
 * @param {StoreFileGroupViewQueryBuilder} [builder={}]
 * @returns {{
 *  exec: function(sql: Postgres): Promise<QueryResultStoreFileGroupView[]>,
 *  execRaw: function(sql: Postgres): Promise<*[]>
 *  queryPart: QueryPart,
 * }}
 */
export function queryFileGroupView(builder = {}) {
  const joinedKeys = [];
  validateStoreFileGroupViewQueryBuilder(builder, "$.fileGroupViewBuilder");
  if (builder.file) {
    joinedKeys.push(`'${builder.file?.as ?? "file"}'`, `"fgv_f_0"."result"`);
  }
  if (builder.parent) {
    joinedKeys.push(
      `'${builder.parent?.as ?? "parent"}'`,
      `"fgv_fgv_0"."result"`,
    );
  }
  if (builder.children) {
    joinedKeys.push(
      `'${builder.children?.as ?? "children"}'`,
      `coalesce("fgv_fgv_1"."result", '{}')`,
    );
  }
  const qb = query`
SELECT to_jsonb(fgv.*) || jsonb_build_object(${query([
    joinedKeys.join(","),
  ])}) as "result"
${internalQueryFileGroupView(builder)}
ORDER BY ${fileGroupViewOrderBy(builder.orderBy, builder.orderBySpec)}
`;
  if (!isNil(builder.offset)) {
    qb.append(query`OFFSET ${builder.offset}`);
  }
  if (!isNil(builder.limit)) {
    qb.append(query`FETCH NEXT ${builder.limit} ROWS ONLY`);
  }
  return {
    then: () => {
      throw AppError.serverError({
        message:
          "Awaited 'queryFileGroupView' directly. Please use '.exec' or '.execRaw'.",
      });
    },
    execRaw: async (sql) => await qb.exec(sql),
    exec: async (sql) => {
      const result = await qb.exec(sql);
      transformFileGroupView(result, builder);
      return result;
    },
    get queryPart() {
      return qb;
    },
  };
}
/**
 * NOTE: At the moment only intended for internal use by the generated queries!
 *
 * Transform results from the query builder that adhere to the known structure
 * of 'fileGroupView' and its relations.
 *
 * @param {*[]} values
 * @param {StoreFileGroupViewQueryBuilder} [builder={}]
 */
export function transformFileGroupView(values, builder = {}) {
  for (let i = 0; i < values.length; ++i) {
    let value = values[i];
    if (isPlainObject(value.result) && Object.keys(value).length === 1) {
      values[i] = value.result;
      value = value.result;
    }
    value.file = value.file ?? undefined;
    value.parent = value.parent ?? undefined;
    value.name = value.name ?? undefined;
    if (typeof value.createdAt === "string") {
      value.createdAt = new Date(value.createdAt);
    }
    if (typeof value.updatedAt === "string") {
      value.updatedAt = new Date(value.updatedAt);
    }
    value.deletedAt = value.deletedAt ?? undefined;
    if (typeof value.deletedAt === "string") {
      value.deletedAt = new Date(value.deletedAt);
    }
    value[builder.file?.as ?? "file"] =
      value[builder.file?.as ?? "file"] ?? undefined;
    if (isPlainObject(value[builder.file?.as ?? "file"])) {
      const arr = [value[builder.file?.as ?? "file"]];
      transformFile(arr, builder.file);
      value[builder.file?.as ?? "file"] = arr[0];
    }
    value[builder.parent?.as ?? "parent"] =
      value[builder.parent?.as ?? "parent"] ?? undefined;
    if (isPlainObject(value[builder.parent?.as ?? "parent"])) {
      const arr = [value[builder.parent?.as ?? "parent"]];
      transformFileGroupView(arr, builder.parent);
      value[builder.parent?.as ?? "parent"] = arr[0];
    }
    value[builder.children?.as ?? "children"] =
      value[builder.children?.as ?? "children"] ?? undefined;
    if (Array.isArray(value[builder.children?.as ?? "children"])) {
      transformFileGroupView(
        value[builder.children?.as ?? "children"],
        builder.children,
      );
    }
  }
}
