// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { validateStoreSessionOrderBy,
validateStoreSessionOrderBySpec,
validateStoreSessionQueryBuilder,
validateStoreSessionWhere } from "../store/validators.js";
import { AppError,
isNil,
isPlainObject,
isStaging } from "@compas/stdlib";
import { generatedWhereBuilderHelper, isQueryPart, query } from "@compas/store";
const sessionFieldSet = new Set(["expires", "data", "id", "createdAt", "updatedAt"]);
/**
* Get all fields for session
 *
* @param {string} [tableName="s."]
* @param {{ excludePrimaryKey?: boolean }} [options={}]
* @returns {QueryPart}
*/
export function sessionFields(tableName = "s.", options = {}) {
if (tableName.length > 0 && !tableName.endsWith(".")) {
tableName = `${tableName}.`;
}
if (options.excludePrimaryKey) {
return query([
`${tableName}"expires", ${tableName}"data", ${tableName}"createdAt", ${tableName}"updatedAt"`
]);
}
return query([
`${tableName}"id", ${tableName}"expires", ${tableName}"data", ${tableName}"createdAt", ${tableName}"updatedAt"`
]);
}
/** @type {any} */
export const sessionWhereSpec ={ "fieldSpecification": [{ tableKey: "id", keyType: "uuid", matchers: [{ matcherKey: "id", matcherType: "equal", },{ matcherKey: "idNotEqual", matcherType: "notEqual", },{ matcherKey: "idIn", matcherType: "in", },{ matcherKey: "idNotIn", matcherType: "notIn", },] },{ tableKey: "expires", keyType: "timestamptz", matchers: [{ matcherKey: "expires", matcherType: "equal", },{ matcherKey: "expiresNotEqual", matcherType: "notEqual", },{ matcherKey: "expiresIn", matcherType: "in", },{ matcherKey: "expiresNotIn", matcherType: "notIn", },{ matcherKey: "expiresGreaterThan", matcherType: "greaterThan", },{ matcherKey: "expiresLowerThan", matcherType: "lowerThan", },] },{ tableKey: "createdAt", keyType: "timestamptz", matchers: [{ matcherKey: "createdAt", matcherType: "equal", },{ matcherKey: "createdAtNotEqual", matcherType: "notEqual", },{ matcherKey: "createdAtIn", matcherType: "in", },{ matcherKey: "createdAtNotIn", matcherType: "notIn", },{ matcherKey: "createdAtGreaterThan", matcherType: "greaterThan", },{ matcherKey: "createdAtLowerThan", matcherType: "lowerThan", },{ matcherKey: "createdAtIsNull", matcherType: "isNull", },{ matcherKey: "createdAtIsNotNull", matcherType: "isNotNull", },] },{ tableKey: "updatedAt", keyType: "timestamptz", matchers: [{ matcherKey: "updatedAt", matcherType: "equal", },{ matcherKey: "updatedAtNotEqual", matcherType: "notEqual", },{ matcherKey: "updatedAtIn", matcherType: "in", },{ matcherKey: "updatedAtNotIn", matcherType: "notIn", },{ matcherKey: "updatedAtGreaterThan", matcherType: "greaterThan", },{ matcherKey: "updatedAtLowerThan", matcherType: "lowerThan", },{ matcherKey: "updatedAtIsNull", matcherType: "isNull", },{ matcherKey: "updatedAtIsNotNull", matcherType: "isNotNull", },] }, ]};
/**
* Build 'WHERE ' part for session
 *
* @param {StoreSessionWhere} [where={}]
* @param {string} [tableName="s."]
* @param {{ skipValidator?: boolean|undefined }} [options={}]
* @returns {QueryPart}
*/
export function sessionWhere(where = {},
tableName = "s.",
options = {}
) {
if (tableName.length > 0 && !tableName.endsWith(".")) {
tableName = `${tableName}.`;
}
if (!options.skipValidator) {
const whereValidated = validateStoreSessionWhere(
where, "$.sessionWhere");
if (whereValidated.error) {
throw whereValidated.error;
}
where = whereValidated.value;
}
return generatedWhereBuilderHelper(sessionWhereSpec, where, tableName)
}
/**
* Build 'ORDER BY ' part for session
 *
* @param {StoreSessionOrderBy} [orderBy=["createdAt", "updatedAt", "id"]]
* @param {StoreSessionOrderBySpec} [orderBySpec={}]
* @param {string} [tableName="s."]
* @param {{ skipValidator?: boolean|undefined }} [options={}]
* @returns {QueryPart}
*/
export function sessionOrderBy(orderBy = ["createdAt", "updatedAt", "id"],
orderBySpec = {},
tableName = "s.",
options = {}
) {
if (tableName.length > 0 && !tableName.endsWith(".")) {
tableName = `${tableName}.`;
}
if (!options.skipValidator) {
const orderByValidated = validateStoreSessionOrderBy(
orderBy, "$.StoreSessionOrderBy");
if (orderByValidated.error) {
throw orderByValidated.error;
}
orderBy = orderByValidated.value;
const orderBySpecValidated = validateStoreSessionOrderBySpec(
orderBySpec, "$.StoreSessionOrderBySpec");
if (orderBySpecValidated.error) {
throw orderBySpecValidated.error;
}
orderBySpec = orderBySpecValidated.value;
}
if (isQueryPart(orderBy)) {
return orderBy;
}
const strings = [];
const values = [];
let i = 0;
for (const value of orderBy) {
if (i !== 0) {
strings.push(", ");
values.push(undefined);
}
i++;
strings.push(`${tableName}"${value}" `, orderBySpec[value] ?? "ASC");
values.push(undefined, undefined);
}
strings.push("");
return query(strings, ...values);
}
/**
* Build 'VALUES ' part for session
 *
* @param {StoreSessionInsertPartial|StoreSessionInsertPartial[]} insert
* @param {{ includePrimaryKey?: boolean }} [options={}]
* @returns {QueryPart}
*/
export function sessionInsertValues(insert, options = {}) {
if (!Array.isArray(insert)) {
insert = [ insert ];
}
const str = [];
const args = [];
for (let i = 0; i < insert.length; ++i) {
const it = insert[i];
checkFieldsInSet("session", "insert", sessionFieldSet, it);
str.push("(");
if (options?.includePrimaryKey) {
args.push(it.id);
str.push(", ");
}
args.push(it.expires ?? null);
str.push(", ");
args.push(JSON.stringify(it.data ?? {}));
str.push(", ");
args.push(it.createdAt ?? (new Date()));
str.push(", ");
args.push(it.updatedAt ?? (new Date()));
str.push(", ");
// Fixup last comma & add undefined arg so strings are concatted correctly
const lastStrIdx = str.length - 1;
str[lastStrIdx] = str[lastStrIdx].substring(0, str[lastStrIdx].length - 2);
args.push(undefined);
str.push(")");
args.push(undefined);
if (i !== insert.length - 1) {
args.push(undefined);
str.push(",");
}
}
return query(str, ...args);
}
/**
* Build 'SET ' part for session
 *
* @param {StoreSessionUpdatePartial} update
* @returns {QueryPart}
*/
export function sessionUpdateSet(update) {
const strings = [];
const values = [];
checkFieldsInSet("session", "update", sessionFieldSet, update);
if (update.expires !== undefined) {
strings.push(`, "expires" = `);
values.push(update.expires ?? null);
}
if (update.data !== undefined) {
strings.push(`, "data" = `);
values.push(JSON.stringify(update.data ?? {}));
}
if (update.createdAt !== undefined) {
strings.push(`, "createdAt" = `);
values.push(update.createdAt ?? (new Date()));
}
strings.push(`, "updatedAt" = `);
values.push(new Date());
// Remove the comma suffix
if (strings.length === 0) {
throw AppError.validationError("session.updateSet.emptyUpdateStatement");
}
strings[0] = strings[0].substring(2);
strings.push("");
return query(strings, ...values);
}
/**
* @param {string} entity
* @param {string} subType
* @param {Set} set
* @param {*} value
*/
function checkFieldsInSet(entity, subType, set, value) {
if (isStaging()) {
for (const key of Object.keys(value)) {
if (!set.has(key) && value[key] !== undefined) {
throw new AppError(`query.${entity}.${subType}Fields`, 500, {
extraKey: key, knownKeys: [ ...set ],
});
}
}
}
}
/**
* @param {Postgres} sql
* @param {StoreSessionWhere} [where]
* @returns {Promise<number>}
*/
async function sessionCount(sql, where) {
const [ result ] = await query`
SELECT COUNT(s."id") as "countResult"
FROM "session" s
WHERE ${sessionWhere(where)}
`.exec(sql);
return Number(result?.countResult ?? "0")
}
/**
* @param {Postgres} sql
* @param {StoreSessionWhere} [where={}]
* @returns {Promise<void>}
*/
async function sessionDelete(sql,
where = {}
) {
return await query`
DELETE FROM "session" s
WHERE ${sessionWhere(where)}
`.exec(sql);
}
/**
* @param {Postgres} sql
* @param {StoreSessionInsertPartial|(StoreSessionInsertPartial[])} insert
* @param {{ withPrimaryKey?: boolean }} [options={}]
* @returns {Promise<StoreSession[]>}
*/
async function sessionInsert(sql, insert, options = {}) {
if (insert === undefined || (Array.isArray(insert) && insert.length === 0)) {
return [];
}
options.withPrimaryKey = options.withPrimaryKey ?? false;
const result = await query`
INSERT INTO "session" (${sessionFields(
"", { excludePrimaryKey: !options.withPrimaryKey })})
VALUES ${sessionInsertValues(
insert, { includePrimaryKey: options.withPrimaryKey })}
RETURNING ${sessionFields("")}
`.exec(sql);
transformSession(result);
return result;
}
/**
* @param {Postgres} sql
* @param {StoreSessionInsertPartial|(StoreSessionInsertPartial[])} insert
* @param {{}} [options={}]
* @returns {Promise<StoreSession[]>}
*/
async function sessionUpsertOnId(sql, insert, options = {}) {
if (insert === undefined || (Array.isArray(insert) &&  insert.length === 0)) {
return [];
}
const fieldString = [...sessionFieldSet]
.filter(it => it !== "id" && it !== "createdAt")
.map((column) => `"${column}" = COALESCE(EXCLUDED."${column}", "session"."${column}")`)
.join(",");
const result = await query`
INSERT INTO "session" (${sessionFields(
"", { excludePrimaryKey: false })})
VALUES ${sessionInsertValues(
insert, { includePrimaryKey: true })}
ON CONFLICT ("id") DO UPDATE SET ${query([fieldString])}
RETURNING ${sessionFields("")}
`.exec(sql);
transformSession(result);
return result;
}
/**
* @param {Postgres} sql
* @param {StoreSessionUpdatePartial} update
* @param {StoreSessionWhere} [where={}]
* @returns {Promise<StoreSession[]>}
*/
async function sessionUpdate(sql, update, where = {}) {
const result = await query`
UPDATE "session" s
SET ${sessionUpdateSet(update)}
WHERE ${sessionWhere(where)}
RETURNING ${sessionFields()}
`.exec(sql);
transformSession(result);
return result;
}
export const sessionQueries = { sessionCount, sessionDelete, sessionInsert, sessionUpsertOnId, sessionUpdate };
/**
* @param {StoreSessionQueryBuilder & StoreSessionQueryTraverser} builder
* @param {QueryPart|undefined} [wherePartial]
* @returns {QueryPart}
*/
export function internalQuerySession(builder, wherePartial) {
let joinQb = query``;
return query`
FROM "session" s
${joinQb}
WHERE ${sessionWhere(
builder.where, "s.", { skipValidator: true })} ${wherePartial}
`;
}
/**
* Query Builder for session
* Note that nested limit and offset don't work yet.
 *
* @param {StoreSessionQueryBuilder} [builder={}]
* @returns {{
*  then: () => void,
*  exec: (sql: Postgres) => Promise<QueryResultStoreSession[]>,
*  execRaw: (sql: Postgres) => Promise<any[]>,
*  queryPart: QueryPart<any>,
* }}
*/
export function querySession(builder = {}) {
const joinedKeys = [];
const builderValidated = validateStoreSessionQueryBuilder(builder, "$.sessionBuilder");
if (builderValidated.error){
throw builderValidated.error;
}
builder = builderValidated.value;
const qb = query`
SELECT to_jsonb(s.*) || jsonb_build_object(${query(
[ joinedKeys.join(",") ])}) as "result"
${internalQuerySession(builder ?? {})}
ORDER BY ${sessionOrderBy(builder.orderBy, builder.orderBySpec)}
`;
if (!isNil(builder.offset)) {
qb.append(query`OFFSET ${builder.offset}`);
}
if (!isNil(builder.limit)) {
qb.append(query`FETCH NEXT ${builder.limit} ROWS ONLY`);
}
return {
then: () => {
throw AppError.serverError({
message: "Awaited 'querySession' directly. Please use '.exec' or '.execRaw'."
});
}, execRaw: async (sql) => await qb.exec(sql), exec: async (sql) => {
const result = await qb.exec(sql);
transformSession(result, builder);
return result;
}, get queryPart() {
return qb;
}
};
}
/**
* NOTE: At the moment only intended for internal use by the generated queries!
 *
* Transform results from the query builder that adhere to the known structure
* of 'session' and its relations.
 *
* @param {any[]} values
* @param {StoreSessionQueryBuilder} [builder={}]
*/
export function transformSession(values, builder = {}) {
for (let i = 0; i < values.length; ++i) {
let value = values[i];
if (isPlainObject(value.result) && Object.keys(value).length === 1) {
values[i] = value.result;
value = value.result;
}
if (typeof value.expires === "string") {
value.expires = new Date(value.expires);
}
if (typeof value.createdAt === "string") {
value.createdAt = new Date(value.createdAt);
}
if (typeof value.updatedAt === "string") {
value.updatedAt = new Date(value.updatedAt);
}
}
}
