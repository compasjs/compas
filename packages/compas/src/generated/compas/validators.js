// Generated by @compas/code-gen

/**
 * @template T, E
 * @typedef {{ value: T, error?: never}|{ value?: never, error: E }} Either
 */

/**
 * @typedef {Record<string, any|undefined>} ValidatorErrorMap
 */

/**
 * @param {import("../common/types.js").CompasCacheInput|any} value
 * @returns {Either<import("../common/types.js").CompasCache, ValidatorErrorMap>}
 */
export function validateCompasCache(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = {
        version: undefined,
        config: undefined,
        rootDirectories: undefined,
        dynamicAvailableActions: undefined,
        packageManager: undefined,
        packageManagerSourceFiles: undefined,
        prettier: undefined,
        eslint: undefined,
      };

      if (value["version"] === null || value["version"] === undefined) {
        errorMap[`$.version`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString1 = value["version"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.version`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString1.length < 1) {
            errorMap[`$.version`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["version"] = convertedString1;
          }
        }
      }
      if (value["config"] === null || value["config"] === undefined) {
        result["config"] = undefined;
      } else {
        const refResult2 = validateCompasResolvedConfig(value["config"]);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            errorMap[`$.config${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        result["config"] = refResult2.value;
      }
      if (
        value["rootDirectories"] === null ||
        value["rootDirectories"] === undefined
      ) {
        result["rootDirectories"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap4 = {};
        /** @type {any[]} */
        let intermediateResult4 = [];
        /** @type {any|any[]} */
        let intermediateValue4 = value["rootDirectories"];

        if (!Array.isArray(intermediateValue4)) {
          errorMap[`$.rootDirectories`] = {
            key: "validator.array",
            value: intermediateValue4,
          };
        } else {
          if (intermediateValue4.length < 1) {
            errorMap[`$.rootDirectories`] = {
              key: "validator.length",
              minLength: 1,
              foundLength: intermediateValue4.length,
            };
          }
          result["rootDirectories"] = [];
          for (let i4 = 0; i4 < intermediateValue4.length; ++i4) {
            if (
              intermediateValue4[i4] === null ||
              intermediateValue4[i4] === undefined
            ) {
              intermediateErrorMap4[`$.${i4}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString4 = intermediateValue4[i4];
              if (typeof convertedString4 !== "string") {
                intermediateErrorMap4[`$.${i4}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString4.length < 1) {
                  intermediateErrorMap4[`$.${i4}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult4[i4] = convertedString4;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap4).length) {
          for (const errorKey of Object.keys(intermediateErrorMap4)) {
            errorMap[`$.rootDirectories${errorKey.substring(1)}`] =
              intermediateErrorMap4[errorKey];
          }
        } else {
          result["rootDirectories"] = intermediateResult4;
        }
      }
      if (
        value["dynamicAvailableActions"] === null ||
        value["dynamicAvailableActions"] === undefined
      ) {
        result["dynamicAvailableActions"] = [];
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap5 = {};
        /** @type {any[]} */
        let intermediateResult5 = [];
        /** @type {any|any[]} */
        let intermediateValue5 = value["dynamicAvailableActions"];

        if (!Array.isArray(intermediateValue5)) {
          errorMap[`$.dynamicAvailableActions`] = {
            key: "validator.array",
            value: intermediateValue5,
          };
        } else {
          result["dynamicAvailableActions"] = [];
          for (let i5 = 0; i5 < intermediateValue5.length; ++i5) {
            if (
              intermediateValue5[i5] === null ||
              intermediateValue5[i5] === undefined
            ) {
              intermediateErrorMap5[`$.${i5}`] = {
                key: "validator.undefined",
              };
            } else {
              if (
                typeof intermediateValue5[i5] !== "object" ||
                Array.isArray(intermediateValue5[i5])
              ) {
                intermediateErrorMap5[`$.${i5}`] = {
                  key: "validator.object",
                  value: intermediateValue5[i5],
                  foundType: typeof intermediateValue5[i5],
                };
              } else {
                /** @type {Set<string>} */
                const knownKeys5 = new Set([
                  "shortcut",
                  "name",
                  "callback",
                  "rootDirectory",
                ]);
                for (const key of Object.keys(intermediateValue5[i5])) {
                  if (
                    !knownKeys5.has(key) &&
                    intermediateValue5[i5][key] !== null &&
                    intermediateValue5[i5][key] !== undefined
                  ) {
                    const expectedKeys = [...knownKeys5];
                    const foundKeys = Object.keys(intermediateValue5[i5]);
                    const unknownKeys = foundKeys.filter(
                      (it) => !knownKeys5.has(it),
                    );
                    intermediateErrorMap5[`$.${i5}`] = {
                      key: "validator.keys",
                      unknownKeys,
                      expectedKeys,
                      foundKeys,
                    };
                    break;
                  }
                }
                intermediateResult5[i5] = {
                  shortcut: undefined,
                  name: undefined,
                  callback: undefined,
                  rootDirectory: undefined,
                };

                if (
                  intermediateValue5[i5]["shortcut"] === null ||
                  intermediateValue5[i5]["shortcut"] === undefined
                ) {
                  intermediateErrorMap5[`$.${i5}.shortcut`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString6 = intermediateValue5[i5]["shortcut"];
                  if (typeof convertedString6 !== "string") {
                    intermediateErrorMap5[`$.${i5}.shortcut`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString6.length < 1) {
                      intermediateErrorMap5[`$.${i5}.shortcut`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult5[i5]["shortcut"] = convertedString6;
                    }
                  }
                }
                if (
                  intermediateValue5[i5]["name"] === null ||
                  intermediateValue5[i5]["name"] === undefined
                ) {
                  intermediateErrorMap5[`$.${i5}.name`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString7 = intermediateValue5[i5]["name"];
                  if (typeof convertedString7 !== "string") {
                    intermediateErrorMap5[`$.${i5}.name`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString7.length < 1) {
                      intermediateErrorMap5[`$.${i5}.name`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult5[i5]["name"] = convertedString7;
                    }
                  }
                }
                if (
                  intermediateValue5[i5]["callback"] === null ||
                  intermediateValue5[i5]["callback"] === undefined
                ) {
                  intermediateErrorMap5[`$.${i5}.callback`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString8 = intermediateValue5[i5]["callback"];
                  if (typeof convertedString8 !== "string") {
                    intermediateErrorMap5[`$.${i5}.callback`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString8.length < 1) {
                      intermediateErrorMap5[`$.${i5}.callback`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult5[i5]["callback"] = convertedString8;
                    }
                  }
                }
                if (
                  intermediateValue5[i5]["rootDirectory"] === null ||
                  intermediateValue5[i5]["rootDirectory"] === undefined
                ) {
                  intermediateResult5[i5]["rootDirectory"] = undefined;
                } else {
                  /** @type {string} */
                  let convertedString9 =
                    intermediateValue5[i5]["rootDirectory"];
                  if (typeof convertedString9 !== "string") {
                    intermediateErrorMap5[`$.${i5}.rootDirectory`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString9.length === 0) {
                      intermediateResult5[i5]["rootDirectory"] = undefined;
                    } else {
                      if (convertedString9.length < 1) {
                        intermediateErrorMap5[`$.${i5}.rootDirectory`] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        intermediateResult5[i5]["rootDirectory"] =
                          convertedString9;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap5).length) {
          for (const errorKey of Object.keys(intermediateErrorMap5)) {
            errorMap[`$.dynamicAvailableActions${errorKey.substring(1)}`] =
              intermediateErrorMap5[errorKey];
          }
        } else {
          result["dynamicAvailableActions"] = intermediateResult5;
        }
      }
      if (
        value["packageManager"] === null ||
        value["packageManager"] === undefined
      ) {
        result["packageManager"] = undefined;
      } else {
        if (
          typeof value["packageManager"] !== "object" ||
          Array.isArray(value["packageManager"])
        ) {
          errorMap[`$.packageManager`] = {
            key: "validator.generic",
          };
        } else {
          result["packageManager"] = {};
          for (let genericKeyInput5 of Object.keys(value["packageManager"])) {
            /** @type {any} */
            let genericKeyResult6 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap7 = {};
            if (genericKeyInput5 === null || genericKeyInput5 === undefined) {
              genericKeyErrorMap7[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString8 = genericKeyInput5;
              if (typeof convertedString8 !== "string") {
                genericKeyErrorMap7[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString8.length < 1) {
                  genericKeyErrorMap7[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  genericKeyResult6 = convertedString8;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap7).length !== 0) {
              if (errorMap[`$.packageManager`]) {
                errorMap[`$.packageManager`].inputs.push({
                  key: genericKeyInput5,
                  errors: genericKeyErrorMap7,
                });
              } else {
                errorMap[`$.packageManager`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput5, errors: genericKeyErrorMap7 },
                  ],
                };
              }
            } else {
              if (
                value["packageManager"][genericKeyResult6] === null ||
                value["packageManager"][genericKeyResult6] === undefined
              ) {
                errorMap[`$.packageManager.${genericKeyResult6}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["packageManager"][genericKeyResult6] !==
                    "object" ||
                  Array.isArray(value["packageManager"][genericKeyResult6])
                ) {
                  errorMap[`$.packageManager.${genericKeyResult6}`] = {
                    key: "validator.object",
                    value: value["packageManager"][genericKeyResult6],
                    foundType:
                      typeof value["packageManager"][genericKeyResult6],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys8 = new Set([
                    "name",
                    "installCommand",
                    "nodeModulesBinCommand",
                    "packageJsonScriptCommand",
                  ]);
                  for (const key of Object.keys(
                    value["packageManager"][genericKeyResult6],
                  )) {
                    if (
                      !knownKeys8.has(key) &&
                      value["packageManager"][genericKeyResult6][key] !==
                        null &&
                      value["packageManager"][genericKeyResult6][key] !==
                        undefined
                    ) {
                      const expectedKeys = [...knownKeys8];
                      const foundKeys = Object.keys(
                        value["packageManager"][genericKeyResult6],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys8.has(it),
                      );
                      errorMap[`$.packageManager.${genericKeyResult6}`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["packageManager"][genericKeyResult6] = {
                    name: undefined,
                    installCommand: undefined,
                    nodeModulesBinCommand: undefined,
                    packageJsonScriptCommand: undefined,
                  };

                  if (
                    value["packageManager"][genericKeyResult6]["name"] ===
                      null ||
                    value["packageManager"][genericKeyResult6]["name"] ===
                      undefined
                  ) {
                    errorMap[`$.packageManager.${genericKeyResult6}.name`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString9 =
                      value["packageManager"][genericKeyResult6]["name"];
                    if (typeof convertedString9 !== "string") {
                      errorMap[`$.packageManager.${genericKeyResult6}.name`] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString9.length < 1) {
                        errorMap[`$.packageManager.${genericKeyResult6}.name`] =
                          {
                            key: "validator.length",
                            minLength: 1,
                          };
                      } else {
                        result["packageManager"][genericKeyResult6]["name"] =
                          convertedString9;
                      }
                    }
                  }
                  if (
                    value["packageManager"][genericKeyResult6][
                      "installCommand"
                    ] === null ||
                    value["packageManager"][genericKeyResult6][
                      "installCommand"
                    ] === undefined
                  ) {
                    errorMap[
                      `$.packageManager.${genericKeyResult6}.installCommand`
                    ] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString10 =
                      value["packageManager"][genericKeyResult6][
                        "installCommand"
                      ];
                    if (typeof convertedString10 !== "string") {
                      errorMap[
                        `$.packageManager.${genericKeyResult6}.installCommand`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString10.length < 1) {
                        errorMap[
                          `$.packageManager.${genericKeyResult6}.installCommand`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["packageManager"][genericKeyResult6][
                          "installCommand"
                        ] = convertedString10;
                      }
                    }
                  }
                  if (
                    value["packageManager"][genericKeyResult6][
                      "nodeModulesBinCommand"
                    ] === null ||
                    value["packageManager"][genericKeyResult6][
                      "nodeModulesBinCommand"
                    ] === undefined
                  ) {
                    errorMap[
                      `$.packageManager.${genericKeyResult6}.nodeModulesBinCommand`
                    ] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString11 =
                      value["packageManager"][genericKeyResult6][
                        "nodeModulesBinCommand"
                      ];
                    if (typeof convertedString11 !== "string") {
                      errorMap[
                        `$.packageManager.${genericKeyResult6}.nodeModulesBinCommand`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString11.length < 1) {
                        errorMap[
                          `$.packageManager.${genericKeyResult6}.nodeModulesBinCommand`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["packageManager"][genericKeyResult6][
                          "nodeModulesBinCommand"
                        ] = convertedString11;
                      }
                    }
                  }
                  if (
                    value["packageManager"][genericKeyResult6][
                      "packageJsonScriptCommand"
                    ] === null ||
                    value["packageManager"][genericKeyResult6][
                      "packageJsonScriptCommand"
                    ] === undefined
                  ) {
                    errorMap[
                      `$.packageManager.${genericKeyResult6}.packageJsonScriptCommand`
                    ] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString12 =
                      value["packageManager"][genericKeyResult6][
                        "packageJsonScriptCommand"
                      ];
                    if (typeof convertedString12 !== "string") {
                      errorMap[
                        `$.packageManager.${genericKeyResult6}.packageJsonScriptCommand`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString12.length < 1) {
                        errorMap[
                          `$.packageManager.${genericKeyResult6}.packageJsonScriptCommand`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["packageManager"][genericKeyResult6][
                          "packageJsonScriptCommand"
                        ] = convertedString12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (
        value["packageManagerSourceFiles"] === null ||
        value["packageManagerSourceFiles"] === undefined
      ) {
        result["packageManagerSourceFiles"] = undefined;
      } else {
        if (
          typeof value["packageManagerSourceFiles"] !== "object" ||
          Array.isArray(value["packageManagerSourceFiles"])
        ) {
          errorMap[`$.packageManagerSourceFiles`] = {
            key: "validator.generic",
          };
        } else {
          result["packageManagerSourceFiles"] = {};
          for (let genericKeyInput6 of Object.keys(
            value["packageManagerSourceFiles"],
          )) {
            /** @type {any} */
            let genericKeyResult7 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap8 = {};
            if (genericKeyInput6 === null || genericKeyInput6 === undefined) {
              genericKeyErrorMap8[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString9 = genericKeyInput6;
              if (typeof convertedString9 !== "string") {
                genericKeyErrorMap8[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString9.length < 1) {
                  genericKeyErrorMap8[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  genericKeyResult7 = convertedString9;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap8).length !== 0) {
              if (errorMap[`$.packageManagerSourceFiles`]) {
                errorMap[`$.packageManagerSourceFiles`].inputs.push({
                  key: genericKeyInput6,
                  errors: genericKeyErrorMap8,
                });
              } else {
                errorMap[`$.packageManagerSourceFiles`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput6, errors: genericKeyErrorMap8 },
                  ],
                };
              }
            } else {
              if (
                value["packageManagerSourceFiles"][genericKeyResult7] ===
                  null ||
                value["packageManagerSourceFiles"][genericKeyResult7] ===
                  undefined
              ) {
                errorMap[`$.packageManagerSourceFiles.${genericKeyResult7}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString9 =
                  value["packageManagerSourceFiles"][genericKeyResult7];
                if (typeof convertedString9 !== "string") {
                  errorMap[`$.packageManagerSourceFiles.${genericKeyResult7}`] =
                    {
                      key: "validator.string",
                    };
                } else {
                  if (convertedString9.length < 1) {
                    errorMap[
                      `$.packageManagerSourceFiles.${genericKeyResult7}`
                    ] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    result["packageManagerSourceFiles"][genericKeyResult7] =
                      convertedString9;
                  }
                }
              }
            }
          }
        }
      }
      if (value["prettier"] === null || value["prettier"] === undefined) {
        result["prettier"] = undefined;
      } else {
        if (
          typeof value["prettier"] !== "object" ||
          Array.isArray(value["prettier"])
        ) {
          errorMap[`$.prettier`] = {
            key: "validator.generic",
          };
        } else {
          result["prettier"] = {};
          for (let genericKeyInput7 of Object.keys(value["prettier"])) {
            /** @type {any} */
            let genericKeyResult8 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap9 = {};
            if (genericKeyInput7 === null || genericKeyInput7 === undefined) {
              genericKeyErrorMap9[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString10 = genericKeyInput7;
              if (typeof convertedString10 !== "string") {
                genericKeyErrorMap9[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString10.length < 1) {
                  genericKeyErrorMap9[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  genericKeyResult8 = convertedString10;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap9).length !== 0) {
              if (errorMap[`$.prettier`]) {
                errorMap[`$.prettier`].inputs.push({
                  key: genericKeyInput7,
                  errors: genericKeyErrorMap9,
                });
              } else {
                errorMap[`$.prettier`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput7, errors: genericKeyErrorMap9 },
                  ],
                };
              }
            } else {
              if (
                value["prettier"][genericKeyResult8] === null ||
                value["prettier"][genericKeyResult8] === undefined
              ) {
                errorMap[`$.prettier.${genericKeyResult8}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["prettier"][genericKeyResult8] !== "object" ||
                  Array.isArray(value["prettier"][genericKeyResult8])
                ) {
                  errorMap[`$.prettier.${genericKeyResult8}`] = {
                    key: "validator.object",
                    value: value["prettier"][genericKeyResult8],
                    foundType: typeof value["prettier"][genericKeyResult8],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys10 = new Set(["configValue"]);
                  for (const key of Object.keys(
                    value["prettier"][genericKeyResult8],
                  )) {
                    if (
                      !knownKeys10.has(key) &&
                      value["prettier"][genericKeyResult8][key] !== null &&
                      value["prettier"][genericKeyResult8][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys10];
                      const foundKeys = Object.keys(
                        value["prettier"][genericKeyResult8],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys10.has(it),
                      );
                      errorMap[`$.prettier.${genericKeyResult8}`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["prettier"][genericKeyResult8] = {
                    configValue: undefined,
                  };

                  if (
                    value["prettier"][genericKeyResult8]["configValue"] ===
                      null ||
                    value["prettier"][genericKeyResult8]["configValue"] ===
                      undefined
                  ) {
                    errorMap[`$.prettier.${genericKeyResult8}.configValue`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    let hasAnyOfMatch11 = false;
                    errorMap[`$.prettier.${genericKeyResult8}.configValue`] = {
                      key: "validator.anyOf",
                      errors: [],
                    };
                    if (!hasAnyOfMatch11) {
                      /** @type {ValidatorErrorMap} */
                      const intermediateErrorMap13 = {};
                      /** @type {any} */
                      let intermediateResult13 = undefined;
                      /** @type {any} */
                      let intermediateValue13 =
                        value["prettier"][genericKeyResult8]["configValue"];

                      if (
                        intermediateValue13 === null ||
                        intermediateValue13 === undefined
                      ) {
                        intermediateErrorMap13[`$`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        if (
                          typeof intermediateValue13 !== "object" ||
                          Array.isArray(intermediateValue13)
                        ) {
                          intermediateErrorMap13[`$`] = {
                            key: "validator.object",
                            value: intermediateValue13,
                            foundType: typeof intermediateValue13,
                          };
                        } else {
                          /** @type {Set<string>} */
                          const knownKeys13 = new Set(["type"]);
                          for (const key of Object.keys(intermediateValue13)) {
                            if (
                              !knownKeys13.has(key) &&
                              intermediateValue13[key] !== null &&
                              intermediateValue13[key] !== undefined
                            ) {
                              const expectedKeys = [...knownKeys13];
                              const foundKeys =
                                Object.keys(intermediateValue13);
                              const unknownKeys = foundKeys.filter(
                                (it) => !knownKeys13.has(it),
                              );
                              intermediateErrorMap13[`$`] = {
                                key: "validator.keys",
                                unknownKeys,
                                expectedKeys,
                                foundKeys,
                              };
                              break;
                            }
                          }
                          intermediateResult13 = { type: undefined };

                          if (
                            intermediateValue13["type"] === null ||
                            intermediateValue13["type"] === undefined
                          ) {
                            intermediateErrorMap13[`$.type`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString14 = intermediateValue13["type"];
                            if (typeof convertedString14 !== "string") {
                              intermediateErrorMap13[`$.type`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString14.length < 1) {
                                intermediateErrorMap13[`$.type`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else if (
                                convertedString14 !== "compasEslintPlugin"
                              ) {
                                intermediateErrorMap13[`$.type`] = {
                                  key: "validator.oneOf",
                                  allowedValues: ["compasEslintPlugin"],
                                  foundValue: convertedString14,
                                };
                              } else {
                                intermediateResult13["type"] =
                                  convertedString14;
                              }
                            }
                          }
                        }
                      }
                      if (Object.keys(intermediateErrorMap13).length > 0) {
                        errorMap[
                          `$.prettier.${genericKeyResult8}.configValue`
                        ].errors.push(intermediateErrorMap13);
                      } else {
                        hasAnyOfMatch11 = true;
                        delete errorMap[
                          `$.prettier.${genericKeyResult8}.configValue`
                        ];
                        result["prettier"][genericKeyResult8]["configValue"] =
                          intermediateResult13;
                      }
                    }
                    if (!hasAnyOfMatch11) {
                      /** @type {ValidatorErrorMap} */
                      const intermediateErrorMap13 = {};
                      /** @type {any} */
                      let intermediateResult13 = undefined;
                      /** @type {any} */
                      let intermediateValue13 =
                        value["prettier"][genericKeyResult8]["configValue"];

                      if (
                        intermediateValue13 === null ||
                        intermediateValue13 === undefined
                      ) {
                        intermediateErrorMap13[`$`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        if (
                          typeof intermediateValue13 !== "object" ||
                          Array.isArray(intermediateValue13)
                        ) {
                          intermediateErrorMap13[`$`] = {
                            key: "validator.object",
                            value: intermediateValue13,
                            foundType: typeof intermediateValue13,
                          };
                        } else {
                          /** @type {Set<string>} */
                          const knownKeys13 = new Set(["type"]);
                          for (const key of Object.keys(intermediateValue13)) {
                            if (
                              !knownKeys13.has(key) &&
                              intermediateValue13[key] !== null &&
                              intermediateValue13[key] !== undefined
                            ) {
                              const expectedKeys = [...knownKeys13];
                              const foundKeys =
                                Object.keys(intermediateValue13);
                              const unknownKeys = foundKeys.filter(
                                (it) => !knownKeys13.has(it),
                              );
                              intermediateErrorMap13[`$`] = {
                                key: "validator.keys",
                                unknownKeys,
                                expectedKeys,
                                foundKeys,
                              };
                              break;
                            }
                          }
                          intermediateResult13 = { type: undefined };

                          if (
                            intermediateValue13["type"] === null ||
                            intermediateValue13["type"] === undefined
                          ) {
                            intermediateErrorMap13[`$.type`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString14 = intermediateValue13["type"];
                            if (typeof convertedString14 !== "string") {
                              intermediateErrorMap13[`$.type`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString14.length < 1) {
                                intermediateErrorMap13[`$.type`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else if (convertedString14 !== "default") {
                                intermediateErrorMap13[`$.type`] = {
                                  key: "validator.oneOf",
                                  allowedValues: ["default"],
                                  foundValue: convertedString14,
                                };
                              } else {
                                intermediateResult13["type"] =
                                  convertedString14;
                              }
                            }
                          }
                        }
                      }
                      if (Object.keys(intermediateErrorMap13).length > 0) {
                        errorMap[
                          `$.prettier.${genericKeyResult8}.configValue`
                        ].errors.push(intermediateErrorMap13);
                      } else {
                        hasAnyOfMatch11 = true;
                        delete errorMap[
                          `$.prettier.${genericKeyResult8}.configValue`
                        ];
                        result["prettier"][genericKeyResult8]["configValue"] =
                          intermediateResult13;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (value["eslint"] === null || value["eslint"] === undefined) {
        result["eslint"] = undefined;
      } else {
        if (
          typeof value["eslint"] !== "object" ||
          Array.isArray(value["eslint"])
        ) {
          errorMap[`$.eslint`] = {
            key: "validator.generic",
          };
        } else {
          result["eslint"] = {};
          for (let genericKeyInput8 of Object.keys(value["eslint"])) {
            /** @type {any} */
            let genericKeyResult9 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap10 = {};
            if (genericKeyInput8 === null || genericKeyInput8 === undefined) {
              genericKeyErrorMap10[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString11 = genericKeyInput8;
              if (typeof convertedString11 !== "string") {
                genericKeyErrorMap10[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString11.length < 1) {
                  genericKeyErrorMap10[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  genericKeyResult9 = convertedString11;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap10).length !== 0) {
              if (errorMap[`$.eslint`]) {
                errorMap[`$.eslint`].inputs.push({
                  key: genericKeyInput8,
                  errors: genericKeyErrorMap10,
                });
              } else {
                errorMap[`$.eslint`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput8, errors: genericKeyErrorMap10 },
                  ],
                };
              }
            } else {
              if (
                value["eslint"][genericKeyResult9] === null ||
                value["eslint"][genericKeyResult9] === undefined
              ) {
                errorMap[`$.eslint.${genericKeyResult9}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["eslint"][genericKeyResult9] !== "object" ||
                  Array.isArray(value["eslint"][genericKeyResult9])
                ) {
                  errorMap[`$.eslint.${genericKeyResult9}`] = {
                    key: "validator.object",
                    value: value["eslint"][genericKeyResult9],
                    foundType: typeof value["eslint"][genericKeyResult9],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys11 = new Set(["configValue"]);
                  for (const key of Object.keys(
                    value["eslint"][genericKeyResult9],
                  )) {
                    if (
                      !knownKeys11.has(key) &&
                      value["eslint"][genericKeyResult9][key] !== null &&
                      value["eslint"][genericKeyResult9][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys11];
                      const foundKeys = Object.keys(
                        value["eslint"][genericKeyResult9],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys11.has(it),
                      );
                      errorMap[`$.eslint.${genericKeyResult9}`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["eslint"][genericKeyResult9] = {
                    configValue: undefined,
                  };

                  if (
                    value["eslint"][genericKeyResult9]["configValue"] ===
                      null ||
                    value["eslint"][genericKeyResult9]["configValue"] ===
                      undefined
                  ) {
                    errorMap[`$.eslint.${genericKeyResult9}.configValue`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    let hasAnyOfMatch12 = false;
                    errorMap[`$.eslint.${genericKeyResult9}.configValue`] = {
                      key: "validator.anyOf",
                      errors: [],
                    };
                    if (!hasAnyOfMatch12) {
                      /** @type {ValidatorErrorMap} */
                      const intermediateErrorMap14 = {};
                      /** @type {any} */
                      let intermediateResult14 = undefined;
                      /** @type {any} */
                      let intermediateValue14 =
                        value["eslint"][genericKeyResult9]["configValue"];

                      if (
                        intermediateValue14 === null ||
                        intermediateValue14 === undefined
                      ) {
                        intermediateErrorMap14[`$`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        if (
                          typeof intermediateValue14 !== "object" ||
                          Array.isArray(intermediateValue14)
                        ) {
                          intermediateErrorMap14[`$`] = {
                            key: "validator.object",
                            value: intermediateValue14,
                            foundType: typeof intermediateValue14,
                          };
                        } else {
                          /** @type {Set<string>} */
                          const knownKeys14 = new Set(["type"]);
                          for (const key of Object.keys(intermediateValue14)) {
                            if (
                              !knownKeys14.has(key) &&
                              intermediateValue14[key] !== null &&
                              intermediateValue14[key] !== undefined
                            ) {
                              const expectedKeys = [...knownKeys14];
                              const foundKeys =
                                Object.keys(intermediateValue14);
                              const unknownKeys = foundKeys.filter(
                                (it) => !knownKeys14.has(it),
                              );
                              intermediateErrorMap14[`$`] = {
                                key: "validator.keys",
                                unknownKeys,
                                expectedKeys,
                                foundKeys,
                              };
                              break;
                            }
                          }
                          intermediateResult14 = { type: undefined };

                          if (
                            intermediateValue14["type"] === null ||
                            intermediateValue14["type"] === undefined
                          ) {
                            intermediateErrorMap14[`$.type`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString15 = intermediateValue14["type"];
                            if (typeof convertedString15 !== "string") {
                              intermediateErrorMap14[`$.type`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString15.length < 1) {
                                intermediateErrorMap14[`$.type`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else if (
                                convertedString15 !== "compasEslintPlugin"
                              ) {
                                intermediateErrorMap14[`$.type`] = {
                                  key: "validator.oneOf",
                                  allowedValues: ["compasEslintPlugin"],
                                  foundValue: convertedString15,
                                };
                              } else {
                                intermediateResult14["type"] =
                                  convertedString15;
                              }
                            }
                          }
                        }
                      }
                      if (Object.keys(intermediateErrorMap14).length > 0) {
                        errorMap[
                          `$.eslint.${genericKeyResult9}.configValue`
                        ].errors.push(intermediateErrorMap14);
                      } else {
                        hasAnyOfMatch12 = true;
                        delete errorMap[
                          `$.eslint.${genericKeyResult9}.configValue`
                        ];
                        result["eslint"][genericKeyResult9]["configValue"] =
                          intermediateResult14;
                      }
                    }
                    if (!hasAnyOfMatch12) {
                      /** @type {ValidatorErrorMap} */
                      const intermediateErrorMap14 = {};
                      /** @type {any} */
                      let intermediateResult14 = undefined;
                      /** @type {any} */
                      let intermediateValue14 =
                        value["eslint"][genericKeyResult9]["configValue"];

                      if (
                        intermediateValue14 === null ||
                        intermediateValue14 === undefined
                      ) {
                        intermediateErrorMap14[`$`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        if (
                          typeof intermediateValue14 !== "object" ||
                          Array.isArray(intermediateValue14)
                        ) {
                          intermediateErrorMap14[`$`] = {
                            key: "validator.object",
                            value: intermediateValue14,
                            foundType: typeof intermediateValue14,
                          };
                        } else {
                          /** @type {Set<string>} */
                          const knownKeys14 = new Set(["type"]);
                          for (const key of Object.keys(intermediateValue14)) {
                            if (
                              !knownKeys14.has(key) &&
                              intermediateValue14[key] !== null &&
                              intermediateValue14[key] !== undefined
                            ) {
                              const expectedKeys = [...knownKeys14];
                              const foundKeys =
                                Object.keys(intermediateValue14);
                              const unknownKeys = foundKeys.filter(
                                (it) => !knownKeys14.has(it),
                              );
                              intermediateErrorMap14[`$`] = {
                                key: "validator.keys",
                                unknownKeys,
                                expectedKeys,
                                foundKeys,
                              };
                              break;
                            }
                          }
                          intermediateResult14 = { type: undefined };

                          if (
                            intermediateValue14["type"] === null ||
                            intermediateValue14["type"] === undefined
                          ) {
                            intermediateErrorMap14[`$.type`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString15 = intermediateValue14["type"];
                            if (typeof convertedString15 !== "string") {
                              intermediateErrorMap14[`$.type`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString15.length < 1) {
                                intermediateErrorMap14[`$.type`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else if (convertedString15 !== "default") {
                                intermediateErrorMap14[`$.type`] = {
                                  key: "validator.oneOf",
                                  allowedValues: ["default"],
                                  foundValue: convertedString15,
                                };
                              } else {
                                intermediateResult14["type"] =
                                  convertedString15;
                              }
                            }
                          }
                        }
                      }
                      if (Object.keys(intermediateErrorMap14).length > 0) {
                        errorMap[
                          `$.eslint.${genericKeyResult9}.configValue`
                        ].errors.push(intermediateErrorMap14);
                      } else {
                        hasAnyOfMatch12 = true;
                        delete errorMap[
                          `$.eslint.${genericKeyResult9}.configValue`
                        ];
                        result["eslint"][genericKeyResult9]["configValue"] =
                          intermediateResult14;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").CompasResolvedConfigInput|any} value
 * @returns {Either<import("../common/types.js").CompasResolvedConfig, ValidatorErrorMap>}
 */
export function validateCompasResolvedConfig(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = {
        rootDirectory: undefined,
        cli: undefined,
        projects: undefined,
        actions: undefined,
        dockerContainers: undefined,
        migrations: undefined,
      };

      if (
        value["rootDirectory"] === null ||
        value["rootDirectory"] === undefined
      ) {
        errorMap[`$.rootDirectory`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString1 = value["rootDirectory"];
        if (typeof convertedString1 !== "string") {
          errorMap[`$.rootDirectory`] = {
            key: "validator.string",
          };
        } else {
          {
            result["rootDirectory"] = convertedString1;
          }
        }
      }
      if (value["cli"] === null || value["cli"] === undefined) {
        result["cli"] = undefined;
      } else {
        if (typeof value["cli"] !== "object" || Array.isArray(value["cli"])) {
          errorMap[`$.cli`] = {
            key: "validator.object",
            value: value["cli"],
            foundType: typeof value["cli"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys2 = new Set([
            "commandDirectories",
            "globalWatchOptions",
          ]);
          for (const key of Object.keys(value["cli"])) {
            if (
              !knownKeys2.has(key) &&
              value["cli"][key] !== null &&
              value["cli"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys2];
              const foundKeys = Object.keys(value["cli"]);
              const unknownKeys = foundKeys.filter((it) => !knownKeys2.has(it));
              errorMap[`$.cli`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["cli"] = {
            commandDirectories: undefined,
            globalWatchOptions: undefined,
          };

          if (
            value["cli"]["commandDirectories"] === null ||
            value["cli"]["commandDirectories"] === undefined
          ) {
            result["cli"]["commandDirectories"] = undefined;
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap4 = {};
            /** @type {any[]} */
            let intermediateResult4 = [];
            /** @type {any|any[]} */
            let intermediateValue4 = value["cli"]["commandDirectories"];

            if (!Array.isArray(intermediateValue4)) {
              errorMap[`$.cli.commandDirectories`] = {
                key: "validator.array",
                value: intermediateValue4,
              };
            } else {
              result["cli"]["commandDirectories"] = [];
              for (let i4 = 0; i4 < intermediateValue4.length; ++i4) {
                if (
                  intermediateValue4[i4] === null ||
                  intermediateValue4[i4] === undefined
                ) {
                  intermediateErrorMap4[`$.${i4}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString4 = intermediateValue4[i4];
                  if (typeof convertedString4 !== "string") {
                    intermediateErrorMap4[`$.${i4}`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString4.length < 1) {
                      intermediateErrorMap4[`$.${i4}`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult4[i4] = convertedString4;
                    }
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap4).length) {
              for (const errorKey of Object.keys(intermediateErrorMap4)) {
                errorMap[`$.cli.commandDirectories${errorKey.substring(1)}`] =
                  intermediateErrorMap4[errorKey];
              }
            } else {
              result["cli"]["commandDirectories"] = intermediateResult4;
            }
          }
          if (
            value["cli"]["globalWatchOptions"] === null ||
            value["cli"]["globalWatchOptions"] === undefined
          ) {
            result["cli"]["globalWatchOptions"] = undefined;
          } else {
            if (
              typeof value["cli"]["globalWatchOptions"] !== "object" ||
              Array.isArray(value["cli"]["globalWatchOptions"])
            ) {
              errorMap[`$.cli.globalWatchOptions`] = {
                key: "validator.object",
                value: value["cli"]["globalWatchOptions"],
                foundType: typeof value["cli"]["globalWatchOptions"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys4 = new Set(["extensions", "ignorePatterns"]);
              for (const key of Object.keys(
                value["cli"]["globalWatchOptions"],
              )) {
                if (
                  !knownKeys4.has(key) &&
                  value["cli"]["globalWatchOptions"][key] !== null &&
                  value["cli"]["globalWatchOptions"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys4];
                  const foundKeys = Object.keys(
                    value["cli"]["globalWatchOptions"],
                  );
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys4.has(it),
                  );
                  errorMap[`$.cli.globalWatchOptions`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["cli"]["globalWatchOptions"] = {
                extensions: undefined,
                ignorePatterns: undefined,
              };

              if (
                value["cli"]["globalWatchOptions"]["extensions"] === null ||
                value["cli"]["globalWatchOptions"]["extensions"] === undefined
              ) {
                result["cli"]["globalWatchOptions"]["extensions"] = undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap6 = {};
                /** @type {any[]} */
                let intermediateResult6 = [];
                /** @type {any|any[]} */
                let intermediateValue6 =
                  value["cli"]["globalWatchOptions"]["extensions"];

                if (!Array.isArray(intermediateValue6)) {
                  errorMap[`$.cli.globalWatchOptions.extensions`] = {
                    key: "validator.array",
                    value: intermediateValue6,
                  };
                } else {
                  result["cli"]["globalWatchOptions"]["extensions"] = [];
                  for (let i6 = 0; i6 < intermediateValue6.length; ++i6) {
                    if (
                      intermediateValue6[i6] === null ||
                      intermediateValue6[i6] === undefined
                    ) {
                      intermediateErrorMap6[`$.${i6}`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString6 = intermediateValue6[i6];
                      if (typeof convertedString6 !== "string") {
                        intermediateErrorMap6[`$.${i6}`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString6.length < 1) {
                          intermediateErrorMap6[`$.${i6}`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          intermediateResult6[i6] = convertedString6;
                        }
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap6).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap6)) {
                    errorMap[
                      `$.cli.globalWatchOptions.extensions${errorKey.substring(
                        1,
                      )}`
                    ] = intermediateErrorMap6[errorKey];
                  }
                } else {
                  result["cli"]["globalWatchOptions"]["extensions"] =
                    intermediateResult6;
                }
              }
              if (
                value["cli"]["globalWatchOptions"]["ignorePatterns"] === null ||
                value["cli"]["globalWatchOptions"]["ignorePatterns"] ===
                  undefined
              ) {
                result["cli"]["globalWatchOptions"]["ignorePatterns"] =
                  undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap7 = {};
                /** @type {any[]} */
                let intermediateResult7 = [];
                /** @type {any|any[]} */
                let intermediateValue7 =
                  value["cli"]["globalWatchOptions"]["ignorePatterns"];

                if (!Array.isArray(intermediateValue7)) {
                  errorMap[`$.cli.globalWatchOptions.ignorePatterns`] = {
                    key: "validator.array",
                    value: intermediateValue7,
                  };
                } else {
                  result["cli"]["globalWatchOptions"]["ignorePatterns"] = [];
                  for (let i7 = 0; i7 < intermediateValue7.length; ++i7) {
                    if (
                      intermediateValue7[i7] === null ||
                      intermediateValue7[i7] === undefined
                    ) {
                      intermediateErrorMap7[`$.${i7}`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString7 = intermediateValue7[i7];
                      if (typeof convertedString7 !== "string") {
                        intermediateErrorMap7[`$.${i7}`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString7.length < 1) {
                          intermediateErrorMap7[`$.${i7}`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          intermediateResult7[i7] = convertedString7;
                        }
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap7).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap7)) {
                    errorMap[
                      `$.cli.globalWatchOptions.ignorePatterns${errorKey.substring(
                        1,
                      )}`
                    ] = intermediateErrorMap7[errorKey];
                  }
                } else {
                  result["cli"]["globalWatchOptions"]["ignorePatterns"] =
                    intermediateResult7;
                }
              }
            }
          }
        }
      }
      if (value["projects"] === null || value["projects"] === undefined) {
        errorMap[`$.projects`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap4 = {};
        /** @type {any[]} */
        let intermediateResult4 = [];
        /** @type {any|any[]} */
        let intermediateValue4 = value["projects"];

        if (!Array.isArray(intermediateValue4)) {
          errorMap[`$.projects`] = {
            key: "validator.array",
            value: intermediateValue4,
          };
        } else {
          result["projects"] = [];
          for (let i4 = 0; i4 < intermediateValue4.length; ++i4) {
            if (
              intermediateValue4[i4] === null ||
              intermediateValue4[i4] === undefined
            ) {
              intermediateErrorMap4[`$.${i4}`] = {
                key: "validator.undefined",
              };
            } else {
              const refResult4 = validateCompasResolvedConfig(
                intermediateValue4[i4],
              );

              if (refResult4.error) {
                for (const errorKey of Object.keys(refResult4.error)) {
                  intermediateErrorMap4[`$.${i4}${errorKey.substring(1)}`] =
                    refResult4.error[errorKey];
                }
              }
              intermediateResult4[i4] = refResult4.value;
            }
          }
        }
        if (Object.keys(intermediateErrorMap4).length) {
          for (const errorKey of Object.keys(intermediateErrorMap4)) {
            errorMap[`$.projects${errorKey.substring(1)}`] =
              intermediateErrorMap4[errorKey];
          }
        } else {
          result["projects"] = intermediateResult4;
        }
      }
      if (value["actions"] === null || value["actions"] === undefined) {
        result["actions"] = [];
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap5 = {};
        /** @type {any[]} */
        let intermediateResult5 = [];
        /** @type {any|any[]} */
        let intermediateValue5 = value["actions"];

        if (!Array.isArray(intermediateValue5)) {
          errorMap[`$.actions`] = {
            key: "validator.array",
            value: intermediateValue5,
          };
        } else {
          result["actions"] = [];
          for (let i5 = 0; i5 < intermediateValue5.length; ++i5) {
            if (
              intermediateValue5[i5] === null ||
              intermediateValue5[i5] === undefined
            ) {
              intermediateErrorMap5[`$.${i5}`] = {
                key: "validator.undefined",
              };
            } else {
              if (
                typeof intermediateValue5[i5] !== "object" ||
                Array.isArray(intermediateValue5[i5])
              ) {
                intermediateErrorMap5[`$.${i5}`] = {
                  key: "validator.object",
                  value: intermediateValue5[i5],
                  foundType: typeof intermediateValue5[i5],
                };
              } else {
                /** @type {Set<string>} */
                const knownKeys5 = new Set(["name", "shortcut", "command"]);
                for (const key of Object.keys(intermediateValue5[i5])) {
                  if (
                    !knownKeys5.has(key) &&
                    intermediateValue5[i5][key] !== null &&
                    intermediateValue5[i5][key] !== undefined
                  ) {
                    const expectedKeys = [...knownKeys5];
                    const foundKeys = Object.keys(intermediateValue5[i5]);
                    const unknownKeys = foundKeys.filter(
                      (it) => !knownKeys5.has(it),
                    );
                    intermediateErrorMap5[`$.${i5}`] = {
                      key: "validator.keys",
                      unknownKeys,
                      expectedKeys,
                      foundKeys,
                    };
                    break;
                  }
                }
                intermediateResult5[i5] = {
                  name: undefined,
                  shortcut: undefined,
                  command: undefined,
                };

                if (
                  intermediateValue5[i5]["name"] === null ||
                  intermediateValue5[i5]["name"] === undefined
                ) {
                  intermediateErrorMap5[`$.${i5}.name`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString6 = intermediateValue5[i5]["name"];
                  if (typeof convertedString6 !== "string") {
                    intermediateErrorMap5[`$.${i5}.name`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString6.length < 1) {
                      intermediateErrorMap5[`$.${i5}.name`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult5[i5]["name"] = convertedString6;
                    }
                  }
                }
                if (
                  intermediateValue5[i5]["shortcut"] === null ||
                  intermediateValue5[i5]["shortcut"] === undefined
                ) {
                  intermediateErrorMap5[`$.${i5}.shortcut`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString7 = intermediateValue5[i5]["shortcut"];
                  if (typeof convertedString7 !== "string") {
                    intermediateErrorMap5[`$.${i5}.shortcut`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString7.length < 1) {
                      intermediateErrorMap5[`$.${i5}.shortcut`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult5[i5]["shortcut"] = convertedString7;
                    }
                  }
                }
                if (
                  intermediateValue5[i5]["command"] === null ||
                  intermediateValue5[i5]["command"] === undefined
                ) {
                  intermediateErrorMap5[`$.${i5}.command`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {ValidatorErrorMap} */
                  const intermediateErrorMap9 = {};
                  /** @type {any[]} */
                  let intermediateResult9 = [];
                  /** @type {any|any[]} */
                  let intermediateValue9 = intermediateValue5[i5]["command"];

                  if (!Array.isArray(intermediateValue9)) {
                    intermediateErrorMap5[`$.${i5}.command`] = {
                      key: "validator.array",
                      value: intermediateValue9,
                    };
                  } else {
                    if (intermediateValue9.length < 1) {
                      intermediateErrorMap5[`$.${i5}.command`] = {
                        key: "validator.length",
                        minLength: 1,
                        foundLength: intermediateValue9.length,
                      };
                    }
                    intermediateResult5[i5]["command"] = [];
                    for (let i9 = 0; i9 < intermediateValue9.length; ++i9) {
                      if (
                        intermediateValue9[i9] === null ||
                        intermediateValue9[i9] === undefined
                      ) {
                        intermediateErrorMap9[`$.${i9}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {string} */
                        let convertedString9 = intermediateValue9[i9];
                        if (typeof convertedString9 !== "string") {
                          intermediateErrorMap9[`$.${i9}`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString9.length < 1) {
                            intermediateErrorMap9[`$.${i9}`] = {
                              key: "validator.length",
                              minLength: 1,
                            };
                          } else {
                            intermediateResult9[i9] = convertedString9;
                          }
                        }
                      }
                    }
                  }
                  if (Object.keys(intermediateErrorMap9).length) {
                    for (const errorKey of Object.keys(intermediateErrorMap9)) {
                      intermediateErrorMap5[
                        `$.${i5}.command${errorKey.substring(1)}`
                      ] = intermediateErrorMap9[errorKey];
                    }
                  } else {
                    intermediateResult5[i5]["command"] = intermediateResult9;
                  }
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap5).length) {
          for (const errorKey of Object.keys(intermediateErrorMap5)) {
            errorMap[`$.actions${errorKey.substring(1)}`] =
              intermediateErrorMap5[errorKey];
          }
        } else {
          result["actions"] = intermediateResult5;
        }
      }
      if (
        value["dockerContainers"] === null ||
        value["dockerContainers"] === undefined
      ) {
        result["dockerContainers"] = {};
      } else {
        if (
          typeof value["dockerContainers"] !== "object" ||
          Array.isArray(value["dockerContainers"])
        ) {
          errorMap[`$.dockerContainers`] = {
            key: "validator.generic",
          };
        } else {
          result["dockerContainers"] = {};
          for (let genericKeyInput5 of Object.keys(value["dockerContainers"])) {
            /** @type {any} */
            let genericKeyResult6 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap7 = {};
            if (genericKeyInput5 === null || genericKeyInput5 === undefined) {
              genericKeyErrorMap7[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString8 = genericKeyInput5;
              if (typeof convertedString8 !== "string") {
                genericKeyErrorMap7[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString8.length < 1) {
                  genericKeyErrorMap7[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (!/[a-z-0-9]+/g.test(convertedString8)) {
                  genericKeyErrorMap7[`$`] = {
                    key: "validator.pattern",
                  };
                } else {
                  genericKeyResult6 = convertedString8;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap7).length !== 0) {
              if (errorMap[`$.dockerContainers`]) {
                errorMap[`$.dockerContainers`].inputs.push({
                  key: genericKeyInput5,
                  errors: genericKeyErrorMap7,
                });
              } else {
                errorMap[`$.dockerContainers`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput5, errors: genericKeyErrorMap7 },
                  ],
                };
              }
            } else {
              if (
                value["dockerContainers"][genericKeyResult6] === null ||
                value["dockerContainers"][genericKeyResult6] === undefined
              ) {
                errorMap[`$.dockerContainers.${genericKeyResult6}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["dockerContainers"][genericKeyResult6] !==
                    "object" ||
                  Array.isArray(value["dockerContainers"][genericKeyResult6])
                ) {
                  errorMap[`$.dockerContainers.${genericKeyResult6}`] = {
                    key: "validator.object",
                    value: value["dockerContainers"][genericKeyResult6],
                    foundType:
                      typeof value["dockerContainers"][genericKeyResult6],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys8 = new Set([
                    "image",
                    "createArguments",
                    "runArguments",
                  ]);
                  for (const key of Object.keys(
                    value["dockerContainers"][genericKeyResult6],
                  )) {
                    if (
                      !knownKeys8.has(key) &&
                      value["dockerContainers"][genericKeyResult6][key] !==
                        null &&
                      value["dockerContainers"][genericKeyResult6][key] !==
                        undefined
                    ) {
                      const expectedKeys = [...knownKeys8];
                      const foundKeys = Object.keys(
                        value["dockerContainers"][genericKeyResult6],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys8.has(it),
                      );
                      errorMap[`$.dockerContainers.${genericKeyResult6}`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["dockerContainers"][genericKeyResult6] = {
                    image: undefined,
                    createArguments: undefined,
                    runArguments: undefined,
                  };

                  if (
                    value["dockerContainers"][genericKeyResult6]["image"] ===
                      null ||
                    value["dockerContainers"][genericKeyResult6]["image"] ===
                      undefined
                  ) {
                    errorMap[`$.dockerContainers.${genericKeyResult6}.image`] =
                      {
                        key: "validator.undefined",
                      };
                  } else {
                    /** @type {string} */
                    let convertedString9 =
                      value["dockerContainers"][genericKeyResult6]["image"];
                    if (typeof convertedString9 !== "string") {
                      errorMap[
                        `$.dockerContainers.${genericKeyResult6}.image`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString9.length < 1) {
                        errorMap[
                          `$.dockerContainers.${genericKeyResult6}.image`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["dockerContainers"][genericKeyResult6]["image"] =
                          convertedString9;
                      }
                    }
                  }
                  if (
                    value["dockerContainers"][genericKeyResult6][
                      "createArguments"
                    ] === null ||
                    value["dockerContainers"][genericKeyResult6][
                      "createArguments"
                    ] === undefined
                  ) {
                    result["dockerContainers"][genericKeyResult6][
                      "createArguments"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString10 =
                      value["dockerContainers"][genericKeyResult6][
                        "createArguments"
                      ];
                    if (typeof convertedString10 !== "string") {
                      errorMap[
                        `$.dockerContainers.${genericKeyResult6}.createArguments`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString10.length === 0) {
                        result["dockerContainers"][genericKeyResult6][
                          "createArguments"
                        ] = undefined;
                      } else {
                        if (convertedString10.length < 1) {
                          errorMap[
                            `$.dockerContainers.${genericKeyResult6}.createArguments`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["dockerContainers"][genericKeyResult6][
                            "createArguments"
                          ] = convertedString10;
                        }
                      }
                    }
                  }
                  if (
                    value["dockerContainers"][genericKeyResult6][
                      "runArguments"
                    ] === null ||
                    value["dockerContainers"][genericKeyResult6][
                      "runArguments"
                    ] === undefined
                  ) {
                    result["dockerContainers"][genericKeyResult6][
                      "runArguments"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString11 =
                      value["dockerContainers"][genericKeyResult6][
                        "runArguments"
                      ];
                    if (typeof convertedString11 !== "string") {
                      errorMap[
                        `$.dockerContainers.${genericKeyResult6}.runArguments`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString11.length === 0) {
                        result["dockerContainers"][genericKeyResult6][
                          "runArguments"
                        ] = undefined;
                      } else {
                        if (convertedString11.length < 1) {
                          errorMap[
                            `$.dockerContainers.${genericKeyResult6}.runArguments`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["dockerContainers"][genericKeyResult6][
                            "runArguments"
                          ] = convertedString11;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (value["migrations"] === null || value["migrations"] === undefined) {
        result["migrations"] = undefined;
      } else {
        if (
          typeof value["migrations"] !== "object" ||
          Array.isArray(value["migrations"])
        ) {
          errorMap[`$.migrations`] = {
            key: "validator.object",
            value: value["migrations"],
            foundType: typeof value["migrations"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys6 = new Set([]);
          for (const key of Object.keys(value["migrations"])) {
            if (
              !knownKeys6.has(key) &&
              value["migrations"][key] !== null &&
              value["migrations"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys6];
              const foundKeys = Object.keys(value["migrations"]);
              const unknownKeys = foundKeys.filter((it) => !knownKeys6.has(it));
              errorMap[`$.migrations`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["migrations"] = {};
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types.js").CompasConfigInput|any} value
 * @returns {Either<import("../common/types.js").CompasConfig, ValidatorErrorMap>}
 */
export function validateCompasConfig(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = {
        cli: undefined,
        projects: undefined,
        actions: undefined,
        dockerContainers: undefined,
        migrations: undefined,
      };

      if (value["cli"] === null || value["cli"] === undefined) {
        result["cli"] = undefined;
      } else {
        if (typeof value["cli"] !== "object" || Array.isArray(value["cli"])) {
          errorMap[`$.cli`] = {
            key: "validator.object",
            value: value["cli"],
            foundType: typeof value["cli"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys1 = new Set([
            "commandDirectories",
            "globalWatchOptions",
          ]);
          for (const key of Object.keys(value["cli"])) {
            if (
              !knownKeys1.has(key) &&
              value["cli"][key] !== null &&
              value["cli"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys1];
              const foundKeys = Object.keys(value["cli"]);
              const unknownKeys = foundKeys.filter((it) => !knownKeys1.has(it));
              errorMap[`$.cli`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["cli"] = {
            commandDirectories: undefined,
            globalWatchOptions: undefined,
          };

          if (
            value["cli"]["commandDirectories"] === null ||
            value["cli"]["commandDirectories"] === undefined
          ) {
            result["cli"]["commandDirectories"] = undefined;
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap3 = {};
            /** @type {any[]} */
            let intermediateResult3 = [];
            /** @type {any|any[]} */
            let intermediateValue3 = value["cli"]["commandDirectories"];

            if (!Array.isArray(intermediateValue3)) {
              errorMap[`$.cli.commandDirectories`] = {
                key: "validator.array",
                value: intermediateValue3,
              };
            } else {
              result["cli"]["commandDirectories"] = [];
              for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
                if (
                  intermediateValue3[i3] === null ||
                  intermediateValue3[i3] === undefined
                ) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString3 = intermediateValue3[i3];
                  if (typeof convertedString3 !== "string") {
                    intermediateErrorMap3[`$.${i3}`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString3.length < 1) {
                      intermediateErrorMap3[`$.${i3}`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult3[i3] = convertedString3;
                    }
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap3).length) {
              for (const errorKey of Object.keys(intermediateErrorMap3)) {
                errorMap[`$.cli.commandDirectories${errorKey.substring(1)}`] =
                  intermediateErrorMap3[errorKey];
              }
            } else {
              result["cli"]["commandDirectories"] = intermediateResult3;
            }
          }
          if (
            value["cli"]["globalWatchOptions"] === null ||
            value["cli"]["globalWatchOptions"] === undefined
          ) {
            result["cli"]["globalWatchOptions"] = undefined;
          } else {
            if (
              typeof value["cli"]["globalWatchOptions"] !== "object" ||
              Array.isArray(value["cli"]["globalWatchOptions"])
            ) {
              errorMap[`$.cli.globalWatchOptions`] = {
                key: "validator.object",
                value: value["cli"]["globalWatchOptions"],
                foundType: typeof value["cli"]["globalWatchOptions"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys3 = new Set(["extensions", "ignorePatterns"]);
              for (const key of Object.keys(
                value["cli"]["globalWatchOptions"],
              )) {
                if (
                  !knownKeys3.has(key) &&
                  value["cli"]["globalWatchOptions"][key] !== null &&
                  value["cli"]["globalWatchOptions"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys3];
                  const foundKeys = Object.keys(
                    value["cli"]["globalWatchOptions"],
                  );
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys3.has(it),
                  );
                  errorMap[`$.cli.globalWatchOptions`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["cli"]["globalWatchOptions"] = {
                extensions: undefined,
                ignorePatterns: undefined,
              };

              if (
                value["cli"]["globalWatchOptions"]["extensions"] === null ||
                value["cli"]["globalWatchOptions"]["extensions"] === undefined
              ) {
                result["cli"]["globalWatchOptions"]["extensions"] = undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap5 = {};
                /** @type {any[]} */
                let intermediateResult5 = [];
                /** @type {any|any[]} */
                let intermediateValue5 =
                  value["cli"]["globalWatchOptions"]["extensions"];

                if (!Array.isArray(intermediateValue5)) {
                  errorMap[`$.cli.globalWatchOptions.extensions`] = {
                    key: "validator.array",
                    value: intermediateValue5,
                  };
                } else {
                  result["cli"]["globalWatchOptions"]["extensions"] = [];
                  for (let i5 = 0; i5 < intermediateValue5.length; ++i5) {
                    if (
                      intermediateValue5[i5] === null ||
                      intermediateValue5[i5] === undefined
                    ) {
                      intermediateErrorMap5[`$.${i5}`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString5 = intermediateValue5[i5];
                      if (typeof convertedString5 !== "string") {
                        intermediateErrorMap5[`$.${i5}`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString5.length < 1) {
                          intermediateErrorMap5[`$.${i5}`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          intermediateResult5[i5] = convertedString5;
                        }
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap5).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap5)) {
                    errorMap[
                      `$.cli.globalWatchOptions.extensions${errorKey.substring(
                        1,
                      )}`
                    ] = intermediateErrorMap5[errorKey];
                  }
                } else {
                  result["cli"]["globalWatchOptions"]["extensions"] =
                    intermediateResult5;
                }
              }
              if (
                value["cli"]["globalWatchOptions"]["ignorePatterns"] === null ||
                value["cli"]["globalWatchOptions"]["ignorePatterns"] ===
                  undefined
              ) {
                result["cli"]["globalWatchOptions"]["ignorePatterns"] =
                  undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap6 = {};
                /** @type {any[]} */
                let intermediateResult6 = [];
                /** @type {any|any[]} */
                let intermediateValue6 =
                  value["cli"]["globalWatchOptions"]["ignorePatterns"];

                if (!Array.isArray(intermediateValue6)) {
                  errorMap[`$.cli.globalWatchOptions.ignorePatterns`] = {
                    key: "validator.array",
                    value: intermediateValue6,
                  };
                } else {
                  result["cli"]["globalWatchOptions"]["ignorePatterns"] = [];
                  for (let i6 = 0; i6 < intermediateValue6.length; ++i6) {
                    if (
                      intermediateValue6[i6] === null ||
                      intermediateValue6[i6] === undefined
                    ) {
                      intermediateErrorMap6[`$.${i6}`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString6 = intermediateValue6[i6];
                      if (typeof convertedString6 !== "string") {
                        intermediateErrorMap6[`$.${i6}`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString6.length < 1) {
                          intermediateErrorMap6[`$.${i6}`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          intermediateResult6[i6] = convertedString6;
                        }
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap6).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap6)) {
                    errorMap[
                      `$.cli.globalWatchOptions.ignorePatterns${errorKey.substring(
                        1,
                      )}`
                    ] = intermediateErrorMap6[errorKey];
                  }
                } else {
                  result["cli"]["globalWatchOptions"]["ignorePatterns"] =
                    intermediateResult6;
                }
              }
            }
          }
        }
      }
      if (value["projects"] === null || value["projects"] === undefined) {
        result["projects"] = [];
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap3 = {};
        /** @type {any[]} */
        let intermediateResult3 = [];
        /** @type {any|any[]} */
        let intermediateValue3 = value["projects"];

        if (!Array.isArray(intermediateValue3)) {
          errorMap[`$.projects`] = {
            key: "validator.array",
            value: intermediateValue3,
          };
        } else {
          result["projects"] = [];
          for (let i3 = 0; i3 < intermediateValue3.length; ++i3) {
            if (
              intermediateValue3[i3] === null ||
              intermediateValue3[i3] === undefined
            ) {
              intermediateErrorMap3[`$.${i3}`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString3 = intermediateValue3[i3];
              if (typeof convertedString3 !== "string") {
                intermediateErrorMap3[`$.${i3}`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  intermediateErrorMap3[`$.${i3}`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  intermediateResult3[i3] = convertedString3;
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap3).length) {
          for (const errorKey of Object.keys(intermediateErrorMap3)) {
            errorMap[`$.projects${errorKey.substring(1)}`] =
              intermediateErrorMap3[errorKey];
          }
        } else {
          result["projects"] = intermediateResult3;
        }
      }
      if (value["actions"] === null || value["actions"] === undefined) {
        result["actions"] = [];
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap4 = {};
        /** @type {any[]} */
        let intermediateResult4 = [];
        /** @type {any|any[]} */
        let intermediateValue4 = value["actions"];

        if (!Array.isArray(intermediateValue4)) {
          errorMap[`$.actions`] = {
            key: "validator.array",
            value: intermediateValue4,
          };
        } else {
          result["actions"] = [];
          for (let i4 = 0; i4 < intermediateValue4.length; ++i4) {
            if (
              intermediateValue4[i4] === null ||
              intermediateValue4[i4] === undefined
            ) {
              intermediateErrorMap4[`$.${i4}`] = {
                key: "validator.undefined",
              };
            } else {
              if (
                typeof intermediateValue4[i4] !== "object" ||
                Array.isArray(intermediateValue4[i4])
              ) {
                intermediateErrorMap4[`$.${i4}`] = {
                  key: "validator.object",
                  value: intermediateValue4[i4],
                  foundType: typeof intermediateValue4[i4],
                };
              } else {
                /** @type {Set<string>} */
                const knownKeys4 = new Set(["name", "shortcut", "command"]);
                for (const key of Object.keys(intermediateValue4[i4])) {
                  if (
                    !knownKeys4.has(key) &&
                    intermediateValue4[i4][key] !== null &&
                    intermediateValue4[i4][key] !== undefined
                  ) {
                    const expectedKeys = [...knownKeys4];
                    const foundKeys = Object.keys(intermediateValue4[i4]);
                    const unknownKeys = foundKeys.filter(
                      (it) => !knownKeys4.has(it),
                    );
                    intermediateErrorMap4[`$.${i4}`] = {
                      key: "validator.keys",
                      unknownKeys,
                      expectedKeys,
                      foundKeys,
                    };
                    break;
                  }
                }
                intermediateResult4[i4] = {
                  name: undefined,
                  shortcut: undefined,
                  command: undefined,
                };

                if (
                  intermediateValue4[i4]["name"] === null ||
                  intermediateValue4[i4]["name"] === undefined
                ) {
                  intermediateErrorMap4[`$.${i4}.name`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString5 = intermediateValue4[i4]["name"];
                  if (typeof convertedString5 !== "string") {
                    intermediateErrorMap4[`$.${i4}.name`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString5.length < 1) {
                      intermediateErrorMap4[`$.${i4}.name`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult4[i4]["name"] = convertedString5;
                    }
                  }
                }
                if (
                  intermediateValue4[i4]["shortcut"] === null ||
                  intermediateValue4[i4]["shortcut"] === undefined
                ) {
                  intermediateErrorMap4[`$.${i4}.shortcut`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {string} */
                  let convertedString6 = intermediateValue4[i4]["shortcut"];
                  if (typeof convertedString6 !== "string") {
                    intermediateErrorMap4[`$.${i4}.shortcut`] = {
                      key: "validator.string",
                    };
                  } else {
                    if (convertedString6.length < 1) {
                      intermediateErrorMap4[`$.${i4}.shortcut`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      intermediateResult4[i4]["shortcut"] = convertedString6;
                    }
                  }
                }
                if (
                  intermediateValue4[i4]["command"] === null ||
                  intermediateValue4[i4]["command"] === undefined
                ) {
                  intermediateErrorMap4[`$.${i4}.command`] = {
                    key: "validator.undefined",
                  };
                } else {
                  /** @type {ValidatorErrorMap} */
                  const intermediateErrorMap8 = {};
                  /** @type {any[]} */
                  let intermediateResult8 = [];
                  /** @type {any|any[]} */
                  let intermediateValue8 = intermediateValue4[i4]["command"];

                  if (!Array.isArray(intermediateValue8)) {
                    intermediateErrorMap4[`$.${i4}.command`] = {
                      key: "validator.array",
                      value: intermediateValue8,
                    };
                  } else {
                    if (intermediateValue8.length < 1) {
                      intermediateErrorMap4[`$.${i4}.command`] = {
                        key: "validator.length",
                        minLength: 1,
                        foundLength: intermediateValue8.length,
                      };
                    }
                    intermediateResult4[i4]["command"] = [];
                    for (let i8 = 0; i8 < intermediateValue8.length; ++i8) {
                      if (
                        intermediateValue8[i8] === null ||
                        intermediateValue8[i8] === undefined
                      ) {
                        intermediateErrorMap8[`$.${i8}`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {string} */
                        let convertedString8 = intermediateValue8[i8];
                        if (typeof convertedString8 !== "string") {
                          intermediateErrorMap8[`$.${i8}`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString8.length < 1) {
                            intermediateErrorMap8[`$.${i8}`] = {
                              key: "validator.length",
                              minLength: 1,
                            };
                          } else {
                            intermediateResult8[i8] = convertedString8;
                          }
                        }
                      }
                    }
                  }
                  if (Object.keys(intermediateErrorMap8).length) {
                    for (const errorKey of Object.keys(intermediateErrorMap8)) {
                      intermediateErrorMap4[
                        `$.${i4}.command${errorKey.substring(1)}`
                      ] = intermediateErrorMap8[errorKey];
                    }
                  } else {
                    intermediateResult4[i4]["command"] = intermediateResult8;
                  }
                }
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap4).length) {
          for (const errorKey of Object.keys(intermediateErrorMap4)) {
            errorMap[`$.actions${errorKey.substring(1)}`] =
              intermediateErrorMap4[errorKey];
          }
        } else {
          result["actions"] = intermediateResult4;
        }
      }
      if (
        value["dockerContainers"] === null ||
        value["dockerContainers"] === undefined
      ) {
        result["dockerContainers"] = {};
      } else {
        if (
          typeof value["dockerContainers"] !== "object" ||
          Array.isArray(value["dockerContainers"])
        ) {
          errorMap[`$.dockerContainers`] = {
            key: "validator.generic",
          };
        } else {
          result["dockerContainers"] = {};
          for (let genericKeyInput4 of Object.keys(value["dockerContainers"])) {
            /** @type {any} */
            let genericKeyResult5 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap6 = {};
            if (genericKeyInput4 === null || genericKeyInput4 === undefined) {
              genericKeyErrorMap6[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString7 = genericKeyInput4;
              if (typeof convertedString7 !== "string") {
                genericKeyErrorMap6[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString7.length < 1) {
                  genericKeyErrorMap6[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (!/[a-z-0-9]+/g.test(convertedString7)) {
                  genericKeyErrorMap6[`$`] = {
                    key: "validator.pattern",
                  };
                } else {
                  genericKeyResult5 = convertedString7;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap6).length !== 0) {
              if (errorMap[`$.dockerContainers`]) {
                errorMap[`$.dockerContainers`].inputs.push({
                  key: genericKeyInput4,
                  errors: genericKeyErrorMap6,
                });
              } else {
                errorMap[`$.dockerContainers`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput4, errors: genericKeyErrorMap6 },
                  ],
                };
              }
            } else {
              if (
                value["dockerContainers"][genericKeyResult5] === null ||
                value["dockerContainers"][genericKeyResult5] === undefined
              ) {
                errorMap[`$.dockerContainers.${genericKeyResult5}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["dockerContainers"][genericKeyResult5] !==
                    "object" ||
                  Array.isArray(value["dockerContainers"][genericKeyResult5])
                ) {
                  errorMap[`$.dockerContainers.${genericKeyResult5}`] = {
                    key: "validator.object",
                    value: value["dockerContainers"][genericKeyResult5],
                    foundType:
                      typeof value["dockerContainers"][genericKeyResult5],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys7 = new Set([
                    "image",
                    "createArguments",
                    "runArguments",
                  ]);
                  for (const key of Object.keys(
                    value["dockerContainers"][genericKeyResult5],
                  )) {
                    if (
                      !knownKeys7.has(key) &&
                      value["dockerContainers"][genericKeyResult5][key] !==
                        null &&
                      value["dockerContainers"][genericKeyResult5][key] !==
                        undefined
                    ) {
                      const expectedKeys = [...knownKeys7];
                      const foundKeys = Object.keys(
                        value["dockerContainers"][genericKeyResult5],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys7.has(it),
                      );
                      errorMap[`$.dockerContainers.${genericKeyResult5}`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["dockerContainers"][genericKeyResult5] = {
                    image: undefined,
                    createArguments: undefined,
                    runArguments: undefined,
                  };

                  if (
                    value["dockerContainers"][genericKeyResult5]["image"] ===
                      null ||
                    value["dockerContainers"][genericKeyResult5]["image"] ===
                      undefined
                  ) {
                    errorMap[`$.dockerContainers.${genericKeyResult5}.image`] =
                      {
                        key: "validator.undefined",
                      };
                  } else {
                    /** @type {string} */
                    let convertedString8 =
                      value["dockerContainers"][genericKeyResult5]["image"];
                    if (typeof convertedString8 !== "string") {
                      errorMap[
                        `$.dockerContainers.${genericKeyResult5}.image`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString8.length < 1) {
                        errorMap[
                          `$.dockerContainers.${genericKeyResult5}.image`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["dockerContainers"][genericKeyResult5]["image"] =
                          convertedString8;
                      }
                    }
                  }
                  if (
                    value["dockerContainers"][genericKeyResult5][
                      "createArguments"
                    ] === null ||
                    value["dockerContainers"][genericKeyResult5][
                      "createArguments"
                    ] === undefined
                  ) {
                    result["dockerContainers"][genericKeyResult5][
                      "createArguments"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString9 =
                      value["dockerContainers"][genericKeyResult5][
                        "createArguments"
                      ];
                    if (typeof convertedString9 !== "string") {
                      errorMap[
                        `$.dockerContainers.${genericKeyResult5}.createArguments`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString9.length === 0) {
                        result["dockerContainers"][genericKeyResult5][
                          "createArguments"
                        ] = undefined;
                      } else {
                        if (convertedString9.length < 1) {
                          errorMap[
                            `$.dockerContainers.${genericKeyResult5}.createArguments`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["dockerContainers"][genericKeyResult5][
                            "createArguments"
                          ] = convertedString9;
                        }
                      }
                    }
                  }
                  if (
                    value["dockerContainers"][genericKeyResult5][
                      "runArguments"
                    ] === null ||
                    value["dockerContainers"][genericKeyResult5][
                      "runArguments"
                    ] === undefined
                  ) {
                    result["dockerContainers"][genericKeyResult5][
                      "runArguments"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString10 =
                      value["dockerContainers"][genericKeyResult5][
                        "runArguments"
                      ];
                    if (typeof convertedString10 !== "string") {
                      errorMap[
                        `$.dockerContainers.${genericKeyResult5}.runArguments`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString10.length === 0) {
                        result["dockerContainers"][genericKeyResult5][
                          "runArguments"
                        ] = undefined;
                      } else {
                        if (convertedString10.length < 1) {
                          errorMap[
                            `$.dockerContainers.${genericKeyResult5}.runArguments`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["dockerContainers"][genericKeyResult5][
                            "runArguments"
                          ] = convertedString10;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (value["migrations"] === null || value["migrations"] === undefined) {
        result["migrations"] = undefined;
      } else {
        if (
          typeof value["migrations"] !== "object" ||
          Array.isArray(value["migrations"])
        ) {
          errorMap[`$.migrations`] = {
            key: "validator.object",
            value: value["migrations"],
            foundType: typeof value["migrations"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys5 = new Set([]);
          for (const key of Object.keys(value["migrations"])) {
            if (
              !knownKeys5.has(key) &&
              value["migrations"][key] !== null &&
              value["migrations"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys5];
              const foundKeys = Object.keys(value["migrations"]);
              const unknownKeys = foundKeys.filter((it) => !knownKeys5.has(it));
              errorMap[`$.migrations`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["migrations"] = {};
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}
