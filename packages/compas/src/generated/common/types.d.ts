// Generated by @compas/code-gen


export type CompasResolvedConfig = {
  "rootDirectory": string;
  
  /**
   * Old @compas/cli config
   */
  "cli"?: {
    
    /**
     * Array of directories relative to the project root. All JavaScript files will be imported by the CLI and checked if it exports a 'cliDefinition'.
     */
    "commandDirectories"?: (string)[]|undefined;
    
    /**
     * Project level watch options, applied to all commands running in 'watch' mode via the Compas CLI.
     */
    "globalWatchOptions"?: {
      
      /**
       * Add file extensions that should be watched
       */
      "extensions"?: (string)[]|undefined;
      
      /**
       * Remove directories from being watched, this has precedence over the included extensions
       */
      "ignorePatterns"?: (string)[]|undefined;
    }|undefined;
  }|undefined;
  "projects": (CompasResolvedConfig)[];
  
  /**
   * Available actions for this project.
   */
  "actions": ({
    "name": string;
    "shortcut": string;
    "command": (string)[];
  })[];
  
  /**
   * Docker container configuration.
   */
  "dockerContainers": { [key: string]: {
    "image": string;
    "createArguments"?: string|undefined;
    "runArguments"?: string|undefined;
  }};
};

export type CompasCache = {
  
  /**
   * Compas version, used for cache invalidations.
   */
  "version": string;
  
  /**
   * The resolved config. Managed by {@link configLoaderIntegration}.
   */
  "config"?: CompasResolvedConfig|undefined;
  
  /**
   * Resolved project root directories. Managed by {@link rootDirectoriesIntegration}.
   */
  "rootDirectories"?: (string)[]|undefined;
  
  /**
   * The inferred package manager per rootDirectory. Managed by {@link packageManagerIntegration}.
   */
  "packageManager"?: { [key: string]: {
    "name": string;
    "installCommand": string;
    "nodeModulesBinCommand": string;
    "packageJsonScriptCommand": string;
  }}|undefined;
  
  /**
   * Shared available actions per rootDirectory. Managed by {@link inferredActionIntegration}.
   */
  "availableActions"?: { [key: string]: ({
    "name": string;
    "command": (string)[];
  })[]}|undefined;
};

export type CompasResolvedConfigInput = {
  "rootDirectory": string;
  
  /**
   * Old @compas/cli config
   */
  "cli"?: {
    
    /**
     * Array of directories relative to the project root. All JavaScript files will be imported by the CLI and checked if it exports a 'cliDefinition'.
     */
    "commandDirectories"?: (string)[]|undefined;
    
    /**
     * Project level watch options, applied to all commands running in 'watch' mode via the Compas CLI.
     */
    "globalWatchOptions"?: {
      
      /**
       * Add file extensions that should be watched
       */
      "extensions"?: (string)[]|undefined;
      
      /**
       * Remove directories from being watched, this has precedence over the included extensions
       */
      "ignorePatterns"?: (string)[]|undefined;
    }|undefined;
  }|undefined;
  "projects": (CompasResolvedConfigInput)[];
  
  /**
   * Available actions for this project.
   */
  "actions"?: ({
    "name": string;
    "shortcut": string;
    "command": (string)[];
  })[]|undefined;
  
  /**
   * Docker container configuration.
   */
  "dockerContainers"?: { [key: string]: {
    "image": string;
    "createArguments"?: string|undefined;
    "runArguments"?: string|undefined;
  }}|undefined;
};

export type CompasCacheInput = {
  
  /**
   * Compas version, used for cache invalidations.
   */
  "version": string;
  
  /**
   * The resolved config. Managed by {@link configLoaderIntegration}.
   */
  "config"?: CompasResolvedConfigInput|undefined;
  
  /**
   * Resolved project root directories. Managed by {@link rootDirectoriesIntegration}.
   */
  "rootDirectories"?: (string)[]|undefined;
  
  /**
   * The inferred package manager per rootDirectory. Managed by {@link packageManagerIntegration}.
   */
  "packageManager"?: { [key: string]: {
    "name": string;
    "installCommand": string;
    "nodeModulesBinCommand": string;
    "packageJsonScriptCommand": string;
  }}|undefined;
  
  /**
   * Shared available actions per rootDirectory. Managed by {@link inferredActionIntegration}.
   */
  "availableActions"?: { [key: string]: ({
    "name": string;
    "command": (string)[];
  })[]}|undefined;
};

export type CompasConfig = {
  
  /**
   * Old @compas/cli config
   */
  "cli"?: {
    
    /**
     * Array of directories relative to the project root. All JavaScript files will be imported by the CLI and checked if it exports a 'cliDefinition'.
     */
    "commandDirectories"?: (string)[]|undefined;
    
    /**
     * Project level watch options, applied to all commands running in 'watch' mode via the Compas CLI.
     */
    "globalWatchOptions"?: {
      
      /**
       * Add file extensions that should be watched
       */
      "extensions"?: (string)[]|undefined;
      
      /**
       * Remove directories from being watched, this has precedence over the included extensions
       */
      "ignorePatterns"?: (string)[]|undefined;
    }|undefined;
  }|undefined;
  
  /**
   * Relative paths to projects. Each project is expected to provide their own configuration.
   */
  "projects": (string)[];
  
  /**
   * Available actions for this project.
   */
  "actions": ({
    "name": string;
    "shortcut": string;
    "command": (string)[];
  })[];
  
  /**
   * Docker container configuration.
   */
  "dockerContainers": { [key: string]: {
    "image": string;
    "createArguments"?: string|undefined;
    "runArguments"?: string|undefined;
  }};
};

export type CompasConfigInput = {
  
  /**
   * Old @compas/cli config
   */
  "cli"?: {
    
    /**
     * Array of directories relative to the project root. All JavaScript files will be imported by the CLI and checked if it exports a 'cliDefinition'.
     */
    "commandDirectories"?: (string)[]|undefined;
    
    /**
     * Project level watch options, applied to all commands running in 'watch' mode via the Compas CLI.
     */
    "globalWatchOptions"?: {
      
      /**
       * Add file extensions that should be watched
       */
      "extensions"?: (string)[]|undefined;
      
      /**
       * Remove directories from being watched, this has precedence over the included extensions
       */
      "ignorePatterns"?: (string)[]|undefined;
    }|undefined;
  }|undefined;
  
  /**
   * Relative paths to projects. Each project is expected to provide their own configuration.
   */
  "projects"?: (string)[]|undefined;
  
  /**
   * Available actions for this project.
   */
  "actions"?: ({
    "name": string;
    "shortcut": string;
    "command": (string)[];
  })[]|undefined;
  
  /**
   * Docker container configuration.
   */
  "dockerContainers"?: { [key: string]: {
    "image": string;
    "createArguments"?: string|undefined;
    "runArguments"?: string|undefined;
  }}|undefined;
};


