// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

/**
 * @template T
 * @typedef {import("@compas/stdlib").EitherN<T, InternalError>} EitherN
 */

const objectKeys1833756126 = new Set([
  "name",
  "shortDescription",
  "longDescription",
  "modifiers",
  "dynamicValue",
  "watchSettings",
  "subCommands",
  "flags",
  "executor",
]);
const objectKeys229352914 = new Set(["isDynamic", "isCosmetic", "isWatchable"]);
const objectKeys695211961 = new Set(["validator", "completions"]);
const objectKeys385137474 = new Set(["extensions", "ignorePatterns"]);
const objectKeys1885876481 = new Set([
  "name",
  "rawName",
  "description",
  "modifiers",
  "value",
]);
const objectKeys121992102 = new Set([
  "isRepeatable",
  "isRequired",
  "isInternal",
]);
const objectKeys596368827 = new Set([
  "specification",
  "validator",
  "completions",
]);
const objectKeys589626564 = new Set(["type"]);
const objectKeys90605215 = new Set(["type"]);
const objectKeys703944173 = new Set(["type", "name", "description"]);
const objectKeys1437995341 = new Set(["type", "specification", "description"]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator2102379298(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (!/^[a-z-]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1987407853(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (!/^[^\n]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1443576836(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator1174857441(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"isDynamic": boolean, "isCosmetic": boolean, "isWatchable": boolean, }>}
 */
export function anonymousValidator229352914(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: { isDynamic: false, isCosmetic: false, isWatchable: false },
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys229352914.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys229352914],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isDynamic"],
      `${propertyPath}.isDynamic`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isDynamic"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isCosmetic"],
      `${propertyPath}.isCosmetic`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isCosmetic"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isWatchable"],
      `${propertyPath}.isWatchable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isWatchable"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|((value: string) => { isValid: boolean, error?: { message: string }}|Promise<{ isValid: boolean, error?: { message: string }}>)>}
 */
export function anonymousValidator193358577(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!((v) => typeof v === "function")(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(() => Promise<{ completions: CliCompletion[] }>|{ completions: CliCompletion[] })>}
 */
export function anonymousValidator249660009(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!((v) => typeof v === "function")(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"validator"?: undefined|((value: string) => { isValid: boolean, error?: { message: string }}|Promise<{ isValid: boolean, error?: { message: string }}>), "completions"?: undefined|(() => Promise<{ completions: CliCompletion[] }>|{ completions: CliCompletion[] }), }>}
 */
export function anonymousValidator695211961(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys695211961.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys695211961],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator193358577(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator249660009(
      value["completions"],
      `${propertyPath}.completions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["completions"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator186795873(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(string)[]>}
 */
export function anonymousValidator546555051(value, propertyPath) {
  if (isNil(value)) {
    return { value: ["js", "json"] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(string)[]>}
 */
export function anonymousValidator1532809334(value, propertyPath) {
  if (isNil(value)) {
    return { value: [".cache", "coverage", "node_modules"] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"extensions": (string)[], "ignorePatterns": (string)[], }>}
 */
export function anonymousValidator385137474(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: {
        extensions: ["js", "json"],
        ignorePatterns: [".cache", "coverage", "node_modules"],
      },
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys385137474.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys385137474],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator546555051(
      value["extensions"],
      `${propertyPath}.extensions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["extensions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1532809334(
      value["ignorePatterns"],
      `${propertyPath}.ignorePatterns`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["ignorePatterns"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CliCommandDefinition)[]>}
 */
export function anonymousValidator1489856765(value, propertyPath) {
  if (isNil(value)) {
    return { value: [] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1833756126(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator918642030(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  value = value.toLowerCase();
  if (!/^--\w/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator287762602(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (!/^[^\n]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"isRepeatable": boolean, "isRequired": boolean, "isInternal": boolean, }>}
 */
export function anonymousValidator121992102(value, propertyPath) {
  if (isNil(value)) {
    return {
      value: { isRepeatable: false, isRequired: false, isInternal: false },
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys121992102.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys121992102],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isRepeatable"],
      `${propertyPath}.isRepeatable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isRepeatable"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isRequired"],
      `${propertyPath}.isRequired`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isRequired"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isInternal"],
      `${propertyPath}.isInternal`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isInternal"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"boolean"|"number"|"string"|"booleanOrString">}
 */
export function anonymousValidator1672956483(value, propertyPath) {
  if (isNil(value)) {
    return { value: "boolean" };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return { value: "boolean" };
  }
  if (
    value !== "boolean" &&
    value !== "number" &&
    value !== "string" &&
    value !== "booleanOrString"
  ) {
    const oneOf = ["boolean", "number", "string", "booleanOrString"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|((value: any) => { isValid: boolean, error?: { message: string }}|Promise<{ isValid: boolean, error?: { message: string }}>)>}
 */
export function anonymousValidator126524240(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!((v) => typeof v === "function")(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"specification": "boolean"|"number"|"string"|"booleanOrString", "validator"?: undefined|((value: any) => { isValid: boolean, error?: { message: string }}|Promise<{ isValid: boolean, error?: { message: string }}>), "completions"?: undefined|(() => Promise<{ completions: CliCompletion[] }>|{ completions: CliCompletion[] }), }>}
 */
export function anonymousValidator596368827(value, propertyPath) {
  if (isNil(value)) {
    return { value: { specification: "boolean" } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys596368827.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys596368827],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1672956483(
      value["specification"],
      `${propertyPath}.specification`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specification"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator126524240(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator249660009(
      value["completions"],
      `${propertyPath}.completions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["completions"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"name": string, "rawName": string, "description"?: undefined|string, "modifiers": {"isRepeatable": boolean, "isRequired": boolean, "isInternal": boolean, }, "value": {"specification": "boolean"|"number"|"string"|"booleanOrString", "validator"?: undefined|((value: any) => { isValid: boolean, error?: { message: string }}|Promise<{ isValid: boolean, error?: { message: string }}>), "completions"?: undefined|(() => Promise<{ completions: CliCompletion[] }>|{ completions: CliCompletion[] }), }, }>}
 */
export function anonymousValidator1885876481(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1885876481.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1885876481],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator918642030(
      value["rawName"],
      `${propertyPath}.rawName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator287762602(
      value["description"],
      `${propertyPath}.description`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["description"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator121992102(
      value["modifiers"],
      `${propertyPath}.modifiers`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["modifiers"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator596368827(
      value["value"],
      `${propertyPath}.value`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["value"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CliFlagDefinition)[]>}
 */
export function anonymousValidator1259325376(value, propertyPath) {
  if (isNil(value)) {
    return { value: [] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1885876481(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|((logger: import("@compas/stdlib").Logger, state: import("../../cli/types").CliExecutorState) => (Promise<import("../../cli/types").CliResult>|CliResult))>}
 */
export function anonymousValidator779701095(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!((v) => typeof v === "function")(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.custom",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"name": string, "shortDescription": string, "longDescription"?: undefined|string, "modifiers": {"isDynamic": boolean, "isCosmetic": boolean, "isWatchable": boolean, }, "dynamicValue": {"validator"?: undefined|((value: string) => { isValid: boolean, error?: { message: string }}|Promise<{ isValid: boolean, error?: { message: string }}>), "completions"?: undefined|(() => Promise<{ completions: CliCompletion[] }>|{ completions: CliCompletion[] }), }, "watchSettings": {"extensions": (string)[], "ignorePatterns": (string)[], }, "subCommands": (import("./types").CliCommandDefinition)[], "flags": (import("./types").CliFlagDefinition)[], "executor"?: undefined|((logger: import("@compas/stdlib").Logger, state: import("../../cli/types").CliExecutorState) => (Promise<import("../../cli/types").CliResult>|CliResult)), }>}
 */
export function anonymousValidator1833756126(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1833756126.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1833756126],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator2102379298(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1987407853(
      value["shortDescription"],
      `${propertyPath}.shortDescription`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["shortDescription"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["longDescription"],
      `${propertyPath}.longDescription`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["longDescription"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator229352914(
      value["modifiers"],
      `${propertyPath}.modifiers`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["modifiers"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator695211961(
      value["dynamicValue"],
      `${propertyPath}.dynamicValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["dynamicValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator385137474(
      value["watchSettings"],
      `${propertyPath}.watchSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["watchSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1489856765(
      value["subCommands"],
      `${propertyPath}.subCommands`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["subCommands"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1259325376(
      value["flags"],
      `${propertyPath}.flags`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["flags"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator779701095(
      value["executor"],
      `${propertyPath}.executor`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["executor"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"directory">}
 */
export function anonymousValidator629941091(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "directory") {
    const oneOf = ["directory"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "directory", }>}
 */
export function anonymousValidator589626564(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys589626564.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys589626564],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator629941091(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"file">}
 */
export function anonymousValidator724462434(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "file") {
    const oneOf = ["file"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "file", }>}
 */
export function anonymousValidator90605215(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys90605215.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys90605215],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator724462434(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"completion">}
 */
export function anonymousValidator1666023486(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "completion") {
    const oneOf = ["completion"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "completion", "name": string, "description"?: undefined|string, }>}
 */
export function anonymousValidator703944173(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys703944173.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys703944173],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1666023486(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["description"],
      `${propertyPath}.description`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["description"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"value">}
 */
export function anonymousValidator1656684775(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "value") {
    const oneOf = ["value"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"boolean"|"number"|"string"|"booleanOrString">}
 */
export function anonymousValidator1682559082(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "boolean" &&
    value !== "number" &&
    value !== "string" &&
    value !== "booleanOrString"
  ) {
    const oneOf = ["boolean", "number", "string", "booleanOrString"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "value", "specification": "boolean"|"number"|"string"|"booleanOrString", "description"?: undefined|string, }>}
 */
export function anonymousValidator1437995341(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1437995341.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1437995341],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1656684775(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1682559082(
      value["specification"],
      `${propertyPath}.specification`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specification"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["description"],
      `${propertyPath}.description`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["description"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "directory", }|{"type": "file", }|{"type": "completion", "name": string, "description"?: undefined|string, }|{"type": "value", "specification": "boolean"|"number"|"string"|"booleanOrString", "description"?: undefined|string, }>}
 */
export function anonymousValidator328829180(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<{"type": "directory", }|{"type": "file", }|{"type": "completion", "name": string, "description"?: undefined|string, }|{"type": "value", "specification": "boolean"|"number"|"string"|"booleanOrString", "description"?: undefined|string, }>} */
  let result = { errors: [] };
  result = anonymousValidator589626564(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator90605215(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator703944173(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1437995341(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
