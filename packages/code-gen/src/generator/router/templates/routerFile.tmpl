import { compose } from "@compas/server";
import { AppError } from "@compas/stdlib";
import { eventRename } from "@compas/insight";
{{ for (const group of Object.keys(structure)) { }}
    {{ const hasRouteObject = Object.values(structure[group]).find(it => it.type === "route"); }}
    {{ if (hasRouteObject === undefined) { continue; } }}
    import { {{= group }}Handlers } from "../{{=group }}/controller{{= importExtension }}";
    import * as {{= group }}Validators from "../{{= group }}/validators{{= importExtension }}";
{{ } }}


{{ if (options.dumpApiStructure) { }}
import { compasApiStructureString } from "./structure{{= importExtension }}";
{{ } }}
((newline))

let internalBodyParsers = undefined;
/**
 * @param {BodyParserPair} parsers
 */
export function setBodyParsers(parsers) {
  internalBodyParsers = {
    body: (ctx) =>
      new Promise((r) => {
        parsers.bodyParser(ctx, r).then(r);
      }),
    files: (ctx) =>
      new Promise((r) => {
        parsers.multipartBodyParser(ctx, r).then(r);
      }),
  };
}
((newline))

const filterCompose = (...args) => compose(args.filter(it => it !== undefined));
((newline))


/**
  * @typedef GroupMiddleware
{{ for (const group of Object.keys(structure)) { }}
 * @property {CMiddleware|CMiddleware[]|undefined} {{= group }}
{{ } }}
 */

/**
 * @type {GroupMiddleware}
 */
export const groupMiddleware = {
  {{ for (const group of Object.keys(structure)) { }}
    {{= group }}: undefined,
  {{ } }}
};
((newline))

const _composed = {
  {{ for (const groupName of Object.keys(structure)) { }}
    {{ for (const itemName of Object.keys(structure[groupName])) { }}
      {{ const item = structure[groupName][itemName]; }}

      {{ if (item.type !== "route") { }}
      {{ continue; }}
      {{ } }}

      {{= item.uniqueName }}: undefined,

    {{ } }}
  {{ } }}
};
((newline))

const handlers = {
  {{ for (const groupName of Object.keys(structure)) { }}
    {{ for (const itemName of Object.keys(structure[groupName])) { }}
      {{ const item = structure[groupName][itemName]; }}

      {{ if (item.type !== "route") { }}
      {{ continue; }}
      {{ } }}
((newline))

      {{= item.uniqueName }}: {{ if (item.body || item.query || item.files) { }} async {{ } }} (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, `{{= item.group }}.{{= item.name }}`);
        }

        ctx.request.params = params;

        {{ if (item.params) { }}
        ctx.validatedParams = {{= item.params.reference.group }}Validators.validate{{= item.params.reference.uniqueName }}(params);
        {{ } }}

        {{ if (item.files) { }}
          await internalBodyParsers.files(ctx);
          ctx.validatedFiles = {{= item.files.reference.group }}Validators.validate{{= item.files.reference.uniqueName }}(ctx.request.files);
        {{ } else if (item.body || item.query) { }}
          await internalBodyParsers.body(ctx);
        {{ } }}

        {{ if (item.query) { }}
          ctx.validatedQuery = {{= item.query.reference.group }}Validators.validate{{= item.query.reference.uniqueName }}(ctx.request.query);
        {{ } }}

        {{ if (item.body) { }}
          ctx.validatedBody = {{= item.body.reference.group }}Validators.validate{{= item.body.reference.uniqueName }}(ctx.request.body);
        {{ } }}


        if (_composed.{{= item.uniqueName }} === undefined) {
          const currentHandler = {{= item.group }}Handlers.{{= item.name }};
          _composed.{{= item.uniqueName }} = filterCompose(
              ...(Array.isArray(groupMiddleware.{{= item.group }}) ? groupMiddleware.{{= item.group }} : [groupMiddleware.{{= item.group }}]),
              ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
          );
        }

        return _composed.{{= item.uniqueName }}(ctx, next);
      },

    {{ } }}
  {{ } }}
};
((newline))

/**
 * @typedef {import("@compas/server").Context} CContext
 */

/**
 * @typedef {import("@compas/server").Next} CNext
 */

/**
 * @typedef {import("@compas/server").Middleware} CMiddleware
 */


{{ const context = { functions: "", counter: 0 }; }}
((newline))

export function router(ctx, next) {
  let triePath = ctx.method + ctx.path;
  if (triePath.endsWith("/")) {
    triePath = triePath.substring(0, triePath.length - 1);
  }

  const params = Object.create(null);
  let route = undefined;

  {{ for (const child of routeTrie.children) { }}
  route = routeMatcher{{= context.counter }}(triePath, params, 0);
  {{ const src = routeMatcher({ matcher: child, context }); }}
  {{ context.functions += src; }}
  if (route !== undefined) {
    return route(params, ctx, next);
  }
  {{ } }}

  return next();
}
((newline))

{{ if (options.dumpApiStructure) { }}
compasHandlers.structure = (ctx, next) => {
  ctx.set("Content-Type", "application/json");
  ctx.body = compasApiStructureString;

  return next();
}
{{ } }}
((newline))


{{= context.functions }}
((newline))
