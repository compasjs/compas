import { compose } from "@compas/server";
import { AppError, eventRename } from "@compas/stdlib";
{{ const importControllerSet = new Set(); }}
{{ const importValidatorSet = new Set(); }}
{{ for (const group of Object.keys(structure)) { }}
    {{ const hasRouteObject = Object.values(structure[group]).find(it => it.type === "route"); }}
    {{ if (hasRouteObject === undefined) { continue; } }}
    {{ importControllerSet.add(group); }}
    {{ importValidatorSet.add(group); }}
    {{ for (const r of Object.values(structure[group])) { }}
      {{ if (r.params) { importValidatorSet.add(r.params.reference.group); } }}
      {{ if (r.query) { importValidatorSet.add(r.query.reference.group); } }}
      {{ if (r.body) { importValidatorSet.add(r.body.reference.group); } }}
      {{ if (r.files) { importValidatorSet.add(r.files.reference.group); } }}
    {{ } }}
{{ } }}
{{ for (const group of importControllerSet) { }}
    import { {{= group }}Handlers } from "../{{=group }}/controller{{= importExtension }}";
{{ } }}
{{ for (const group of importValidatorSet) { }}
    import * as {{= group }}Validators from "../{{= group }}/validators{{= importExtension }}";
{{ } }}


{{ if (options.dumpApiStructure) { }}
import { compasApiStructureString } from "./structure{{= importExtension }}";
{{ } }}
((newline))

let internalBodyParsers = undefined;
/**
 * @param {BodyParserPair} parsers
 */
export function setBodyParsers(parsers) {
  internalBodyParsers = {
    body: parsers.bodyParser,
    files: parsers.multipartBodyParser,
  };
}
((newline))

const filterCompose = (...args) => compose(args.filter(it => it !== undefined));
((newline))
const decodePathParam = (arg) => {
  try {
   return decodeURIComponent(arg);
  } catch (e) {
    throw AppError.validationError("router.param.invalidEncoding", { param: arg });
  }
}


/**
  * @typedef GroupMiddleware
{{ for (const group of Object.keys(structure)) { }}
 * @property {CMiddleware|CMiddleware[]|undefined} {{= group }}
{{ } }}
 */

/**
 * @type {GroupMiddleware}
 */
export const groupMiddleware = {
  {{ for (const group of Object.keys(structure)) { }}
    {{= group }}: undefined,
  {{ } }}
};
((newline))

const _composed = {
  {{ for (const groupName of Object.keys(structure)) { }}
    {{ for (const itemName of Object.keys(structure[groupName])) { }}
      {{ const item = structure[groupName][itemName]; }}

      {{ if (item.type !== "route") { }}
      {{ continue; }}
      {{ } }}

      {{= item.uniqueName }}: undefined,

    {{ } }}
  {{ } }}
};
((newline))
((newline))
/**
 * Clear composed handlers.
 *
 * All handlers are composed via a koa-compose like and then memoized. When overwriting an
 * handler when the route is already called, the overwritten handlers will not be
 * executed till this function is called.
 */
export function routerClearMemoizedHandlers() {
  for (const key of Object.keys(_composed)) {
    _composed[key] = undefined;
  }
}
((newline))
((newline))

const handlers = {
  {{ for (const groupName of Object.keys(structure)) { }}
    {{ for (const itemName of Object.keys(structure[groupName])) { }}
      {{ const item = structure[groupName][itemName]; }}

      {{ if (item.type !== "route") { }}
      {{ continue; }}
      {{ } }}
((newline))

      {{= item.uniqueName }}: {{ if (item.body || item.query || item.files) { }} async {{ } }} (params, ctx, next) => {
        if (ctx.event) {
          eventRename(ctx.event, `router.{{= item.group }}.{{= item.name }}`);
        }

        ctx.request.params = params;

        {{ if (item.params) { }}
        const validatedParams = {{= item.params.reference.group }}Validators.validate{{= item.params.reference.uniqueName }}(params);
        if (validatedParams.error) {
         throw validatedParams.error;
        }
        ctx.validatedParams = validatedParams.value;
        {{ } }}

        {{ if (item.files) { }}
          await internalBodyParsers.files(ctx);
          const validatedFiles = {{= item.files.reference.group }}Validators.validate{{= item.files.reference.uniqueName }}(ctx.request.files);
          if (validatedFiles.error) {
           throw validatedFiles.error;
          }
          ctx.validatedFiles = validatedFiles.value;
        {{ } else if (item.body || item.query) { }}
          await internalBodyParsers.body(ctx);
        {{ } }}

        {{ if (item.query) { }}
        const validatedQuery = {{= item.query.reference.group }}Validators.validate{{= item.query.reference.uniqueName }}(ctx.request.query);
        if (validatedQuery.error) {
         throw validatedQuery.error;
        }
        ctx.validatedQuery = validatedQuery.value;
        {{ } }}

        {{ if (item.body) { }}
        const validatedBody = {{= item.body.reference.group }}Validators.validate{{= item.body.reference.uniqueName }}(ctx.request.body);
        if (validatedBody.error) {
         throw validatedBody.error;
        }
        ctx.validatedBody = validatedBody.value;
        {{ } }}


        if (_composed.{{= item.uniqueName }} === undefined) {
          const currentHandler = {{= item.group }}Handlers.{{= item.name }};
          _composed.{{= item.uniqueName }} = filterCompose(
              ...(Array.isArray(groupMiddleware.{{= item.group }}) ? groupMiddleware.{{= item.group }} : [groupMiddleware.{{= item.group }}]),
              ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
          );
        }

        return _composed.{{= item.uniqueName }}(ctx, next);
      },

    {{ } }}
  {{ } }}
};
((newline))


{{ const context = { functions: "", counter: 0 }; }}
((newline))

export function router(ctx, next) {
  let triePath = ctx.path.substring(1);
  // Also handle `/` requests
  if (!triePath.endsWith("/") && triePath.length !== 0) {
   triePath += "/";
  }
  triePath += ctx.method;

  const params = Object.create(null);
  let route = undefined;

  {{ for (const child of routeTrie.children) { }}
  route = routeMatcher{{= context.counter }}(triePath, params, 0);
  {{ const src = routeMatcher({ matcher: child, context }); }}
  {{ context.functions += src; }}
  if (route !== undefined) {
    return route(params, ctx, next);
  }
  {{ } }}

  return next();
}
((newline))

{{ if (options.dumpApiStructure) { }}
compasHandlers.structure = (ctx, next) => {
  ctx.set("Content-Type", "application/json");
  ctx.body = compasApiStructureString;

  return next();
}
{{ } }}
((newline))


{{= context.functions }}
((newline))
