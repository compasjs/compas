{{ /* Keep in sync with apiClientFn */ }}
{{ const funcName = "use" + upperCaseFirst(item.uniqueName); }}
{{ const responseType = item.response ? `T.${getTypeNameForType(item.response.reference, typeSuffix.apiResponse, { isJSON: true, fileTypeIO: "outputClient" })}` : `any`; }}

{{ if (item.method === "GET" || item.idempotent) { }}

((newline))
/**
 * {{= funcName }}
  {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
  {{ if (item.idempotent) { }}* Note that a custom options.enabled may be beneficial for your use case{{ } }}
 * Docs: {{= item.docString.replace(/\n/g, "\n  * ") }}
 */
export function {{= funcName }}<TData = {{= responseType }}>({{= item.params || item.query || item.body ? "opts:" : "opts?:" }} {
{{ if (item.params) { }}
params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
{{ } }}
{{ if (item.query) { }}
query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
{{ } }}
{{ if (item.body) { }}
body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
{{ } }}
options?: UseQueryOptions<{{= responseType }}, AppErrorResponse, TData> | undefined,
}{{= item.params || item.query || item.body ? "" : "|undefined" }}) {
  const axiosInstance = useApi();
  const options = opts?.options ?? {};

  {{ let hasKeysAffectingQueryEnabled = false; }}
    {{ if (item.query) { }}
      {{ for (const [key, value] of Object.entries(item.query?.keys ?? item.query?.reference?.keys ?? {})) { }}
        {{ if (!value.isOptional) { }}
          {{ hasKeysAffectingQueryEnabled = true; break; }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.params && !hasKeysAffectingQueryEnabled) { }}
      {{ for (const [key, value] of Object.entries(item.params?.keys  ?? item.params?.reference?.keys ?? {})) { }}
        {{ if (!value.isOptional) { }}
          {{ hasKeysAffectingQueryEnabled = true; break; }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.body && !hasKeysAffectingQueryEnabled) { }}
      {{ for (const [key, value] of Object.entries(item.body?.keys ?? item.body?.reference?.keys ?? {})) { }}
        {{ if (!value.isOptional) { }}
            {{ hasKeysAffectingQueryEnabled = true; break; }}
      {{ } }}
      {{ } }}
    {{ } }}

  {{ if (hasKeysAffectingQueryEnabled) { }}
  options.enabled = (
    options.enabled === true || (options.enabled !== false
    {{ if (item.query) { }}
      {{ for (const [key, value] of Object.entries(item.query?.keys ?? item.query?.reference?.keys ?? {})) { }}
        {{ if (!value.isOptional) { }}
          && !!opts.query.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.params) { }}
      {{ for (const [key,value] of Object.entries(item.params?.keys ?? item.params?.reference?.keys ?? {})) { }}
        {{ if (!value.isOptional) { }}
          && !!opts.params.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.body) { }}
      {{ for (const [key, value] of Object.entries(item.body?.keys ?? item.body?.reference?.keys ?? {})) { }}
        {{ if (!value.isOptional) { }}
          && !!opts.body.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
  ));
  {{ } }}

  return useQuery({{= funcName }}.queryKey(
    {{ if (item.params) { }}
    opts.params,
    {{ } }}
    {{ if (item.query) { }}
    opts.query,
    {{ } }}
    {{ if (item.body) { }}
    opts.body,
    {{ } }}
    ),
    ({ signal }) => {
      return api{{= item.uniqueName }}(
        axiosInstance,
        {{= item.params ? "opts.params, " : ""}}
        {{= item.query ? "opts.query, " : "" }}
        {{= item.body ? "opts.body, " : "" }}
        { signal },
      );
    },
    options,
  );
}

((newline))
/**
 * Base key used by {{= funcName }}.queryKey()
 */
{{= funcName }}.baseKey = (): QueryKey => "{{= item.uniqueName }}";

((newline))
/**
 * Query key used by {{= funcName }}
 */
{{= funcName }}.queryKey = (
{{ if (item.params) { }}
params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
{{ } }}
{{ if (item.query) { }}
query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
{{ } }}
{{ if (item.body) { }}
body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
{{ } }}
): QueryKey => [
  {{= funcName }}.baseKey(),
 {{ if (item.params) { }}
 params,
 {{ } }}
 {{ if (item.query) { }}
 query,
 {{ } }}
 {{ if (item.body) { }}
 body,
 {{ } }}
];

{{ } else { }}

interface {{= upperCaseFirst(funcName) }}Props {
   {{ if (item.params) { }}
   params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }};
   {{ } }}
   {{ if (item.query) { }}
    query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }};
   {{ } }}
   {{ if (item.body) { }}
   body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }};
   {{ } }}
   {{ if (item.files) { }}
   files: T.{{= getTypeNameForType(item.files.reference, typeSuffix.apiInput, { useDefaults: false, fileTypeIO: "input" }) }};
   {{ } }}
}

((newline))

/**
 * {{= funcName }}
 {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
 * Docs: {{= item.docString }}
 */
export function {{= funcName }}(
  options: UseMutationOptions<{{= responseType }}, AppErrorResponse, {{= upperCaseFirst(funcName) }}Props> = {},
): UseMutationResult<{{= responseType }}, AppErrorResponse, {{= upperCaseFirst(funcName) }}Props, unknown> {
  const axiosInstance = useApi();

  return useMutation(
    (variables) => api{{= item.uniqueName }}(
      axiosInstance,
      {{= item.params ? "variables.params, " : ""}}
      {{= item.query ? "variables.query, " : "" }}
      {{= item.body ? "variables.body, " : "" }}
      {{= item.files ? "variables.files, " : "" }}
    ),
    options,
  );
}

{{ } }}

((newline))
