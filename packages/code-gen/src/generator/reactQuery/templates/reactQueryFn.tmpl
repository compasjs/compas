{{ /* Keep in sync with apiClientFn */ }}
{{ const funcName = "use" + upperCaseFirst(item.uniqueName); }}
{{ const responseType = item.response ? `T.${getTypeNameForType(item.response.reference, typeSuffix.apiResponse, { isJSON: true, fileTypeIO: "outputClient" })}` : any; }}

{{ if (item.method === "GET" || item.idempotent) { }}

((newline))
/**
 * {{= funcName }}
  {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
  {{ if (item.idempotent) { }}* Note that a custom options.enabled may be beneficial for your use case{{ } }}
 * Docs: {{= item.docString.replace(/\n/g, "\n  * ") }}
 */
export function {{= funcName }}(
{{ if (item.params) { }}
params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false }) }},
{{ } }}
{{ if (item.query) { }}
query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false }) }},
{{ } }}
{{ if (item.body) { }}
body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false }) }},
{{ } }}
options: UseQueryOptions<{{= responseType }}, AppErrorResponse> = {},
): UseQueryResult<{{= responseType }}, AppErrorResponse> {
  const { {{= item.group }} } = useApi();

  options.enabled = (
    options.enabled === true || (options.enabled !== false
    {{ if (item.query) { }}
      {{ for (const key of Object.keys(item.query?.keys ?? {})) { }}
        {{ if (!item.query.keys[key].isOptional) { }}
          && !!query.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.params) { }}
      {{ for (const key of Object.keys(item.params?.keys ?? {})) { }}
        {{ if (!item.params.keys[key].isOptional) { }}
          && !!params.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.body) { }}
      {{ for (const key of Object.keys(item.body?.keys ?? {})) { }}
        {{ if (!item.body.keys[key].isOptional) { }}
          && !!body.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
  ));

  return useQuery({{= funcName }}.queryKey(
    {{ if (item.params) { }}
    params,
    {{ } }}
    {{ if (item.query) { }}
    query,
    {{ } }}
    {{ if (item.body) { }}
    body,
    {{ } }}
    ),
    () => {
      const promise: CancellablePromise<{{= responseType }}> = {{= item.group }}.{{= item.name }}(
        {{= item.params ? "params, " : ""}}
        {{= item.query ? "query, " : "" }}
        {{= item.body ? "body, " : "" }}
        { cancelToken: options?.cancelToken?.token },
      );

      if (options?.cancelToken) {
        promise.cancel = () => options?.cancelToken?.cancel();
      }

      return promise;
    },
    options,
  );
}

((newline))
/**
 * Base key used by {{= funcName }}.queryKey()
 */
{{= funcName }}.baseKey = (): QueryKey => "{{= item.uniqueName }}";

((newline))
/**
 * Query key used by {{= funcName }}
 */
{{= funcName }}.queryKey = (
{{ if (item.params) { }}
params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false }) }},
{{ } }}
{{ if (item.query) { }}
query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false }) }},
{{ } }}
{{ if (item.body) { }}
body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false }) }},
{{ } }}
): QueryKey => [
  {{= funcName }}.baseKey(),
 {{ if (item.params) { }}
 params,
 {{ } }}
 {{ if (item.query) { }}
 query,
 {{ } }}
 {{ if (item.body) { }}
 body,
 {{ } }}
];

{{ } else { }}

interface {{= upperCaseFirst(funcName) }}Props {
   {{ if (item.params) { }}
   params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false }) }};
   {{ } }}
   {{ if (item.query) { }}
    query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false }) }};
   {{ } }}
   {{ if (item.body) { }}
   body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false }) }};
   {{ } }}
   {{ if (item.files) { }}
   files: T.{{= getTypeNameForType(item.files.reference, typeSuffix.apiInput, { useDefaults: false, fileTypeIO: "input" }) }};
   {{ } }}
}

((newline))

/**
 * {{= funcName }}
 {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
 * Docs: {{= item.docString }}
 */
export function {{= funcName }}(
  options: UseMutationOptions<{{= responseType }}, AppErrorResponse, {{= upperCaseFirst(funcName) }}Props> = {},
): UseMutationResult<{{= responseType }}, AppErrorResponse, {{= upperCaseFirst(funcName) }}Props, unknown> {
  const { {{= item.group }} } = useApi();

  return useMutation(
    (variables) => {{= item.group }}.{{= item.name }}(
      {{= item.params ? "variables.params, " : ""}}
      {{= item.query ? "variables.query, " : "" }}
      {{= item.body ? "variables.body, " : "" }}
      {{= item.files ? "variables.files, " : "" }}
    ),
    options,
  );
}

{{ } }}

((newline))
