{{ const url = item.path.split("/").map(part => { if (part.startsWith(":")) { return "${params." + part.substring(1) + "}"; } else { return part; } }).join("/"); }}

/**
{{= formatDocString(item.docString + (item.tags.length === 0 ? "" : "\n\nTags: " + item.tags.join(", ")), { format: "jsdoc", }) }}
 *
{{ if (!options.useTypescript) { }}
    * @param {AxiosInstance} instance
    {{ if (item.params) { }}
     * @param { {{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }} } params
    {{ } }}
    {{ if (item.query) { }}
     * @param { {{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }} } query
    {{ } }}
    {{ if (item.body) { }}
     * @param { {{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }} } body
    {{ } }}
    {{ if (item.files) { }}
     * @param { {{= getTypeNameForType(item.files.reference, typeSuffix.apiInput, { useDefaults: false, fileTypeIO: "input", }) }} } files
    {{ } }}
     * @param { { signal?: AbortSignal | undefined } } [requestConfig]
    {{ if (item.response) { }}
     * @returns {Promise<{{= getTypeNameForType(item.response.reference, typeSuffix.apiResponse, { isJSON: true, fileTypeIO: "outputClient", }) }}>}
    {{ } }}
{{ } }}
 */
export async function api{{= item.uniqueName }}(
{{ if (options.useTypescript) { }}
    instance: AxiosInstance,
    {{ if (item.params) { }}
    params: T.{{= getTypeNameForType(item.params.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
    {{ } }}
    {{ if (item.query) { }}
    query: T.{{= getTypeNameForType(item.query.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
    {{ } }}
    {{ if (item.body) { }}
    body: T.{{= getTypeNameForType(item.body.reference, typeSuffix.apiInput, { useDefaults: false, useConvert: true, }) }},
    {{ } }}
    {{ if (item.files) { }}
    files: T.{{= getTypeNameForType(item.files.reference, typeSuffix.apiInput, { useDefaults: false, fileTypeIO: "input", }) }},
    {{ } }}
    requestConfig: { signal?: AbortSignal|undefined } = {},
{{ } else { }}
    instance,
    {{ if (item.params) { }}
    params,
    {{ } }}
    {{ if (item.query) { }}
    query,
    {{ } }}
    {{ if (item.body) { }}
    body,
    {{ } }}
    {{ if (item.files) { }}
    files,
    {{ } }}
    requestConfig = {},
{{ } }}
{{= options.useTypescript && item.response ? `): Promise<T.${getTypeNameForType(item.response.reference, typeSuffix.apiResponse, { isJSON: true, fileTypeIO: "outputClient", })}> {` : ") {" }}
    {{ if (item.files) { }}
      // eslint-disable-next-line
      const data = new FormData();
      for (const key of Object.keys(files)) {
        {{= options.useTypescript ? `// @ts-ignore` : "" }}
        const keyFiles = Array.isArray(files[key]) ? files[key] : [files[key]];
        for (const file of keyFiles) {
          data.append(key, file.data, file.name);
        }
      }
    {{ } else if (item.body) { }}
      {{ if (item.internalSettings?.requestBodyType === "form-data") { }}
        let data = body;
        if (isPlainObject(body)) {
          data = new FormData();
          for (const key of Object.keys(body)) {
            data.append(key, body[key]);
          }
        }
      {{ } else { }}
        const data = body;
      {{ } }}
    {{ } }}

    {{ if (options.isNodeServer) { }}
    try {
    {{ } }}

    const response = await instance.request({
      url: `{{= !!item.internalSettings?.stripTrailingSlash ? url.slice(0, -1) : url }}`,
      method: "{{= item.method.toLowerCase() }}",
      {{ if (item.query) { }}
      params: query,
      {{ } }}
      {{ if (item.body || item.files) { }}
      data,
      {{ } }}
      {{ if ((item.files || item.internalSettings?.requestBodyType === "form-data") && options.isNode) { }}
      headers: typeof data?.getHeaders === "function" ? data.getHeaders() : {},
      {{ } }}
      {{ if (item.response?.reference?.type === "file") { }}
      responseType: "{{= options.isNode ? "stream" : "blob" }}",
      {{ } }}
      ...requestConfig,
    });

    {{ if (!options.isNodeServer) { }}
      return response.data;
    {{ } else { }}
      {{ if (item.response) { }}
        {{ const { uniqueName } = item.response.reference ?? {}; }}
        {{ if (!isNil(uniqueName)) { }}
            {{ /* Validates response, but does not use the validated result. This implies that dates will be ISO strings, and objects don't have a 'null' prototype. */ }}
            const { error } = validators.validate{{= uniqueName }}(response.data);
            if (error) {
                throw error;
            }
        {{ } }}
      {{ } }}
      return response.data;
    } catch (e) {
      return handleError(e, "{{= item.group }}", "{{= item.name }}");
    }

    {{ } }}

}
((newline))
