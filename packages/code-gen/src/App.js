import { newLogger, printProcessMemoryUsage } from "@compas/insight";
import { isNil, merge } from "@compas/stdlib";
import { ReferenceType } from "./builders/ReferenceType.js";
import { buildOrInfer } from "./builders/utils.js";
import {
  addGroupsToGeneratorInput,
  addToData,
  hoistNamedItems,
} from "./generate.js";
import {
  validateCodeGenStructure,
  validateCodeGenType,
} from "./generated/codeGen/validators.js";
import { generate } from "./generator/index.js";
import { getInternalRoutes } from "./generator/router/index.js";
import { recursivelyRemoveInternalFields } from "./internal.js";
import { loadFromOpenAPISpec } from "./loaders.js";
import { lowerCaseFirst } from "./utils.js";

/**
 * @type {GenerateOpts}
 */
const defaultGenerateOptionsBrowser = {
  isBrowser: true,
  isNodeServer: false,
  isNode: false,
  enabledGenerators: ["type", "validator", "apiClient", "reactQuery"],
  useTypescript: true,
  throwingValidators: false,
  dumpStructure: false,
  dumpApiStructure: false,
  dumpPostgres: false,
};

/**
 * @type {GenerateOpts}
 */
const defaultGenerateOptionsNodeServer = {
  isBrowser: false,
  isNodeServer: true,
  isNode: true,
  enabledGenerators: ["type", "validator", "sql", "router", "apiClient"],
  useTypescript: false,
  throwingValidators: true,
  dumpStructure: false,
  dumpApiStructure: true,
  dumpPostgres: true,
};

/**
 * @type {GenerateOpts}
 */
const defaultGenerateOptionsNode = {
  isBrowser: false,
  isNodeServer: false,
  isNode: true,
  enabledGenerators: ["type", "validator"],
  useTypescript: false,
  throwingValidators: false,
  dumpStructure: false,
  dumpApiStructure: false,
  dumpPostgres: false,
};

/**
 * @class
 */
export class App {
  /**
   * @type {string[]}
   */
  static defaultEslintIgnore = ["no-unused-vars"];

  /**
   * Create a new App.
   *
   * @param {AppOpts} [options={}]
   */
  constructor({ verbose } = {}) {
    /**
     * @type {string}
     */
    this.fileHeader = `// Generated by @compas/code-gen\n`;

    /**
     * @type {boolean}
     */
    this.verbose = verbose || false;

    /**
     * @type {Logger}
     */
    this.logger = newLogger({
      ctx: {
        type: "code_gen",
      },
    });

    /** @type {Set<TypeBuilderLike>} */
    this.unprocessedData = new Set();

    /** @type {CodeGenStructure} */
    this.data = {};
  }

  /**
   * @param {...TypeBuilderLike} builders
   * @returns {this}
   */
  add(...builders) {
    for (const builder of builders) {
      this.unprocessedData.add(builder);
    }

    return this;
  }

  /**
   * Add relations to the provided reference.
   * The provided reference must already exist.
   * This only works when referencing in to structure that you've passed in to
   * `app.extend`.
   *
   * @param {ReferenceType} reference
   * @param {...RelationType} relations
   */
  addRelations(reference, ...relations) {
    if (!(reference instanceof ReferenceType)) {
      throw new Error(
        `Expected T.relation as a first argument to App.addRelations`,
      );
    }

    const buildRef = reference.build();
    this.processData();

    const { group, name } = buildRef?.reference ?? {};

    const resolved = this.data[group]?.[name];

    if (!resolved) {
      throw new Error(
        `Can not resolve ${group}:${name}. Make sure to extend first via app.extend.`,
      );
    }

    if (resolved.type !== "object") {
      throw new Error(
        `Can only add relations to objects. Found '${resolved.type}'.`,
      );
    }

    for (const relation of relations) {
      resolved.relations.push(relation.build());
    }

    return this;
  }

  /**
   * @param {object} obj
   * @returns {this}
   */
  addRaw(obj) {
    if (!isNil(validateCodeGenType)) {
      // Validators present, use the result of them.
      const { data, errors } = validateCodeGenType(obj);
      if (errors) {
        this.logger.error(errors[0]);
        process.exit(1);
      }

      // Make a deep copy without null prototypes
      obj = {};
      merge(obj, data);
    }
    this.addToData(obj);

    return this;
  }

  /**
   * @param data
   * @returns {this}
   */
  extend(data) {
    return this.extendInternal(data, false);
  }

  /**
   * Extend from the OpenAPI spec
   *
   * @param {string} defaultGroup
   * @param {object} data
   * @returns {this}
   */
  extendWithOpenApi(defaultGroup, data) {
    return this.extendInternal(loadFromOpenAPISpec(defaultGroup, data), true);
  }

  /**
   * @param {GenerateOpts} options
   * @returns {Promise<void>}
   */
  async generate(options) {
    if (isNil(options?.outputDirectory)) {
      throw new Error("Need options.outputDirectory to write files to.");
    }

    if (
      isNil(options.isBrowser) &&
      isNil(options.isNodeServer) &&
      isNil(options.isNode) &&
      isNil(options.enabledGenerators)
    ) {
      throw new Error(
        `Either options.isBrowser, options.isNodeServer, options.isNode or options.enabledGenerators must be set.`,
      );
    }

    options.enabledGenerators = options.enabledGenerators || [];

    const opts = {
      outputDirectory: options.outputDirectory,
      fileHeader: this.fileHeader + formatEslint() + (options.fileHeader ?? ""),
    };

    if (
      options.isBrowser ||
      options.enabledGenerators.indexOf("reactQuery") !== -1
    ) {
      Object.assign(opts, defaultGenerateOptionsBrowser);
    } else if (
      options.isNodeServer ||
      options.enabledGenerators.indexOf("router") !== -1
    ) {
      Object.assign(opts, defaultGenerateOptionsNodeServer);
    } else if (
      options.isNode ||
      options.enabledGenerators.indexOf("reactQuery") === -1
    ) {
      Object.assign(opts, defaultGenerateOptionsNode);
    }

    opts.useTypescript = options.useTypescript ?? !!opts.useTypescript;
    opts.throwingValidators =
      options.throwingValidators ?? !!opts.throwingValidators;
    opts.dumpStructure = options.dumpStructure ?? !!opts.dumpStructure;
    opts.dumpApiStructure = options.dumpApiStructure ?? !!opts.dumpApiStructure;
    opts.dumpPostgres = options.dumpPostgres ?? !!opts.dumpPostgres;
    opts.enabledGenerators =
      options.enabledGenerators.length > 0
        ? options.enabledGenerators
        : opts.enabledGenerators;

    // Quick hack so we can test if we have generated
    // before running the tests.
    if (options.returnFiles) {
      opts.returnFiles = true;
    }

    // Add internal routes
    for (const r of getInternalRoutes(opts)) {
      this.unprocessedData.add(r);
    }

    this.processData();

    hoistNamedItems(this.data, this.data);

    opts.enabledGroups = options.enabledGroups ?? Object.keys(this.data);

    // Make sure to do the same case conversion here as well as to not confuse the user.
    opts.enabledGroups = opts.enabledGroups.map((it) => lowerCaseFirst(it));

    if (opts.enabledGroups.length === 0) {
      throw new Error("Need at least a single group in enabledGroups");
    }

    // Make sure _compas/structure.json is enabled.
    // This is only needed when we have a router and dumpApiStructure is true
    if (
      opts.enabledGenerators.indexOf("router") !== -1 &&
      opts.enabledGroups.indexOf("compas") === -1 &&
      opts.dumpApiStructure
    ) {
      opts.enabledGroups.push("compas");
    }

    // Ensure that we don't mutate the current working data of the user
    const dataCopy = JSON.parse(JSON.stringify(this.data));
    const generatorInput = {};

    addGroupsToGeneratorInput(generatorInput, dataCopy, opts.enabledGroups);

    // validators may not be present, fallback to just stringify
    if (!isNil(validateCodeGenStructure)) {
      const { errors } = validateCodeGenStructure(generatorInput);
      if (errors) {
        this.logger.error(errors[0]);
        process.exit(1);
      }
    }

    const result = await generate(this.logger, opts, generatorInput);
    printProcessMemoryUsage(this.logger);
    return result;
  }

  /**
   * Internally used extend
   *
   * @param {object} rawStructure
   * @param {boolean} allowInternalProperties
   * @returns {this}
   */
  extendInternal(rawStructure, allowInternalProperties) {
    if (!isNil(validateCodeGenType)) {
      // Validators present, use the result of them.
      const { data: value, errors } = validateCodeGenStructure(rawStructure);
      if (errors) {
        this.logger.error(errors[0]);
        process.exit(1);
      }

      // Make a deep copy without null prototypes
      rawStructure = {};
      merge(rawStructure, value);
    }

    if (!allowInternalProperties) {
      recursivelyRemoveInternalFields(rawStructure);
    }

    for (const groupData of Object.values(rawStructure)) {
      for (const item of Object.values(groupData)) {
        this.addToData(item);
      }
    }

    return this;
  }

  /**
   * Process unprocessed list, normalize references
   * Depends on referentType being available
   *
   * @private
   */
  processData() {
    for (const item of this.unprocessedData) {
      this.addToData(buildOrInfer(item));
    }
    this.unprocessedData.clear();
  }

  /**
   * @private
   * @param item
   */
  addToData(item) {
    addToData(this.data, item);
  }
}

/**
 * Format eslint-disable comment
 *
 * @returns {string}
 */
function formatEslint() {
  return `/* eslint-disable ${App.defaultEslintIgnore.join(", ")} */\n`;
}
