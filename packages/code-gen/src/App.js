import { inspect } from "util";
import { newLogger, printProcessMemoryUsage } from "@lbu/insight";
import { isNil } from "@lbu/stdlib";
import {
  addToData,
  callGeneratorMethod,
  hoistNamedItems,
  runGenerators,
} from "./generate.js";
import { codeGenValidators } from "./generated/validators.js";
import { generators, generatorTemplates } from "./generators/index.js";
import { TypeCreator } from "./types/index.js";
import { buildOrInfer } from "./types/TypeBuilder.js";
import { lowerCaseFirst, upperCaseFirst } from "./utils.js";

/**
 * @class
 */
export class App {
  /**
   * @type {string[]}
   */
  static defaultEslintIgnore = ["no-unused-vars"];

  /**
   * @param {AppOpts} options
   */
  constructor({ verbose }) {
    /**
     * @type {string}
     */
    this.fileHeader = `// Generated by @lbu/code-gen\n`;

    /**
     * @type {boolean}
     */
    this.verbose = verbose || false;

    /**
     * @type {Logger}
     */
    this.logger = newLogger({
      ctx: {
        type: "code_gen",
      },
    });

    /** @type {Set<TypeBuilderLike>} */
    this.unprocessedData = new Set();

    /** @type {CodeGenStructure} */
    this.data = {};
  }

  /**
   * Create a new App instance
   *
   * @public
   * @param {AppOpts} [options={}] Optional options
   * @returns {Promise<App>}
   */
  static async new(options = {}) {
    const app = new App(options);
    await app.init();
    return app;
  }

  /**
   * Init generators and validate types
   *
   * @private
   * @returns {Promise<void>}
   */
  async init() {
    generatorTemplates.globals["upperCaseFirst"] = upperCaseFirst;
    generatorTemplates.globals["lowerCaseFirst"] = lowerCaseFirst;
    generatorTemplates.globals["inspect"] = (arg) =>
      inspect(arg, { sorted: true, colors: false, depth: 15 });

    if (this.verbose) {
      this.logger.info({
        msg: "Registered plugins: ",
        generators: [...generators.keys()],
        types: [...TypeCreator.types.keys()],
      });
    }

    await callGeneratorMethod(this, generators.keys(), "init");
  }

  /**
   * @param {...TypeBuilderLike} builders
   * @returns {this}
   */
  add(...builders) {
    for (const builder of builders) {
      this.unprocessedData.add(builder);
    }

    return this;
  }

  /**
   * @param {object} obj
   * @returns {this}
   */
  addRaw(obj) {
    const type = codeGenValidators.type(obj);
    this.addToData(type);

    return this;
  }

  /**
   * @param data
   */
  extend(data) {
    const result = codeGenValidators.structure(data);

    for (const groupData of Object.values(result)) {
      for (const item of Object.values(groupData)) {
        this.addToData(item);
      }
    }
  }

  /**
   * @param {GenerateOpts} options
   * @returns {Promise<void>}
   */
  async generate(options) {
    if (isNil(options?.outputDirectory)) {
      throw new Error("Need options.outputDirectory to write files to.");
    }
    options.fileHeader =
      this.fileHeader + formatEslint() + (options.fileHeader ?? "");
    options.useTypescript = !!options.useTypescript;
    options.dumpStructure = !!options.dumpStructure;
    options.enabledGenerators = options.enabledGenerators || [
      ...generators.keys(),
    ];

    this.processData();
    hoistNamedItems(this.data, this.data);

    options.enabledGroups = options.enabledGroups || Object.keys(this.data);
    if (options.enabledGroups.length === 0) {
      throw new Error("Need at least a single group in enabledGroups");
    }

    // Make sure to do the same case conversion here as well as to not confuse the user.
    options.enabledGroups = options.enabledGroups.map((it) =>
      lowerCaseFirst(it),
    );

    await runGenerators(this, options);
    printProcessMemoryUsage(this.logger);
  }

  /**
   * Process unprocessed list, normalize references
   * Depends on referentType being available
   *
   * @private
   */
  processData() {
    for (const item of this.unprocessedData) {
      this.addToData(buildOrInfer(item));
    }
    this.unprocessedData.clear();
  }

  /**
   * @private
   * @param item
   */
  addToData(item) {
    addToData(this.data, item);
  }
}

/**
 * Format eslint-disable comment
 *
 * @returns {string}
 */
function formatEslint() {
  return `/* eslint-disable ${App.defaultEslintIgnore.join(", ")} */\n`;
}
