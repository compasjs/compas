{{ if (item.validator.convert) { }}
  if (typeof value !== "string") {
    value = String(value)
  }
{{ } }}

if (typeof value !== "string") {
  return buildError(`validator.${parentType}.type`, { propertyPath }, errorList);
}

{{ if (item.validator.trim) { }}
  value = value.trim();
{{ } }}

{{ if (item.isOptional) { }}
  if (value.length === 0) {
    return {{= item.defaultValue }};
  }
{{ } }}

{{ if (item.validator.min !== undefined) { }}
  if (value.length < {{= item.validator.min }}) {
    const min = {{= item.validator.min }};
    return buildError(`validator.${parentType}.min`, { propertyPath, min }, errorList);
  }
{{ } }}

{{ if (item.validator.max !== undefined) { }}
  if (value.length > {{= item.validator.max }}) {
    const max = {{= item.validator.max }};
    return buildError(`validator.${parentType}.max`, { propertyPath, max }, errorList);
  }
{{ } }}

{{ if (item.validator.upperCase) { }}
  value = value.toUpperCase();
{{ } }}

{{ if (item.validator.lowerCase) { }}
  value = value.toLowerCase();
{{ } }}

{{ if (item.oneOf !== undefined) { }}
  if ({{= item.oneOf.map(it => "value !== \"" + it + "\"").join(" && ") }}) {
    const oneOf = {{= quote(item.oneOf.join(", ")) }};
    return buildError(`validator.${parentType}.oneOf`, { propertyPath, oneOf }, errorList);
  }
{{ } }}

{{ if (item.validator.pattern !== undefined) { }}
  if (!{{= item.validator.pattern }}.test(value)) {
    return buildError(`validator.${parentType}.pattern`, { propertyPath }, errorList);
  }
{{ } }}

return value;
