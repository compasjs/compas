{{ if (options.validatorCollectErrors) { }}

let errCount = 0;
const errors = [];
let result = undefined;

{{ for (const v of model.values) { }}
  {{ const fnNumber = ctx.anonFn(v); }}

  result =  {{= v.type }}Validator{{= fnNumber }}(value, propertyPath, errors);
  if (errors.length === errCount) {
    return result;
  }
  errCount = errors.length

{{ } }}

return buildError(`validator.${parentType}.type`, { propertyPath, errors }, errorList);

{{ } else { }}

const errors = [];

{{ for (const v of model.values) { }}
  try {
    {{ const fnNumber = ctx.anonFn(v); }}

    return {{= v.type }}Validator{{= fnNumber }}(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
{{ } }}

return buildError(`validator.${parentType}.type`, { propertyPath, errors }, errorList);
{{ } }}
