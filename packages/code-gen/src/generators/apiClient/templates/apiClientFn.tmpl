{{ const url = item.path.split("/").map(part => { if (part.startsWith(":")) { return "${params." + part.substring(1) + "}"; } else { return part; } }).join("/"); }}
{{ const buildTypeQualifier = (uniqueName, inputType) => `${options.useTypescript ? 'import("./types").'  : ""}${uniqueName}${inputType ? "_Input" : ""}`; }}

/**
 * {{= item.uniqueName }}
 {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
 * Docs: {{= item.docString }}
{{ if (item.params) { }}
 * @param { {{= buildTypeQualifier(item.params.reference.uniqueName, true) }} } params
{{ } }}
{{ if (item.query) { }}
 * @param { {{= buildTypeQualifier(item.query.reference.uniqueName, true) }} } query
{{ } }}
{{ if (item.body) { }}
 * @param { {{= buildTypeQualifier(item.body.reference.uniqueName, true) }} } body
{{ } }}
{{ if (item.files) { }}
 * @param { {{= buildTypeQualifier(item.files.reference.uniqueName, true) }} } files
{{ } }}
{{ if (item.response && getItem(item.response).type !== "file") { }}
 * @returns {Promise.<{{= buildTypeQualifier(item.response.reference.uniqueName, false) }}>}
{{ } else if (item.response) { }}
 * @returns {Promise.<{{= options.isNode ? "ReadableStream" : "Blob" }}>}
{{ } else { }}
 * @returns {Promise.<*>}
{{ } }}

 */
{{= item.name }}: async function (
{{ if (item.params) { }}
params,
{{ } }}
{{ if (item.query) { }}
query,
{{ } }}
{{ if (item.body) { }}
body,
{{ } }}
{{ if (item.files) { }}
files,
{{ } }}
) {
    checkApiClient();

    {{ if (item.files) { }}
      // eslint-disable-next-line
      const data = new FormData();
      for (const key of Object.keys(files)) {
        const keyFiles = Array.isArray(files[key]) ? files[key] : [files[key]];
        for (const file of keyFiles) {
          data.append(key, file.data, file.name);
        }
      }
    {{ } else if (item.body) { }}
      const data = body;
    {{ } }}

    {{ if (options.isNodeServer) { }}
    try {
    {{ } }}

    const response = await _internalClient.request({
      url: `{{= url }}`,
      method: "{{= item.method.toLowerCase() }}",
      params: {{ if (item.query) { }}query{{ } else { }}{}{{ } }},
      data: {{ if (item.body || item.files) { }}data{{ } else { }}{}{{ } }},
      {{ if (item.files && options.isNode !== -1) { }}
      headers: data.getHeaders(),
      {{ } }}
      {{ if (item.response && getItem(item.response).type === "file") { }}
      responseType: "{{= options.isNode !== -1 ? "stream" : "blob" }}",
      {{ } }}
    });

    {{ if (!options.isNodeServer) { }}
      return response.data;
    {{ } else { }}
      {{ if (item.response) { }}
        {{ const { name, group } = getItem(item.response); }}
        {{ /* Validates response, but does not use the validated result. This implies that dates will be ISO strings, and objects don't have a 'null' prototype. */ }}
        validators.{{= group }}Validators.{{= name }}(response.data);
      {{ } }}
      return response.data;
    } catch (e) {
      handleError(e, "{{= item.group }}", "{{= item.name }}");
    }

    {{ } }}

},
((newline))
