{{= options.fileHeader }}
((newline))

{{ if (options.enabledGenerators.indexOf("router") !== -1) { }}
import FormData from "form-data";
{{ } }}

let _internalClient = undefined;
let requestId = undefined;
((newline))

function checkApiClient() {
  if (_internalClient === undefined) {
    throw new Error("Initialize api client with createApiClient");
  }
}
((newline))

/**
 * Should set an axios compatible api client
 * @param {AxiosInstance} instance
 */
export function createApiClient(instance) {
  _internalClient = instance;

  _internalClient.interceptors.request.use((config) => {
      if (requestId) {
        config.headers["x-request-id"] = requestId;
      }
      return config;
  });

  _internalClient.interceptors.response.use((response) => {
    if (response.headers["x-request-id"]) {
      requestId = response.headers["x-request-id"];
    }
    return response;
  },
  (error) => {
    if (error.response && error.response.headers["x-request-id"]) {
      requestId = error.response.headers["x-request-id"];
    }
    return Promise.reject(error);
  });
}
((newline))

{{ for (const groupName of Object.keys(structure)) { }}

  export const {{= groupName }}Api = {

  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}

    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}

    {{= apiClientFn({ options, model: item }) }}
((newline))

  {{ } }}

  };
((newline))

{{ } }}
