{{= options.fileHeader }}
((newline))

{{ if (options.enabledGenerators.indexOf("router") !== -1) { }}
import FormData from "form-data";
{{ } }}

let _internalClient = undefined;
let requestId = undefined;
((newline))

function checkApiClient() {
  if (_internalClient === undefined) {
    throw new Error("Initialize api client with createApiClient");
  }
}
((newline))

/**
 * Transforms array/objects to Querystrings because of missing support
 * in FormData. The server bodyparser transforms the Querystrings back
 * to there original types.
 *
 * @param {string}  key
 * @param {any}     data
 * @param {number}  index [index=0]
 * @returns {string}
 */
function objectToQueryString(key, data, index = 0) {
  // arrays
  if (Array.isArray(data)) {
    // empty array
    if (data.length === 0) {
      return "&";
    }

    const queryArray = [];
    for (let i = 0; i < data.length; i++) {
      queryArray.push(objectToQueryString(key, data[i], i));
    }
    return queryArray.join("");
  }

  // objects
  if (typeof data === "object" && data !== null) {
    const identifier = `&${key}[${index}]`;
    const objectString = Object.keys(data)
      .reduce((current, identifier) => {
        return [
          ...current,
          [
            "[",
            identifier,
            "]",
            "=",
            objectToQueryString(key, data[identifier]),
          ].join(""),
        ];
      }, [])
      .join(identifier);

    return `${identifier}${objectString}`;
  }

  return data;
}
((newline))

/**
 * Should set an axios compatible api client
 * @param {AxiosInstance} instance
 */
export function createApiClient(instance) {
  _internalClient = instance;

  _internalClient.interceptors.request.use((config) => {
      if (requestId) {
        config.headers["x-request-id"] = requestId;
      }
      return config;
  });

  _internalClient.interceptors.response.use((response) => {
    if (response.headers["x-request-id"]) {
      requestId = response.headers["x-request-id"];
    }
    return response;
  },
  (error) => {
    if (error.response && error.response.headers["x-request-id"]) {
      requestId = error.response.headers["x-request-id"];
    }
    return Promise.reject(error);
  });
}
((newline))

{{ for (const groupName of Object.keys(structure)) { }}

  export const {{= groupName }}Api = {

  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}

    {{ if (item.type !== "route") { }}
    {{ continue; }}
    {{ } }}

    {{= apiClientFn({ options, model: item }) }}
((newline))

  {{ } }}

  };
((newline))

{{ } }}
