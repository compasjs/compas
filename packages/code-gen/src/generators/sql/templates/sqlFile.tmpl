{{= options.fileHeader }}

{{ for (const groupName of Object.keys(data)) { }}

  export const {{= groupName }}Queries = {

  {{ for (const itemName of Object.keys(data[groupName])) { }}
    {{ const item = data[groupName][itemName]; }}

    {{ if (item.type === "select") { }}
      /**
       * @param sql
       * @param { {{= item.where }}} where
       * @returns {Promise<{{= item.returning }}[]>}
       */
      {{= itemName }}: (sql, where) => sql`{{= item.query }}`,
    {{ } else if (item.type === "update") { }}
      /**
       * @param sql
       * @param { {{= item.where }}} where
       * @param { {{= item.partial }}} partial
       * @returns {Promise<{{= item.returning }}[]>}
       */
      {{= itemName }}: (sql, where, partial) => sql`{{= item.query }}`,
    {{ } else if (item.type === "delete") { }}
      /**
       * @param sql
       * @param { {{= item.where }}} where
       * @returns {Promise<void>}
       */
      {{= itemName }}: (sql, where) => sql`{{= item.query }}`,
    {{ } else if (item.type === "create") { }}
      /**
       * @param sql
       * @param { {{= item.input }}} input
       * @returns {Promise<{{= item.returning }}[]>}
       */
      {{= itemName }}: (sql, input) => {
       {{= item.fnBody }}
      },
    {{ } }}
  {{ } }}

  };

{{ } }}
