{{ /* Expects query, argList and idx to be available */ }}

{{ if (item.whereFields.length > 0) { }}
query += ` WHERE `;
{{ for (const it of item.whereFields) { }}
  if (where.{{= it.name }} !== undefined) {

      {{ if (["includeNotNull"].indexOf(it.type) === -1) { }}
        query += `{{= item.shortName }}."{{= it.key }}" `;
      {{ } }}

      {{ if (it.type === "equal") { }}
        query += `= $${idx++}`;
        argList.push(where.{{= it.name }});
      {{ } else if (it.type === "greaterThan") { }}
        query += `> $${idx++}`;
        argList.push(where.{{= it.name }});
      {{ } else if (it.type === "lowerThan") { }}
        query += `< $${idx++}`;
        argList.push(where.{{= it.name }});
      {{ } else if (it.type === "like") { }}
        query += `LIKE $${idx++}`;
        argList.push(`%${where.{{= it.name }} }%`);
      {{ } else if (it.type === "in") { }}
        query += `= ANY (ARRAY[`;
        let addOne = false;
        for (const value of where.{{= it.name }} || []) {
          addOne = true;
          query += `$${idx++},`;
          argList.push(value);
        }
        query = query.substring(0, query.length - (addOne ? 1 : 0)) + `]::uuid[])`;
      {{ } else if (it.type === "includeNotNull") { }}
        if (where.{{= it.name }} ?? false === false) {
          query += `{{= item.shortName }}."{{= it.key }}" IS NULL`;
        }
      {{ } }}

      {{ if (["includeNotNull"].indexOf(it.type) === -1) { }}
        query += " AND ";
      {{ } }}

  }
{{ } }}
query = query.substring(0, query.length - 4);
{{ } }}

