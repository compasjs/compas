{{ for (const groupName of Object.keys(structure)) { }}
  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}

    {{ if (item.type !== "object" || item.enableQueries !== true) { }}
    {{ continue; }}
    {{ } }}

    CREATE TABLE "{{= item.name }}" (
      {{ let count = Object.keys(item.keys || {}).length; }}
      {{ for (const key of Object.keys(item.keys|| {})) { }}
        {{ count--; }}
        "{{= key }}" {{= sqlExec({ type: item.keys[key].type, model: item.keys[key] }).trim() }}{{= item.keys[key].relationInfo ? ` REFERENCING "${getItem(item.keys[key].relationInfo.right).name}" ("${item.keys[key].relationInfo.rightKey}")  ON DELETE CASCADE` : "" }}{{= count !== 0 ? "," : "" }}
      {{ } }}
    );

    {{ if (item.queryOptions?.withHistory) { }}

    CREATE TABLE "{{= item.name }}History" (
      {{ let count = Object.keys(item.keys || {}).length - 1; }}
      {{ for (const key of Object.keys(item.keys|| {})) { }}
        {{ count--; }}
        {{ if (key === "updatedAt") { continue; } }}
        {{ if (key === "id") { }}
          "{{= item.name }}Id" {{= sqlExec({ type: item.keys[key].type, model: { ...item.keys[key], sql: {} }, }).trim() }} REFERENCES "{{= item.name }}" (id){{= count !== 0 ? "," : "" }}
        {{ } else { }}
          "{{= key }}" {{= sqlExec({ type: item.keys[key].type, model: item.keys[key] }).trim() }}{{= count !== 0 ? "," : "" }}
        {{ } }}
      {{ } }}
    );

    {{ } }}

    -- These are only for easy copy -pasting and should not be used as a guide!
    {{ for (const key of Object.keys(item.keys || {})) { }}
    {{ if (!item.keys[key]?.sql?.primary && item.keys[key]?.sql?.searchable) { }}
    CREATE INDEX {{= camelToSnakeCase(item.name) }}_{{= camelToSnakeCase(key) }}_idx ON "{{= item.name }}" ("{{= key }}");
    {{ } }}
    {{ } }}

    ((newline))
  {{ } }}
{{ } }}
