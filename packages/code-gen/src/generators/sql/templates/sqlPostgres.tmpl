{{ for (const groupName of Object.keys(structure)) { }}
  {{ for (const itemName of Object.keys(structure[groupName])) { }}
    {{ const item = structure[groupName][itemName]; }}

    {{ if (item.type !== "object" || item.enableQueries !== true) { }}
    {{ continue; }}
    {{ } }}

    CREATE TABLE {{= camelToSnakeCase(item.name) }} (
      {{ let count = Object.keys(item.keys || {}).length; }}
      {{ for (const key of Object.keys(item.keys|| {})) { }}
        {{ count--; }}
        {{= camelToSnakeCase(key) }} {{= sqlExec({ type: item.keys[key].type, model: item.keys[key] }).trim() }}{{= count !== 0 ? "," : "" }}
      {{ } }}
    );
    ((newline))

    {{ if (item.queryOptions?.withHistory) { }}

    CREATE TABLE {{= camelToSnakeCase(item.name) }}_history (
      {{ let count = Object.keys(item.keys || {}).length - 1; }}
      {{ for (const key of Object.keys(item.keys|| {})) { }}
        {{ count--; }}
        {{ if (key === "updatedAt") { continue; } }}
        {{ if (key === "id") { }}
          {{= camelToSnakeCase(item.name) }}_id {{= sqlExec({ type: item.keys[key].type, model: { ...item.keys[key], sql: {} }, }).trim() }} REFERENCES {{= camelToSnakeCase(item.name) }}(id){{= count !== 0 ? "," : "" }}
        {{ } else { }}
          {{= camelToSnakeCase(key) }} {{= sqlExec({ type: item.keys[key].type, model: item.keys[key] }).trim() }}{{= count !== 0 ? "," : "" }}
        {{ } }}
      {{ } }}
    );
    ((newline))

    {{ } }}
  {{ } }}
{{ } }}
