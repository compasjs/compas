{{ /* Keep in sync with apiClientFn */ }}
{{ const funcName = "use" + upperCaseFirst(item.uniqueName); }}
{{ const getRef = (item) => /* Recursively resolve references */ { const ref = !!item && structure[item.group][item.name]; if (ref && ref.reference) { return getRef(ref.reference); } else { return ref; } }; }}

{{ let responseType = undefined; }}
{{ if (item.response) { }}
{{ responseType = `T.${getItem(item.response)?.uniqueName}`; }}
{{ } else { }}
{{ responseType = "any"; }}
{{ } }}

{{ if (item.method === "GET") { }}

((newline))
/**
 * {{= funcName }}
  {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
 * Docs: {{= item.docString.replace(/\n/g, "\n  * ") }}
 */
export function {{= funcName }}(
{{ if (item.params) { }}
params: T.{{= item.params.reference.uniqueName }}_Input,
{{ } }}
{{ if (item.query) { }}
query: T.{{= item.query.reference.uniqueName }}_Input,
{{ } }}
options: QueryConfig<{{=  responseType }}, AppErrorResponse> = {},
): QueryResult<{{= responseType }}, AppErrorResponse> {
  const { {{= item.group }} } = useApi();

  options.enabled = (
    options.enabled === true || (options.enabled !== false
    {{ if (item.query && getRef(item.query.reference)) { }}
      {{ const ref = getRef(item.query.reference); }}
      {{ for (const key of Object.keys(ref?.keys ?? {})) { }}
        {{ if (!ref.keys[key].isOptional) { }}
          && !!query.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (item.params && getRef(item.params.reference)) { }}
      {{ const ref = getRef(item.params.reference); }}
      {{ for (const key of Object.keys(ref?.keys ?? {})) { }}
        {{ if (!ref.keys[key].isOptional) { }}
          && !!params.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
  ));

  return useQuery([
     "{{= item.uniqueName }}",

    {{ if (item.params) { }}
    params,
    {{ } }}
    {{ if (item.query) { }}
    query,
    {{ } }}
    ],
    (
    _,
    {{ if (item.params) { }}
    params: T.{{= item.params.reference.uniqueName }}_Input,
    {{ } }}
    {{ if (item.query) { }}
    query: T.{{= item.query.reference.uniqueName }}_Input,
    {{ } }}
    ) => {
      const promise: CancellablePromise<{{= responseType }}> = {{= item.group }}.{{= item.name }}(
        {{= item.params ? "params, " : ""}}
        {{= item.query ? "query, " : "" }}
        { cancelToken: options?.cancelToken?.token },
      );

      if (options?.cancelToken) {
        promise.cancel = () => options?.cancelToken?.cancel();
      }

      return promise;
    },
    options,
  );
}

{{ } else { }}

interface {{= upperCaseFirst(funcName) }}Props {
   {{ if (item.params) { }}
   params: {{= item.params ? "T." + item.params.reference.uniqueName + "_Input" : "object" }}
   {{ } }}
   {{ if (item.query) { }}
    query: T.{{= item.query.reference.uniqueName }}_Input
   {{ } }}
   {{ if (item.body) { }}
   body: T.{{= item.body.reference.uniqueName }}_Input
   {{ } }}
   {{ if (item.files) { }}
   files: T.{{= item.files.reference.uniqueName }}_Input
   {{ } }}
}

((newline))

/**
 * {{= funcName }}
 {{ if (item.tags.length > 0 ) { }}* Tags: {{= item.tags.join(", ") }}{{ } }}
 * Docs: {{= item.docString }}
 */
export function {{= funcName }}(
  options: MutationConfig<{{= responseType }}, AppErrorResponse, {{= upperCaseFirst(funcName) }}Props> = {},
): MutationResultPair<{{= responseType }}, AppErrorResponse, {{= upperCaseFirst(funcName) }}Props, unknown> {
  const { {{= item.group }} } = useApi();

  return useMutation(
    (variables) => {{= item.group }}.{{= item.name }}(
      {{= item.params ? "variables.params, " : ""}}
      {{= item.query ? "variables.query, " : "" }}
      {{= item.body ? "variables.body, " : "" }}
      {{= item.files ? "variables.files, " : "" }}
    ),
    options,
  );
}

{{ } }}

((newline))
