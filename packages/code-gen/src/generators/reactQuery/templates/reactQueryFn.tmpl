{{ /* Keep in sync with apiClientFn */ }}
{{ const funcName = "use" + upperCaseFirst(model.uniqueName); }}
{{ let hasParam = model.params !== undefined; }}
{{ model.path.split("/").forEach(part => { if (part.startsWith(":")) { hasParam = true; }  }); }}
{{ const getRef = (model) => /* Recursively resolve references */ { const ref = !!model && structure[model.group][model.name]; if (ref && ref.reference) { return getRef(ref.reference); } else { return ref; } }; }}

{{ if (model.method === "GET") { }}

((newline))
/**
 * {{= funcName }}
 * Tags: {{= model.tags.join(", ") }}
 * Docs: {{= model.docString.replace(/\n/g, "\n  * ") }}
 */
export function {{= funcName }}(
{{ if (hasParam) { }}
params: {{= model.params ? "T." + model.params.reference.uniqueName + "_Input" : "object" }},
{{ } }}
{{ if (model.query) { }}
query: T.{{= model.query.reference.uniqueName }}_Input,
{{ } }}
{{ if (model.body) { }}
body: T.{{= model.body.reference.uniqueName }}_Input,
{{ } }}
options: QueryOptions<{{=  model.response?.reference?.uniqueName ? "T." + model.response.reference.uniqueName : "any" }}> = {},
): {{ if (model.response) { }} QueryResult<T.{{= model.response.reference.uniqueName }}> {{ } else { }} QueryResult<any>{{ } }}  {
  options.enabled = (
    !!options.enabled
    {{ if (model.query && getRef(model.query.reference)) { }}
      {{ const ref = getRef(model.query.reference); }}
      {{ for (const key of Object.keys(ref?.keys ?? {})) { }}
        {{ if (!ref.keys[key].isOptional) { }}
          || !!query.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
    {{ if (hasParam && getRef(model.params.reference)) { }}
      {{ const ref = getRef(model.params.reference); }}
      {{ for (const key of Object.keys(ref?.keys ?? {})) { }}
        {{ if (!ref.keys[key].isOptional) { }}
          || !!params.{{= key }}
        {{ } }}
      {{ } }}
    {{ } }}
  );

  return useQuery([
     "{{= model.uniqueName }}",

    {{ if (hasParam) { }}
    params,
    {{ } }}
    {{ if (model.query) { }}
    query,
    {{ } }}
    ],
    (
    _,
    {{ if (hasParam) { }}
    params,
    {{ } }}
    {{ if (model.query) { }}
    query,
    {{ } }}
    ) => {{= model.group }}Api.{{= model.name }}(
      {{= hasParam ? "params, " : ""}}
      {{= model.query ? "query, " : "" }}
      {{= model.body ? "body, " : "" }}
    ),
    options,
  );
}

{{ } else { }}

interface {{= upperCaseFirst(funcName) }}Props {
   {{ if (hasParam) { }}
   params: {{= model.params ? "T." + model.params.reference.uniqueName + "_Input" : "object" }}
   {{ } }}
   {{ if (model.query) { }}
    query: T.{{= model.query.reference.uniqueName }}_Input
   {{ } }}
   {{ if (model.body) { }}
   body: T.{{= model.body.reference.uniqueName }}_Input
   {{ } }}
}

((newline))

/**
 * {{= funcName }}
 * Tags: {{= model.tags.join(", ") }}
 * Docs: {{= model.docString }}
 */
export function {{= funcName }}(
  options: MutationOptions<{{= model.response?.reference?.uniqueName ? "T." + model.response.reference.uniqueName : "any" }}, {{= upperCaseFirst(funcName) }}Props> = {},
): {{ if (model.response) { }} [MutateFunction<T.{{= model.response.reference.uniqueName }}, {{= upperCaseFirst(funcName) }}Props>, MutationResult<T.{{= model.response.reference.uniqueName }}>] {{ } else { }} [MutateFunction<any, {{= upperCaseFirst(funcName) }}Props>, MutationResult<any>] {{ } }} {
  return useMutation(
    (variables) => {{= model.group }}Api.{{= model.name }}(
      {{= hasParam ? "variables.params, " : ""}}
      {{= model.query ? "variables.query, " : "" }}
      {{= model.body ? "variables.body, " : "" }}
    ),
    options,
  );
}

{{ } }}

((newline))
