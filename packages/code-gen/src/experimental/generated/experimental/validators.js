// Generated by @compas/code-gen

/**
 * @template T, E
 * @typedef {{ value: T, error?: never}|{ value?: never, error: E }} Either
 */

/**
 * @typedef {Record<string, any|undefined>} ValidatorErrorMap
 */

/**
 * @param {import("../common/types").ExperimentalAnyDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalAnyDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalAnyDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "any") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["any"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            errorMap[`$.validator.allowNull`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["targets"] === null || value["targets"] === undefined) {
        result["targets"] = undefined;
      } else {
        if (
          typeof value["targets"] !== "object" ||
          Array.isArray(value["targets"])
        ) {
          errorMap[`$.targets`] = {
            key: "validator.generic",
          };
        } else {
          result["targets"] = {};
          for (let genericKeyInput0 of Object.keys(value["targets"])) {
            /** @type {any} */
            let genericKeyResult1 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap2 = {};
            if (genericKeyInput0 === null || genericKeyInput0 === undefined) {
              genericKeyErrorMap2[`$`] = {
                key: "validator.undefined",
              };
            } else {
              const refResult3 =
                validateExperimentalAnyDefinitionTarget(genericKeyInput0);

              if (refResult3.error) {
                for (const errorKey of Object.keys(refResult3.error)) {
                  genericKeyErrorMap2[`$${errorKey.substring(1)}`] =
                    refResult3.error[errorKey];
                }
              }
              genericKeyResult1 = refResult3.value;
            }
            if (Object.keys(genericKeyErrorMap2).length !== 0) {
              if (errorMap[`$.targets`]) {
                errorMap[`$.targets`].inputs.push({
                  key: genericKeyInput0,
                  errors: genericKeyErrorMap2,
                });
              } else {
                errorMap[`$.targets`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput0, errors: genericKeyErrorMap2 },
                  ],
                };
              }
            } else {
              if (
                value["targets"][genericKeyResult1] === null ||
                value["targets"][genericKeyResult1] === undefined
              ) {
                errorMap[`$.targets.${genericKeyResult1}`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["targets"][genericKeyResult1] !== "object" ||
                  Array.isArray(value["targets"][genericKeyResult1])
                ) {
                  errorMap[`$.targets.${genericKeyResult1}`] = {
                    key: "validator.object",
                    value: value["targets"][genericKeyResult1],
                    foundType: typeof value["targets"][genericKeyResult1],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys3 = new Set([
                    "validatorInputType",
                    "validatorOutputType",
                    "validatorExpression",
                    "validatorImport",
                  ]);
                  for (const key of Object.keys(
                    value["targets"][genericKeyResult1],
                  )) {
                    if (
                      !knownKeys3.has(key) &&
                      value["targets"][genericKeyResult1][key] !== null &&
                      value["targets"][genericKeyResult1][key] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys3];
                      const foundKeys = Object.keys(
                        value["targets"][genericKeyResult1],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys3.has(it),
                      );
                      errorMap[`$.targets.${genericKeyResult1}`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["targets"][genericKeyResult1] = Object.create(null);

                  if (
                    value["targets"][genericKeyResult1][
                      "validatorInputType"
                    ] === null ||
                    value["targets"][genericKeyResult1][
                      "validatorInputType"
                    ] === undefined
                  ) {
                    errorMap[
                      `$.targets.${genericKeyResult1}.validatorInputType`
                    ] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString3 =
                      value["targets"][genericKeyResult1]["validatorInputType"];
                    if (typeof convertedString3 !== "string") {
                      errorMap[
                        `$.targets.${genericKeyResult1}.validatorInputType`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString3.length < 1) {
                        errorMap[
                          `$.targets.${genericKeyResult1}.validatorInputType`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["targets"][genericKeyResult1][
                          "validatorInputType"
                        ] = convertedString3;
                      }
                    }
                  }
                  if (
                    value["targets"][genericKeyResult1][
                      "validatorOutputType"
                    ] === null ||
                    value["targets"][genericKeyResult1][
                      "validatorOutputType"
                    ] === undefined
                  ) {
                    errorMap[
                      `$.targets.${genericKeyResult1}.validatorOutputType`
                    ] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString3 =
                      value["targets"][genericKeyResult1][
                        "validatorOutputType"
                      ];
                    if (typeof convertedString3 !== "string") {
                      errorMap[
                        `$.targets.${genericKeyResult1}.validatorOutputType`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString3.length < 1) {
                        errorMap[
                          `$.targets.${genericKeyResult1}.validatorOutputType`
                        ] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        result["targets"][genericKeyResult1][
                          "validatorOutputType"
                        ] = convertedString3;
                      }
                    }
                  }
                  if (
                    value["targets"][genericKeyResult1][
                      "validatorExpression"
                    ] === null ||
                    value["targets"][genericKeyResult1][
                      "validatorExpression"
                    ] === undefined
                  ) {
                    result["targets"][genericKeyResult1][
                      "validatorExpression"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString3 =
                      value["targets"][genericKeyResult1][
                        "validatorExpression"
                      ];
                    if (typeof convertedString3 !== "string") {
                      errorMap[
                        `$.targets.${genericKeyResult1}.validatorExpression`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString3.length === 0) {
                        result["targets"][genericKeyResult1][
                          "validatorExpression"
                        ] = undefined;
                      } else {
                        if (convertedString3.length < 1) {
                          errorMap[
                            `$.targets.${genericKeyResult1}.validatorExpression`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["targets"][genericKeyResult1][
                            "validatorExpression"
                          ] = convertedString3;
                        }
                      }
                    }
                  }
                  if (
                    value["targets"][genericKeyResult1]["validatorImport"] ===
                      null ||
                    value["targets"][genericKeyResult1]["validatorImport"] ===
                      undefined
                  ) {
                    result["targets"][genericKeyResult1]["validatorImport"] =
                      undefined;
                  } else {
                    /** @type {string} */
                    let convertedString3 =
                      value["targets"][genericKeyResult1]["validatorImport"];
                    if (typeof convertedString3 !== "string") {
                      errorMap[
                        `$.targets.${genericKeyResult1}.validatorImport`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString3.length === 0) {
                        result["targets"][genericKeyResult1][
                          "validatorImport"
                        ] = undefined;
                      } else {
                        if (convertedString3.length < 1) {
                          errorMap[
                            `$.targets.${genericKeyResult1}.validatorImport`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["targets"][genericKeyResult1][
                            "validatorImport"
                          ] = convertedString3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (value["rawValue"] === null || value["rawValue"] === undefined) {
        result["rawValue"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["rawValue"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.rawValue`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["rawValue"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.rawValue`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["rawValue"] = convertedString0;
            }
          }
        }
      }
      if (
        value["rawValueImport"] === null ||
        value["rawValueImport"] === undefined
      ) {
        errorMap[`$.rawValueImport`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["rawValueImport"] !== "object" ||
          Array.isArray(value["rawValueImport"])
        ) {
          errorMap[`$.rawValueImport`] = {
            key: "validator.object",
            value: value["rawValueImport"],
            foundType: typeof value["rawValueImport"],
          };
        } else {
          result["rawValueImport"] = Object.create(null);

          if (
            value["rawValueImport"]["javaScript"] === null ||
            value["rawValueImport"]["javaScript"] === undefined
          ) {
            result["rawValueImport"]["javaScript"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["rawValueImport"]["javaScript"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.rawValueImport.javaScript`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["rawValueImport"]["javaScript"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.rawValueImport.javaScript`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["rawValueImport"]["javaScript"] = convertedString0;
                }
              }
            }
          }
          if (
            value["rawValueImport"]["typeScript"] === null ||
            value["rawValueImport"]["typeScript"] === undefined
          ) {
            result["rawValueImport"]["typeScript"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["rawValueImport"]["typeScript"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.rawValueImport.typeScript`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["rawValueImport"]["typeScript"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.rawValueImport.typeScript`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["rawValueImport"]["typeScript"] = convertedString0;
                }
              }
            }
          }
        }
      }
      if (
        value["rawValidator"] === null ||
        value["rawValidator"] === undefined
      ) {
        result["rawValidator"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["rawValidator"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.rawValidator`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["rawValidator"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.rawValidator`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["rawValidator"] = convertedString0;
            }
          }
        }
      }
      if (
        value["rawValidatorImport"] === null ||
        value["rawValidatorImport"] === undefined
      ) {
        errorMap[`$.rawValidatorImport`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["rawValidatorImport"] !== "object" ||
          Array.isArray(value["rawValidatorImport"])
        ) {
          errorMap[`$.rawValidatorImport`] = {
            key: "validator.object",
            value: value["rawValidatorImport"],
            foundType: typeof value["rawValidatorImport"],
          };
        } else {
          result["rawValidatorImport"] = Object.create(null);

          if (
            value["rawValidatorImport"]["javaScript"] === null ||
            value["rawValidatorImport"]["javaScript"] === undefined
          ) {
            result["rawValidatorImport"]["javaScript"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["rawValidatorImport"]["javaScript"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.rawValidatorImport.javaScript`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["rawValidatorImport"]["javaScript"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.rawValidatorImport.javaScript`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["rawValidatorImport"]["javaScript"] = convertedString0;
                }
              }
            }
          }
          if (
            value["rawValidatorImport"]["typeScript"] === null ||
            value["rawValidatorImport"]["typeScript"] === undefined
          ) {
            result["rawValidatorImport"]["typeScript"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["rawValidatorImport"]["typeScript"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.rawValidatorImport.typeScript`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["rawValidatorImport"]["typeScript"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.rawValidatorImport.typeScript`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["rawValidatorImport"]["typeScript"] = convertedString0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalAnyDefinitionTarget|any} value
 * @returns {Either<import("../common/types").ExperimentalAnyDefinitionTarget, ValidatorErrorMap>}
 */
export function validateExperimentalAnyDefinitionTarget(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    /** @type {string} */
    let convertedString0 = value;
    if (typeof convertedString0 !== "string") {
      errorMap[`$`] = {
        key: "validator.string",
      };
    } else {
      if (convertedString0.length < 1) {
        errorMap[`$`] = {
          key: "validator.length",
          minLength: 1,
        };
      } else if (
        convertedString0 !== "js" &&
        convertedString0 !== "ts" &&
        convertedString0 !== "jsKoaReceive" &&
        convertedString0 !== "jsKoaSend" &&
        convertedString0 !== "jsPostgres" &&
        convertedString0 !== "jsAxios" &&
        convertedString0 !== "tsAxios" &&
        convertedString0 !== "jsAxiosNode" &&
        convertedString0 !== "tsAxiosBrowser" &&
        convertedString0 !== "tsAxiosReactNative"
      ) {
        errorMap[`$`] = {
          key: "validator.oneOf",
          allowedValues: [
            "js",
            "ts",
            "jsKoaReceive",
            "jsKoaSend",
            "jsPostgres",
            "jsAxios",
            "tsAxios",
            "jsAxiosNode",
            "tsAxiosBrowser",
            "tsAxiosReactNative",
          ],
          foundValue: convertedString0,
        };
      } else {
        result = convertedString0;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalAnyOfDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalAnyOfDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalAnyOfDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "anyOf") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["anyOf"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        result["validator"] = {};
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["discriminant"] === null ||
            value["validator"]["discriminant"] === undefined
          ) {
            result["validator"]["discriminant"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["validator"]["discriminant"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.validator.discriminant`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["validator"]["discriminant"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.validator.discriminant`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["validator"]["discriminant"] = convertedString0;
                }
              }
            }
          }
        }
      }
      if (value["values"] === null || value["values"] === undefined) {
        errorMap[`$.values`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["values"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        if (intermediateValue1.length < 1) {
          errorMap[`$.values`] = {
            key: "validator.length",
            minLength: 1,
            foundLength: intermediateValue1.length,
          };
        }
        result["values"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateExperimentalTypeSystemDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.values${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["values"] = intermediateResult1;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * All type definitions that can be used inside other types, like object keys.
 *
 * @param {import("../common/types").ExperimentalTypeSystemDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalTypeSystemDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalTypeSystemDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (value.type === "any") {
      const refResult0 = validateExperimentalAnyDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "anyOf") {
      const refResult0 = validateExperimentalAnyOfDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "array") {
      const refResult0 = validateExperimentalArrayDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "boolean") {
      const refResult0 = validateExperimentalBooleanDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "crud") {
      const refResult0 = validateExperimentalCrudDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "date") {
      const refResult0 = validateExperimentalDateDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "extend") {
      const refResult0 = validateExperimentalExtendDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "file") {
      const refResult0 = validateExperimentalFileDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "generic") {
      const refResult0 = validateExperimentalGenericDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "number") {
      const refResult0 = validateExperimentalNumberDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "object") {
      const refResult0 = validateExperimentalObjectDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "omit") {
      const refResult0 = validateExperimentalOmitDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "pick") {
      const refResult0 = validateExperimentalPickDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "reference") {
      const refResult0 = validateExperimentalReferenceDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "string") {
      const refResult0 = validateExperimentalStringDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "uuid") {
      const refResult0 = validateExperimentalUuidDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else {
      errorMap[`$`] = {
        key: "validator.anyOf",
        discriminant: "type",
        allowedValues: [
          "any",
          "anyOf",
          "array",
          "boolean",
          "crud",
          "date",
          "extend",
          "file",
          "generic",
          "number",
          "object",
          "omit",
          "pick",
          "reference",
          "string",
          "uuid",
        ],
      };
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalArrayDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalArrayDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalArrayDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "array") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["array"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["convert"] === null ||
            value["validator"]["convert"] === undefined
          ) {
            errorMap[`$.validator.convert`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["convert"] === true ||
              value["validator"]["convert"] === "true" ||
              value["validator"]["convert"] === 1
            ) {
              result["validator"]["convert"] = true;
            } else if (
              value["validator"]["convert"] === false ||
              value["validator"]["convert"] === "false" ||
              value["validator"]["convert"] === 0
            ) {
              result["validator"]["convert"] = false;
            } else {
              errorMap[`$.validator.convert`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["min"] === null ||
            value["validator"]["min"] === undefined
          ) {
            result["validator"]["min"] = undefined;
          } else {
            let convertedNumber0 = value["validator"]["min"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.validator.min`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < -2147483647) {
              errorMap[`$.validator.min`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber0 > 2147483647) {
              errorMap[`$.validator.min`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              result["validator"]["min"] = convertedNumber0;
            }
          }
          if (
            value["validator"]["max"] === null ||
            value["validator"]["max"] === undefined
          ) {
            result["validator"]["max"] = undefined;
          } else {
            let convertedNumber0 = value["validator"]["max"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.validator.max`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < -2147483647) {
              errorMap[`$.validator.max`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber0 > 2147483647) {
              errorMap[`$.validator.max`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              result["validator"]["max"] = convertedNumber0;
            }
          }
        }
      }
      if (value["values"] === null || value["values"] === undefined) {
        errorMap[`$.values`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalTypeSystemDefinition(
          value["values"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.values${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["values"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalBooleanDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalBooleanDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalBooleanDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "boolean") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["boolean"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["convert"] === null ||
            value["validator"]["convert"] === undefined
          ) {
            errorMap[`$.validator.convert`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["convert"] === true ||
              value["validator"]["convert"] === "true" ||
              value["validator"]["convert"] === 1
            ) {
              result["validator"]["convert"] = true;
            } else if (
              value["validator"]["convert"] === false ||
              value["validator"]["convert"] === "false" ||
              value["validator"]["convert"] === 0
            ) {
              result["validator"]["convert"] = false;
            } else {
              errorMap[`$.validator.convert`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["oneOf"] === null || value["oneOf"] === undefined) {
        result["oneOf"] = undefined;
      } else {
        if (
          value["oneOf"] === true ||
          value["oneOf"] === "true" ||
          value["oneOf"] === 1
        ) {
          result["oneOf"] = true;
        } else if (
          value["oneOf"] === false ||
          value["oneOf"] === "false" ||
          value["oneOf"] === 0
        ) {
          result["oneOf"] = false;
        } else {
          errorMap[`$.oneOf`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalCrudDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalCrudDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalCrudDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "crud") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["crud"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        result["validator"] = {};
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);
        }
      }
      if (value["basePath"] === null || value["basePath"] === undefined) {
        result["basePath"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["basePath"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.basePath`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["basePath"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.basePath`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["basePath"] = convertedString0;
            }
          }
        }
      }
      if (value["entity"] === null || value["entity"] === undefined) {
        result["entity"] = undefined;
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["entity"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.entity${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["entity"] = refResult0.value;
      }
      if (value["fromParent"] === null || value["fromParent"] === undefined) {
        result["fromParent"] = undefined;
      } else {
        if (
          typeof value["fromParent"] !== "object" ||
          Array.isArray(value["fromParent"])
        ) {
          errorMap[`$.fromParent`] = {
            key: "validator.object",
            value: value["fromParent"],
            foundType: typeof value["fromParent"],
          };
        } else {
          result["fromParent"] = Object.create(null);

          if (
            value["fromParent"]["field"] === null ||
            value["fromParent"]["field"] === undefined
          ) {
            errorMap[`$.fromParent.field`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString0 = value["fromParent"]["field"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.fromParent.field`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length < 1) {
                errorMap[`$.fromParent.field`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                result["fromParent"]["field"] = convertedString0;
              }
            }
          }
          if (
            value["fromParent"]["options"] === null ||
            value["fromParent"]["options"] === undefined
          ) {
            result["fromParent"]["options"] = undefined;
          } else {
            if (
              typeof value["fromParent"]["options"] !== "object" ||
              Array.isArray(value["fromParent"]["options"])
            ) {
              errorMap[`$.fromParent.options`] = {
                key: "validator.object",
                value: value["fromParent"]["options"],
                foundType: typeof value["fromParent"]["options"],
              };
            } else {
              result["fromParent"]["options"] = Object.create(null);

              if (
                value["fromParent"]["options"]["name"] === null ||
                value["fromParent"]["options"]["name"] === undefined
              ) {
                result["fromParent"]["options"]["name"] = undefined;
              } else {
                /** @type {string} */
                let convertedString0 = value["fromParent"]["options"]["name"];
                if (typeof convertedString0 !== "string") {
                  errorMap[`$.fromParent.options.name`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString0.length === 0) {
                    result["fromParent"]["options"]["name"] = undefined;
                  } else {
                    if (convertedString0.length < 1) {
                      errorMap[`$.fromParent.options.name`] = {
                        key: "validator.length",
                        minLength: 1,
                      };
                    } else {
                      result["fromParent"]["options"]["name"] =
                        convertedString0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (
        value["routeOptions"] === null ||
        value["routeOptions"] === undefined
      ) {
        errorMap[`$.routeOptions`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["routeOptions"] !== "object" ||
          Array.isArray(value["routeOptions"])
        ) {
          errorMap[`$.routeOptions`] = {
            key: "validator.object",
            value: value["routeOptions"],
            foundType: typeof value["routeOptions"],
          };
        } else {
          result["routeOptions"] = Object.create(null);

          if (
            value["routeOptions"]["listRoute"] === null ||
            value["routeOptions"]["listRoute"] === undefined
          ) {
            result["routeOptions"]["listRoute"] = undefined;
          } else {
            if (
              value["routeOptions"]["listRoute"] === true ||
              value["routeOptions"]["listRoute"] === "true" ||
              value["routeOptions"]["listRoute"] === 1
            ) {
              result["routeOptions"]["listRoute"] = true;
            } else if (
              value["routeOptions"]["listRoute"] === false ||
              value["routeOptions"]["listRoute"] === "false" ||
              value["routeOptions"]["listRoute"] === 0
            ) {
              result["routeOptions"]["listRoute"] = false;
            } else {
              errorMap[`$.routeOptions.listRoute`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["routeOptions"]["singleRoute"] === null ||
            value["routeOptions"]["singleRoute"] === undefined
          ) {
            result["routeOptions"]["singleRoute"] = undefined;
          } else {
            if (
              value["routeOptions"]["singleRoute"] === true ||
              value["routeOptions"]["singleRoute"] === "true" ||
              value["routeOptions"]["singleRoute"] === 1
            ) {
              result["routeOptions"]["singleRoute"] = true;
            } else if (
              value["routeOptions"]["singleRoute"] === false ||
              value["routeOptions"]["singleRoute"] === "false" ||
              value["routeOptions"]["singleRoute"] === 0
            ) {
              result["routeOptions"]["singleRoute"] = false;
            } else {
              errorMap[`$.routeOptions.singleRoute`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["routeOptions"]["createRoute"] === null ||
            value["routeOptions"]["createRoute"] === undefined
          ) {
            result["routeOptions"]["createRoute"] = undefined;
          } else {
            if (
              value["routeOptions"]["createRoute"] === true ||
              value["routeOptions"]["createRoute"] === "true" ||
              value["routeOptions"]["createRoute"] === 1
            ) {
              result["routeOptions"]["createRoute"] = true;
            } else if (
              value["routeOptions"]["createRoute"] === false ||
              value["routeOptions"]["createRoute"] === "false" ||
              value["routeOptions"]["createRoute"] === 0
            ) {
              result["routeOptions"]["createRoute"] = false;
            } else {
              errorMap[`$.routeOptions.createRoute`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["routeOptions"]["updateRoute"] === null ||
            value["routeOptions"]["updateRoute"] === undefined
          ) {
            result["routeOptions"]["updateRoute"] = undefined;
          } else {
            if (
              value["routeOptions"]["updateRoute"] === true ||
              value["routeOptions"]["updateRoute"] === "true" ||
              value["routeOptions"]["updateRoute"] === 1
            ) {
              result["routeOptions"]["updateRoute"] = true;
            } else if (
              value["routeOptions"]["updateRoute"] === false ||
              value["routeOptions"]["updateRoute"] === "false" ||
              value["routeOptions"]["updateRoute"] === 0
            ) {
              result["routeOptions"]["updateRoute"] = false;
            } else {
              errorMap[`$.routeOptions.updateRoute`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["routeOptions"]["deleteRoute"] === null ||
            value["routeOptions"]["deleteRoute"] === undefined
          ) {
            result["routeOptions"]["deleteRoute"] = undefined;
          } else {
            if (
              value["routeOptions"]["deleteRoute"] === true ||
              value["routeOptions"]["deleteRoute"] === "true" ||
              value["routeOptions"]["deleteRoute"] === 1
            ) {
              result["routeOptions"]["deleteRoute"] = true;
            } else if (
              value["routeOptions"]["deleteRoute"] === false ||
              value["routeOptions"]["deleteRoute"] === "false" ||
              value["routeOptions"]["deleteRoute"] === 0
            ) {
              result["routeOptions"]["deleteRoute"] = false;
            } else {
              errorMap[`$.routeOptions.deleteRoute`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (
        value["fieldOptions"] === null ||
        value["fieldOptions"] === undefined
      ) {
        errorMap[`$.fieldOptions`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["fieldOptions"] !== "object" ||
          Array.isArray(value["fieldOptions"])
        ) {
          errorMap[`$.fieldOptions`] = {
            key: "validator.object",
            value: value["fieldOptions"],
            foundType: typeof value["fieldOptions"],
          };
        } else {
          result["fieldOptions"] = Object.create(null);

          if (
            value["fieldOptions"]["readable"] === null ||
            value["fieldOptions"]["readable"] === undefined
          ) {
            result["fieldOptions"]["readable"] = undefined;
          } else {
            if (
              typeof value["fieldOptions"]["readable"] !== "object" ||
              Array.isArray(value["fieldOptions"]["readable"])
            ) {
              errorMap[`$.fieldOptions.readable`] = {
                key: "validator.object",
                value: value["fieldOptions"]["readable"],
                foundType: typeof value["fieldOptions"]["readable"],
              };
            } else {
              result["fieldOptions"]["readable"] = Object.create(null);

              if (
                value["fieldOptions"]["readable"]["$omit"] === null ||
                value["fieldOptions"]["readable"]["$omit"] === undefined
              ) {
                result["fieldOptions"]["readable"]["$omit"] = undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap1 = {};
                /** @type {any[]} */
                let intermediateResult1 = [];
                /** @type {any|any[]} */
                let intermediateValue1 =
                  value["fieldOptions"]["readable"]["$omit"];

                if (!Array.isArray(intermediateValue1)) {
                  intermediateValue1 = [intermediateValue1];
                }
                result["fieldOptions"]["readable"]["$omit"] = Array.from({
                  length: intermediateValue1.length,
                });
                for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
                  if (
                    intermediateValue1[i1] === null ||
                    intermediateValue1[i1] === undefined
                  ) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString1 = intermediateValue1[i1];
                    if (typeof convertedString1 !== "string") {
                      intermediateErrorMap1[`$.${i1}`] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString1.length < 1) {
                        intermediateErrorMap1[`$.${i1}`] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        intermediateResult1[i1] = convertedString1;
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap1).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap1)) {
                    errorMap[
                      `$.fieldOptions.readable.$omit${errorKey.substring(1)}`
                    ] = intermediateErrorMap1[errorKey];
                  }
                } else {
                  result["fieldOptions"]["readable"]["$omit"] =
                    intermediateResult1;
                }
              }
              if (
                value["fieldOptions"]["readable"]["$pick"] === null ||
                value["fieldOptions"]["readable"]["$pick"] === undefined
              ) {
                result["fieldOptions"]["readable"]["$pick"] = undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap1 = {};
                /** @type {any[]} */
                let intermediateResult1 = [];
                /** @type {any|any[]} */
                let intermediateValue1 =
                  value["fieldOptions"]["readable"]["$pick"];

                if (!Array.isArray(intermediateValue1)) {
                  intermediateValue1 = [intermediateValue1];
                }
                result["fieldOptions"]["readable"]["$pick"] = Array.from({
                  length: intermediateValue1.length,
                });
                for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
                  if (
                    intermediateValue1[i1] === null ||
                    intermediateValue1[i1] === undefined
                  ) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString1 = intermediateValue1[i1];
                    if (typeof convertedString1 !== "string") {
                      intermediateErrorMap1[`$.${i1}`] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString1.length < 1) {
                        intermediateErrorMap1[`$.${i1}`] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        intermediateResult1[i1] = convertedString1;
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap1).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap1)) {
                    errorMap[
                      `$.fieldOptions.readable.$pick${errorKey.substring(1)}`
                    ] = intermediateErrorMap1[errorKey];
                  }
                } else {
                  result["fieldOptions"]["readable"]["$pick"] =
                    intermediateResult1;
                }
              }
            }
          }
          if (
            value["fieldOptions"]["writable"] === null ||
            value["fieldOptions"]["writable"] === undefined
          ) {
            result["fieldOptions"]["writable"] = undefined;
          } else {
            if (
              typeof value["fieldOptions"]["writable"] !== "object" ||
              Array.isArray(value["fieldOptions"]["writable"])
            ) {
              errorMap[`$.fieldOptions.writable`] = {
                key: "validator.object",
                value: value["fieldOptions"]["writable"],
                foundType: typeof value["fieldOptions"]["writable"],
              };
            } else {
              result["fieldOptions"]["writable"] = Object.create(null);

              if (
                value["fieldOptions"]["writable"]["$omit"] === null ||
                value["fieldOptions"]["writable"]["$omit"] === undefined
              ) {
                result["fieldOptions"]["writable"]["$omit"] = undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap1 = {};
                /** @type {any[]} */
                let intermediateResult1 = [];
                /** @type {any|any[]} */
                let intermediateValue1 =
                  value["fieldOptions"]["writable"]["$omit"];

                if (!Array.isArray(intermediateValue1)) {
                  intermediateValue1 = [intermediateValue1];
                }
                result["fieldOptions"]["writable"]["$omit"] = Array.from({
                  length: intermediateValue1.length,
                });
                for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
                  if (
                    intermediateValue1[i1] === null ||
                    intermediateValue1[i1] === undefined
                  ) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString1 = intermediateValue1[i1];
                    if (typeof convertedString1 !== "string") {
                      intermediateErrorMap1[`$.${i1}`] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString1.length < 1) {
                        intermediateErrorMap1[`$.${i1}`] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        intermediateResult1[i1] = convertedString1;
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap1).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap1)) {
                    errorMap[
                      `$.fieldOptions.writable.$omit${errorKey.substring(1)}`
                    ] = intermediateErrorMap1[errorKey];
                  }
                } else {
                  result["fieldOptions"]["writable"]["$omit"] =
                    intermediateResult1;
                }
              }
              if (
                value["fieldOptions"]["writable"]["$pick"] === null ||
                value["fieldOptions"]["writable"]["$pick"] === undefined
              ) {
                result["fieldOptions"]["writable"]["$pick"] = undefined;
              } else {
                /** @type {ValidatorErrorMap} */
                const intermediateErrorMap1 = {};
                /** @type {any[]} */
                let intermediateResult1 = [];
                /** @type {any|any[]} */
                let intermediateValue1 =
                  value["fieldOptions"]["writable"]["$pick"];

                if (!Array.isArray(intermediateValue1)) {
                  intermediateValue1 = [intermediateValue1];
                }
                result["fieldOptions"]["writable"]["$pick"] = Array.from({
                  length: intermediateValue1.length,
                });
                for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
                  if (
                    intermediateValue1[i1] === null ||
                    intermediateValue1[i1] === undefined
                  ) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    /** @type {string} */
                    let convertedString1 = intermediateValue1[i1];
                    if (typeof convertedString1 !== "string") {
                      intermediateErrorMap1[`$.${i1}`] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString1.length < 1) {
                        intermediateErrorMap1[`$.${i1}`] = {
                          key: "validator.length",
                          minLength: 1,
                        };
                      } else {
                        intermediateResult1[i1] = convertedString1;
                      }
                    }
                  }
                }
                if (Object.keys(intermediateErrorMap1).length) {
                  for (const errorKey of Object.keys(intermediateErrorMap1)) {
                    errorMap[
                      `$.fieldOptions.writable.$pick${errorKey.substring(1)}`
                    ] = intermediateErrorMap1[errorKey];
                  }
                } else {
                  result["fieldOptions"]["writable"]["$pick"] =
                    intermediateResult1;
                }
              }
            }
          }
        }
      }
      if (
        value["inlineRelations"] === null ||
        value["inlineRelations"] === undefined
      ) {
        errorMap[`$.inlineRelations`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["inlineRelations"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["inlineRelations"] = Array.from({
          length: intermediateValue1.length,
        });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateExperimentalCrudDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.inlineRelations${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["inlineRelations"] = intermediateResult1;
        }
      }
      if (
        value["nestedRelations"] === null ||
        value["nestedRelations"] === undefined
      ) {
        errorMap[`$.nestedRelations`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["nestedRelations"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["nestedRelations"] = Array.from({
          length: intermediateValue1.length,
        });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateExperimentalCrudDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.nestedRelations${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["nestedRelations"] = intermediateResult1;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalReferenceDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalReferenceDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalReferenceDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "reference") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["reference"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        result["validator"] = {};
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);
        }
      }
      if (value["reference"] === null || value["reference"] === undefined) {
        errorMap[`$.reference`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["reference"] !== "object" ||
          Array.isArray(value["reference"])
        ) {
          errorMap[`$.reference`] = {
            key: "validator.object",
            value: value["reference"],
            foundType: typeof value["reference"],
          };
        } else {
          result["reference"] = Object.create(null);

          if (
            value["reference"]["group"] === null ||
            value["reference"]["group"] === undefined
          ) {
            errorMap[`$.reference.group`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult0 = validateExperimentalNamePart(
              value["reference"]["group"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.reference.group${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["reference"]["group"] = refResult0.value;
          }
          if (
            value["reference"]["name"] === null ||
            value["reference"]["name"] === undefined
          ) {
            errorMap[`$.reference.name`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult0 = validateExperimentalNamePart(
              value["reference"]["name"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.reference.name${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["reference"]["name"] = refResult0.value;
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalNamePart|any} value
 * @returns {Either<import("../common/types").ExperimentalNamePart, ValidatorErrorMap>}
 */
export function validateExperimentalNamePart(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    /** @type {string} */
    let convertedString0 = value;
    if (typeof convertedString0 !== "string") {
      errorMap[`$`] = {
        key: "validator.string",
      };
    } else {
      if (convertedString0.length < 1) {
        errorMap[`$`] = {
          key: "validator.length",
          minLength: 1,
        };
      } else if (!/^[a-zA-Z$][a-zA-Z\d]+$/g.test(convertedString0)) {
        errorMap[`$`] = {
          key: "validator.pattern",
        };
      } else {
        result = convertedString0;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalDateDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalDateDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalDateDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "date") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["date"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["min"] === null ||
            value["validator"]["min"] === undefined
          ) {
            result["validator"]["min"] = undefined;
          } else {
            if (
              typeof value["validator"]["min"] === "string" ||
              typeof value["validator"]["min"] === "number"
            ) {
              result["validator"]["min"] = new Date(value["validator"]["min"]);
            } else if (
              Object.prototype.toString.call(value["validator"]["min"]) ===
              "[object Date]"
            ) {
              result["validator"]["min"] = value["validator"]["min"];
            } else {
              errorMap[`$.validator.min`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(result["validator"]["min"]?.getTime() ?? undefined)) {
              errorMap[`$.validator.min`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (
            value["validator"]["max"] === null ||
            value["validator"]["max"] === undefined
          ) {
            result["validator"]["max"] = undefined;
          } else {
            if (
              typeof value["validator"]["max"] === "string" ||
              typeof value["validator"]["max"] === "number"
            ) {
              result["validator"]["max"] = new Date(value["validator"]["max"]);
            } else if (
              Object.prototype.toString.call(value["validator"]["max"]) ===
              "[object Date]"
            ) {
              result["validator"]["max"] = value["validator"]["max"];
            } else {
              errorMap[`$.validator.max`] = {
                key: "validator.type",
                expectedType: "Date|string",
              };
            }
            if (isNaN(result["validator"]["max"]?.getTime() ?? undefined)) {
              errorMap[`$.validator.max`] = {
                key: "validator.date.invalid",
              };
            }
          }
          if (
            value["validator"]["inFuture"] === null ||
            value["validator"]["inFuture"] === undefined
          ) {
            result["validator"]["inFuture"] = undefined;
          } else {
            if (
              value["validator"]["inFuture"] === true ||
              value["validator"]["inFuture"] === "true" ||
              value["validator"]["inFuture"] === 1
            ) {
              result["validator"]["inFuture"] = true;
            } else if (
              value["validator"]["inFuture"] === false ||
              value["validator"]["inFuture"] === "false" ||
              value["validator"]["inFuture"] === 0
            ) {
              result["validator"]["inFuture"] = false;
            } else {
              errorMap[`$.validator.inFuture`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["inPast"] === null ||
            value["validator"]["inPast"] === undefined
          ) {
            result["validator"]["inPast"] = undefined;
          } else {
            if (
              value["validator"]["inPast"] === true ||
              value["validator"]["inPast"] === "true" ||
              value["validator"]["inPast"] === 1
            ) {
              result["validator"]["inPast"] = true;
            } else if (
              value["validator"]["inPast"] === false ||
              value["validator"]["inPast"] === "false" ||
              value["validator"]["inPast"] === 0
            ) {
              result["validator"]["inPast"] = false;
            } else {
              errorMap[`$.validator.inPast`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["specifier"] === null || value["specifier"] === undefined) {
        result["specifier"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["specifier"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.specifier`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["specifier"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.specifier`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else if (
              convertedString0 !== "dateOnly" &&
              convertedString0 !== "timeOnly"
            ) {
              errorMap[`$.specifier`] = {
                key: "validator.oneOf",
                allowedValues: ["dateOnly", "timeOnly"],
                foundValue: convertedString0,
              };
            } else {
              result["specifier"] = convertedString0;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalExtendDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalExtendDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalExtendDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "extend") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["extend"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        result["validator"] = {};
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);
        }
      }
      if (value["keys"] === null || value["keys"] === undefined) {
        errorMap[`$.keys`] = {
          key: "validator.undefined",
        };
      } else {
        if (typeof value["keys"] !== "object" || Array.isArray(value["keys"])) {
          errorMap[`$.keys`] = {
            key: "validator.generic",
          };
        } else {
          result["keys"] = {};
          for (let genericKeyInput0 of Object.keys(value["keys"])) {
            /** @type {any} */
            let genericKeyResult1 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap2 = {};
            if (genericKeyInput0 === null || genericKeyInput0 === undefined) {
              genericKeyErrorMap2[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString3 = genericKeyInput0;
              if (typeof convertedString3 !== "string") {
                genericKeyErrorMap2[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  genericKeyErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  genericKeyResult1 = convertedString3;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap2).length !== 0) {
              if (errorMap[`$.keys`]) {
                errorMap[`$.keys`].inputs.push({
                  key: genericKeyInput0,
                  errors: genericKeyErrorMap2,
                });
              } else {
                errorMap[`$.keys`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput0, errors: genericKeyErrorMap2 },
                  ],
                };
              }
            } else {
              if (
                value["keys"][genericKeyResult1] === null ||
                value["keys"][genericKeyResult1] === undefined
              ) {
                errorMap[`$.keys.${genericKeyResult1}`] = {
                  key: "validator.undefined",
                };
              } else {
                const refResult3 = validateExperimentalTypeSystemDefinition(
                  value["keys"][genericKeyResult1],
                );

                if (refResult3.error) {
                  for (const errorKey of Object.keys(refResult3.error)) {
                    errorMap[
                      `$.keys.${genericKeyResult1}${errorKey.substring(1)}`
                    ] = refResult3.error[errorKey];
                  }
                }
                result["keys"][genericKeyResult1] = refResult3.value;
              }
            }
          }
        }
      }
      if (value["reference"] === null || value["reference"] === undefined) {
        errorMap[`$.reference`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["reference"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.reference${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["reference"] = refResult0.value;
      }
      if (value["relations"] === null || value["relations"] === undefined) {
        errorMap[`$.relations`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["relations"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["relations"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateExperimentalRelationDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.relations${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["relations"] = intermediateResult1;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalRelationDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalRelationDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalRelationDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "relation") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["relation"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["subType"] === null || value["subType"] === undefined) {
        errorMap[`$.subType`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["subType"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.subType`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.subType`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (
            convertedString0 !== "manyToOne" &&
            convertedString0 !== "oneToMany" &&
            convertedString0 !== "oneToOne" &&
            convertedString0 !== "oneToOneReverse"
          ) {
            errorMap[`$.subType`] = {
              key: "validator.oneOf",
              allowedValues: [
                "manyToOne",
                "oneToMany",
                "oneToOne",
                "oneToOneReverse",
              ],
              foundValue: convertedString0,
            };
          } else {
            result["subType"] = convertedString0;
          }
        }
      }
      if (value["reference"] === null || value["reference"] === undefined) {
        errorMap[`$.reference`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["reference"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.reference${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["reference"] = refResult0.value;
      }
      if (value["ownKey"] === null || value["ownKey"] === undefined) {
        errorMap[`$.ownKey`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["ownKey"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.ownKey`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.ownKey`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["ownKey"] = convertedString0;
          }
        }
      }
      if (
        value["referencedKey"] === null ||
        value["referencedKey"] === undefined
      ) {
        result["referencedKey"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["referencedKey"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.referencedKey`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["referencedKey"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.referencedKey`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["referencedKey"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        errorMap[`$.isOptional`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalFileDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalFileDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalFileDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "file") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["file"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["mimeTypes"] === null ||
            value["validator"]["mimeTypes"] === undefined
          ) {
            result["validator"]["mimeTypes"] = undefined;
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap1 = {};
            /** @type {any[]} */
            let intermediateResult1 = [];
            /** @type {any|any[]} */
            let intermediateValue1 = value["validator"]["mimeTypes"];

            if (!Array.isArray(intermediateValue1)) {
              intermediateValue1 = [intermediateValue1];
            }
            result["validator"]["mimeTypes"] = Array.from({
              length: intermediateValue1.length,
            });
            for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
              if (
                intermediateValue1[i1] === null ||
                intermediateValue1[i1] === undefined
              ) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString1 = intermediateValue1[i1];
                if (typeof convertedString1 !== "string") {
                  intermediateErrorMap1[`$.${i1}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString1.length < 1) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else {
                    intermediateResult1[i1] = convertedString1;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap1).length) {
              for (const errorKey of Object.keys(intermediateErrorMap1)) {
                errorMap[`$.validator.mimeTypes${errorKey.substring(1)}`] =
                  intermediateErrorMap1[errorKey];
              }
            } else {
              result["validator"]["mimeTypes"] = intermediateResult1;
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalGenericDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalGenericDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalGenericDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "generic") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["generic"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        result["validator"] = {};
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);
        }
      }
      if (value["keys"] === null || value["keys"] === undefined) {
        errorMap[`$.keys`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalTypeSystemDefinition(
          value["keys"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.keys${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["keys"] = refResult0.value;
      }
      if (value["values"] === null || value["values"] === undefined) {
        errorMap[`$.values`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalTypeSystemDefinition(
          value["values"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.values${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["values"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalNumberDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalNumberDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalNumberDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "number") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["number"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["convert"] === null ||
            value["validator"]["convert"] === undefined
          ) {
            errorMap[`$.validator.convert`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["convert"] === true ||
              value["validator"]["convert"] === "true" ||
              value["validator"]["convert"] === 1
            ) {
              result["validator"]["convert"] = true;
            } else if (
              value["validator"]["convert"] === false ||
              value["validator"]["convert"] === "false" ||
              value["validator"]["convert"] === 0
            ) {
              result["validator"]["convert"] = false;
            } else {
              errorMap[`$.validator.convert`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["floatingPoint"] === null ||
            value["validator"]["floatingPoint"] === undefined
          ) {
            errorMap[`$.validator.floatingPoint`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["floatingPoint"] === true ||
              value["validator"]["floatingPoint"] === "true" ||
              value["validator"]["floatingPoint"] === 1
            ) {
              result["validator"]["floatingPoint"] = true;
            } else if (
              value["validator"]["floatingPoint"] === false ||
              value["validator"]["floatingPoint"] === "false" ||
              value["validator"]["floatingPoint"] === 0
            ) {
              result["validator"]["floatingPoint"] = false;
            } else {
              errorMap[`$.validator.floatingPoint`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["min"] === null ||
            value["validator"]["min"] === undefined
          ) {
            result["validator"]["min"] = undefined;
          } else {
            let convertedNumber0 = value["validator"]["min"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.validator.min`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < -2147483647) {
              errorMap[`$.validator.min`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber0 > 2147483647) {
              errorMap[`$.validator.min`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              result["validator"]["min"] = convertedNumber0;
            }
          }
          if (
            value["validator"]["max"] === null ||
            value["validator"]["max"] === undefined
          ) {
            result["validator"]["max"] = undefined;
          } else {
            let convertedNumber0 = value["validator"]["max"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.validator.max`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < -2147483647) {
              errorMap[`$.validator.max`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber0 > 2147483647) {
              errorMap[`$.validator.max`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              result["validator"]["max"] = convertedNumber0;
            }
          }
          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["oneOf"] === null || value["oneOf"] === undefined) {
        result["oneOf"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["oneOf"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["oneOf"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber1 = intermediateValue1[i1];
            if (
              typeof convertedNumber1 !== "number" &&
              typeof convertedNumber1 === "string"
            ) {
              convertedNumber1 = Number(convertedNumber1);
            }
            if (
              typeof convertedNumber1 !== "number" ||
              isNaN(convertedNumber1) ||
              !isFinite(convertedNumber1) ||
              !Number.isInteger(convertedNumber1)
            ) {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber1 < -2147483647) {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber1 > 2147483647) {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult1[i1] = convertedNumber1;
            }
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.oneOf${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["oneOf"] = intermediateResult1;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalObjectDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalObjectDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalObjectDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "object") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["object"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["strict"] === null ||
            value["validator"]["strict"] === undefined
          ) {
            errorMap[`$.validator.strict`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["strict"] === true ||
              value["validator"]["strict"] === "true" ||
              value["validator"]["strict"] === 1
            ) {
              result["validator"]["strict"] = true;
            } else if (
              value["validator"]["strict"] === false ||
              value["validator"]["strict"] === "false" ||
              value["validator"]["strict"] === 0
            ) {
              result["validator"]["strict"] = false;
            } else {
              errorMap[`$.validator.strict`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["shortName"] === null || value["shortName"] === undefined) {
        result["shortName"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["shortName"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.shortName`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["shortName"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.shortName`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["shortName"] = convertedString0;
            }
          }
        }
      }
      if (value["keys"] === null || value["keys"] === undefined) {
        errorMap[`$.keys`] = {
          key: "validator.undefined",
        };
      } else {
        if (typeof value["keys"] !== "object" || Array.isArray(value["keys"])) {
          errorMap[`$.keys`] = {
            key: "validator.generic",
          };
        } else {
          result["keys"] = {};
          for (let genericKeyInput0 of Object.keys(value["keys"])) {
            /** @type {any} */
            let genericKeyResult1 = undefined;
            /** @type {ValidatorErrorMap} */
            const genericKeyErrorMap2 = {};
            if (genericKeyInput0 === null || genericKeyInput0 === undefined) {
              genericKeyErrorMap2[`$`] = {
                key: "validator.undefined",
              };
            } else {
              /** @type {string} */
              let convertedString3 = genericKeyInput0;
              if (typeof convertedString3 !== "string") {
                genericKeyErrorMap2[`$`] = {
                  key: "validator.string",
                };
              } else {
                if (convertedString3.length < 1) {
                  genericKeyErrorMap2[`$`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  genericKeyResult1 = convertedString3;
                }
              }
            }
            if (Object.keys(genericKeyErrorMap2).length !== 0) {
              if (errorMap[`$.keys`]) {
                errorMap[`$.keys`].inputs.push({
                  key: genericKeyInput0,
                  errors: genericKeyErrorMap2,
                });
              } else {
                errorMap[`$.keys`] = {
                  key: "validator.generic",
                  inputs: [
                    { key: genericKeyInput0, errors: genericKeyErrorMap2 },
                  ],
                };
              }
            } else {
              if (
                value["keys"][genericKeyResult1] === null ||
                value["keys"][genericKeyResult1] === undefined
              ) {
                errorMap[`$.keys.${genericKeyResult1}`] = {
                  key: "validator.undefined",
                };
              } else {
                const refResult3 = validateExperimentalTypeSystemDefinition(
                  value["keys"][genericKeyResult1],
                );

                if (refResult3.error) {
                  for (const errorKey of Object.keys(refResult3.error)) {
                    errorMap[
                      `$.keys.${genericKeyResult1}${errorKey.substring(1)}`
                    ] = refResult3.error[errorKey];
                  }
                }
                result["keys"][genericKeyResult1] = refResult3.value;
              }
            }
          }
        }
      }
      if (
        value["enableQueries"] === null ||
        value["enableQueries"] === undefined
      ) {
        result["enableQueries"] = undefined;
      } else {
        if (
          value["enableQueries"] === true ||
          value["enableQueries"] === "true" ||
          value["enableQueries"] === 1
        ) {
          result["enableQueries"] = true;
        } else if (
          value["enableQueries"] === false ||
          value["enableQueries"] === "false" ||
          value["enableQueries"] === 0
        ) {
          result["enableQueries"] = false;
        } else {
          errorMap[`$.enableQueries`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["queryOptions"] === null ||
        value["queryOptions"] === undefined
      ) {
        result["queryOptions"] = undefined;
      } else {
        if (
          typeof value["queryOptions"] !== "object" ||
          Array.isArray(value["queryOptions"])
        ) {
          errorMap[`$.queryOptions`] = {
            key: "validator.object",
            value: value["queryOptions"],
            foundType: typeof value["queryOptions"],
          };
        } else {
          result["queryOptions"] = Object.create(null);

          if (
            value["queryOptions"]["withSoftDeletes"] === null ||
            value["queryOptions"]["withSoftDeletes"] === undefined
          ) {
            result["queryOptions"]["withSoftDeletes"] = undefined;
          } else {
            if (
              value["queryOptions"]["withSoftDeletes"] === true ||
              value["queryOptions"]["withSoftDeletes"] === "true" ||
              value["queryOptions"]["withSoftDeletes"] === 1
            ) {
              result["queryOptions"]["withSoftDeletes"] = true;
            } else if (
              value["queryOptions"]["withSoftDeletes"] === false ||
              value["queryOptions"]["withSoftDeletes"] === "false" ||
              value["queryOptions"]["withSoftDeletes"] === 0
            ) {
              result["queryOptions"]["withSoftDeletes"] = false;
            } else {
              errorMap[`$.queryOptions.withSoftDeletes`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["queryOptions"]["withDates"] === null ||
            value["queryOptions"]["withDates"] === undefined
          ) {
            result["queryOptions"]["withDates"] = undefined;
          } else {
            if (
              value["queryOptions"]["withDates"] === true ||
              value["queryOptions"]["withDates"] === "true" ||
              value["queryOptions"]["withDates"] === 1
            ) {
              result["queryOptions"]["withDates"] = true;
            } else if (
              value["queryOptions"]["withDates"] === false ||
              value["queryOptions"]["withDates"] === "false" ||
              value["queryOptions"]["withDates"] === 0
            ) {
              result["queryOptions"]["withDates"] = false;
            } else {
              errorMap[`$.queryOptions.withDates`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["queryOptions"]["withPrimaryKey"] === null ||
            value["queryOptions"]["withPrimaryKey"] === undefined
          ) {
            errorMap[`$.queryOptions.withPrimaryKey`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["queryOptions"]["withPrimaryKey"] === true ||
              value["queryOptions"]["withPrimaryKey"] === "true" ||
              value["queryOptions"]["withPrimaryKey"] === 1
            ) {
              result["queryOptions"]["withPrimaryKey"] = true;
            } else if (
              value["queryOptions"]["withPrimaryKey"] === false ||
              value["queryOptions"]["withPrimaryKey"] === "false" ||
              value["queryOptions"]["withPrimaryKey"] === 0
            ) {
              result["queryOptions"]["withPrimaryKey"] = false;
            } else {
              errorMap[`$.queryOptions.withPrimaryKey`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["queryOptions"]["isView"] === null ||
            value["queryOptions"]["isView"] === undefined
          ) {
            result["queryOptions"]["isView"] = undefined;
          } else {
            if (
              value["queryOptions"]["isView"] === true ||
              value["queryOptions"]["isView"] === "true" ||
              value["queryOptions"]["isView"] === 1
            ) {
              result["queryOptions"]["isView"] = true;
            } else if (
              value["queryOptions"]["isView"] === false ||
              value["queryOptions"]["isView"] === "false" ||
              value["queryOptions"]["isView"] === 0
            ) {
              result["queryOptions"]["isView"] = false;
            } else {
              errorMap[`$.queryOptions.isView`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["queryOptions"]["schema"] === null ||
            value["queryOptions"]["schema"] === undefined
          ) {
            result["queryOptions"]["schema"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["queryOptions"]["schema"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.queryOptions.schema`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["queryOptions"]["schema"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.queryOptions.schema`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["queryOptions"]["schema"] = convertedString0;
                }
              }
            }
          }
        }
      }
      if (value["relations"] === null || value["relations"] === undefined) {
        errorMap[`$.relations`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["relations"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["relations"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateExperimentalRelationDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.relations${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["relations"] = intermediateResult1;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalOmitDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalOmitDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalOmitDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "omit") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["omit"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["strict"] === null ||
            value["validator"]["strict"] === undefined
          ) {
            errorMap[`$.validator.strict`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["strict"] === true ||
              value["validator"]["strict"] === "true" ||
              value["validator"]["strict"] === 1
            ) {
              result["validator"]["strict"] = true;
            } else if (
              value["validator"]["strict"] === false ||
              value["validator"]["strict"] === "false" ||
              value["validator"]["strict"] === 0
            ) {
              result["validator"]["strict"] = false;
            } else {
              errorMap[`$.validator.strict`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["keys"] === null || value["keys"] === undefined) {
        errorMap[`$.keys`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["keys"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["keys"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString1 = intermediateValue1[i1];
            if (typeof convertedString1 !== "string") {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString1.length < 1) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult1[i1] = convertedString1;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.keys${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["keys"] = intermediateResult1;
        }
      }
      if (value["reference"] === null || value["reference"] === undefined) {
        errorMap[`$.reference`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalTypeSystemDefinition(
          value["reference"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.reference${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["reference"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalPickDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalPickDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalPickDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "pick") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["pick"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["strict"] === null ||
            value["validator"]["strict"] === undefined
          ) {
            errorMap[`$.validator.strict`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["strict"] === true ||
              value["validator"]["strict"] === "true" ||
              value["validator"]["strict"] === 1
            ) {
              result["validator"]["strict"] = true;
            } else if (
              value["validator"]["strict"] === false ||
              value["validator"]["strict"] === "false" ||
              value["validator"]["strict"] === 0
            ) {
              result["validator"]["strict"] = false;
            } else {
              errorMap[`$.validator.strict`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["keys"] === null || value["keys"] === undefined) {
        errorMap[`$.keys`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["keys"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["keys"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString1 = intermediateValue1[i1];
            if (typeof convertedString1 !== "string") {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString1.length < 1) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult1[i1] = convertedString1;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.keys${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["keys"] = intermediateResult1;
        }
      }
      if (value["reference"] === null || value["reference"] === undefined) {
        errorMap[`$.reference`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult0 = validateExperimentalTypeSystemDefinition(
          value["reference"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.reference${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["reference"] = refResult0.value;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalStringDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalStringDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalStringDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "string") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["string"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["convert"] === null ||
            value["validator"]["convert"] === undefined
          ) {
            errorMap[`$.validator.convert`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["convert"] === true ||
              value["validator"]["convert"] === "true" ||
              value["validator"]["convert"] === 1
            ) {
              result["validator"]["convert"] = true;
            } else if (
              value["validator"]["convert"] === false ||
              value["validator"]["convert"] === "false" ||
              value["validator"]["convert"] === 0
            ) {
              result["validator"]["convert"] = false;
            } else {
              errorMap[`$.validator.convert`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["trim"] === null ||
            value["validator"]["trim"] === undefined
          ) {
            errorMap[`$.validator.trim`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["trim"] === true ||
              value["validator"]["trim"] === "true" ||
              value["validator"]["trim"] === 1
            ) {
              result["validator"]["trim"] = true;
            } else if (
              value["validator"]["trim"] === false ||
              value["validator"]["trim"] === "false" ||
              value["validator"]["trim"] === 0
            ) {
              result["validator"]["trim"] = false;
            } else {
              errorMap[`$.validator.trim`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["lowerCase"] === null ||
            value["validator"]["lowerCase"] === undefined
          ) {
            errorMap[`$.validator.lowerCase`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["lowerCase"] === true ||
              value["validator"]["lowerCase"] === "true" ||
              value["validator"]["lowerCase"] === 1
            ) {
              result["validator"]["lowerCase"] = true;
            } else if (
              value["validator"]["lowerCase"] === false ||
              value["validator"]["lowerCase"] === "false" ||
              value["validator"]["lowerCase"] === 0
            ) {
              result["validator"]["lowerCase"] = false;
            } else {
              errorMap[`$.validator.lowerCase`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["upperCase"] === null ||
            value["validator"]["upperCase"] === undefined
          ) {
            errorMap[`$.validator.upperCase`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              value["validator"]["upperCase"] === true ||
              value["validator"]["upperCase"] === "true" ||
              value["validator"]["upperCase"] === 1
            ) {
              result["validator"]["upperCase"] = true;
            } else if (
              value["validator"]["upperCase"] === false ||
              value["validator"]["upperCase"] === "false" ||
              value["validator"]["upperCase"] === 0
            ) {
              result["validator"]["upperCase"] = false;
            } else {
              errorMap[`$.validator.upperCase`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["min"] === null ||
            value["validator"]["min"] === undefined
          ) {
            result["validator"]["min"] = 1;
          } else {
            let convertedNumber0 = value["validator"]["min"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.validator.min`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < -2147483647) {
              errorMap[`$.validator.min`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber0 > 2147483647) {
              errorMap[`$.validator.min`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              result["validator"]["min"] = convertedNumber0;
            }
          }
          if (
            value["validator"]["max"] === null ||
            value["validator"]["max"] === undefined
          ) {
            result["validator"]["max"] = undefined;
          } else {
            let convertedNumber0 = value["validator"]["max"];
            if (
              typeof convertedNumber0 !== "number" &&
              typeof convertedNumber0 === "string"
            ) {
              convertedNumber0 = Number(convertedNumber0);
            }
            if (
              typeof convertedNumber0 !== "number" ||
              isNaN(convertedNumber0) ||
              !isFinite(convertedNumber0) ||
              !Number.isInteger(convertedNumber0)
            ) {
              errorMap[`$.validator.max`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber0 < -2147483647) {
              errorMap[`$.validator.max`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber0 > 2147483647) {
              errorMap[`$.validator.max`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              result["validator"]["max"] = convertedNumber0;
            }
          }
          if (
            value["validator"]["pattern"] === null ||
            value["validator"]["pattern"] === undefined
          ) {
            result["validator"]["pattern"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["validator"]["pattern"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.validator.pattern`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["validator"]["pattern"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.validator.pattern`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else {
                  result["validator"]["pattern"] = convertedString0;
                }
              }
            }
          }
          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["validator"]["disallowedCharacters"] === null ||
            value["validator"]["disallowedCharacters"] === undefined
          ) {
            result["validator"]["disallowedCharacters"] = undefined;
          } else {
            /** @type {ValidatorErrorMap} */
            const intermediateErrorMap1 = {};
            /** @type {any[]} */
            let intermediateResult1 = [];
            /** @type {any|any[]} */
            let intermediateValue1 = value["validator"]["disallowedCharacters"];

            if (!Array.isArray(intermediateValue1)) {
              intermediateValue1 = [intermediateValue1];
            }
            result["validator"]["disallowedCharacters"] = Array.from({
              length: intermediateValue1.length,
            });
            for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
              if (
                intermediateValue1[i1] === null ||
                intermediateValue1[i1] === undefined
              ) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.undefined",
                };
              } else {
                /** @type {string} */
                let convertedString1 = intermediateValue1[i1];
                if (typeof convertedString1 !== "string") {
                  intermediateErrorMap1[`$.${i1}`] = {
                    key: "validator.string",
                  };
                } else {
                  if (convertedString1.length < 1) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.length",
                      minLength: 1,
                    };
                  } else if (convertedString1.length > 2) {
                    intermediateErrorMap1[`$.${i1}`] = {
                      key: "validator.length",
                      maxLength: 2,
                    };
                  } else {
                    intermediateResult1[i1] = convertedString1;
                  }
                }
              }
            }
            if (Object.keys(intermediateErrorMap1).length) {
              for (const errorKey of Object.keys(intermediateErrorMap1)) {
                errorMap[
                  `$.validator.disallowedCharacters${errorKey.substring(1)}`
                ] = intermediateErrorMap1[errorKey];
              }
            } else {
              result["validator"]["disallowedCharacters"] = intermediateResult1;
            }
          }
        }
      }
      if (value["oneOf"] === null || value["oneOf"] === undefined) {
        result["oneOf"] = undefined;
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["oneOf"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["oneOf"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString1 = intermediateValue1[i1];
            if (typeof convertedString1 !== "string") {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString1.length < 1) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult1[i1] = convertedString1;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.oneOf${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["oneOf"] = intermediateResult1;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalUuidDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalUuidDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalUuidDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "uuid") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["uuid"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        errorMap[`$.validator`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);

          if (
            value["validator"]["allowNull"] === null ||
            value["validator"]["allowNull"] === undefined
          ) {
            result["validator"]["allowNull"] = false;
          } else {
            if (
              value["validator"]["allowNull"] === true ||
              value["validator"]["allowNull"] === "true" ||
              value["validator"]["allowNull"] === 1
            ) {
              result["validator"]["allowNull"] = true;
            } else if (
              value["validator"]["allowNull"] === false ||
              value["validator"]["allowNull"] === "false" ||
              value["validator"]["allowNull"] === 0
            ) {
              result["validator"]["allowNull"] = false;
            } else {
              errorMap[`$.validator.allowNull`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalGenerateOptionsInput|any} value
 * @returns {Either<import("../common/types").ExperimentalGenerateOptions, ValidatorErrorMap>}
 */
export function validateExperimentalGenerateOptions(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (
        value["targetLanguage"] === null ||
        value["targetLanguage"] === undefined
      ) {
        errorMap[`$.targetLanguage`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["targetLanguage"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.targetLanguage`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.targetLanguage`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "js" && convertedString0 !== "ts") {
            errorMap[`$.targetLanguage`] = {
              key: "validator.oneOf",
              allowedValues: ["js", "ts"],
              foundValue: convertedString0,
            };
          } else {
            result["targetLanguage"] = convertedString0;
          }
        }
      }
      if (
        value["outputDirectory"] === null ||
        value["outputDirectory"] === undefined
      ) {
        result["outputDirectory"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["outputDirectory"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.outputDirectory`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["outputDirectory"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.outputDirectory`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["outputDirectory"] = convertedString0;
            }
          }
        }
      }
      if (value["generators"] === null || value["generators"] === undefined) {
        errorMap[`$.generators`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["generators"] !== "object" ||
          Array.isArray(value["generators"])
        ) {
          errorMap[`$.generators`] = {
            key: "validator.object",
            value: value["generators"],
            foundType: typeof value["generators"],
          };
        } else {
          /** @type {Set<string>} */
          const knownKeys0 = new Set([
            "structure",
            "openApi",
            "router",
            "database",
            "validators",
            "apiClient",
            "types",
          ]);
          for (const key of Object.keys(value["generators"])) {
            if (
              !knownKeys0.has(key) &&
              value["generators"][key] !== null &&
              value["generators"][key] !== undefined
            ) {
              const expectedKeys = [...knownKeys0];
              const foundKeys = Object.keys(value["generators"]);
              const unknownKeys = foundKeys.filter((it) => !knownKeys0.has(it));
              errorMap[`$.generators`] = {
                key: "validator.keys",
                unknownKeys,
                expectedKeys,
                foundKeys,
              };
              break;
            }
          }
          result["generators"] = Object.create(null);

          if (
            value["generators"]["structure"] === null ||
            value["generators"]["structure"] === undefined
          ) {
            result["generators"]["structure"] = undefined;
          } else {
            if (
              typeof value["generators"]["structure"] !== "object" ||
              Array.isArray(value["generators"]["structure"])
            ) {
              errorMap[`$.generators.structure`] = {
                key: "validator.object",
                value: value["generators"]["structure"],
                foundType: typeof value["generators"]["structure"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set([]);
              for (const key of Object.keys(value["generators"]["structure"])) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["structure"][key] !== null &&
                  value["generators"]["structure"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(
                    value["generators"]["structure"],
                  );
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.structure`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["structure"] = Object.create(null);
            }
          }
          if (
            value["generators"]["openApi"] === null ||
            value["generators"]["openApi"] === undefined
          ) {
            result["generators"]["openApi"] = undefined;
          } else {
            if (
              typeof value["generators"]["openApi"] !== "object" ||
              Array.isArray(value["generators"]["openApi"])
            ) {
              errorMap[`$.generators.openApi`] = {
                key: "validator.object",
                value: value["generators"]["openApi"],
                foundType: typeof value["generators"]["openApi"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set([
                "openApiExtensions",
                "openApiRouteExtensions",
              ]);
              for (const key of Object.keys(value["generators"]["openApi"])) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["openApi"][key] !== null &&
                  value["generators"]["openApi"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(value["generators"]["openApi"]);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.openApi`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["openApi"] = Object.create(null);

              if (
                value["generators"]["openApi"]["openApiExtensions"] === null ||
                value["generators"]["openApi"]["openApiExtensions"] ===
                  undefined
              ) {
                result["generators"]["openApi"]["openApiExtensions"] = {};
              } else {
                if (
                  typeof value["generators"]["openApi"]["openApiExtensions"] !==
                    "object" ||
                  Array.isArray(
                    value["generators"]["openApi"]["openApiExtensions"],
                  )
                ) {
                  errorMap[`$.generators.openApi.openApiExtensions`] = {
                    key: "validator.object",
                    value: value["generators"]["openApi"]["openApiExtensions"],
                    foundType:
                      typeof value["generators"]["openApi"][
                        "openApiExtensions"
                      ],
                  };
                } else {
                  /** @type {Set<string>} */
                  const knownKeys0 = new Set([
                    "version",
                    "title",
                    "description",
                  ]);
                  for (const key of Object.keys(
                    value["generators"]["openApi"]["openApiExtensions"],
                  )) {
                    if (
                      !knownKeys0.has(key) &&
                      value["generators"]["openApi"]["openApiExtensions"][
                        key
                      ] !== null &&
                      value["generators"]["openApi"]["openApiExtensions"][
                        key
                      ] !== undefined
                    ) {
                      const expectedKeys = [...knownKeys0];
                      const foundKeys = Object.keys(
                        value["generators"]["openApi"]["openApiExtensions"],
                      );
                      const unknownKeys = foundKeys.filter(
                        (it) => !knownKeys0.has(it),
                      );
                      errorMap[`$.generators.openApi.openApiExtensions`] = {
                        key: "validator.keys",
                        unknownKeys,
                        expectedKeys,
                        foundKeys,
                      };
                      break;
                    }
                  }
                  result["generators"]["openApi"]["openApiExtensions"] =
                    Object.create(null);

                  if (
                    value["generators"]["openApi"]["openApiExtensions"][
                      "version"
                    ] === null ||
                    value["generators"]["openApi"]["openApiExtensions"][
                      "version"
                    ] === undefined
                  ) {
                    result["generators"]["openApi"]["openApiExtensions"][
                      "version"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString0 =
                      value["generators"]["openApi"]["openApiExtensions"][
                        "version"
                      ];
                    if (typeof convertedString0 !== "string") {
                      errorMap[
                        `$.generators.openApi.openApiExtensions.version`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString0.length === 0) {
                        result["generators"]["openApi"]["openApiExtensions"][
                          "version"
                        ] = undefined;
                      } else {
                        if (convertedString0.length < 1) {
                          errorMap[
                            `$.generators.openApi.openApiExtensions.version`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["generators"]["openApi"]["openApiExtensions"][
                            "version"
                          ] = convertedString0;
                        }
                      }
                    }
                  }
                  if (
                    value["generators"]["openApi"]["openApiExtensions"][
                      "title"
                    ] === null ||
                    value["generators"]["openApi"]["openApiExtensions"][
                      "title"
                    ] === undefined
                  ) {
                    result["generators"]["openApi"]["openApiExtensions"][
                      "title"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString0 =
                      value["generators"]["openApi"]["openApiExtensions"][
                        "title"
                      ];
                    if (typeof convertedString0 !== "string") {
                      errorMap[`$.generators.openApi.openApiExtensions.title`] =
                        {
                          key: "validator.string",
                        };
                    } else {
                      if (convertedString0.length === 0) {
                        result["generators"]["openApi"]["openApiExtensions"][
                          "title"
                        ] = undefined;
                      } else {
                        if (convertedString0.length < 1) {
                          errorMap[
                            `$.generators.openApi.openApiExtensions.title`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["generators"]["openApi"]["openApiExtensions"][
                            "title"
                          ] = convertedString0;
                        }
                      }
                    }
                  }
                  if (
                    value["generators"]["openApi"]["openApiExtensions"][
                      "description"
                    ] === null ||
                    value["generators"]["openApi"]["openApiExtensions"][
                      "description"
                    ] === undefined
                  ) {
                    result["generators"]["openApi"]["openApiExtensions"][
                      "description"
                    ] = undefined;
                  } else {
                    /** @type {string} */
                    let convertedString0 =
                      value["generators"]["openApi"]["openApiExtensions"][
                        "description"
                      ];
                    if (typeof convertedString0 !== "string") {
                      errorMap[
                        `$.generators.openApi.openApiExtensions.description`
                      ] = {
                        key: "validator.string",
                      };
                    } else {
                      if (convertedString0.length === 0) {
                        result["generators"]["openApi"]["openApiExtensions"][
                          "description"
                        ] = undefined;
                      } else {
                        if (convertedString0.length < 1) {
                          errorMap[
                            `$.generators.openApi.openApiExtensions.description`
                          ] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          result["generators"]["openApi"]["openApiExtensions"][
                            "description"
                          ] = convertedString0;
                        }
                      }
                    }
                  }
                }
              }
              if (
                value["generators"]["openApi"]["openApiRouteExtensions"] ===
                  null ||
                value["generators"]["openApi"]["openApiRouteExtensions"] ===
                  undefined
              ) {
                result["generators"]["openApi"]["openApiRouteExtensions"] = {};
              } else {
                if (
                  typeof value["generators"]["openApi"][
                    "openApiRouteExtensions"
                  ] !== "object" ||
                  Array.isArray(
                    value["generators"]["openApi"]["openApiRouteExtensions"],
                  )
                ) {
                  errorMap[`$.generators.openApi.openApiRouteExtensions`] = {
                    key: "validator.generic",
                  };
                } else {
                  result["generators"]["openApi"]["openApiRouteExtensions"] =
                    {};
                  for (let genericKeyInput0 of Object.keys(
                    value["generators"]["openApi"]["openApiRouteExtensions"],
                  )) {
                    /** @type {any} */
                    let genericKeyResult1 = undefined;
                    /** @type {ValidatorErrorMap} */
                    const genericKeyErrorMap2 = {};
                    if (
                      genericKeyInput0 === null ||
                      genericKeyInput0 === undefined
                    ) {
                      genericKeyErrorMap2[`$`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString3 = genericKeyInput0;
                      if (typeof convertedString3 !== "string") {
                        genericKeyErrorMap2[`$`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString3.length < 1) {
                          genericKeyErrorMap2[`$`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          genericKeyResult1 = convertedString3;
                        }
                      }
                    }
                    if (Object.keys(genericKeyErrorMap2).length !== 0) {
                      if (
                        errorMap[`$.generators.openApi.openApiRouteExtensions`]
                      ) {
                        errorMap[
                          `$.generators.openApi.openApiRouteExtensions`
                        ].inputs.push({
                          key: genericKeyInput0,
                          errors: genericKeyErrorMap2,
                        });
                      } else {
                        errorMap[
                          `$.generators.openApi.openApiRouteExtensions`
                        ] = {
                          key: "validator.generic",
                          inputs: [
                            {
                              key: genericKeyInput0,
                              errors: genericKeyErrorMap2,
                            },
                          ],
                        };
                      }
                    } else {
                      if (
                        value["generators"]["openApi"][
                          "openApiRouteExtensions"
                        ][genericKeyResult1] === null ||
                        value["generators"]["openApi"][
                          "openApiRouteExtensions"
                        ][genericKeyResult1] === undefined
                      ) {
                        errorMap[
                          `$.generators.openApi.openApiRouteExtensions.${genericKeyResult1}`
                        ] = {
                          key: "validator.undefined",
                        };
                      } else {
                        result["generators"]["openApi"][
                          "openApiRouteExtensions"
                        ][genericKeyResult1] =
                          value["generators"]["openApi"][
                            "openApiRouteExtensions"
                          ][genericKeyResult1];
                      }
                    }
                  }
                }
              }
            }
          }
          if (
            value["generators"]["router"] === null ||
            value["generators"]["router"] === undefined
          ) {
            result["generators"]["router"] = undefined;
          } else {
            if (
              typeof value["generators"]["router"] !== "object" ||
              Array.isArray(value["generators"]["router"])
            ) {
              errorMap[`$.generators.router`] = {
                key: "validator.object",
                value: value["generators"]["router"],
                foundType: typeof value["generators"]["router"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set(["target", "exposeApiStructure"]);
              for (const key of Object.keys(value["generators"]["router"])) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["router"][key] !== null &&
                  value["generators"]["router"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(value["generators"]["router"]);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.router`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["router"] = Object.create(null);

              if (
                value["generators"]["router"]["target"] === null ||
                value["generators"]["router"]["target"] === undefined
              ) {
                errorMap[`$.generators.router.target`] = {
                  key: "validator.undefined",
                };
              } else {
                let hasAnyOfMatch0 = false;
                errorMap[`$.generators.router.target`] = {
                  key: "validator.anyOf",
                  errors: [],
                };
                if (!hasAnyOfMatch0) {
                  /** @type {ValidatorErrorMap} */
                  const intermediateErrorMap2 = {};
                  /** @type {any} */
                  let intermediateResult2 = undefined;
                  /** @type {any} */
                  let intermediateValue2 =
                    value["generators"]["router"]["target"];

                  if (
                    intermediateValue2 === null ||
                    intermediateValue2 === undefined
                  ) {
                    intermediateErrorMap2[`$`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    if (
                      typeof intermediateValue2 !== "object" ||
                      Array.isArray(intermediateValue2)
                    ) {
                      intermediateErrorMap2[`$`] = {
                        key: "validator.object",
                        value: intermediateValue2,
                        foundType: typeof intermediateValue2,
                      };
                    } else {
                      /** @type {Set<string>} */
                      const knownKeys2 = new Set(["library"]);
                      for (const key of Object.keys(intermediateValue2)) {
                        if (
                          !knownKeys2.has(key) &&
                          intermediateValue2[key] !== null &&
                          intermediateValue2[key] !== undefined
                        ) {
                          const expectedKeys = [...knownKeys2];
                          const foundKeys = Object.keys(intermediateValue2);
                          const unknownKeys = foundKeys.filter(
                            (it) => !knownKeys2.has(it),
                          );
                          intermediateErrorMap2[`$`] = {
                            key: "validator.keys",
                            unknownKeys,
                            expectedKeys,
                            foundKeys,
                          };
                          break;
                        }
                      }
                      intermediateResult2 = Object.create(null);

                      if (
                        intermediateValue2["library"] === null ||
                        intermediateValue2["library"] === undefined
                      ) {
                        intermediateErrorMap2[`$.library`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {string} */
                        let convertedString2 = intermediateValue2["library"];
                        if (typeof convertedString2 !== "string") {
                          intermediateErrorMap2[`$.library`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString2.length < 1) {
                            intermediateErrorMap2[`$.library`] = {
                              key: "validator.length",
                              minLength: 1,
                            };
                          } else if (convertedString2 !== "koa") {
                            intermediateErrorMap2[`$.library`] = {
                              key: "validator.oneOf",
                              allowedValues: ["koa"],
                              foundValue: convertedString2,
                            };
                          } else {
                            intermediateResult2["library"] = convertedString2;
                          }
                        }
                      }
                    }
                  }
                  if (Object.keys(intermediateErrorMap2).length > 0) {
                    errorMap[`$.generators.router.target`].errors.push(
                      intermediateErrorMap2,
                    );
                  } else {
                    hasAnyOfMatch0 = true;
                    delete errorMap[`$.generators.router.target`];
                    result["generators"]["router"]["target"] =
                      intermediateResult2;
                  }
                }
              }
              if (
                value["generators"]["router"]["exposeApiStructure"] === null ||
                value["generators"]["router"]["exposeApiStructure"] ===
                  undefined
              ) {
                result["generators"]["router"]["exposeApiStructure"] = false;
              } else {
                if (
                  value["generators"]["router"]["exposeApiStructure"] ===
                    true ||
                  value["generators"]["router"]["exposeApiStructure"] ===
                    "true" ||
                  value["generators"]["router"]["exposeApiStructure"] === 1
                ) {
                  result["generators"]["router"]["exposeApiStructure"] = true;
                } else if (
                  value["generators"]["router"]["exposeApiStructure"] ===
                    false ||
                  value["generators"]["router"]["exposeApiStructure"] ===
                    "false" ||
                  value["generators"]["router"]["exposeApiStructure"] === 0
                ) {
                  result["generators"]["router"]["exposeApiStructure"] = false;
                } else {
                  errorMap[`$.generators.router.exposeApiStructure`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
            }
          }
          if (
            value["generators"]["database"] === null ||
            value["generators"]["database"] === undefined
          ) {
            result["generators"]["database"] = undefined;
          } else {
            if (
              typeof value["generators"]["database"] !== "object" ||
              Array.isArray(value["generators"]["database"])
            ) {
              errorMap[`$.generators.database`] = {
                key: "validator.object",
                value: value["generators"]["database"],
                foundType: typeof value["generators"]["database"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set(["target", "includeEntityDiagram"]);
              for (const key of Object.keys(value["generators"]["database"])) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["database"][key] !== null &&
                  value["generators"]["database"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(
                    value["generators"]["database"],
                  );
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.database`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["database"] = Object.create(null);

              if (
                value["generators"]["database"]["target"] === null ||
                value["generators"]["database"]["target"] === undefined
              ) {
                errorMap[`$.generators.database.target`] = {
                  key: "validator.undefined",
                };
              } else {
                let hasAnyOfMatch0 = false;
                errorMap[`$.generators.database.target`] = {
                  key: "validator.anyOf",
                  errors: [],
                };
                if (!hasAnyOfMatch0) {
                  /** @type {ValidatorErrorMap} */
                  const intermediateErrorMap2 = {};
                  /** @type {any} */
                  let intermediateResult2 = undefined;
                  /** @type {any} */
                  let intermediateValue2 =
                    value["generators"]["database"]["target"];

                  if (
                    intermediateValue2 === null ||
                    intermediateValue2 === undefined
                  ) {
                    intermediateErrorMap2[`$`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    if (
                      typeof intermediateValue2 !== "object" ||
                      Array.isArray(intermediateValue2)
                    ) {
                      intermediateErrorMap2[`$`] = {
                        key: "validator.object",
                        value: intermediateValue2,
                        foundType: typeof intermediateValue2,
                      };
                    } else {
                      /** @type {Set<string>} */
                      const knownKeys2 = new Set(["dialect", "includeDDL"]);
                      for (const key of Object.keys(intermediateValue2)) {
                        if (
                          !knownKeys2.has(key) &&
                          intermediateValue2[key] !== null &&
                          intermediateValue2[key] !== undefined
                        ) {
                          const expectedKeys = [...knownKeys2];
                          const foundKeys = Object.keys(intermediateValue2);
                          const unknownKeys = foundKeys.filter(
                            (it) => !knownKeys2.has(it),
                          );
                          intermediateErrorMap2[`$`] = {
                            key: "validator.keys",
                            unknownKeys,
                            expectedKeys,
                            foundKeys,
                          };
                          break;
                        }
                      }
                      intermediateResult2 = Object.create(null);

                      if (
                        intermediateValue2["dialect"] === null ||
                        intermediateValue2["dialect"] === undefined
                      ) {
                        intermediateErrorMap2[`$.dialect`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {string} */
                        let convertedString2 = intermediateValue2["dialect"];
                        if (typeof convertedString2 !== "string") {
                          intermediateErrorMap2[`$.dialect`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString2.length < 1) {
                            intermediateErrorMap2[`$.dialect`] = {
                              key: "validator.length",
                              minLength: 1,
                            };
                          } else if (convertedString2 !== "postgres") {
                            intermediateErrorMap2[`$.dialect`] = {
                              key: "validator.oneOf",
                              allowedValues: ["postgres"],
                              foundValue: convertedString2,
                            };
                          } else {
                            intermediateResult2["dialect"] = convertedString2;
                          }
                        }
                      }
                      if (
                        intermediateValue2["includeDDL"] === null ||
                        intermediateValue2["includeDDL"] === undefined
                      ) {
                        intermediateResult2["includeDDL"] = false;
                      } else {
                        if (
                          intermediateValue2["includeDDL"] === true ||
                          intermediateValue2["includeDDL"] === "true" ||
                          intermediateValue2["includeDDL"] === 1
                        ) {
                          intermediateResult2["includeDDL"] = true;
                        } else if (
                          intermediateValue2["includeDDL"] === false ||
                          intermediateValue2["includeDDL"] === "false" ||
                          intermediateValue2["includeDDL"] === 0
                        ) {
                          intermediateResult2["includeDDL"] = false;
                        } else {
                          intermediateErrorMap2[`$.includeDDL`] = {
                            key: "validator.type",
                            expectedType: "boolean",
                          };
                        }
                      }
                    }
                  }
                  if (Object.keys(intermediateErrorMap2).length > 0) {
                    errorMap[`$.generators.database.target`].errors.push(
                      intermediateErrorMap2,
                    );
                  } else {
                    hasAnyOfMatch0 = true;
                    delete errorMap[`$.generators.database.target`];
                    result["generators"]["database"]["target"] =
                      intermediateResult2;
                  }
                }
              }
              if (
                value["generators"]["database"]["includeEntityDiagram"] ===
                  null ||
                value["generators"]["database"]["includeEntityDiagram"] ===
                  undefined
              ) {
                result["generators"]["database"]["includeEntityDiagram"] =
                  false;
              } else {
                if (
                  value["generators"]["database"]["includeEntityDiagram"] ===
                    true ||
                  value["generators"]["database"]["includeEntityDiagram"] ===
                    "true" ||
                  value["generators"]["database"]["includeEntityDiagram"] === 1
                ) {
                  result["generators"]["database"]["includeEntityDiagram"] =
                    true;
                } else if (
                  value["generators"]["database"]["includeEntityDiagram"] ===
                    false ||
                  value["generators"]["database"]["includeEntityDiagram"] ===
                    "false" ||
                  value["generators"]["database"]["includeEntityDiagram"] === 0
                ) {
                  result["generators"]["database"]["includeEntityDiagram"] =
                    false;
                } else {
                  errorMap[`$.generators.database.includeEntityDiagram`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
            }
          }
          if (
            value["generators"]["validators"] === null ||
            value["generators"]["validators"] === undefined
          ) {
            result["generators"]["validators"] = undefined;
          } else {
            if (
              typeof value["generators"]["validators"] !== "object" ||
              Array.isArray(value["generators"]["validators"])
            ) {
              errorMap[`$.generators.validators`] = {
                key: "validator.object",
                value: value["generators"]["validators"],
                foundType: typeof value["generators"]["validators"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set(["includeBaseTypes"]);
              for (const key of Object.keys(
                value["generators"]["validators"],
              )) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["validators"][key] !== null &&
                  value["generators"]["validators"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(
                    value["generators"]["validators"],
                  );
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.validators`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["validators"] = Object.create(null);

              if (
                value["generators"]["validators"]["includeBaseTypes"] ===
                  null ||
                value["generators"]["validators"]["includeBaseTypes"] ===
                  undefined
              ) {
                result["generators"]["validators"]["includeBaseTypes"] = false;
              } else {
                if (
                  value["generators"]["validators"]["includeBaseTypes"] ===
                    true ||
                  value["generators"]["validators"]["includeBaseTypes"] ===
                    "true" ||
                  value["generators"]["validators"]["includeBaseTypes"] === 1
                ) {
                  result["generators"]["validators"]["includeBaseTypes"] = true;
                } else if (
                  value["generators"]["validators"]["includeBaseTypes"] ===
                    false ||
                  value["generators"]["validators"]["includeBaseTypes"] ===
                    "false" ||
                  value["generators"]["validators"]["includeBaseTypes"] === 0
                ) {
                  result["generators"]["validators"]["includeBaseTypes"] =
                    false;
                } else {
                  errorMap[`$.generators.validators.includeBaseTypes`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
            }
          }
          if (
            value["generators"]["apiClient"] === null ||
            value["generators"]["apiClient"] === undefined
          ) {
            result["generators"]["apiClient"] = undefined;
          } else {
            if (
              typeof value["generators"]["apiClient"] !== "object" ||
              Array.isArray(value["generators"]["apiClient"])
            ) {
              errorMap[`$.generators.apiClient`] = {
                key: "validator.object",
                value: value["generators"]["apiClient"],
                foundType: typeof value["generators"]["apiClient"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set(["target", "responseValidation"]);
              for (const key of Object.keys(value["generators"]["apiClient"])) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["apiClient"][key] !== null &&
                  value["generators"]["apiClient"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(
                    value["generators"]["apiClient"],
                  );
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.apiClient`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["apiClient"] = Object.create(null);

              if (
                value["generators"]["apiClient"]["target"] === null ||
                value["generators"]["apiClient"]["target"] === undefined
              ) {
                errorMap[`$.generators.apiClient.target`] = {
                  key: "validator.undefined",
                };
              } else {
                let hasAnyOfMatch0 = false;
                errorMap[`$.generators.apiClient.target`] = {
                  key: "validator.anyOf",
                  errors: [],
                };
                if (!hasAnyOfMatch0) {
                  /** @type {ValidatorErrorMap} */
                  const intermediateErrorMap2 = {};
                  /** @type {any} */
                  let intermediateResult2 = undefined;
                  /** @type {any} */
                  let intermediateValue2 =
                    value["generators"]["apiClient"]["target"];

                  if (
                    intermediateValue2 === null ||
                    intermediateValue2 === undefined
                  ) {
                    intermediateErrorMap2[`$`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    if (
                      typeof intermediateValue2 !== "object" ||
                      Array.isArray(intermediateValue2)
                    ) {
                      intermediateErrorMap2[`$`] = {
                        key: "validator.object",
                        value: intermediateValue2,
                        foundType: typeof intermediateValue2,
                      };
                    } else {
                      /** @type {Set<string>} */
                      const knownKeys2 = new Set([
                        "library",
                        "targetRuntime",
                        "includeWrapper",
                        "globalClient",
                      ]);
                      for (const key of Object.keys(intermediateValue2)) {
                        if (
                          !knownKeys2.has(key) &&
                          intermediateValue2[key] !== null &&
                          intermediateValue2[key] !== undefined
                        ) {
                          const expectedKeys = [...knownKeys2];
                          const foundKeys = Object.keys(intermediateValue2);
                          const unknownKeys = foundKeys.filter(
                            (it) => !knownKeys2.has(it),
                          );
                          intermediateErrorMap2[`$`] = {
                            key: "validator.keys",
                            unknownKeys,
                            expectedKeys,
                            foundKeys,
                          };
                          break;
                        }
                      }
                      intermediateResult2 = Object.create(null);

                      if (
                        intermediateValue2["library"] === null ||
                        intermediateValue2["library"] === undefined
                      ) {
                        intermediateErrorMap2[`$.library`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {string} */
                        let convertedString2 = intermediateValue2["library"];
                        if (typeof convertedString2 !== "string") {
                          intermediateErrorMap2[`$.library`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString2.length < 1) {
                            intermediateErrorMap2[`$.library`] = {
                              key: "validator.length",
                              minLength: 1,
                            };
                          } else if (convertedString2 !== "axios") {
                            intermediateErrorMap2[`$.library`] = {
                              key: "validator.oneOf",
                              allowedValues: ["axios"],
                              foundValue: convertedString2,
                            };
                          } else {
                            intermediateResult2["library"] = convertedString2;
                          }
                        }
                      }
                      if (
                        intermediateValue2["targetRuntime"] === null ||
                        intermediateValue2["targetRuntime"] === undefined
                      ) {
                        intermediateErrorMap2[`$.targetRuntime`] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {string} */
                        let convertedString2 =
                          intermediateValue2["targetRuntime"];
                        if (typeof convertedString2 !== "string") {
                          intermediateErrorMap2[`$.targetRuntime`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString2.length < 1) {
                            intermediateErrorMap2[`$.targetRuntime`] = {
                              key: "validator.length",
                              minLength: 1,
                            };
                          } else if (
                            convertedString2 !== "node.js" &&
                            convertedString2 !== "browser" &&
                            convertedString2 !== "react-native"
                          ) {
                            intermediateErrorMap2[`$.targetRuntime`] = {
                              key: "validator.oneOf",
                              allowedValues: [
                                "node.js",
                                "browser",
                                "react-native",
                              ],
                              foundValue: convertedString2,
                            };
                          } else {
                            intermediateResult2["targetRuntime"] =
                              convertedString2;
                          }
                        }
                      }
                      if (
                        intermediateValue2["includeWrapper"] === null ||
                        intermediateValue2["includeWrapper"] === undefined
                      ) {
                        intermediateResult2["includeWrapper"] = undefined;
                      } else {
                        /** @type {string} */
                        let convertedString2 =
                          intermediateValue2["includeWrapper"];
                        if (typeof convertedString2 !== "string") {
                          intermediateErrorMap2[`$.includeWrapper`] = {
                            key: "validator.string",
                          };
                        } else {
                          if (convertedString2.length === 0) {
                            intermediateResult2["includeWrapper"] = undefined;
                          } else {
                            if (convertedString2.length < 1) {
                              intermediateErrorMap2[`$.includeWrapper`] = {
                                key: "validator.length",
                                minLength: 1,
                              };
                            } else if (convertedString2 !== "react-query") {
                              intermediateErrorMap2[`$.includeWrapper`] = {
                                key: "validator.oneOf",
                                allowedValues: ["react-query"],
                                foundValue: convertedString2,
                              };
                            } else {
                              intermediateResult2["includeWrapper"] =
                                convertedString2;
                            }
                          }
                        }
                      }
                      if (
                        intermediateValue2["globalClient"] === null ||
                        intermediateValue2["globalClient"] === undefined
                      ) {
                        intermediateResult2["globalClient"] = false;
                      } else {
                        if (
                          intermediateValue2["globalClient"] === true ||
                          intermediateValue2["globalClient"] === "true" ||
                          intermediateValue2["globalClient"] === 1
                        ) {
                          intermediateResult2["globalClient"] = true;
                        } else if (
                          intermediateValue2["globalClient"] === false ||
                          intermediateValue2["globalClient"] === "false" ||
                          intermediateValue2["globalClient"] === 0
                        ) {
                          intermediateResult2["globalClient"] = false;
                        } else {
                          intermediateErrorMap2[`$.globalClient`] = {
                            key: "validator.type",
                            expectedType: "boolean",
                          };
                        }
                      }
                    }
                  }
                  if (Object.keys(intermediateErrorMap2).length > 0) {
                    errorMap[`$.generators.apiClient.target`].errors.push(
                      intermediateErrorMap2,
                    );
                  } else {
                    hasAnyOfMatch0 = true;
                    delete errorMap[`$.generators.apiClient.target`];
                    result["generators"]["apiClient"]["target"] =
                      intermediateResult2;
                  }
                }
              }
              if (
                value["generators"]["apiClient"]["responseValidation"] ===
                  null ||
                value["generators"]["apiClient"]["responseValidation"] ===
                  undefined
              ) {
                result["generators"]["apiClient"]["responseValidation"] = {
                  looseObjectValidation: true,
                };
              } else {
                if (
                  typeof value["generators"]["apiClient"][
                    "responseValidation"
                  ] !== "object" ||
                  Array.isArray(
                    value["generators"]["apiClient"]["responseValidation"],
                  )
                ) {
                  errorMap[`$.generators.apiClient.responseValidation`] = {
                    key: "validator.object",
                    value:
                      value["generators"]["apiClient"]["responseValidation"],
                    foundType:
                      typeof value["generators"]["apiClient"][
                        "responseValidation"
                      ],
                  };
                } else {
                  result["generators"]["apiClient"]["responseValidation"] =
                    Object.create(null);

                  if (
                    value["generators"]["apiClient"]["responseValidation"][
                      "looseObjectValidation"
                    ] === null ||
                    value["generators"]["apiClient"]["responseValidation"][
                      "looseObjectValidation"
                    ] === undefined
                  ) {
                    errorMap[
                      `$.generators.apiClient.responseValidation.looseObjectValidation`
                    ] = {
                      key: "validator.undefined",
                    };
                  } else {
                    if (
                      value["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] === true ||
                      value["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] === "true" ||
                      value["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] === 1
                    ) {
                      result["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] = true;
                    } else if (
                      value["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] === false ||
                      value["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] === "false" ||
                      value["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] === 0
                    ) {
                      result["generators"]["apiClient"]["responseValidation"][
                        "looseObjectValidation"
                      ] = false;
                    } else {
                      errorMap[
                        `$.generators.apiClient.responseValidation.looseObjectValidation`
                      ] = {
                        key: "validator.type",
                        expectedType: "boolean",
                      };
                    }
                  }
                }
              }
            }
          }
          if (
            value["generators"]["types"] === null ||
            value["generators"]["types"] === undefined
          ) {
            result["generators"]["types"] = undefined;
          } else {
            if (
              typeof value["generators"]["types"] !== "object" ||
              Array.isArray(value["generators"]["types"])
            ) {
              errorMap[`$.generators.types`] = {
                key: "validator.object",
                value: value["generators"]["types"],
                foundType: typeof value["generators"]["types"],
              };
            } else {
              /** @type {Set<string>} */
              const knownKeys0 = new Set([
                "includeBaseTypes",
                "declareGlobalTypes",
              ]);
              for (const key of Object.keys(value["generators"]["types"])) {
                if (
                  !knownKeys0.has(key) &&
                  value["generators"]["types"][key] !== null &&
                  value["generators"]["types"][key] !== undefined
                ) {
                  const expectedKeys = [...knownKeys0];
                  const foundKeys = Object.keys(value["generators"]["types"]);
                  const unknownKeys = foundKeys.filter(
                    (it) => !knownKeys0.has(it),
                  );
                  errorMap[`$.generators.types`] = {
                    key: "validator.keys",
                    unknownKeys,
                    expectedKeys,
                    foundKeys,
                  };
                  break;
                }
              }
              result["generators"]["types"] = Object.create(null);

              if (
                value["generators"]["types"]["includeBaseTypes"] === null ||
                value["generators"]["types"]["includeBaseTypes"] === undefined
              ) {
                result["generators"]["types"]["includeBaseTypes"] = false;
              } else {
                if (
                  value["generators"]["types"]["includeBaseTypes"] === true ||
                  value["generators"]["types"]["includeBaseTypes"] === "true" ||
                  value["generators"]["types"]["includeBaseTypes"] === 1
                ) {
                  result["generators"]["types"]["includeBaseTypes"] = true;
                } else if (
                  value["generators"]["types"]["includeBaseTypes"] === false ||
                  value["generators"]["types"]["includeBaseTypes"] ===
                    "false" ||
                  value["generators"]["types"]["includeBaseTypes"] === 0
                ) {
                  result["generators"]["types"]["includeBaseTypes"] = false;
                } else {
                  errorMap[`$.generators.types.includeBaseTypes`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
              if (
                value["generators"]["types"]["declareGlobalTypes"] === null ||
                value["generators"]["types"]["declareGlobalTypes"] === undefined
              ) {
                result["generators"]["types"]["declareGlobalTypes"] = false;
              } else {
                if (
                  value["generators"]["types"]["declareGlobalTypes"] === true ||
                  value["generators"]["types"]["declareGlobalTypes"] ===
                    "true" ||
                  value["generators"]["types"]["declareGlobalTypes"] === 1
                ) {
                  result["generators"]["types"]["declareGlobalTypes"] = true;
                } else if (
                  value["generators"]["types"]["declareGlobalTypes"] ===
                    false ||
                  value["generators"]["types"]["declareGlobalTypes"] ===
                    "false" ||
                  value["generators"]["types"]["declareGlobalTypes"] === 0
                ) {
                  result["generators"]["types"]["declareGlobalTypes"] = false;
                } else {
                  errorMap[`$.generators.types.declareGlobalTypes`] = {
                    key: "validator.type",
                    expectedType: "boolean",
                  };
                }
              }
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalNamePartOptional|any} value
 * @returns {Either<import("../common/types").ExperimentalNamePartOptional, ValidatorErrorMap>}
 */
export function validateExperimentalNamePartOptional(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    result = undefined;
  } else {
    /** @type {string} */
    let convertedString0 = value;
    if (typeof convertedString0 !== "string") {
      errorMap[`$`] = {
        key: "validator.string",
      };
    } else {
      if (convertedString0.length === 0) {
        result = undefined;
      } else {
        if (convertedString0.length < 1) {
          errorMap[`$`] = {
            key: "validator.length",
            minLength: 1,
          };
        } else if (!/^[a-zA-Z$][a-zA-Z\d]+$/g.test(convertedString0)) {
          errorMap[`$`] = {
            key: "validator.pattern",
          };
        } else {
          result = convertedString0;
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * This contains all types that can be added top level to the structure.
 *
 * @param {import("../common/types").ExperimentalNamedTypeDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalNamedTypeDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalNamedTypeDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (value.type === "any") {
      const refResult0 = validateExperimentalAnyDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "anyOf") {
      const refResult0 = validateExperimentalAnyOfDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "array") {
      const refResult0 = validateExperimentalArrayDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "boolean") {
      const refResult0 = validateExperimentalBooleanDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "crud") {
      const refResult0 = validateExperimentalCrudDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "date") {
      const refResult0 = validateExperimentalDateDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "extend") {
      const refResult0 = validateExperimentalExtendDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "file") {
      const refResult0 = validateExperimentalFileDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "generic") {
      const refResult0 = validateExperimentalGenericDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "number") {
      const refResult0 = validateExperimentalNumberDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "object") {
      const refResult0 = validateExperimentalObjectDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "omit") {
      const refResult0 = validateExperimentalOmitDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "pick") {
      const refResult0 = validateExperimentalPickDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "route") {
      const refResult0 = validateExperimentalRouteDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "string") {
      const refResult0 = validateExperimentalStringDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else if (value.type === "uuid") {
      const refResult0 = validateExperimentalUuidDefinition(value);

      if (refResult0.error) {
        for (const errorKey of Object.keys(refResult0.error)) {
          errorMap[`$${errorKey.substring(1)}`] = refResult0.error[errorKey];
        }
      }
      result = refResult0.value;
    } else {
      errorMap[`$`] = {
        key: "validator.anyOf",
        discriminant: "type",
        allowedValues: [
          "any",
          "anyOf",
          "array",
          "boolean",
          "crud",
          "date",
          "extend",
          "file",
          "generic",
          "number",
          "object",
          "omit",
          "pick",
          "route",
          "string",
          "uuid",
        ],
      };
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalRouteDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalRouteDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalRouteDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "route") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["route"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["group"] === null || value["group"] === undefined) {
        result["group"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["group"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.group`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["group"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.group`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["group"] = convertedString0;
            }
          }
        }
      }
      if (value["name"] === null || value["name"] === undefined) {
        result["name"] = undefined;
      } else {
        /** @type {string} */
        let convertedString0 = value["name"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.name`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["name"] = undefined;
          } else {
            if (convertedString0.length < 1) {
              errorMap[`$.name`] = {
                key: "validator.length",
                minLength: 1,
              };
            } else {
              result["name"] = convertedString0;
            }
          }
        }
      }
      if (value["docString"] === null || value["docString"] === undefined) {
        result["docString"] = "";
      } else {
        /** @type {string} */
        let convertedString0 = value["docString"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.docString`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length === 0) {
            result["docString"] = "";
          } else {
            {
              result["docString"] = convertedString0;
            }
          }
        }
      }
      if (value["isOptional"] === null || value["isOptional"] === undefined) {
        result["isOptional"] = false;
      } else {
        if (
          value["isOptional"] === true ||
          value["isOptional"] === "true" ||
          value["isOptional"] === 1
        ) {
          result["isOptional"] = true;
        } else if (
          value["isOptional"] === false ||
          value["isOptional"] === "false" ||
          value["isOptional"] === 0
        ) {
          result["isOptional"] = false;
        } else {
          errorMap[`$.isOptional`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (
        value["defaultValue"] === null ||
        value["defaultValue"] === undefined
      ) {
        result["defaultValue"] = undefined;
      } else {
        let hasAnyOfMatch0 = false;
        errorMap[`$.defaultValue`] = {
          key: "validator.anyOf",
          errors: [],
        };
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString2 = intermediateValue2;
            if (typeof convertedString2 !== "string") {
              intermediateErrorMap2[`$`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString2.length < 1) {
                intermediateErrorMap2[`$`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult2 = convertedString2;
              }
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              intermediateValue2 === true ||
              intermediateValue2 === "true" ||
              intermediateValue2 === 1
            ) {
              intermediateResult2 = true;
            } else if (
              intermediateValue2 === false ||
              intermediateValue2 === "false" ||
              intermediateValue2 === 0
            ) {
              intermediateResult2 = false;
            } else {
              intermediateErrorMap2[`$`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
        if (!hasAnyOfMatch0) {
          /** @type {ValidatorErrorMap} */
          const intermediateErrorMap2 = {};
          /** @type {any} */
          let intermediateResult2 = undefined;
          /** @type {any} */
          let intermediateValue2 = value["defaultValue"];

          if (intermediateValue2 === null || intermediateValue2 === undefined) {
            intermediateErrorMap2[`$`] = {
              key: "validator.undefined",
            };
          } else {
            let convertedNumber2 = intermediateValue2;
            if (
              typeof convertedNumber2 !== "number" &&
              typeof convertedNumber2 === "string"
            ) {
              convertedNumber2 = Number(convertedNumber2);
            }
            if (
              typeof convertedNumber2 !== "number" ||
              isNaN(convertedNumber2) ||
              !isFinite(convertedNumber2) ||
              !Number.isInteger(convertedNumber2)
            ) {
              intermediateErrorMap2[`$`] = {
                key: "validator.number",
                subType: "int",
              };
            } else if (convertedNumber2 < -2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                minValue: -2147483647,
              };
            } else if (convertedNumber2 > 2147483647) {
              intermediateErrorMap2[`$`] = {
                key: "validator.range",
                maxValue: 2147483647,
              };
            } else {
              intermediateResult2 = convertedNumber2;
            }
          }
          if (Object.keys(intermediateErrorMap2).length > 0) {
            errorMap[`$.defaultValue`].errors.push(intermediateErrorMap2);
          } else {
            hasAnyOfMatch0 = true;
            delete errorMap[`$.defaultValue`];
            result["defaultValue"] = intermediateResult2;
          }
        }
      }
      if (value["sql"] === null || value["sql"] === undefined) {
        result["sql"] = {};
      } else {
        if (typeof value["sql"] !== "object" || Array.isArray(value["sql"])) {
          errorMap[`$.sql`] = {
            key: "validator.object",
            value: value["sql"],
            foundType: typeof value["sql"],
          };
        } else {
          result["sql"] = Object.create(null);

          if (
            value["sql"]["primary"] === null ||
            value["sql"]["primary"] === undefined
          ) {
            result["sql"]["primary"] = undefined;
          } else {
            if (
              value["sql"]["primary"] === true ||
              value["sql"]["primary"] === "true" ||
              value["sql"]["primary"] === 1
            ) {
              result["sql"]["primary"] = true;
            } else if (
              value["sql"]["primary"] === false ||
              value["sql"]["primary"] === "false" ||
              value["sql"]["primary"] === 0
            ) {
              result["sql"]["primary"] = false;
            } else {
              errorMap[`$.sql.primary`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["searchable"] === null ||
            value["sql"]["searchable"] === undefined
          ) {
            result["sql"]["searchable"] = undefined;
          } else {
            if (
              value["sql"]["searchable"] === true ||
              value["sql"]["searchable"] === "true" ||
              value["sql"]["searchable"] === 1
            ) {
              result["sql"]["searchable"] = true;
            } else if (
              value["sql"]["searchable"] === false ||
              value["sql"]["searchable"] === "false" ||
              value["sql"]["searchable"] === 0
            ) {
              result["sql"]["searchable"] = false;
            } else {
              errorMap[`$.sql.searchable`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["sql"]["hasDefaultValue"] === null ||
            value["sql"]["hasDefaultValue"] === undefined
          ) {
            result["sql"]["hasDefaultValue"] = undefined;
          } else {
            if (
              value["sql"]["hasDefaultValue"] === true ||
              value["sql"]["hasDefaultValue"] === "true" ||
              value["sql"]["hasDefaultValue"] === 1
            ) {
              result["sql"]["hasDefaultValue"] = true;
            } else if (
              value["sql"]["hasDefaultValue"] === false ||
              value["sql"]["hasDefaultValue"] === "false" ||
              value["sql"]["hasDefaultValue"] === 0
            ) {
              result["sql"]["hasDefaultValue"] = false;
            } else {
              errorMap[`$.sql.hasDefaultValue`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
        }
      }
      if (value["validator"] === null || value["validator"] === undefined) {
        result["validator"] = {};
      } else {
        if (
          typeof value["validator"] !== "object" ||
          Array.isArray(value["validator"])
        ) {
          errorMap[`$.validator`] = {
            key: "validator.object",
            value: value["validator"],
            foundType: typeof value["validator"],
          };
        } else {
          result["validator"] = Object.create(null);
        }
      }
      if (value["method"] === null || value["method"] === undefined) {
        errorMap[`$.method`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["method"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.method`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.method`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (
            convertedString0 !== "GET" &&
            convertedString0 !== "POST" &&
            convertedString0 !== "PUT" &&
            convertedString0 !== "DELETE" &&
            convertedString0 !== "HEAD" &&
            convertedString0 !== "PATCH"
          ) {
            errorMap[`$.method`] = {
              key: "validator.oneOf",
              allowedValues: ["GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"],
              foundValue: convertedString0,
            };
          } else {
            result["method"] = convertedString0;
          }
        }
      }
      if (value["idempotent"] === null || value["idempotent"] === undefined) {
        errorMap[`$.idempotent`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          value["idempotent"] === true ||
          value["idempotent"] === "true" ||
          value["idempotent"] === 1
        ) {
          result["idempotent"] = true;
        } else if (
          value["idempotent"] === false ||
          value["idempotent"] === "false" ||
          value["idempotent"] === 0
        ) {
          result["idempotent"] = false;
        } else {
          errorMap[`$.idempotent`] = {
            key: "validator.type",
            expectedType: "boolean",
          };
        }
      }
      if (value["path"] === null || value["path"] === undefined) {
        errorMap[`$.path`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["path"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.path`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.path`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else {
            result["path"] = convertedString0;
          }
        }
      }
      if (value["tags"] === null || value["tags"] === undefined) {
        errorMap[`$.tags`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["tags"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["tags"] = Array.from({ length: intermediateValue1.length });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            /** @type {string} */
            let convertedString1 = intermediateValue1[i1];
            if (typeof convertedString1 !== "string") {
              intermediateErrorMap1[`$.${i1}`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString1.length < 1) {
                intermediateErrorMap1[`$.${i1}`] = {
                  key: "validator.length",
                  minLength: 1,
                };
              } else {
                intermediateResult1[i1] = convertedString1;
              }
            }
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.tags${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["tags"] = intermediateResult1;
        }
      }
      if (value["query"] === null || value["query"] === undefined) {
        result["query"] = undefined;
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["query"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.query${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["query"] = refResult0.value;
      }
      if (value["params"] === null || value["params"] === undefined) {
        result["params"] = undefined;
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["params"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.params${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["params"] = refResult0.value;
      }
      if (value["body"] === null || value["body"] === undefined) {
        result["body"] = undefined;
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["body"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.body${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["body"] = refResult0.value;
      }
      if (value["files"] === null || value["files"] === undefined) {
        result["files"] = undefined;
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["files"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.files${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["files"] = refResult0.value;
      }
      if (value["response"] === null || value["response"] === undefined) {
        result["response"] = undefined;
      } else {
        const refResult0 = validateExperimentalReferenceDefinition(
          value["response"],
        );

        if (refResult0.error) {
          for (const errorKey of Object.keys(refResult0.error)) {
            errorMap[`$.response${errorKey.substring(1)}`] =
              refResult0.error[errorKey];
          }
        }
        result["response"] = refResult0.value;
      }
      if (
        value["invalidations"] === null ||
        value["invalidations"] === undefined
      ) {
        errorMap[`$.invalidations`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {ValidatorErrorMap} */
        const intermediateErrorMap1 = {};
        /** @type {any[]} */
        let intermediateResult1 = [];
        /** @type {any|any[]} */
        let intermediateValue1 = value["invalidations"];

        if (!Array.isArray(intermediateValue1)) {
          intermediateValue1 = [intermediateValue1];
        }
        result["invalidations"] = Array.from({
          length: intermediateValue1.length,
        });
        for (let i1 = 0; i1 < intermediateValue1.length; ++i1) {
          if (
            intermediateValue1[i1] === null ||
            intermediateValue1[i1] === undefined
          ) {
            intermediateErrorMap1[`$.${i1}`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult1 = validateExperimentalRouteInvalidationDefinition(
              intermediateValue1[i1],
            );

            if (refResult1.error) {
              for (const errorKey of Object.keys(refResult1.error)) {
                intermediateErrorMap1[`$.${i1}${errorKey.substring(1)}`] =
                  refResult1.error[errorKey];
              }
            }
            intermediateResult1[i1] = refResult1.value;
          }
        }
        if (Object.keys(intermediateErrorMap1).length) {
          for (const errorKey of Object.keys(intermediateErrorMap1)) {
            errorMap[`$.invalidations${errorKey.substring(1)}`] =
              intermediateErrorMap1[errorKey];
          }
        } else {
          result["invalidations"] = intermediateResult1;
        }
      }
      if (value["metadata"] === null || value["metadata"] === undefined) {
        result["metadata"] = undefined;
      } else {
        if (
          typeof value["metadata"] !== "object" ||
          Array.isArray(value["metadata"])
        ) {
          errorMap[`$.metadata`] = {
            key: "validator.object",
            value: value["metadata"],
            foundType: typeof value["metadata"],
          };
        } else {
          result["metadata"] = Object.create(null);

          if (
            value["metadata"]["requestBodyType"] === null ||
            value["metadata"]["requestBodyType"] === undefined
          ) {
            result["metadata"]["requestBodyType"] = undefined;
          } else {
            /** @type {string} */
            let convertedString0 = value["metadata"]["requestBodyType"];
            if (typeof convertedString0 !== "string") {
              errorMap[`$.metadata.requestBodyType`] = {
                key: "validator.string",
              };
            } else {
              if (convertedString0.length === 0) {
                result["metadata"]["requestBodyType"] = undefined;
              } else {
                if (convertedString0.length < 1) {
                  errorMap[`$.metadata.requestBodyType`] = {
                    key: "validator.length",
                    minLength: 1,
                  };
                } else if (
                  convertedString0 !== "json" &&
                  convertedString0 !== "form-data"
                ) {
                  errorMap[`$.metadata.requestBodyType`] = {
                    key: "validator.oneOf",
                    allowedValues: ["json", "form-data"],
                    foundValue: convertedString0,
                  };
                } else {
                  result["metadata"]["requestBodyType"] = convertedString0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalRouteInvalidationDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalRouteInvalidationDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalRouteInvalidationDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.object",
        value: value,
        foundType: typeof value,
      };
    } else {
      result = Object.create(null);

      if (value["type"] === null || value["type"] === undefined) {
        errorMap[`$.type`] = {
          key: "validator.undefined",
        };
      } else {
        /** @type {string} */
        let convertedString0 = value["type"];
        if (typeof convertedString0 !== "string") {
          errorMap[`$.type`] = {
            key: "validator.string",
          };
        } else {
          if (convertedString0.length < 1) {
            errorMap[`$.type`] = {
              key: "validator.length",
              minLength: 1,
            };
          } else if (convertedString0 !== "routeInvalidation") {
            errorMap[`$.type`] = {
              key: "validator.oneOf",
              allowedValues: ["routeInvalidation"],
              foundValue: convertedString0,
            };
          } else {
            result["type"] = convertedString0;
          }
        }
      }
      if (value["target"] === null || value["target"] === undefined) {
        errorMap[`$.target`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["target"] !== "object" ||
          Array.isArray(value["target"])
        ) {
          errorMap[`$.target`] = {
            key: "validator.object",
            value: value["target"],
            foundType: typeof value["target"],
          };
        } else {
          result["target"] = Object.create(null);

          if (
            value["target"]["group"] === null ||
            value["target"]["group"] === undefined
          ) {
            errorMap[`$.target.group`] = {
              key: "validator.undefined",
            };
          } else {
            const refResult0 = validateExperimentalNamePart(
              value["target"]["group"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.target.group${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["target"]["group"] = refResult0.value;
          }
          if (
            value["target"]["name"] === null ||
            value["target"]["name"] === undefined
          ) {
            result["target"]["name"] = undefined;
          } else {
            const refResult0 = validateExperimentalNamePartOptional(
              value["target"]["name"],
            );

            if (refResult0.error) {
              for (const errorKey of Object.keys(refResult0.error)) {
                errorMap[`$.target.name${errorKey.substring(1)}`] =
                  refResult0.error[errorKey];
              }
            }
            result["target"]["name"] = refResult0.value;
          }
        }
      }
      if (value["properties"] === null || value["properties"] === undefined) {
        errorMap[`$.properties`] = {
          key: "validator.undefined",
        };
      } else {
        if (
          typeof value["properties"] !== "object" ||
          Array.isArray(value["properties"])
        ) {
          errorMap[`$.properties`] = {
            key: "validator.object",
            value: value["properties"],
            foundType: typeof value["properties"],
          };
        } else {
          result["properties"] = Object.create(null);

          if (
            value["properties"]["useSharedParams"] === null ||
            value["properties"]["useSharedParams"] === undefined
          ) {
            result["properties"]["useSharedParams"] = undefined;
          } else {
            if (
              value["properties"]["useSharedParams"] === true ||
              value["properties"]["useSharedParams"] === "true" ||
              value["properties"]["useSharedParams"] === 1
            ) {
              result["properties"]["useSharedParams"] = true;
            } else if (
              value["properties"]["useSharedParams"] === false ||
              value["properties"]["useSharedParams"] === "false" ||
              value["properties"]["useSharedParams"] === 0
            ) {
              result["properties"]["useSharedParams"] = false;
            } else {
              errorMap[`$.properties.useSharedParams`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["properties"]["useSharedQuery"] === null ||
            value["properties"]["useSharedQuery"] === undefined
          ) {
            result["properties"]["useSharedQuery"] = undefined;
          } else {
            if (
              value["properties"]["useSharedQuery"] === true ||
              value["properties"]["useSharedQuery"] === "true" ||
              value["properties"]["useSharedQuery"] === 1
            ) {
              result["properties"]["useSharedQuery"] = true;
            } else if (
              value["properties"]["useSharedQuery"] === false ||
              value["properties"]["useSharedQuery"] === "false" ||
              value["properties"]["useSharedQuery"] === 0
            ) {
              result["properties"]["useSharedQuery"] = false;
            } else {
              errorMap[`$.properties.useSharedQuery`] = {
                key: "validator.type",
                expectedType: "boolean",
              };
            }
          }
          if (
            value["properties"]["specification"] === null ||
            value["properties"]["specification"] === undefined
          ) {
            result["properties"]["specification"] = undefined;
          } else {
            if (
              typeof value["properties"]["specification"] !== "object" ||
              Array.isArray(value["properties"]["specification"])
            ) {
              errorMap[`$.properties.specification`] = {
                key: "validator.object",
                value: value["properties"]["specification"],
                foundType: typeof value["properties"]["specification"],
              };
            } else {
              result["properties"]["specification"] = Object.create(null);

              if (
                value["properties"]["specification"]["params"] === null ||
                value["properties"]["specification"]["params"] === undefined
              ) {
                errorMap[`$.properties.specification.params`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["properties"]["specification"]["params"] !==
                    "object" ||
                  Array.isArray(value["properties"]["specification"]["params"])
                ) {
                  errorMap[`$.properties.specification.params`] = {
                    key: "validator.generic",
                  };
                } else {
                  result["properties"]["specification"]["params"] = {};
                  for (let genericKeyInput0 of Object.keys(
                    value["properties"]["specification"]["params"],
                  )) {
                    /** @type {any} */
                    let genericKeyResult1 = undefined;
                    /** @type {ValidatorErrorMap} */
                    const genericKeyErrorMap2 = {};
                    if (
                      genericKeyInput0 === null ||
                      genericKeyInput0 === undefined
                    ) {
                      genericKeyErrorMap2[`$`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString3 = genericKeyInput0;
                      if (typeof convertedString3 !== "string") {
                        genericKeyErrorMap2[`$`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString3.length < 1) {
                          genericKeyErrorMap2[`$`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          genericKeyResult1 = convertedString3;
                        }
                      }
                    }
                    if (Object.keys(genericKeyErrorMap2).length !== 0) {
                      if (errorMap[`$.properties.specification.params`]) {
                        errorMap[
                          `$.properties.specification.params`
                        ].inputs.push({
                          key: genericKeyInput0,
                          errors: genericKeyErrorMap2,
                        });
                      } else {
                        errorMap[`$.properties.specification.params`] = {
                          key: "validator.generic",
                          inputs: [
                            {
                              key: genericKeyInput0,
                              errors: genericKeyErrorMap2,
                            },
                          ],
                        };
                      }
                    } else {
                      if (
                        value["properties"]["specification"]["params"][
                          genericKeyResult1
                        ] === null ||
                        value["properties"]["specification"]["params"][
                          genericKeyResult1
                        ] === undefined
                      ) {
                        errorMap[
                          `$.properties.specification.params.${genericKeyResult1}`
                        ] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {ValidatorErrorMap} */
                        const intermediateErrorMap4 = {};
                        /** @type {any[]} */
                        let intermediateResult4 = [];
                        /** @type {any|any[]} */
                        let intermediateValue4 =
                          value["properties"]["specification"]["params"][
                            genericKeyResult1
                          ];

                        if (!Array.isArray(intermediateValue4)) {
                          intermediateValue4 = [intermediateValue4];
                        }
                        result["properties"]["specification"]["params"][
                          genericKeyResult1
                        ] = Array.from({ length: intermediateValue4.length });
                        for (let i4 = 0; i4 < intermediateValue4.length; ++i4) {
                          if (
                            intermediateValue4[i4] === null ||
                            intermediateValue4[i4] === undefined
                          ) {
                            intermediateErrorMap4[`$.${i4}`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString4 = intermediateValue4[i4];
                            if (typeof convertedString4 !== "string") {
                              intermediateErrorMap4[`$.${i4}`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString4.length < 1) {
                                intermediateErrorMap4[`$.${i4}`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult4[i4] = convertedString4;
                              }
                            }
                          }
                        }
                        if (Object.keys(intermediateErrorMap4).length) {
                          for (const errorKey of Object.keys(
                            intermediateErrorMap4,
                          )) {
                            errorMap[
                              `$.properties.specification.params.${genericKeyResult1}${errorKey.substring(
                                1,
                              )}`
                            ] = intermediateErrorMap4[errorKey];
                          }
                        } else {
                          result["properties"]["specification"]["params"][
                            genericKeyResult1
                          ] = intermediateResult4;
                        }
                      }
                    }
                  }
                }
              }
              if (
                value["properties"]["specification"]["query"] === null ||
                value["properties"]["specification"]["query"] === undefined
              ) {
                errorMap[`$.properties.specification.query`] = {
                  key: "validator.undefined",
                };
              } else {
                if (
                  typeof value["properties"]["specification"]["query"] !==
                    "object" ||
                  Array.isArray(value["properties"]["specification"]["query"])
                ) {
                  errorMap[`$.properties.specification.query`] = {
                    key: "validator.generic",
                  };
                } else {
                  result["properties"]["specification"]["query"] = {};
                  for (let genericKeyInput0 of Object.keys(
                    value["properties"]["specification"]["query"],
                  )) {
                    /** @type {any} */
                    let genericKeyResult1 = undefined;
                    /** @type {ValidatorErrorMap} */
                    const genericKeyErrorMap2 = {};
                    if (
                      genericKeyInput0 === null ||
                      genericKeyInput0 === undefined
                    ) {
                      genericKeyErrorMap2[`$`] = {
                        key: "validator.undefined",
                      };
                    } else {
                      /** @type {string} */
                      let convertedString3 = genericKeyInput0;
                      if (typeof convertedString3 !== "string") {
                        genericKeyErrorMap2[`$`] = {
                          key: "validator.string",
                        };
                      } else {
                        if (convertedString3.length < 1) {
                          genericKeyErrorMap2[`$`] = {
                            key: "validator.length",
                            minLength: 1,
                          };
                        } else {
                          genericKeyResult1 = convertedString3;
                        }
                      }
                    }
                    if (Object.keys(genericKeyErrorMap2).length !== 0) {
                      if (errorMap[`$.properties.specification.query`]) {
                        errorMap[
                          `$.properties.specification.query`
                        ].inputs.push({
                          key: genericKeyInput0,
                          errors: genericKeyErrorMap2,
                        });
                      } else {
                        errorMap[`$.properties.specification.query`] = {
                          key: "validator.generic",
                          inputs: [
                            {
                              key: genericKeyInput0,
                              errors: genericKeyErrorMap2,
                            },
                          ],
                        };
                      }
                    } else {
                      if (
                        value["properties"]["specification"]["query"][
                          genericKeyResult1
                        ] === null ||
                        value["properties"]["specification"]["query"][
                          genericKeyResult1
                        ] === undefined
                      ) {
                        errorMap[
                          `$.properties.specification.query.${genericKeyResult1}`
                        ] = {
                          key: "validator.undefined",
                        };
                      } else {
                        /** @type {ValidatorErrorMap} */
                        const intermediateErrorMap4 = {};
                        /** @type {any[]} */
                        let intermediateResult4 = [];
                        /** @type {any|any[]} */
                        let intermediateValue4 =
                          value["properties"]["specification"]["query"][
                            genericKeyResult1
                          ];

                        if (!Array.isArray(intermediateValue4)) {
                          intermediateValue4 = [intermediateValue4];
                        }
                        result["properties"]["specification"]["query"][
                          genericKeyResult1
                        ] = Array.from({ length: intermediateValue4.length });
                        for (let i4 = 0; i4 < intermediateValue4.length; ++i4) {
                          if (
                            intermediateValue4[i4] === null ||
                            intermediateValue4[i4] === undefined
                          ) {
                            intermediateErrorMap4[`$.${i4}`] = {
                              key: "validator.undefined",
                            };
                          } else {
                            /** @type {string} */
                            let convertedString4 = intermediateValue4[i4];
                            if (typeof convertedString4 !== "string") {
                              intermediateErrorMap4[`$.${i4}`] = {
                                key: "validator.string",
                              };
                            } else {
                              if (convertedString4.length < 1) {
                                intermediateErrorMap4[`$.${i4}`] = {
                                  key: "validator.length",
                                  minLength: 1,
                                };
                              } else {
                                intermediateResult4[i4] = convertedString4;
                              }
                            }
                          }
                        }
                        if (Object.keys(intermediateErrorMap4).length) {
                          for (const errorKey of Object.keys(
                            intermediateErrorMap4,
                          )) {
                            errorMap[
                              `$.properties.specification.query.${genericKeyResult1}${errorKey.substring(
                                1,
                              )}`
                            ] = intermediateErrorMap4[errorKey];
                          }
                        } else {
                          result["properties"]["specification"]["query"][
                            genericKeyResult1
                          ] = intermediateResult4;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * @param {import("../common/types").ExperimentalStructureInput|any} value
 * @returns {Either<import("../common/types").ExperimentalStructure, ValidatorErrorMap>}
 */
export function validateExperimentalStructure(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    if (typeof value !== "object" || Array.isArray(value)) {
      errorMap[`$`] = {
        key: "validator.generic",
      };
    } else {
      result = {};
      for (let genericKeyInput0 of Object.keys(value)) {
        /** @type {any} */
        let genericKeyResult1 = undefined;
        /** @type {ValidatorErrorMap} */
        const genericKeyErrorMap2 = {};
        if (genericKeyInput0 === null || genericKeyInput0 === undefined) {
          genericKeyErrorMap2[`$`] = {
            key: "validator.undefined",
          };
        } else {
          const refResult3 = validateExperimentalNamePart(genericKeyInput0);

          if (refResult3.error) {
            for (const errorKey of Object.keys(refResult3.error)) {
              genericKeyErrorMap2[`$${errorKey.substring(1)}`] =
                refResult3.error[errorKey];
            }
          }
          genericKeyResult1 = refResult3.value;
        }
        if (Object.keys(genericKeyErrorMap2).length !== 0) {
          if (errorMap[`$`]) {
            errorMap[`$`].inputs.push({
              key: genericKeyInput0,
              errors: genericKeyErrorMap2,
            });
          } else {
            errorMap[`$`] = {
              key: "validator.generic",
              inputs: [{ key: genericKeyInput0, errors: genericKeyErrorMap2 }],
            };
          }
        } else {
          if (
            value[genericKeyResult1] === null ||
            value[genericKeyResult1] === undefined
          ) {
            errorMap[`$.${genericKeyResult1}`] = {
              key: "validator.undefined",
            };
          } else {
            if (
              typeof value[genericKeyResult1] !== "object" ||
              Array.isArray(value[genericKeyResult1])
            ) {
              errorMap[`$.${genericKeyResult1}`] = {
                key: "validator.generic",
              };
            } else {
              result[genericKeyResult1] = {};
              for (let genericKeyInput3 of Object.keys(
                value[genericKeyResult1],
              )) {
                /** @type {any} */
                let genericKeyResult4 = undefined;
                /** @type {ValidatorErrorMap} */
                const genericKeyErrorMap5 = {};
                if (
                  genericKeyInput3 === null ||
                  genericKeyInput3 === undefined
                ) {
                  genericKeyErrorMap5[`$`] = {
                    key: "validator.undefined",
                  };
                } else {
                  const refResult6 =
                    validateExperimentalNamePart(genericKeyInput3);

                  if (refResult6.error) {
                    for (const errorKey of Object.keys(refResult6.error)) {
                      genericKeyErrorMap5[`$${errorKey.substring(1)}`] =
                        refResult6.error[errorKey];
                    }
                  }
                  genericKeyResult4 = refResult6.value;
                }
                if (Object.keys(genericKeyErrorMap5).length !== 0) {
                  if (errorMap[`$.${genericKeyResult1}`]) {
                    errorMap[`$.${genericKeyResult1}`].inputs.push({
                      key: genericKeyInput3,
                      errors: genericKeyErrorMap5,
                    });
                  } else {
                    errorMap[`$.${genericKeyResult1}`] = {
                      key: "validator.generic",
                      inputs: [
                        { key: genericKeyInput3, errors: genericKeyErrorMap5 },
                      ],
                    };
                  }
                } else {
                  if (
                    value[genericKeyResult1][genericKeyResult4] === null ||
                    value[genericKeyResult1][genericKeyResult4] === undefined
                  ) {
                    errorMap[`$.${genericKeyResult1}.${genericKeyResult4}`] = {
                      key: "validator.undefined",
                    };
                  } else {
                    const refResult6 = validateExperimentalNamedTypeDefinition(
                      value[genericKeyResult1][genericKeyResult4],
                    );

                    if (refResult6.error) {
                      for (const errorKey of Object.keys(refResult6.error)) {
                        errorMap[
                          `$.${genericKeyResult1}.${genericKeyResult4}${errorKey.substring(
                            1,
                          )}`
                        ] = refResult6.error[errorKey];
                      }
                    }
                    result[genericKeyResult1][genericKeyResult4] =
                      refResult6.value;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}

/**
 * This contains all known type definitions.
 *
 * @param {import("../common/types").ExperimentalTypeDefinitionInput|any} value
 * @returns {Either<import("../common/types").ExperimentalTypeDefinition, ValidatorErrorMap>}
 */
export function validateExperimentalTypeDefinition(value) {
  /** @type {ValidatorErrorMap} */
  const errorMap = {};
  /** @type {any} */
  let result = undefined;

  if (value === null || value === undefined) {
    errorMap[`$`] = {
      key: "validator.undefined",
    };
  } else {
    let hasAnyOfMatch0 = false;
    errorMap[`$`] = {
      key: "validator.anyOf",
      errors: [],
    };
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 =
          validateExperimentalNamedTypeDefinition(intermediateValue2);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        intermediateResult2 = refResult2.value;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 =
          validateExperimentalReferenceDefinition(intermediateValue2);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        intermediateResult2 = refResult2.value;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 =
          validateExperimentalRelationDefinition(intermediateValue2);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        intermediateResult2 = refResult2.value;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
    if (!hasAnyOfMatch0) {
      /** @type {ValidatorErrorMap} */
      const intermediateErrorMap2 = {};
      /** @type {any} */
      let intermediateResult2 = undefined;
      /** @type {any} */
      let intermediateValue2 = value;

      if (intermediateValue2 === null || intermediateValue2 === undefined) {
        intermediateErrorMap2[`$`] = {
          key: "validator.undefined",
        };
      } else {
        const refResult2 =
          validateExperimentalRouteInvalidationDefinition(intermediateValue2);

        if (refResult2.error) {
          for (const errorKey of Object.keys(refResult2.error)) {
            intermediateErrorMap2[`$${errorKey.substring(1)}`] =
              refResult2.error[errorKey];
          }
        }
        intermediateResult2 = refResult2.value;
      }
      if (Object.keys(intermediateErrorMap2).length > 0) {
        errorMap[`$`].errors.push(intermediateErrorMap2);
      } else {
        hasAnyOfMatch0 = true;
        delete errorMap[`$`];
        result = intermediateResult2;
      }
    }
  }
  if (Object.keys(errorMap).length > 0) {
    return { error: errorMap };
  }
  return { value: result };
}
