// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

/**
 * @param {*} value
 * @returns {boolean}
 */
export function isNil(value) {
  return value === undefined || value === null;
}
/**
 * @name {ValidationErrorFn}
 * This function should not throw as the corresponding validator will do that
 * @typedef {function(string,any): Error}
 */
/** @type {ValidationErrorFn} */
let errorFn = (key, info) => {
  const err = new Error(`ValidationError: ${key}`);
  err.key = key;
  err.info = info;
  return err;
};
/**
 * @param {string} type
 * @param {string} key
 * @param {*} info
 */
export function buildError(type, key, info) {
  return errorFn(`validator.${type}.${key}`, info);
}
/**
 * Set a different error function, for example AppError.validationError
 * @param {ValidationErrorFn} fn
 */
export function validatorSetError(fn) {
  errorFn = fn;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator1707981923(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return "";
  }
  if (typeof value !== "string") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (value.length === 0) {
    return "";
  }
  if (value.length < 1) {
    const min = 1;
    errors.push(buildError(parentType, "min", { propertyPath, min }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {boolean|undefined}
 */
export function anonymousValidator652858792(
  value,
  propertyPath,
  errors = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return false;
  }
  if (typeof value !== "boolean") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator913531259(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (value.length < 0) {
    const min = 0;
    errors.push(buildError(parentType, "min", { propertyPath, min }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {boolean|undefined}
 */
export function anonymousValidator1308064958(
  value,
  propertyPath,
  errors = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "boolean") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator9037802(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push(buildError(parentType, "integer", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|string|boolean|number|undefined}
 */
export function anonymousValidator23848295(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    return value;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator913531259(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1308064958(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator9037802(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  errors.push(
    buildError(parentType, "type", { propertyPath, errors: subErrors }),
  );
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|string|undefined}
 */
export function anonymousValidator69329591(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "string") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (value.length === 0) {
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push(buildError(parentType, "min", { propertyPath, min }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|{"primary": boolean, "searchable": boolean, }|undefined}
 */
export function anonymousValidator1230176889(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["primary"] = anonymousValidator652858792(
    value["primary"],
    `${propertyPath}.primary`,
    errors,
  );
  result["searchable"] = anonymousValidator652858792(
    value["searchable"],
    `${propertyPath}.searchable`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{}|undefined}
 */
export function anonymousValidator617718471(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return {};
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"allowNull": boolean, }|undefined}
 */
export function anonymousValidator492417938(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return { allowNull: false };
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["allowNull"] = anonymousValidator652858792(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"javaScript"?: string, "typeScript"?: string, }|undefined}
 */
export function anonymousValidator532136879(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return {};
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["javaScript"] = anonymousValidator69329591(
    value["javaScript"],
    `${propertyPath}.javaScript`,
    errors,
  );
  result["typeScript"] = anonymousValidator69329591(
    value["typeScript"],
    `${propertyPath}.typeScript`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "any", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, }, "rawValue"?: string, "rawValueImport": {"javaScript"?: string, "typeScript"?: string, }, "rawValidator"?: string, "rawValidatorImport": {"javaScript"?: string, "typeScript"?: string, }, }|undefined}
 */
export function anonymousValidator368260888(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "any") {
    const parentType = "string";
    const oneOf = ["any"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator492417938(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["rawValue"] = anonymousValidator69329591(
    value["rawValue"],
    `${propertyPath}.rawValue`,
    errors,
  );
  result["rawValueImport"] = anonymousValidator532136879(
    value["rawValueImport"],
    `${propertyPath}.rawValueImport`,
    errors,
  );
  result["rawValidator"] = anonymousValidator69329591(
    value["rawValidator"],
    `${propertyPath}.rawValidator`,
    errors,
  );
  result["rawValidatorImport"] = anonymousValidator532136879(
    value["rawValidatorImport"],
    `${propertyPath}.rawValidatorImport`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|number|undefined}
 */
export function anonymousValidator629315207(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push(buildError(parentType, "integer", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "min"?: number, "max"?: number, }|undefined}
 */
export function anonymousValidator736640171(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator652858792(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["min"] = anonymousValidator629315207(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator629315207(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "array", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "min"?: number, "max"?: number, }, "values": CodeGenType, }|undefined}
 */
export function anonymousValidator1210796142(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "array") {
    const parentType = "string";
    const oneOf = ["array"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator736640171(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["values"] = anonymousValidator1985175360(
    value["values"],
    `${propertyPath}.values`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "allowNull": boolean, }|undefined}
 */
export function anonymousValidator1270069781(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator652858792(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["allowNull"] = anonymousValidator652858792(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|boolean|undefined}
 */
export function anonymousValidator334567203(
  value,
  propertyPath,
  errors = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "boolean") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "boolean", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "allowNull": boolean, }, "oneOf"?: boolean, }|undefined}
 */
export function anonymousValidator1065028911(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "boolean") {
    const parentType = "string";
    const oneOf = ["boolean"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1270069781(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["oneOf"] = anonymousValidator334567203(
    value["oneOf"],
    `${propertyPath}.oneOf`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "date", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, }, }|undefined}
 */
export function anonymousValidator1371848646(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "date") {
    const parentType = "string";
    const oneOf = ["date"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator492417938(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "file", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {}, }|undefined}
 */
export function anonymousValidator98797027(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "file") {
    const parentType = "string";
    const oneOf = ["file"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator617718471(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "generic", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {}, "keys": CodeGenType, "values": CodeGenType, }|undefined}
 */
export function anonymousValidator2080078377(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "generic") {
    const parentType = "string";
    const oneOf = ["generic"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator617718471(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["keys"] = anonymousValidator1985175360(
    value["keys"],
    `${propertyPath}.keys`,
    errors,
  );
  result["values"] = anonymousValidator1985175360(
    value["values"],
    `${propertyPath}.values`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "floatingPoint": boolean, "min"?: number, "max"?: number, "allowNull": boolean, }|undefined}
 */
export function anonymousValidator1874959607(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator652858792(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["floatingPoint"] = anonymousValidator652858792(
    value["floatingPoint"],
    `${propertyPath}.floatingPoint`,
    errors,
  );
  result["min"] = anonymousValidator629315207(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator629315207(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  result["allowNull"] = anonymousValidator652858792(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|(number)[]|undefined}
 */
export function anonymousValidator1024188572(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return value;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator9037802(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "number", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "floatingPoint": boolean, "min"?: number, "max"?: number, "allowNull": boolean, }, "oneOf"?: (number)[], }|undefined}
 */
export function anonymousValidator267932131(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "number") {
    const parentType = "string";
    const oneOf = ["number"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1874959607(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["oneOf"] = anonymousValidator1024188572(
    value["oneOf"],
    `${propertyPath}.oneOf`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {boolean|undefined}
 */
export function anonymousValidator846879133(
  value,
  propertyPath,
  errors = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return true;
  }
  if (typeof value !== "boolean") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"strict": boolean, }|undefined}
 */
export function anonymousValidator1735626528(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["strict"] = anonymousValidator846879133(
    value["strict"],
    `${propertyPath}.strict`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator1801034940(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push(buildError(parentType, "min", { propertyPath, min }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {Object<string, CodeGenType>|undefined}
 */
export function anonymousValidator1306491404(
  value,
  propertyPath,
  errors = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1801034940(
      key,
      `${propertyPath}.$key[${key}]`,
      errors,
    );
    if (genericKey !== undefined) {
      result[genericKey] = anonymousValidator1985175360(
        value[key],
        `${propertyPath}.$value[${key}]`,
        errors,
      );
    }
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, }|undefined}
 */
export function anonymousValidator217883487(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["withSoftDeletes"] = anonymousValidator652858792(
    value["withSoftDeletes"],
    `${propertyPath}.withSoftDeletes`,
    errors,
  );
  result["withDates"] = anonymousValidator652858792(
    value["withDates"],
    `${propertyPath}.withDates`,
    errors,
  );
  result["withPrimaryKey"] = anonymousValidator846879133(
    value["withPrimaryKey"],
    `${propertyPath}.withPrimaryKey`,
    errors,
  );
  result["isView"] = anonymousValidator652858792(
    value["isView"],
    `${propertyPath}.isView`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"uniqueName"?: string, "group"?: string, "name"?: string, }|undefined}
 */
export function anonymousValidator1283136356(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  keySet.delete("uniqueName");
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  keySet.delete("group");
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  keySet.delete("name");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {CodeGenType|{"uniqueName"?: string, "group"?: string, "name"?: string, }|undefined}
 */
export function anonymousValidator419495106(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator1985175360(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1283136356(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  errors.push(
    buildError(parentType, "type", { propertyPath, errors: subErrors }),
  );
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "reference", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {}, "reference": CodeGenType|{"uniqueName"?: string, "group"?: string, "name"?: string, }, }|undefined}
 */
export function anonymousValidator1199721884(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "reference") {
    const parentType = "string";
    const oneOf = ["reference"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator617718471(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["reference"] = anonymousValidator419495106(
    value["reference"],
    `${propertyPath}.reference`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "relation", "subType": "manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse", "reference": CodeGenReferenceType, "ownKey": string, "referencedKey"?: string, "isOptional": boolean, }|undefined}
 */
export function anonymousValidator2029007679(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "relation") {
    const parentType = "string";
    const oneOf = ["relation"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  if (
    value["subType"] !== "manyToOne" &&
    value["subType"] !== "oneToMany" &&
    value["subType"] !== "oneToOne" &&
    value["subType"] !== "oneToOneReverse"
  ) {
    const parentType = "string";
    const oneOf = ["manyToOne", "oneToMany", "oneToOne", "oneToOneReverse"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.subType`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["subType"] = value["subType"];
  result["reference"] = anonymousValidator1199721884(
    value["reference"],
    `${propertyPath}.reference`,
    errors,
  );
  result["ownKey"] = anonymousValidator1801034940(
    value["ownKey"],
    `${propertyPath}.ownKey`,
    errors,
  );
  result["referencedKey"] = anonymousValidator69329591(
    value["referencedKey"],
    `${propertyPath}.referencedKey`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {(CodeGenRelationType)[]|undefined}
 */
export function anonymousValidator347229834(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return [];
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator2029007679(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"notLike", }|undefined}
 */
export function anonymousValidator1337139037(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["key"] = anonymousValidator1801034940(
    value["key"],
    `${propertyPath}.key`,
    errors,
  );
  result["name"] = anonymousValidator1801034940(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  if (
    value["variant"] !== "equal" &&
    value["variant"] !== "notEqual" &&
    value["variant"] !== "in" &&
    value["variant"] !== "notIn" &&
    value["variant"] !== "greaterThan" &&
    value["variant"] !== "lowerThan" &&
    value["variant"] !== "isNull" &&
    value["variant"] !== "isNotNull" &&
    value["variant"] !== "includeNotNull" &&
    value["variant"] !== "like" &&
    value["variant"] !== "notLike"
  ) {
    const parentType = "string";
    const oneOf = [
      "equal",
      "notEqual",
      "in",
      "notIn",
      "greaterThan",
      "lowerThan",
      "isNull",
      "isNotNull",
      "includeNotNull",
      "like",
      "notLike",
    ];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.variant`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["variant"] = value["variant"];
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {({"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"notLike", })[]|undefined}
 */
export function anonymousValidator1136555662(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1337139037(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|{"type": string, "fields": ({"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"notLike", })[], }|undefined}
 */
export function anonymousValidator230282048(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["type"] = anonymousValidator1801034940(
    value["type"],
    `${propertyPath}.type`,
    errors,
  );
  result["fields"] = anonymousValidator1136555662(
    value["fields"],
    `${propertyPath}.fields`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"key": string, "defaultValue"?: string, "isJsonb": boolean, }|undefined}
 */
export function anonymousValidator887501550(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["key"] = anonymousValidator1801034940(
    value["key"],
    `${propertyPath}.key`,
    errors,
  );
  result["defaultValue"] = anonymousValidator69329591(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["isJsonb"] = anonymousValidator652858792(
    value["isJsonb"],
    `${propertyPath}.isJsonb`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {({"key": string, "defaultValue"?: string, "isJsonb": boolean, })[]|undefined}
 */
export function anonymousValidator1348405273(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator887501550(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: string, "isJsonb": boolean, })[], }|undefined}
 */
export function anonymousValidator1957121873(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["insertType"] = anonymousValidator1801034940(
    value["insertType"],
    `${propertyPath}.insertType`,
    errors,
  );
  result["updateType"] = anonymousValidator1801034940(
    value["updateType"],
    `${propertyPath}.updateType`,
    errors,
  );
  result["fields"] = anonymousValidator1348405273(
    value["fields"],
    `${propertyPath}.fields`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "object", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"strict": boolean, }, "keys": Object<string, CodeGenType>, "enableQueries": boolean, "queryOptions"?: {"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, }, "relations": (CodeGenRelationType)[], "shortName"?: string, "where"?: {"type": string, "fields": ({"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"notLike", })[], }, "partial"?: {"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: string, "isJsonb": boolean, })[], }, }|undefined}
 */
export function anonymousValidator2003332250(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "object") {
    const parentType = "string";
    const oneOf = ["object"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1735626528(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["keys"] = anonymousValidator1306491404(
    value["keys"],
    `${propertyPath}.keys`,
    errors,
  );
  result["enableQueries"] = anonymousValidator652858792(
    value["enableQueries"],
    `${propertyPath}.enableQueries`,
    errors,
  );
  result["queryOptions"] = anonymousValidator217883487(
    value["queryOptions"],
    `${propertyPath}.queryOptions`,
    errors,
  );
  result["relations"] = anonymousValidator347229834(
    value["relations"],
    `${propertyPath}.relations`,
    errors,
  );
  result["shortName"] = anonymousValidator69329591(
    value["shortName"],
    `${propertyPath}.shortName`,
    errors,
  );
  result["where"] = anonymousValidator230282048(
    value["where"],
    `${propertyPath}.where`,
    errors,
  );
  result["partial"] = anonymousValidator1957121873(
    value["partial"],
    `${propertyPath}.partial`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator1158137534(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return 1;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push(buildError(parentType, "integer", { propertyPath }));
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: number, "pattern"?: string, "allowNull": boolean, }|undefined}
 */
export function anonymousValidator1756583008(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator652858792(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["trim"] = anonymousValidator652858792(
    value["trim"],
    `${propertyPath}.trim`,
    errors,
  );
  result["lowerCase"] = anonymousValidator652858792(
    value["lowerCase"],
    `${propertyPath}.lowerCase`,
    errors,
  );
  result["upperCase"] = anonymousValidator652858792(
    value["upperCase"],
    `${propertyPath}.upperCase`,
    errors,
  );
  result["min"] = anonymousValidator1158137534(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator629315207(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  result["pattern"] = anonymousValidator69329591(
    value["pattern"],
    `${propertyPath}.pattern`,
    errors,
  );
  result["allowNull"] = anonymousValidator652858792(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|(string)[]|undefined}
 */
export function anonymousValidator1241648372(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return value;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1801034940(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "string", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: number, "pattern"?: string, "allowNull": boolean, }, "oneOf"?: (string)[], }|undefined}
 */
export function anonymousValidator722636964(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "string") {
    const parentType = "string";
    const oneOf = ["string"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1756583008(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["oneOf"] = anonymousValidator1241648372(
    value["oneOf"],
    `${propertyPath}.oneOf`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "uuid", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, }, }|undefined}
 */
export function anonymousValidator158572615(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "uuid") {
    const parentType = "string";
    const oneOf = ["uuid"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator492417938(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {(string)[]|undefined}
 */
export function anonymousValidator376609007(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1801034940(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|CodeGenType|undefined}
 */
export function anonymousValidator519519900(
  value,
  propertyPath,
  errors = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return value;
  }
  return anonymousValidator1985175360(value, propertyPath, errors);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|CodeGenType|undefined}
 */
export function anonymousValidator1723792468(
  value,
  propertyPath,
  errors = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return value;
  }
  return anonymousValidator1985175360(value, propertyPath, errors);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|CodeGenType|undefined}
 */
export function anonymousValidator1108942180(
  value,
  propertyPath,
  errors = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return value;
  }
  return anonymousValidator1985175360(value, propertyPath, errors);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|CodeGenType|undefined}
 */
export function anonymousValidator1391332452(
  value,
  propertyPath,
  errors = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return value;
  }
  return anonymousValidator1985175360(value, propertyPath, errors);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {undefined|CodeGenType|undefined}
 */
export function anonymousValidator1768060116(
  value,
  propertyPath,
  errors = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return value;
  }
  return anonymousValidator1985175360(value, propertyPath, errors);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "route", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {}, "method": "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH", "path": string, "tags": (string)[], "query"?: CodeGenType, "params"?: CodeGenType, "body"?: CodeGenType, "files"?: CodeGenType, "response"?: CodeGenType, }|undefined}
 */
export function anonymousValidator647792494(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "route") {
    const parentType = "string";
    const oneOf = ["route"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator617718471(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  if (
    value["method"] !== "GET" &&
    value["method"] !== "POST" &&
    value["method"] !== "PUT" &&
    value["method"] !== "DELETE" &&
    value["method"] !== "HEAD" &&
    value["method"] !== "PATCH"
  ) {
    const parentType = "string";
    const oneOf = ["GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.method`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["method"] = value["method"];
  result["path"] = anonymousValidator1801034940(
    value["path"],
    `${propertyPath}.path`,
    errors,
  );
  result["tags"] = anonymousValidator376609007(
    value["tags"],
    `${propertyPath}.tags`,
    errors,
  );
  result["query"] = anonymousValidator519519900(
    value["query"],
    `${propertyPath}.query`,
    errors,
  );
  result["params"] = anonymousValidator1723792468(
    value["params"],
    `${propertyPath}.params`,
    errors,
  );
  result["body"] = anonymousValidator1108942180(
    value["body"],
    `${propertyPath}.body`,
    errors,
  );
  result["files"] = anonymousValidator1391332452(
    value["files"],
    `${propertyPath}.files`,
    errors,
  );
  result["response"] = anonymousValidator1768060116(
    value["response"],
    `${propertyPath}.response`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {CodeGenAnyType|CodeGenAnyOfType|CodeGenArrayType|CodeGenBooleanType|CodeGenDateType|CodeGenFileType|CodeGenGenericType|CodeGenNumberType|CodeGenObjectType|CodeGenReferenceType|CodeGenRelationType|CodeGenStringType|CodeGenUuidType|CodeGenRouteType|undefined}
 */
export function anonymousValidator1985175360(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator368260888(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1448768479(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1210796142(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1065028911(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1371848646(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator98797027(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator2080078377(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator267932131(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator2003332250(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1199721884(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator2029007679(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator722636964(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator158572615(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator647792494(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  errors.push(
    buildError(parentType, "type", { propertyPath, errors: subErrors }),
  );
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {(CodeGenType)[]|undefined}
 */
export function anonymousValidator207738441(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1985175360(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"type": "anyOf", "docString": string, "isOptional": boolean, "defaultValue"?: string|boolean|number, "uniqueName"?: string, "group"?: string, "name"?: string, "sql"?: {"primary": boolean, "searchable": boolean, }, "validator": {}, "values": (CodeGenType)[], }|undefined}
 */
export function anonymousValidator1448768479(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "anyOf") {
    const parentType = "string";
    const oneOf = ["anyOf"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.type`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["type"] = value["type"];
  result["docString"] = anonymousValidator1707981923(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator652858792(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator23848295(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator69329591(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator69329591(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator69329591(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1230176889(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator617718471(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["values"] = anonymousValidator207738441(
    value["values"],
    `${propertyPath}.values`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {("type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery")[]|undefined}
 */
export function anonymousValidator1009589157(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    if (
      value[i] !== "type" &&
      value[i] !== "validator" &&
      value[i] !== "router" &&
      value[i] !== "sql" &&
      value[i] !== "apiClient" &&
      value[i] !== "reactQuery"
    ) {
      const parentType = "string";
      const oneOf = [
        "type",
        "validator",
        "router",
        "sql",
        "apiClient",
        "reactQuery",
      ];
      errors.push(
        buildError(parentType, "oneOf", {
          propertyPath: `${propertyPath}[${i}]`,
          oneOf,
        }),
      );
      return undefined;
    }
    result[i] = value[i];
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"enabledGroups": (string)[], "isBrowser": boolean, "isNode": boolean, "isNodeServer": boolean, "enabledGenerators": ("type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery")[], "useTypescript": boolean, "dumpStructure": boolean, "fileHeader": string, "outputDirectory": string, }|undefined}
 */
export function anonymousValidator1311847056(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  result["enabledGroups"] = anonymousValidator376609007(
    value["enabledGroups"],
    `${propertyPath}.enabledGroups`,
    errors,
  );
  keySet.delete("enabledGroups");
  result["isBrowser"] = anonymousValidator1308064958(
    value["isBrowser"],
    `${propertyPath}.isBrowser`,
    errors,
  );
  keySet.delete("isBrowser");
  result["isNode"] = anonymousValidator1308064958(
    value["isNode"],
    `${propertyPath}.isNode`,
    errors,
  );
  keySet.delete("isNode");
  result["isNodeServer"] = anonymousValidator1308064958(
    value["isNodeServer"],
    `${propertyPath}.isNodeServer`,
    errors,
  );
  keySet.delete("isNodeServer");
  result["enabledGenerators"] = anonymousValidator1009589157(
    value["enabledGenerators"],
    `${propertyPath}.enabledGenerators`,
    errors,
  );
  keySet.delete("enabledGenerators");
  result["useTypescript"] = anonymousValidator1308064958(
    value["useTypescript"],
    `${propertyPath}.useTypescript`,
    errors,
  );
  keySet.delete("useTypescript");
  result["dumpStructure"] = anonymousValidator1308064958(
    value["dumpStructure"],
    `${propertyPath}.dumpStructure`,
    errors,
  );
  keySet.delete("dumpStructure");
  result["fileHeader"] = anonymousValidator1801034940(
    value["fileHeader"],
    `${propertyPath}.fileHeader`,
    errors,
  );
  keySet.delete("fileHeader");
  result["outputDirectory"] = anonymousValidator1801034940(
    value["outputDirectory"],
    `${propertyPath}.outputDirectory`,
    errors,
  );
  keySet.delete("outputDirectory");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {Object<string, CodeGenType>|undefined}
 */
export function anonymousValidator2095439669(
  value,
  propertyPath,
  errors = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1801034940(
      key,
      `${propertyPath}.$key[${key}]`,
      errors,
    );
    if (genericKey !== undefined) {
      result[genericKey] = anonymousValidator1985175360(
        value[key],
        `${propertyPath}.$value[${key}]`,
        errors,
      );
    }
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {Object<string, Object<string, CodeGenType>>|undefined}
 */
export function anonymousValidator1207910150(
  value,
  propertyPath,
  errors = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator1801034940(
      key,
      `${propertyPath}.$key[${key}]`,
      errors,
    );
    if (genericKey !== undefined) {
      result[genericKey] = anonymousValidator2095439669(
        value[key],
        `${propertyPath}.$value[${key}]`,
        errors,
      );
    }
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"relativePath": string, "contents": string, }|undefined}
 */
export function anonymousValidator1192877590(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  result["relativePath"] = anonymousValidator1801034940(
    value["relativePath"],
    `${propertyPath}.relativePath`,
    errors,
  );
  keySet.delete("relativePath");
  result["contents"] = anonymousValidator1801034940(
    value["contents"],
    `${propertyPath}.contents`,
    errors,
  );
  keySet.delete("contents");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {(CodeGenFile)[]|undefined}
 */
export function anonymousValidator753804591(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1192877590(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlMissingPrimaryKey", "typeName": string, }|undefined}
 */
export function anonymousValidator1503040121(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  if (value["key"] !== "sqlMissingPrimaryKey") {
    const parentType = "string";
    const oneOf = ["sqlMissingPrimaryKey"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.key`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["key"] = value["key"];
  keySet.delete("key");
  result["typeName"] = anonymousValidator1801034940(
    value["typeName"],
    `${propertyPath}.typeName`,
    errors,
  );
  keySet.delete("typeName");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|undefined}
 */
export function anonymousValidator966425260(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  if (value["key"] !== "sqlForgotEnableQueries") {
    const parentType = "string";
    const oneOf = ["sqlForgotEnableQueries"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.key`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["key"] = value["key"];
  keySet.delete("key");
  result["typeName"] = anonymousValidator1801034940(
    value["typeName"],
    `${propertyPath}.typeName`,
    errors,
  );
  keySet.delete("typeName");
  result["referencedByType"] = anonymousValidator1801034940(
    value["referencedByType"],
    `${propertyPath}.referencedByType`,
    errors,
  );
  keySet.delete("referencedByType");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|undefined}
 */
export function anonymousValidator1239750152(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  if (value["key"] !== "sqlMissingOneToMany") {
    const parentType = "string";
    const oneOf = ["sqlMissingOneToMany"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.key`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["key"] = value["key"];
  keySet.delete("key");
  result["referencedByGroup"] = anonymousValidator1801034940(
    value["referencedByGroup"],
    `${propertyPath}.referencedByGroup`,
    errors,
  );
  keySet.delete("referencedByGroup");
  result["referencedByType"] = anonymousValidator1801034940(
    value["referencedByType"],
    `${propertyPath}.referencedByType`,
    errors,
  );
  keySet.delete("referencedByType");
  result["typeName"] = anonymousValidator1801034940(
    value["typeName"],
    `${propertyPath}.typeName`,
    errors,
  );
  keySet.delete("typeName");
  result["relationOwnKey"] = anonymousValidator1801034940(
    value["relationOwnKey"],
    `${propertyPath}.relationOwnKey`,
    errors,
  );
  keySet.delete("relationOwnKey");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|undefined}
 */
export function anonymousValidator149646704(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator1503040121(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator966425260(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  result = anonymousValidator1239750152(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  errors.push(
    buildError(parentType, "type", { propertyPath, errors: subErrors }),
  );
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {({"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, })[]|undefined}
 */
export function anonymousValidator1017675387(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator149646704(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"options": CodeGenGenerateOpts, "structure": CodeGenStructure, "extension": ".js"|".ts", "importExtension": string, "outputFiles": (CodeGenFile)[], "rootExports": (string)[], "errors": ({"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, })[], }|undefined}
 */
export function anonymousValidator511866956(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  result["options"] = anonymousValidator1311847056(
    value["options"],
    `${propertyPath}.options`,
    errors,
  );
  keySet.delete("options");
  result["structure"] = anonymousValidator1207910150(
    value["structure"],
    `${propertyPath}.structure`,
    errors,
  );
  keySet.delete("structure");
  if (value["extension"] !== ".js" && value["extension"] !== ".ts") {
    const parentType = "string";
    const oneOf = [".js", ".ts"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.extension`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["extension"] = value["extension"];
  keySet.delete("extension");
  result["importExtension"] = anonymousValidator1801034940(
    value["importExtension"],
    `${propertyPath}.importExtension`,
    errors,
  );
  keySet.delete("importExtension");
  result["outputFiles"] = anonymousValidator753804591(
    value["outputFiles"],
    `${propertyPath}.outputFiles`,
    errors,
  );
  keySet.delete("outputFiles");
  result["rootExports"] = anonymousValidator376609007(
    value["rootExports"],
    `${propertyPath}.rootExports`,
    errors,
  );
  keySet.delete("rootExports");
  result["errors"] = anonymousValidator1017675387(
    value["errors"],
    `${propertyPath}.errors`,
    errors,
  );
  keySet.delete("errors");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"phase": "init"|"collect"|"finish", }|undefined}
 */
export function anonymousValidator427792324(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  if (
    value["phase"] !== "init" &&
    value["phase"] !== "collect" &&
    value["phase"] !== "finish"
  ) {
    const parentType = "string";
    const oneOf = ["init", "collect", "finish"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.phase`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["phase"] = value["phase"];
  keySet.delete("phase");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {*[]} errors
 * @param {string} parentType
 * @returns {{"isJSON"?: boolean, "nestedIsJSON"?: boolean, "useDefaults"?: boolean, "useTypescript"?: boolean, "isNode"?: boolean, "isBrowser"?: boolean, "suffix"?: string, "fileTypeIO"?: "input"|"outputRouter"|"outputClient", }|undefined}
 */
export function anonymousValidator2093265039(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push(buildError(parentType, "undefined", { propertyPath }));
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push(buildError(parentType, "type", { propertyPath }));
    return undefined;
  }
  const result = Object.create(null);
  const keySet = new Set(Object.keys(value));
  result["isJSON"] = anonymousValidator334567203(
    value["isJSON"],
    `${propertyPath}.isJSON`,
    errors,
  );
  keySet.delete("isJSON");
  result["nestedIsJSON"] = anonymousValidator334567203(
    value["nestedIsJSON"],
    `${propertyPath}.nestedIsJSON`,
    errors,
  );
  keySet.delete("nestedIsJSON");
  result["useDefaults"] = anonymousValidator334567203(
    value["useDefaults"],
    `${propertyPath}.useDefaults`,
    errors,
  );
  keySet.delete("useDefaults");
  result["useTypescript"] = anonymousValidator334567203(
    value["useTypescript"],
    `${propertyPath}.useTypescript`,
    errors,
  );
  keySet.delete("useTypescript");
  result["isNode"] = anonymousValidator334567203(
    value["isNode"],
    `${propertyPath}.isNode`,
    errors,
  );
  keySet.delete("isNode");
  result["isBrowser"] = anonymousValidator334567203(
    value["isBrowser"],
    `${propertyPath}.isBrowser`,
    errors,
  );
  keySet.delete("isBrowser");
  result["suffix"] = anonymousValidator69329591(
    value["suffix"],
    `${propertyPath}.suffix`,
    errors,
  );
  keySet.delete("suffix");
  if (
    value["fileTypeIO"] !== "input" &&
    value["fileTypeIO"] !== "outputRouter" &&
    value["fileTypeIO"] !== "outputClient" &&
    value["fileTypeIO"] !== undefined
  ) {
    const parentType = "string";
    const oneOf = ["input", "outputRouter", "outputClient"];
    errors.push(
      buildError(parentType, "oneOf", {
        propertyPath: `${propertyPath}.fileTypeIO`,
        oneOf,
      }),
    );
    return undefined;
  }
  result["fileTypeIO"] = value["fileTypeIO"];
  keySet.delete("fileTypeIO");
  if (keySet.size !== 0) {
    const extraKeys = [...keySet];
    errors.push(buildError(parentType, "strict", { propertyPath, extraKeys }));
    return undefined;
  }
  return result;
}
