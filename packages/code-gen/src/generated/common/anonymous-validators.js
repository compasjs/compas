// @ts-nocheck
// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

const objectKeys815277285 = new Set(["uniqueName", "group", "name"]);
const objectKeys980814292 = new Set([
  "options",
  "structure",
  "extension",
  "importExtension",
  "outputFiles",
  "errors",
]);
const objectKeys2069957416 = new Set([
  "enabledGroups",
  "isBrowser",
  "isNode",
  "isNodeServer",
  "enabledGenerators",
  "useTypescript",
  "dumpStructure",
  "dumpApiStructure",
  "dumpPostgres",
  "fileHeader",
  "outputDirectory",
]);
const objectKeys682118687 = new Set(["relativePath", "contents"]);
const objectKeys1045315509 = new Set(["key", "typeName"]);
const objectKeys564383959 = new Set(["key", "typeName", "referencedByType"]);
const objectKeys210116167 = new Set([
  "key",
  "referencedByGroup",
  "referencedByType",
  "typeName",
  "relationOwnKey",
]);
const objectKeys1331366345 = new Set([
  "key",
  "type",
  "referencedType",
  "ownKey",
]);
const objectKeys2008271825 = new Set(["key"]);
const objectKeys914281176 = new Set([
  "key",
  "shortName",
  "firstName",
  "secondName",
]);
const objectKeys40811832 = new Set(["key", "type", "ownKey"]);
const objectKeys451802958 = new Set(["key", "groupName"]);
const objectKeys1664519436 = new Set(["phase"]);
const objectKeys1287070944 = new Set([
  "isJSON",
  "nestedIsJSON",
  "useDefaults",
  "useTypescript",
  "isNode",
  "isBrowser",
  "suffix",
  "fileTypeIO",
]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "anyOf", errors?: InternalError[] }}
 */
export function anonymousValidator611235225(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "anyOf") {
    const oneOf = ["anyOf"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator2115758866(value, propertyPath) {
  if (isNil(value)) {
    return { value: "" };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return { value: "" };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: boolean, errors?: InternalError[] }}
 */
export function anonymousValidator1174857441(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator657675998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: boolean, errors?: InternalError[] }}
 */
export function anonymousValidator2047524467(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator293751998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string|boolean|number, errors?: InternalError[] }}
 */
export function anonymousValidator219305298(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  let errors = [];
  /** @type {{ value?: undefined|string|boolean|number, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator657675998(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator2047524467(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator293751998(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string, errors?: InternalError[] }}
 */
export function anonymousValidator1443576836(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator368068670(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val314765822 = anonymousValidator1174857441(
    value["primary"],
    `${propertyPath}.primary`,
  );
  if (val314765822.errors) {
    errors = errors.concat(val314765822.errors.flat(2));
  } else {
    result["primary"] = val314765822.value;
  }
  const val710088958 = anonymousValidator1174857441(
    value["searchable"],
    `${propertyPath}.searchable`,
  );
  if (val710088958.errors) {
    errors = errors.concat(val710088958.errors.flat(2));
  } else {
    result["searchable"] = val710088958.value;
  }
  const val495606634 = anonymousValidator1174857441(
    value["hasDefaultValue"],
    `${propertyPath}.hasDefaultValue`,
  );
  if (val495606634.errors) {
    errors = errors.concat(val495606634.errors.flat(2));
  } else {
    result["hasDefaultValue"] = val495606634.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {}, errors?: InternalError[] }}
 */
export function anonymousValidator1963780689(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  const errors = [];
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "any", errors?: InternalError[] }}
 */
export function anonymousValidator1269951810(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "any") {
    const oneOf = ["any"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"allowNull": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator942201043(value, propertyPath) {
  if (isNil(value)) {
    return { value: { allowNull: false } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val371855472 = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
  );
  if (val371855472.errors) {
    errors = errors.concat(val371855472.errors.flat(2));
  } else {
    result["allowNull"] = val371855472.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, errors?: InternalError[] }}
 */
export function anonymousValidator1282254259(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val727136883 = anonymousValidator1443576836(
    value["javaScript"],
    `${propertyPath}.javaScript`,
  );
  if (val727136883.errors) {
    errors = errors.concat(val727136883.errors.flat(2));
  } else {
    result["javaScript"] = val727136883.value;
  }
  const val1438418779 = anonymousValidator1443576836(
    value["typeScript"],
    `${propertyPath}.typeScript`,
  );
  if (val1438418779.errors) {
    errors = errors.concat(val1438418779.errors.flat(2));
  } else {
    result["typeScript"] = val1438418779.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "any", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, "rawValue"?: undefined|string, "rawValueImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, "rawValidator"?: undefined|string, "rawValidatorImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, }, errors?: InternalError[] }}
 */
export function anonymousValidator1519740867(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator1269951810(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator942201043(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val494715433 = anonymousValidator1443576836(
    value["rawValue"],
    `${propertyPath}.rawValue`,
  );
  if (val494715433.errors) {
    errors = errors.concat(val494715433.errors.flat(2));
  } else {
    result["rawValue"] = val494715433.value;
  }
  const val2062999762 = anonymousValidator1282254259(
    value["rawValueImport"],
    `${propertyPath}.rawValueImport`,
  );
  if (val2062999762.errors) {
    errors = errors.concat(val2062999762.errors.flat(2));
  } else {
    result["rawValueImport"] = val2062999762.value;
  }
  const val1691148278 = anonymousValidator1443576836(
    value["rawValidator"],
    `${propertyPath}.rawValidator`,
  );
  if (val1691148278.errors) {
    errors = errors.concat(val1691148278.errors.flat(2));
  } else {
    result["rawValidator"] = val1691148278.value;
  }
  const val2078289841 = anonymousValidator1282254259(
    value["rawValidatorImport"],
    `${propertyPath}.rawValidatorImport`,
  );
  if (val2078289841.errors) {
    errors = errors.concat(val2078289841.errors.flat(2));
  } else {
    result["rawValidatorImport"] = val2078289841.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "array", errors?: InternalError[] }}
 */
export function anonymousValidator1539402447(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "array") {
    const oneOf = ["array"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|number, errors?: InternalError[] }}
 */
export function anonymousValidator963028965(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }, errors?: InternalError[] }}
 */
export function anonymousValidator914179656(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val951590323 = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
  );
  if (val951590323.errors) {
    errors = errors.concat(val951590323.errors.flat(2));
  } else {
    result["convert"] = val951590323.value;
  }
  const val108114 = anonymousValidator963028965(
    value["min"],
    `${propertyPath}.min`,
  );
  if (val108114.errors) {
    errors = errors.concat(val108114.errors.flat(2));
  } else {
    result["min"] = val108114.value;
  }
  const val107876 = anonymousValidator963028965(
    value["max"],
    `${propertyPath}.max`,
  );
  if (val107876.errors) {
    errors = errors.concat(val107876.errors.flat(2));
  } else {
    result["max"] = val107876.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "array", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }, "internalSettings": {}, "values": CodeGenType, }, errors?: InternalError[] }}
 */
export function anonymousValidator1312175728(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator1539402447(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator914179656(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val823812830 = anonymousValidator682551261(
    value["values"],
    `${propertyPath}.values`,
  );
  if (val823812830.errors) {
    errors = errors.concat(val823812830.errors.flat(2));
  } else {
    result["values"] = val823812830.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "boolean", errors?: InternalError[] }}
 */
export function anonymousValidator1240956158(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "boolean") {
    const oneOf = ["boolean"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"convert": boolean, "allowNull": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator1064911095(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val951590323 = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
  );
  if (val951590323.errors) {
    errors = errors.concat(val951590323.errors.flat(2));
  } else {
    result["convert"] = val951590323.value;
  }
  const val371855472 = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
  );
  if (val371855472.errors) {
    errors = errors.concat(val371855472.errors.flat(2));
  } else {
    result["allowNull"] = val371855472.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|boolean, errors?: InternalError[] }}
 */
export function anonymousValidator196147222(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "boolean", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "allowNull": boolean, }, "internalSettings": {}, "oneOf"?: undefined|boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator17476225(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator1240956158(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator1064911095(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val105887453 = anonymousValidator196147222(
    value["oneOf"],
    `${propertyPath}.oneOf`,
  );
  if (val105887453.errors) {
    errors = errors.concat(val105887453.errors.flat(2));
  } else {
    result["oneOf"] = val105887453.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "date", errors?: InternalError[] }}
 */
export function anonymousValidator1573852460(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "date") {
    const oneOf = ["date"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string, errors?: InternalError[] }}
 */
export function anonymousValidator852571656(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 24) {
    const min = 24;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 29) {
    const max = 29;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  if (
    !/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/gi.test(
      value,
    )
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|Date, errors?: InternalError[] }}
 */
export function anonymousValidator1988053796(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  let date = new Date(value);
  if (typeof value === "string") {
    value = anonymousValidator852571656(value, propertyPath);
    if (value.errors) {
      return value;
    }
    if (!value.value) {
      return { value: value.value };
    }
    date = new Date(value.value);
  }
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator517837192(value, propertyPath) {
  if (isNil(value)) {
    return { value: { allowNull: false } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val371855472 = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
  );
  if (val371855472.errors) {
    errors = errors.concat(val371855472.errors.flat(2));
  } else {
    result["allowNull"] = val371855472.value;
  }
  const val108114 = anonymousValidator1988053796(
    value["min"],
    `${propertyPath}.min`,
  );
  if (val108114.errors) {
    errors = errors.concat(val108114.errors.flat(2));
  } else {
    result["min"] = val108114.value;
  }
  const val107876 = anonymousValidator1988053796(
    value["max"],
    `${propertyPath}.max`,
  );
  if (val107876.errors) {
    errors = errors.concat(val107876.errors.flat(2));
  } else {
    result["max"] = val107876.value;
  }
  const val731687096 = anonymousValidator196147222(
    value["inFuture"],
    `${propertyPath}.inFuture`,
  );
  if (val731687096.errors) {
    errors = errors.concat(val731687096.errors.flat(2));
  } else {
    result["inFuture"] = val731687096.value;
  }
  const val1184838953 = anonymousValidator196147222(
    value["inPast"],
    `${propertyPath}.inPast`,
  );
  if (val1184838953.errors) {
    errors = errors.concat(val1184838953.errors.flat(2));
  } else {
    result["inPast"] = val1184838953.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "date", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }, "internalSettings": {}, }, errors?: InternalError[] }}
 */
export function anonymousValidator2019605291(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator1573852460(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator517837192(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "file", errors?: InternalError[] }}
 */
export function anonymousValidator724462434(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "file") {
    const oneOf = ["file"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator186795873(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(string)[], errors?: InternalError[] }}
 */
export function anonymousValidator890105892(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"mimeTypes"?: undefined|(string)[], }, errors?: InternalError[] }}
 */
export function anonymousValidator889761232(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val206060379 = anonymousValidator890105892(
    value["mimeTypes"],
    `${propertyPath}.mimeTypes`,
  );
  if (val206060379.errors) {
    errors = errors.concat(val206060379.errors.flat(2));
  } else {
    result["mimeTypes"] = val206060379.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "file", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"mimeTypes"?: undefined|(string)[], }, "internalSettings": {}, }, errors?: InternalError[] }}
 */
export function anonymousValidator508679687(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator724462434(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator889761232(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "generic", errors?: InternalError[] }}
 */
export function anonymousValidator315010317(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "generic") {
    const oneOf = ["generic"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "generic", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "keys": CodeGenType, "values": CodeGenType, }, errors?: InternalError[] }}
 */
export function anonymousValidator1377926226(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator315010317(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val3288564 = anonymousValidator682551261(
    value["keys"],
    `${propertyPath}.keys`,
  );
  if (val3288564.errors) {
    errors = errors.concat(val3288564.errors.flat(2));
  } else {
    result["keys"] = val3288564.value;
  }
  const val823812830 = anonymousValidator682551261(
    value["values"],
    `${propertyPath}.values`,
  );
  if (val823812830.errors) {
    errors = errors.concat(val823812830.errors.flat(2));
  } else {
    result["values"] = val823812830.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "number", errors?: InternalError[] }}
 */
export function anonymousValidator1695510095(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "number") {
    const oneOf = ["number"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator1608555242(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val951590323 = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
  );
  if (val951590323.errors) {
    errors = errors.concat(val951590323.errors.flat(2));
  } else {
    result["convert"] = val951590323.value;
  }
  const val1613926102 = anonymousValidator1174857441(
    value["floatingPoint"],
    `${propertyPath}.floatingPoint`,
  );
  if (val1613926102.errors) {
    errors = errors.concat(val1613926102.errors.flat(2));
  } else {
    result["floatingPoint"] = val1613926102.value;
  }
  const val108114 = anonymousValidator963028965(
    value["min"],
    `${propertyPath}.min`,
  );
  if (val108114.errors) {
    errors = errors.concat(val108114.errors.flat(2));
  } else {
    result["min"] = val108114.value;
  }
  const val107876 = anonymousValidator963028965(
    value["max"],
    `${propertyPath}.max`,
  );
  if (val107876.errors) {
    errors = errors.concat(val107876.errors.flat(2));
  } else {
    result["max"] = val107876.value;
  }
  const val371855472 = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
  );
  if (val371855472.errors) {
    errors = errors.concat(val371855472.errors.flat(2));
  } else {
    result["allowNull"] = val371855472.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(number)[], errors?: InternalError[] }}
 */
export function anonymousValidator1370653763(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator293751998(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "number", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }, "internalSettings": {}, "oneOf"?: undefined|(number)[], }, errors?: InternalError[] }}
 */
export function anonymousValidator1441913722(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator1695510095(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator1608555242(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val105887453 = anonymousValidator1370653763(
    value["oneOf"],
    `${propertyPath}.oneOf`,
  );
  if (val105887453.errors) {
    errors = errors.concat(val105887453.errors.flat(2));
  } else {
    result["oneOf"] = val105887453.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "object", errors?: InternalError[] }}
 */
export function anonymousValidator540066309(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "object") {
    const oneOf = ["object"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: boolean, errors?: InternalError[] }}
 */
export function anonymousValidator801301862(value, propertyPath) {
  if (isNil(value)) {
    return { value: true };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"allowNull": boolean, "strict": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator438930840(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val371855472 = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
  );
  if (val371855472.errors) {
    errors = errors.concat(val371855472.errors.flat(2));
  } else {
    result["allowNull"] = val371855472.value;
  }
  const val891986231 = anonymousValidator801301862(
    value["strict"],
    `${propertyPath}.strict`,
  );
  if (val891986231.errors) {
    errors = errors.concat(val891986231.errors.flat(2));
  } else {
    result["strict"] = val891986231.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: { [ key: string]:CodeGenType}, errors?: InternalError[] }}
 */
export function anonymousValidator1529527338(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator186795873(
      key,
      `${propertyPath}.$key[${key}]`,
    );
    if (genericKey.errors) {
      errors = errors.concat(genericKey.errors.flat(2));
      continue;
    }
    const genericValue = anonymousValidator682551261(
      value[key],
      `${propertyPath}.$value[${key}]`,
    );
    if (genericValue.errors) {
      errors = errors.concat(genericValue.errors.flat(2));
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, "schema": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator1454543746(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val1284665352 = anonymousValidator1174857441(
    value["withSoftDeletes"],
    `${propertyPath}.withSoftDeletes`,
  );
  if (val1284665352.errors) {
    errors = errors.concat(val1284665352.errors.flat(2));
  } else {
    result["withSoftDeletes"] = val1284665352.value;
  }
  const val887222623 = anonymousValidator1174857441(
    value["withDates"],
    `${propertyPath}.withDates`,
  );
  if (val887222623.errors) {
    errors = errors.concat(val887222623.errors.flat(2));
  } else {
    result["withDates"] = val887222623.value;
  }
  const val166588829 = anonymousValidator801301862(
    value["withPrimaryKey"],
    `${propertyPath}.withPrimaryKey`,
  );
  if (val166588829.errors) {
    errors = errors.concat(val166588829.errors.flat(2));
  } else {
    result["withPrimaryKey"] = val166588829.value;
  }
  const val1180035345 = anonymousValidator1174857441(
    value["isView"],
    `${propertyPath}.isView`,
  );
  if (val1180035345.errors) {
    errors = errors.concat(val1180035345.errors.flat(2));
  } else {
    result["isView"] = val1180035345.value;
  }
  const val907987551 = anonymousValidator2115758866(
    value["schema"],
    `${propertyPath}.schema`,
  );
  if (val907987551.errors) {
    errors = errors.concat(val907987551.errors.flat(2));
  } else {
    result["schema"] = val907987551.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "relation", errors?: InternalError[] }}
 */
export function anonymousValidator1035049954(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "relation") {
    const oneOf = ["relation"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse", errors?: InternalError[] }}
 */
export function anonymousValidator664918956(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "manyToOne" &&
    value !== "oneToMany" &&
    value !== "oneToOne" &&
    value !== "oneToOneReverse"
  ) {
    const oneOf = ["manyToOne", "oneToMany", "oneToOne", "oneToOneReverse"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "reference", errors?: InternalError[] }}
 */
export function anonymousValidator2034870015(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "reference") {
    const oneOf = ["reference"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }, errors?: InternalError[] }}
 */
export function anonymousValidator815277285(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys815277285.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: CodeGenType|{"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }, errors?: InternalError[] }}
 */
export function anonymousValidator2139331922(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: CodeGenType|{"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator682551261(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator815277285(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "reference", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "reference": CodeGenType|{"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }, }, errors?: InternalError[] }}
 */
export function anonymousValidator127554530(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator2034870015(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val925155509 = anonymousValidator2139331922(
    value["reference"],
    `${propertyPath}.reference`,
  );
  if (val925155509.errors) {
    errors = errors.concat(val925155509.errors.flat(2));
  } else {
    result["reference"] = val925155509.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "relation", "subType": "manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse", "reference": CodeGenReferenceType, "ownKey": string, "referencedKey"?: undefined|string, "isOptional": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator243901689(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator1035049954(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val1868521062 = anonymousValidator664918956(
    value["subType"],
    `${propertyPath}.subType`,
  );
  if (val1868521062.errors) {
    errors = errors.concat(val1868521062.errors.flat(2));
  } else {
    result["subType"] = val1868521062.value;
  }
  const val925155509 = anonymousValidator127554530(
    value["reference"],
    `${propertyPath}.reference`,
  );
  if (val925155509.errors) {
    errors = errors.concat(val925155509.errors.flat(2));
  } else {
    result["reference"] = val925155509.value;
  }
  const val1003880199 = anonymousValidator186795873(
    value["ownKey"],
    `${propertyPath}.ownKey`,
  );
  if (val1003880199.errors) {
    errors = errors.concat(val1003880199.errors.flat(2));
  } else {
    result["ownKey"] = val1003880199.value;
  }
  const val1601387814 = anonymousValidator1443576836(
    value["referencedKey"],
    `${propertyPath}.referencedKey`,
  );
  if (val1601387814.errors) {
    errors = errors.concat(val1601387814.errors.flat(2));
  } else {
    result["referencedKey"] = val1601387814.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: (CodeGenRelationType)[], errors?: InternalError[] }}
 */
export function anonymousValidator1064092154(value, propertyPath) {
  if (isNil(value)) {
    return { value: [] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator243901689(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", errors?: InternalError[] }}
 */
export function anonymousValidator538147770(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "equal" &&
    value !== "notEqual" &&
    value !== "in" &&
    value !== "notIn" &&
    value !== "greaterThan" &&
    value !== "lowerThan" &&
    value !== "isNull" &&
    value !== "isNotNull" &&
    value !== "includeNotNull" &&
    value !== "like" &&
    value !== "iLike" &&
    value !== "notLike" &&
    value !== "exists" &&
    value !== "notExists"
  ) {
    const oneOf = [
      "equal",
      "notEqual",
      "in",
      "notIn",
      "greaterThan",
      "lowerThan",
      "isNull",
      "isNotNull",
      "includeNotNull",
      "like",
      "iLike",
      "notLike",
      "exists",
      "notExists",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", }, errors?: InternalError[] }}
 */
export function anonymousValidator726016308(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val106079 = anonymousValidator186795873(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val3373707 = anonymousValidator186795873(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val1347706554 = anonymousValidator1174857441(
    value["isRelation"],
    `${propertyPath}.isRelation`,
  );
  if (val1347706554.errors) {
    errors = errors.concat(val1347706554.errors.flat(2));
  } else {
    result["isRelation"] = val1347706554.value;
  }
  const val236785797 = anonymousValidator538147770(
    value["variant"],
    `${propertyPath}.variant`,
  );
  if (val236785797.errors) {
    errors = errors.concat(val236785797.errors.flat(2));
  } else {
    result["variant"] = val236785797.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ({"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", })[], errors?: InternalError[] }}
 */
export function anonymousValidator718135986(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator726016308(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|{"type": string, "rawType": CodeGenObjectType, "fields": ({"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", })[], }, errors?: InternalError[] }}
 */
export function anonymousValidator1907823387(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val985753474 = anonymousValidator17105276(
    value["rawType"],
    `${propertyPath}.rawType`,
  );
  if (val985753474.errors) {
    errors = errors.concat(val985753474.errors.flat(2));
  } else {
    result["rawType"] = val985753474.value;
  }
  const val1274708295 = anonymousValidator718135986(
    value["fields"],
    `${propertyPath}.fields`,
  );
  if (val1274708295.errors) {
    errors = errors.concat(val1274708295.errors.flat(2));
  } else {
    result["fields"] = val1274708295.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": string, "optional": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator244788999(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val106079 = anonymousValidator186795873(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val79017120 = anonymousValidator2047524467(
    value["optional"],
    `${propertyPath}.optional`,
  );
  if (val79017120.errors) {
    errors = errors.concat(val79017120.errors.flat(2));
  } else {
    result["optional"] = val79017120.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ({"key": string, "optional": boolean, })[], errors?: InternalError[] }}
 */
export function anonymousValidator273243195(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator244788999(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|{"type": string, "specType": string, "fields": ({"key": string, "optional": boolean, })[], }, errors?: InternalError[] }}
 */
export function anonymousValidator1449958994(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val2133482091 = anonymousValidator186795873(
    value["specType"],
    `${propertyPath}.specType`,
  );
  if (val2133482091.errors) {
    errors = errors.concat(val2133482091.errors.flat(2));
  } else {
    result["specType"] = val2133482091.value;
  }
  const val1274708295 = anonymousValidator273243195(
    value["fields"],
    `${propertyPath}.fields`,
  );
  if (val1274708295.errors) {
    errors = errors.concat(val1274708295.errors.flat(2));
  } else {
    result["fields"] = val1274708295.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator1218262237(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val106079 = anonymousValidator186795873(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val659125328 = anonymousValidator1443576836(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val359226675 = anonymousValidator1174857441(
    value["hasSqlDefault"],
    `${propertyPath}.hasSqlDefault`,
  );
  if (val359226675.errors) {
    errors = errors.concat(val359226675.errors.flat(2));
  } else {
    result["hasSqlDefault"] = val359226675.value;
  }
  const val2062835056 = anonymousValidator1174857441(
    value["isJsonb"],
    `${propertyPath}.isJsonb`,
  );
  if (val2062835056.errors) {
    errors = errors.concat(val2062835056.errors.flat(2));
  } else {
    result["isJsonb"] = val2062835056.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ({"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, })[], errors?: InternalError[] }}
 */
export function anonymousValidator1906374053(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1218262237(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, })[], }, errors?: InternalError[] }}
 */
export function anonymousValidator1837423837(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val966181267 = anonymousValidator186795873(
    value["insertType"],
    `${propertyPath}.insertType`,
  );
  if (val966181267.errors) {
    errors = errors.concat(val966181267.errors.flat(2));
  } else {
    result["insertType"] = val966181267.value;
  }
  const val295915613 = anonymousValidator186795873(
    value["updateType"],
    `${propertyPath}.updateType`,
  );
  if (val295915613.errors) {
    errors = errors.concat(val295915613.errors.flat(2));
  } else {
    result["updateType"] = val295915613.value;
  }
  const val1274708295 = anonymousValidator1906374053(
    value["fields"],
    `${propertyPath}.fields`,
  );
  if (val1274708295.errors) {
    errors = errors.concat(val1274708295.errors.flat(2));
  } else {
    result["fields"] = val1274708295.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "object", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, "strict": boolean, }, "internalSettings": {}, "shortName"?: undefined|string, "keys": { [ key: string]:CodeGenType}, "enableQueries": boolean, "queryOptions"?: undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, "schema": string, }, "relations": (CodeGenRelationType)[], "where"?: undefined|{"type": string, "rawType": CodeGenObjectType, "fields": ({"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", })[], }, "orderBy"?: undefined|{"type": string, "specType": string, "fields": ({"key": string, "optional": boolean, })[], }, "partial"?: undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, })[], }, }, errors?: InternalError[] }}
 */
export function anonymousValidator17105276(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator540066309(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator438930840(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val2028219097 = anonymousValidator1443576836(
    value["shortName"],
    `${propertyPath}.shortName`,
  );
  if (val2028219097.errors) {
    errors = errors.concat(val2028219097.errors.flat(2));
  } else {
    result["shortName"] = val2028219097.value;
  }
  const val3288564 = anonymousValidator1529527338(
    value["keys"],
    `${propertyPath}.keys`,
  );
  if (val3288564.errors) {
    errors = errors.concat(val3288564.errors.flat(2));
  } else {
    result["keys"] = val3288564.value;
  }
  const val1774559331 = anonymousValidator1174857441(
    value["enableQueries"],
    `${propertyPath}.enableQueries`,
  );
  if (val1774559331.errors) {
    errors = errors.concat(val1774559331.errors.flat(2));
  } else {
    result["enableQueries"] = val1774559331.value;
  }
  const val193991862 = anonymousValidator1454543746(
    value["queryOptions"],
    `${propertyPath}.queryOptions`,
  );
  if (val193991862.errors) {
    errors = errors.concat(val193991862.errors.flat(2));
  } else {
    result["queryOptions"] = val193991862.value;
  }
  const val7649801 = anonymousValidator1064092154(
    value["relations"],
    `${propertyPath}.relations`,
  );
  if (val7649801.errors) {
    errors = errors.concat(val7649801.errors.flat(2));
  } else {
    result["relations"] = val7649801.value;
  }
  const val113097959 = anonymousValidator1907823387(
    value["where"],
    `${propertyPath}.where`,
  );
  if (val113097959.errors) {
    errors = errors.concat(val113097959.errors.flat(2));
  } else {
    result["where"] = val113097959.value;
  }
  const val1207110587 = anonymousValidator1449958994(
    value["orderBy"],
    `${propertyPath}.orderBy`,
  );
  if (val1207110587.errors) {
    errors = errors.concat(val1207110587.errors.flat(2));
  } else {
    result["orderBy"] = val1207110587.value;
  }
  const val792934015 = anonymousValidator1837423837(
    value["partial"],
    `${propertyPath}.partial`,
  );
  if (val792934015.errors) {
    errors = errors.concat(val792934015.errors.flat(2));
  } else {
    result["partial"] = val792934015.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "string", errors?: InternalError[] }}
 */
export function anonymousValidator760248297(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "string") {
    const oneOf = ["string"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator731977090(value, propertyPath) {
  if (isNil(value)) {
    return { value: 1 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator1503038347(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 2) {
    const max = 2;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|(string)[], errors?: InternalError[] }}
 */
export function anonymousValidator623734288(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1503038347(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }, errors?: InternalError[] }}
 */
export function anonymousValidator981840544(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val951590323 = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
  );
  if (val951590323.errors) {
    errors = errors.concat(val951590323.errors.flat(2));
  } else {
    result["convert"] = val951590323.value;
  }
  const val3568674 = anonymousValidator1174857441(
    value["trim"],
    `${propertyPath}.trim`,
  );
  if (val3568674.errors) {
    errors = errors.concat(val3568674.errors.flat(2));
  } else {
    result["trim"] = val3568674.value;
  }
  const val515460655 = anonymousValidator1174857441(
    value["lowerCase"],
    `${propertyPath}.lowerCase`,
  );
  if (val515460655.errors) {
    errors = errors.concat(val515460655.errors.flat(2));
  } else {
    result["lowerCase"] = val515460655.value;
  }
  const val222570226 = anonymousValidator1174857441(
    value["upperCase"],
    `${propertyPath}.upperCase`,
  );
  if (val222570226.errors) {
    errors = errors.concat(val222570226.errors.flat(2));
  } else {
    result["upperCase"] = val222570226.value;
  }
  const val108114 = anonymousValidator731977090(
    value["min"],
    `${propertyPath}.min`,
  );
  if (val108114.errors) {
    errors = errors.concat(val108114.errors.flat(2));
  } else {
    result["min"] = val108114.value;
  }
  const val107876 = anonymousValidator963028965(
    value["max"],
    `${propertyPath}.max`,
  );
  if (val107876.errors) {
    errors = errors.concat(val107876.errors.flat(2));
  } else {
    result["max"] = val107876.value;
  }
  const val791090288 = anonymousValidator1443576836(
    value["pattern"],
    `${propertyPath}.pattern`,
  );
  if (val791090288.errors) {
    errors = errors.concat(val791090288.errors.flat(2));
  } else {
    result["pattern"] = val791090288.value;
  }
  const val371855472 = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
  );
  if (val371855472.errors) {
    errors = errors.concat(val371855472.errors.flat(2));
  } else {
    result["allowNull"] = val371855472.value;
  }
  const val2019164316 = anonymousValidator623734288(
    value["disallowedCharacters"],
    `${propertyPath}.disallowedCharacters`,
  );
  if (val2019164316.errors) {
    errors = errors.concat(val2019164316.errors.flat(2));
  } else {
    result["disallowedCharacters"] = val2019164316.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "string", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }, "internalSettings": {}, "oneOf"?: undefined|(string)[], }, errors?: InternalError[] }}
 */
export function anonymousValidator1672152398(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator760248297(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator981840544(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val105887453 = anonymousValidator890105892(
    value["oneOf"],
    `${propertyPath}.oneOf`,
  );
  if (val105887453.errors) {
    errors = errors.concat(val105887453.errors.flat(2));
  } else {
    result["oneOf"] = val105887453.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "uuid", errors?: InternalError[] }}
 */
export function anonymousValidator43940351(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "uuid") {
    const oneOf = ["uuid"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "uuid", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, }, errors?: InternalError[] }}
 */
export function anonymousValidator1836970168(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator43940351(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator942201043(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "route", errors?: InternalError[] }}
 */
export function anonymousValidator241103039(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "route") {
    const oneOf = ["route"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|"json"|"form-data", errors?: InternalError[] }}
 */
export function anonymousValidator2066419866(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "json" && value !== "form-data") {
    const oneOf = ["json", "form-data"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"requestBodyType"?: undefined|"json"|"form-data", }, errors?: InternalError[] }}
 */
export function anonymousValidator1139247391(value, propertyPath) {
  if (isNil(value)) {
    return { value: { requestBodyType: "json" } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3279957 = anonymousValidator2066419866(
    value["requestBodyType"],
    `${propertyPath}.requestBodyType`,
  );
  if (val3279957.errors) {
    errors = errors.concat(val3279957.errors.flat(2));
  } else {
    result["requestBodyType"] = val3279957.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH", errors?: InternalError[] }}
 */
export function anonymousValidator1056430884(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "GET" &&
    value !== "POST" &&
    value !== "PUT" &&
    value !== "DELETE" &&
    value !== "HEAD" &&
    value !== "PATCH"
  ) {
    const oneOf = ["GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: (string)[], errors?: InternalError[] }}
 */
export function anonymousValidator1898391521(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|CodeGenType, errors?: InternalError[] }}
 */
export function anonymousValidator708039854(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator682551261(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "route", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {"requestBodyType"?: undefined|"json"|"form-data", }, "method": "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH", "idempotent": boolean, "path": string, "tags": (string)[], "query"?: undefined|CodeGenType, "params"?: undefined|CodeGenType, "body"?: undefined|CodeGenType, "files"?: undefined|CodeGenType, "response"?: undefined|CodeGenType, }, errors?: InternalError[] }}
 */
export function anonymousValidator1390215584(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator241103039(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1139247391(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val1077554975 = anonymousValidator1056430884(
    value["method"],
    `${propertyPath}.method`,
  );
  if (val1077554975.errors) {
    errors = errors.concat(val1077554975.errors.flat(2));
  } else {
    result["method"] = val1077554975.value;
  }
  const val1680468793 = anonymousValidator1174857441(
    value["idempotent"],
    `${propertyPath}.idempotent`,
  );
  if (val1680468793.errors) {
    errors = errors.concat(val1680468793.errors.flat(2));
  } else {
    result["idempotent"] = val1680468793.value;
  }
  const val3433509 = anonymousValidator186795873(
    value["path"],
    `${propertyPath}.path`,
  );
  if (val3433509.errors) {
    errors = errors.concat(val3433509.errors.flat(2));
  } else {
    result["path"] = val3433509.value;
  }
  const val3552281 = anonymousValidator1898391521(
    value["tags"],
    `${propertyPath}.tags`,
  );
  if (val3552281.errors) {
    errors = errors.concat(val3552281.errors.flat(2));
  } else {
    result["tags"] = val3552281.value;
  }
  const val107944136 = anonymousValidator708039854(
    value["query"],
    `${propertyPath}.query`,
  );
  if (val107944136.errors) {
    errors = errors.concat(val107944136.errors.flat(2));
  } else {
    result["query"] = val107944136.value;
  }
  const val995427962 = anonymousValidator708039854(
    value["params"],
    `${propertyPath}.params`,
  );
  if (val995427962.errors) {
    errors = errors.concat(val995427962.errors.flat(2));
  } else {
    result["params"] = val995427962.value;
  }
  const val3029410 = anonymousValidator708039854(
    value["body"],
    `${propertyPath}.body`,
  );
  if (val3029410.errors) {
    errors = errors.concat(val3029410.errors.flat(2));
  } else {
    result["body"] = val3029410.value;
  }
  const val97434231 = anonymousValidator708039854(
    value["files"],
    `${propertyPath}.files`,
  );
  if (val97434231.errors) {
    errors = errors.concat(val97434231.errors.flat(2));
  } else {
    result["files"] = val97434231.value;
  }
  const val340323263 = anonymousValidator708039854(
    value["response"],
    `${propertyPath}.response`,
  );
  if (val340323263.errors) {
    errors = errors.concat(val340323263.errors.flat(2));
  } else {
    result["response"] = val340323263.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: CodeGenAnyType|CodeGenAnyOfType|CodeGenArrayType|CodeGenBooleanType|CodeGenDateType|CodeGenFileType|CodeGenGenericType|CodeGenNumberType|CodeGenObjectType|CodeGenReferenceType|CodeGenRelationType|CodeGenStringType|CodeGenUuidType|CodeGenRouteType, errors?: InternalError[] }}
 */
export function anonymousValidator682551261(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: CodeGenAnyType|CodeGenAnyOfType|CodeGenArrayType|CodeGenBooleanType|CodeGenDateType|CodeGenFileType|CodeGenGenericType|CodeGenNumberType|CodeGenObjectType|CodeGenReferenceType|CodeGenRelationType|CodeGenStringType|CodeGenUuidType|CodeGenRouteType, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator1519740867(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator20588538(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1312175728(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator17476225(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator2019605291(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator508679687(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1377926226(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1441913722(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator17105276(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator127554530(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator243901689(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1672152398(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1836970168(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1390215584(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: (CodeGenType)[], errors?: InternalError[] }}
 */
export function anonymousValidator1978730633(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator682551261(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "anyOf", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "values": (CodeGenType)[], }, errors?: InternalError[] }}
 */
export function anonymousValidator20588538(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  const val3575610 = anonymousValidator611235225(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val23001239 = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
  );
  if (val23001239.errors) {
    errors = errors.concat(val23001239.errors.flat(2));
  } else {
    result["docString"] = val23001239.value;
  }
  const val872287574 = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val491727356 = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
  );
  if (val491727356.errors) {
    errors = errors.concat(val491727356.errors.flat(2));
  } else {
    result["uniqueName"] = val491727356.value;
  }
  const val98629247 = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
  );
  if (val98629247.errors) {
    errors = errors.concat(val98629247.errors.flat(2));
  } else {
    result["group"] = val98629247.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val114126 = anonymousValidator368068670(
    value["sql"],
    `${propertyPath}.sql`,
  );
  if (val114126.errors) {
    errors = errors.concat(val114126.errors.flat(2));
  } else {
    result["sql"] = val114126.value;
  }
  const val1109783726 = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
  );
  if (val1109783726.errors) {
    errors = errors.concat(val1109783726.errors.flat(2));
  } else {
    result["validator"] = val1109783726.value;
  }
  const val1891424768 = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
  );
  if (val1891424768.errors) {
    errors = errors.concat(val1891424768.errors.flat(2));
  } else {
    result["internalSettings"] = val1891424768.value;
  }
  const val823812830 = anonymousValidator1978730633(
    value["values"],
    `${propertyPath}.values`,
  );
  if (val823812830.errors) {
    errors = errors.concat(val823812830.errors.flat(2));
  } else {
    result["values"] = val823812830.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery", errors?: InternalError[] }}
 */
export function anonymousValidator1059407447(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "type" &&
    value !== "validator" &&
    value !== "router" &&
    value !== "sql" &&
    value !== "apiClient" &&
    value !== "reactQuery"
  ) {
    const oneOf = [
      "type",
      "validator",
      "router",
      "sql",
      "apiClient",
      "reactQuery",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ("type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery")[], errors?: InternalError[] }}
 */
export function anonymousValidator1173328807(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1059407447(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"enabledGroups": (string)[], "isBrowser": boolean, "isNode": boolean, "isNodeServer": boolean, "enabledGenerators": ("type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery")[], "useTypescript": boolean, "dumpStructure": boolean, "dumpApiStructure": boolean, "dumpPostgres": boolean, "fileHeader": string, "outputDirectory": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator2069957416(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2069957416.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val152247413 = anonymousValidator1898391521(
    value["enabledGroups"],
    `${propertyPath}.enabledGroups`,
  );
  if (val152247413.errors) {
    errors = errors.concat(val152247413.errors.flat(2));
  } else {
    result["enabledGroups"] = val152247413.value;
  }
  const val428838242 = anonymousValidator2047524467(
    value["isBrowser"],
    `${propertyPath}.isBrowser`,
  );
  if (val428838242.errors) {
    errors = errors.concat(val428838242.errors.flat(2));
  } else {
    result["isBrowser"] = val428838242.value;
  }
  const val1180267956 = anonymousValidator2047524467(
    value["isNode"],
    `${propertyPath}.isNode`,
  );
  if (val1180267956.errors) {
    errors = errors.concat(val1180267956.errors.flat(2));
  } else {
    result["isNode"] = val1180267956.value;
  }
  const val925385553 = anonymousValidator2047524467(
    value["isNodeServer"],
    `${propertyPath}.isNodeServer`,
  );
  if (val925385553.errors) {
    errors = errors.concat(val925385553.errors.flat(2));
  } else {
    result["isNodeServer"] = val925385553.value;
  }
  const val1652962783 = anonymousValidator1173328807(
    value["enabledGenerators"],
    `${propertyPath}.enabledGenerators`,
  );
  if (val1652962783.errors) {
    errors = errors.concat(val1652962783.errors.flat(2));
  } else {
    result["enabledGenerators"] = val1652962783.value;
  }
  const val1936051860 = anonymousValidator2047524467(
    value["useTypescript"],
    `${propertyPath}.useTypescript`,
  );
  if (val1936051860.errors) {
    errors = errors.concat(val1936051860.errors.flat(2));
  } else {
    result["useTypescript"] = val1936051860.value;
  }
  const val1961887199 = anonymousValidator2047524467(
    value["dumpStructure"],
    `${propertyPath}.dumpStructure`,
  );
  if (val1961887199.errors) {
    errors = errors.concat(val1961887199.errors.flat(2));
  } else {
    result["dumpStructure"] = val1961887199.value;
  }
  const val2103169165 = anonymousValidator2047524467(
    value["dumpApiStructure"],
    `${propertyPath}.dumpApiStructure`,
  );
  if (val2103169165.errors) {
    errors = errors.concat(val2103169165.errors.flat(2));
  } else {
    result["dumpApiStructure"] = val2103169165.value;
  }
  const val539114893 = anonymousValidator2047524467(
    value["dumpPostgres"],
    `${propertyPath}.dumpPostgres`,
  );
  if (val539114893.errors) {
    errors = errors.concat(val539114893.errors.flat(2));
  } else {
    result["dumpPostgres"] = val539114893.value;
  }
  const val1472378665 = anonymousValidator186795873(
    value["fileHeader"],
    `${propertyPath}.fileHeader`,
  );
  if (val1472378665.errors) {
    errors = errors.concat(val1472378665.errors.flat(2));
  } else {
    result["fileHeader"] = val1472378665.value;
  }
  const val1653164436 = anonymousValidator186795873(
    value["outputDirectory"],
    `${propertyPath}.outputDirectory`,
  );
  if (val1653164436.errors) {
    errors = errors.concat(val1653164436.errors.flat(2));
  } else {
    result["outputDirectory"] = val1653164436.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: { [ key: string]:{ [ key: string]:CodeGenType}}, errors?: InternalError[] }}
 */
export function anonymousValidator1413365072(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator186795873(
      key,
      `${propertyPath}.$key[${key}]`,
    );
    if (genericKey.errors) {
      errors = errors.concat(genericKey.errors.flat(2));
      continue;
    }
    const genericValue = anonymousValidator1529527338(
      value[key],
      `${propertyPath}.$value[${key}]`,
    );
    if (genericValue.errors) {
      errors = errors.concat(genericValue.errors.flat(2));
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ".js"|".ts", errors?: InternalError[] }}
 */
export function anonymousValidator1146021598(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== ".js" && value !== ".ts") {
    const oneOf = [".js", ".ts"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"relativePath": string, "contents": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator682118687(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys682118687.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val70808303 = anonymousValidator186795873(
    value["relativePath"],
    `${propertyPath}.relativePath`,
  );
  if (val70808303.errors) {
    errors = errors.concat(val70808303.errors.flat(2));
  } else {
    result["relativePath"] = val70808303.value;
  }
  const val567321830 = anonymousValidator186795873(
    value["contents"],
    `${propertyPath}.contents`,
  );
  if (val567321830.errors) {
    errors = errors.concat(val567321830.errors.flat(2));
  } else {
    result["contents"] = val567321830.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: (CodeGenFile)[], errors?: InternalError[] }}
 */
export function anonymousValidator1979163207(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator682118687(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlMissingPrimaryKey", errors?: InternalError[] }}
 */
export function anonymousValidator485441701(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlMissingPrimaryKey") {
    const oneOf = ["sqlMissingPrimaryKey"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlMissingPrimaryKey", "typeName": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator1045315509(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1045315509.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator485441701(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val676507419 = anonymousValidator186795873(
    value["typeName"],
    `${propertyPath}.typeName`,
  );
  if (val676507419.errors) {
    errors = errors.concat(val676507419.errors.flat(2));
  } else {
    result["typeName"] = val676507419.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlForgotEnableQueries", errors?: InternalError[] }}
 */
export function anonymousValidator550401272(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlForgotEnableQueries") {
    const oneOf = ["sqlForgotEnableQueries"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator564383959(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys564383959.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator550401272(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val676507419 = anonymousValidator186795873(
    value["typeName"],
    `${propertyPath}.typeName`,
  );
  if (val676507419.errors) {
    errors = errors.concat(val676507419.errors.flat(2));
  } else {
    result["typeName"] = val676507419.value;
  }
  const val1792531446 = anonymousValidator186795873(
    value["referencedByType"],
    `${propertyPath}.referencedByType`,
  );
  if (val1792531446.errors) {
    errors = errors.concat(val1792531446.errors.flat(2));
  } else {
    result["referencedByType"] = val1792531446.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlMissingOneToMany", errors?: InternalError[] }}
 */
export function anonymousValidator796544382(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlMissingOneToMany") {
    const oneOf = ["sqlMissingOneToMany"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator210116167(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys210116167.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator796544382(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val253885359 = anonymousValidator186795873(
    value["referencedByGroup"],
    `${propertyPath}.referencedByGroup`,
  );
  if (val253885359.errors) {
    errors = errors.concat(val253885359.errors.flat(2));
  } else {
    result["referencedByGroup"] = val253885359.value;
  }
  const val1792531446 = anonymousValidator186795873(
    value["referencedByType"],
    `${propertyPath}.referencedByType`,
  );
  if (val1792531446.errors) {
    errors = errors.concat(val1792531446.errors.flat(2));
  } else {
    result["referencedByType"] = val1792531446.value;
  }
  const val676507419 = anonymousValidator186795873(
    value["typeName"],
    `${propertyPath}.typeName`,
  );
  if (val676507419.errors) {
    errors = errors.concat(val676507419.errors.flat(2));
  } else {
    result["typeName"] = val676507419.value;
  }
  const val747010581 = anonymousValidator186795873(
    value["relationOwnKey"],
    `${propertyPath}.relationOwnKey`,
  );
  if (val747010581.errors) {
    errors = errors.concat(val747010581.errors.flat(2));
  } else {
    result["relationOwnKey"] = val747010581.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlUnusedOneToMany", errors?: InternalError[] }}
 */
export function anonymousValidator1477032830(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlUnusedOneToMany") {
    const oneOf = ["sqlUnusedOneToMany"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator1331366345(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1331366345.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator1477032830(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val3575610 = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val1896298157 = anonymousValidator186795873(
    value["referencedType"],
    `${propertyPath}.referencedType`,
  );
  if (val1896298157.errors) {
    errors = errors.concat(val1896298157.errors.flat(2));
  } else {
    result["referencedType"] = val1896298157.value;
  }
  const val1003880199 = anonymousValidator186795873(
    value["ownKey"],
    `${propertyPath}.ownKey`,
  );
  if (val1003880199.errors) {
    errors = errors.concat(val1003880199.errors.flat(2));
  } else {
    result["ownKey"] = val1003880199.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlEnableValidator", errors?: InternalError[] }}
 */
export function anonymousValidator584313703(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlEnableValidator") {
    const oneOf = ["sqlEnableValidator"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlEnableValidator", }, errors?: InternalError[] }}
 */
export function anonymousValidator2008271825(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2008271825.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator584313703(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlDuplicateShortName", errors?: InternalError[] }}
 */
export function anonymousValidator1451773728(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlDuplicateShortName") {
    const oneOf = ["sqlDuplicateShortName"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator914281176(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys914281176.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator1451773728(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val2028219097 = anonymousValidator186795873(
    value["shortName"],
    `${propertyPath}.shortName`,
  );
  if (val2028219097.errors) {
    errors = errors.concat(val2028219097.errors.flat(2));
  } else {
    result["shortName"] = val2028219097.value;
  }
  const val132835675 = anonymousValidator186795873(
    value["firstName"],
    `${propertyPath}.firstName`,
  );
  if (val132835675.errors) {
    errors = errors.concat(val132835675.errors.flat(2));
  } else {
    result["firstName"] = val132835675.value;
  }
  const val423680287 = anonymousValidator186795873(
    value["secondName"],
    `${propertyPath}.secondName`,
  );
  if (val423680287.errors) {
    errors = errors.concat(val423680287.errors.flat(2));
  } else {
    result["secondName"] = val423680287.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "sqlReservedRelationKey", errors?: InternalError[] }}
 */
export function anonymousValidator1364042925(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "sqlReservedRelationKey") {
    const oneOf = ["sqlReservedRelationKey"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlReservedRelationKey", "type": string, "ownKey": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator40811832(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys40811832.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator1364042925(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val3575610 = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val1003880199 = anonymousValidator186795873(
    value["ownKey"],
    `${propertyPath}.ownKey`,
  );
  if (val1003880199.errors) {
    errors = errors.concat(val1003880199.errors.flat(2));
  } else {
    result["ownKey"] = val1003880199.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "coreReservedGroupName", errors?: InternalError[] }}
 */
export function anonymousValidator1656167879(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "coreReservedGroupName") {
    const oneOf = ["coreReservedGroupName"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "coreReservedGroupName", "groupName": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator451802958(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys451802958.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106079 = anonymousValidator1656167879(
    value["key"],
    `${propertyPath}.key`,
  );
  if (val106079.errors) {
    errors = errors.concat(val106079.errors.flat(2));
  } else {
    result["key"] = val106079.value;
  }
  const val1483174486 = anonymousValidator186795873(
    value["groupName"],
    `${propertyPath}.groupName`,
  );
  if (val1483174486.errors) {
    errors = errors.concat(val1483174486.errors.flat(2));
  } else {
    result["groupName"] = val1483174486.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "sqlReservedRelationKey", "type": string, "ownKey": string, }|{"key": "coreReservedGroupName", "groupName": string, }, errors?: InternalError[] }}
 */
export function anonymousValidator1962763405(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: {"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "sqlReservedRelationKey", "type": string, "ownKey": string, }|{"key": "coreReservedGroupName", "groupName": string, }, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator1045315509(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator564383959(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator210116167(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1331366345(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator2008271825(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator914281176(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator40811832(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator451802958(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ({"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "sqlReservedRelationKey", "type": string, "ownKey": string, }|{"key": "coreReservedGroupName", "groupName": string, })[], errors?: InternalError[] }}
 */
export function anonymousValidator1413584527(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1962763405(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"options": CodeGenGenerateOpts, "structure": CodeGenStructure, "extension": ".js"|".ts", "importExtension": string, "outputFiles": (CodeGenFile)[], "errors": ({"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "sqlReservedRelationKey", "type": string, "ownKey": string, }|{"key": "coreReservedGroupName", "groupName": string, })[], }, errors?: InternalError[] }}
 */
export function anonymousValidator980814292(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys980814292.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1249474914 = anonymousValidator2069957416(
    value["options"],
    `${propertyPath}.options`,
  );
  if (val1249474914.errors) {
    errors = errors.concat(val1249474914.errors.flat(2));
  } else {
    result["options"] = val1249474914.value;
  }
  const val144518515 = anonymousValidator1413365072(
    value["structure"],
    `${propertyPath}.structure`,
  );
  if (val144518515.errors) {
    errors = errors.concat(val144518515.errors.flat(2));
  } else {
    result["structure"] = val144518515.value;
  }
  const val612557761 = anonymousValidator1146021598(
    value["extension"],
    `${propertyPath}.extension`,
  );
  if (val612557761.errors) {
    errors = errors.concat(val612557761.errors.flat(2));
  } else {
    result["extension"] = val612557761.value;
  }
  const val131404314 = anonymousValidator186795873(
    value["importExtension"],
    `${propertyPath}.importExtension`,
  );
  if (val131404314.errors) {
    errors = errors.concat(val131404314.errors.flat(2));
  } else {
    result["importExtension"] = val131404314.value;
  }
  const val847828490 = anonymousValidator1979163207(
    value["outputFiles"],
    `${propertyPath}.outputFiles`,
  );
  if (val847828490.errors) {
    errors = errors.concat(val847828490.errors.flat(2));
  } else {
    result["outputFiles"] = val847828490.value;
  }
  const val1294635157 = anonymousValidator1413584527(
    value["errors"],
    `${propertyPath}.errors`,
  );
  if (val1294635157.errors) {
    errors = errors.concat(val1294635157.errors.flat(2));
  } else {
    result["errors"] = val1294635157.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "init"|"collect"|"finish", errors?: InternalError[] }}
 */
export function anonymousValidator2078657473(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "init" && value !== "collect" && value !== "finish") {
    const oneOf = ["init", "collect", "finish"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"phase": "init"|"collect"|"finish", }, errors?: InternalError[] }}
 */
export function anonymousValidator1664519436(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1664519436.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val106629499 = anonymousValidator2078657473(
    value["phase"],
    `${propertyPath}.phase`,
  );
  if (val106629499.errors) {
    errors = errors.concat(val106629499.errors.flat(2));
  } else {
    result["phase"] = val106629499.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|"input"|"outputRouter"|"outputClient", errors?: InternalError[] }}
 */
export function anonymousValidator1836086405(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "input" &&
    value !== "outputRouter" &&
    value !== "outputClient"
  ) {
    const oneOf = ["input", "outputRouter", "outputClient"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"isJSON"?: undefined|boolean, "nestedIsJSON"?: undefined|boolean, "useDefaults"?: undefined|boolean, "useTypescript"?: undefined|boolean, "isNode"?: undefined|boolean, "isBrowser"?: undefined|boolean, "suffix"?: undefined|string, "fileTypeIO"?: undefined|"input"|"outputRouter"|"outputClient", }, errors?: InternalError[] }}
 */
export function anonymousValidator1287070944(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1287070944.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val1180414702 = anonymousValidator196147222(
    value["isJSON"],
    `${propertyPath}.isJSON`,
  );
  if (val1180414702.errors) {
    errors = errors.concat(val1180414702.errors.flat(2));
  } else {
    result["isJSON"] = val1180414702.value;
  }
  const val559858921 = anonymousValidator196147222(
    value["nestedIsJSON"],
    `${propertyPath}.nestedIsJSON`,
  );
  if (val559858921.errors) {
    errors = errors.concat(val559858921.errors.flat(2));
  } else {
    result["nestedIsJSON"] = val559858921.value;
  }
  const val1925489913 = anonymousValidator196147222(
    value["useDefaults"],
    `${propertyPath}.useDefaults`,
  );
  if (val1925489913.errors) {
    errors = errors.concat(val1925489913.errors.flat(2));
  } else {
    result["useDefaults"] = val1925489913.value;
  }
  const val1936051860 = anonymousValidator196147222(
    value["useTypescript"],
    `${propertyPath}.useTypescript`,
  );
  if (val1936051860.errors) {
    errors = errors.concat(val1936051860.errors.flat(2));
  } else {
    result["useTypescript"] = val1936051860.value;
  }
  const val1180267956 = anonymousValidator196147222(
    value["isNode"],
    `${propertyPath}.isNode`,
  );
  if (val1180267956.errors) {
    errors = errors.concat(val1180267956.errors.flat(2));
  } else {
    result["isNode"] = val1180267956.value;
  }
  const val428838242 = anonymousValidator196147222(
    value["isBrowser"],
    `${propertyPath}.isBrowser`,
  );
  if (val428838242.errors) {
    errors = errors.concat(val428838242.errors.flat(2));
  } else {
    result["isBrowser"] = val428838242.value;
  }
  const val891422895 = anonymousValidator1443576836(
    value["suffix"],
    `${propertyPath}.suffix`,
  );
  if (val891422895.errors) {
    errors = errors.concat(val891422895.errors.flat(2));
  } else {
    result["suffix"] = val891422895.value;
  }
  const val1834845820 = anonymousValidator1836086405(
    value["fileTypeIO"],
    `${propertyPath}.fileTypeIO`,
  );
  if (val1834845820.errors) {
    errors = errors.concat(val1834845820.errors.flat(2));
  } else {
    result["fileTypeIO"] = val1834845820.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
