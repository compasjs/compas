// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

/**
 * @template T
 * @typedef {import("@compas/stdlib").EitherN<T, InternalError>} EitherN
 */

const objectKeys1006716453 = new Set(["group", "name", "uniqueName"]);
const objectKeys35698685 = new Set(["key", "field"]);
const objectKeys2029084423 = new Set(["errorString"]);
const objectKeys980814292 = new Set([
  "options",
  "structure",
  "extension",
  "importExtension",
  "outputFiles",
  "errors",
]);
const objectKeys682118687 = new Set(["relativePath", "contents"]);
const objectKeys1664519436 = new Set(["phase"]);
const objectKeys1287070944 = new Set([
  "isJSON",
  "useDefaults",
  "useTypescript",
  "isNode",
  "isBrowser",
  "suffix",
  "isCommonFile",
  "isTypeFile",
  "fileTypeIO",
]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"anyOf">}
 */
export function anonymousValidator611235225(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "anyOf") {
    const oneOf = ["anyOf"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator2115758866(value, propertyPath) {
  if (isNil(value)) {
    return { value: "" };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return { value: "" };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator1174857441(value, propertyPath) {
  if (isNil(value)) {
    return { value: false };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator657675998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 0) {
    const min = 0;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator2047524467(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator293751998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string|boolean|number>}
 */
export function anonymousValidator219305298(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<undefined|string|boolean|number>} */
  let result = { errors: [] };
  result = anonymousValidator657675998(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2047524467(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator293751998(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|string>}
 */
export function anonymousValidator1443576836(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }>}
 */
export function anonymousValidator368068670(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["primary"],
      `${propertyPath}.primary`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["primary"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["searchable"],
      `${propertyPath}.searchable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["searchable"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["hasDefaultValue"],
      `${propertyPath}.hasDefaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["hasDefaultValue"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{}>}
 */
export function anonymousValidator1963780689(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"any">}
 */
export function anonymousValidator1269951810(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "any") {
    const oneOf = ["any"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, }>}
 */
export function anonymousValidator942201043(value, propertyPath) {
  if (isNil(value)) {
    return { value: { allowNull: false } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"javaScript"?: undefined|string, "typeScript"?: undefined|string, }>}
 */
export function anonymousValidator1282254259(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1443576836(
      value["javaScript"],
      `${propertyPath}.javaScript`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["javaScript"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["typeScript"],
      `${propertyPath}.typeScript`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["typeScript"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "any", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, "rawValue"?: undefined|string, "rawValueImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, "rawValidator"?: undefined|string, "rawValidatorImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, }>}
 */
export function anonymousValidator1519740867(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1269951810(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator942201043(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["rawValue"],
      `${propertyPath}.rawValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1282254259(
      value["rawValueImport"],
      `${propertyPath}.rawValueImport`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValueImport"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["rawValidator"],
      `${propertyPath}.rawValidator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValidator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1282254259(
      value["rawValidatorImport"],
      `${propertyPath}.rawValidatorImport`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawValidatorImport"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"array">}
 */
export function anonymousValidator1539402447(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "array") {
    const oneOf = ["array"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|number>}
 */
export function anonymousValidator963028965(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }>}
 */
export function anonymousValidator914179656(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator963028965(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator963028965(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").CodeGenType>}
 */
export function anonymousValidator169184843(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator682551261(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "array", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }, "internalSettings": {}, "values": import("./types").CodeGenType, }>}
 */
export function anonymousValidator1312175728(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1539402447(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator914179656(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator169184843(
      value["values"],
      `${propertyPath}.values`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["values"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"boolean">}
 */
export function anonymousValidator1240956158(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "boolean") {
    const oneOf = ["boolean"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "allowNull": boolean, }>}
 */
export function anonymousValidator1064911095(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|boolean>}
 */
export function anonymousValidator196147222(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "boolean", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "allowNull": boolean, }, "internalSettings": {}, "oneOf"?: undefined|boolean, }>}
 */
export function anonymousValidator17476225(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1240956158(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1064911095(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"date">}
 */
export function anonymousValidator1573852460(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "date") {
    const oneOf = ["date"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|Date>}
 */
export function anonymousValidator1988053796(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.date.invalid",
          info: {},
        },
      ],
    };
  }
  return { value: date };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }>}
 */
export function anonymousValidator517837192(value, propertyPath) {
  if (isNil(value)) {
    return { value: { allowNull: false } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1988053796(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1988053796(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["inFuture"],
      `${propertyPath}.inFuture`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["inFuture"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["inPast"],
      `${propertyPath}.inPast`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["inPast"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"dateOnly"|"timeOnly">}
 */
export function anonymousValidator38390704(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "dateOnly" && value !== "timeOnly") {
    const oneOf = ["dateOnly", "timeOnly"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "date", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }, "internalSettings": {}, "specifier"?: undefined|"dateOnly"|"timeOnly", }>}
 */
export function anonymousValidator2019605291(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1573852460(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator517837192(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator38390704(
      value["specifier"],
      `${propertyPath}.specifier`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specifier"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"file">}
 */
export function anonymousValidator724462434(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "file") {
    const oneOf = ["file"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator186795873(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator890105892(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"mimeTypes"?: undefined|(string)[], }>}
 */
export function anonymousValidator889761232(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator890105892(
      value["mimeTypes"],
      `${propertyPath}.mimeTypes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["mimeTypes"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "file", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"mimeTypes"?: undefined|(string)[], }, "internalSettings": {}, }>}
 */
export function anonymousValidator508679687(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator724462434(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator889761232(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"generic">}
 */
export function anonymousValidator315010317(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "generic") {
    const oneOf = ["generic"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "generic", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "keys": import("./types").CodeGenType, "values": import("./types").CodeGenType, }>}
 */
export function anonymousValidator1377926226(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator315010317(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator169184843(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator169184843(
      value["values"],
      `${propertyPath}.values`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["values"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"number">}
 */
export function anonymousValidator1695510095(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "number") {
    const oneOf = ["number"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }>}
 */
export function anonymousValidator1608555242(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["floatingPoint"],
      `${propertyPath}.floatingPoint`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["floatingPoint"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator963028965(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator963028965(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(number)[]>}
 */
export function anonymousValidator1370653763(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator293751998(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "number", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }, "internalSettings": {}, "oneOf"?: undefined|(number)[], }>}
 */
export function anonymousValidator1441913722(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1695510095(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1608555242(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1370653763(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"object">}
 */
export function anonymousValidator540066309(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "object") {
    const oneOf = ["object"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<boolean>}
 */
export function anonymousValidator801301862(value, propertyPath) {
  if (isNil(value)) {
    return { value: true };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, "strict": boolean, }>}
 */
export function anonymousValidator438930840(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator801301862(
      value["strict"],
      `${propertyPath}.strict`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["strict"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: string]:import("./types").CodeGenType}>}
 */
export function anonymousValidator1529527338(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator186795873(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator682551261(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, "schema": string, }>}
 */
export function anonymousValidator1454543746(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["withSoftDeletes"],
      `${propertyPath}.withSoftDeletes`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["withSoftDeletes"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["withDates"],
      `${propertyPath}.withDates`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["withDates"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator801301862(
      value["withPrimaryKey"],
      `${propertyPath}.withPrimaryKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["withPrimaryKey"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isView"],
      `${propertyPath}.isView`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isView"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["schema"],
      `${propertyPath}.schema`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["schema"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"relation">}
 */
export function anonymousValidator1035049954(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "relation") {
    const oneOf = ["relation"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse">}
 */
export function anonymousValidator664918956(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "manyToOne" &&
    value !== "oneToMany" &&
    value !== "oneToOne" &&
    value !== "oneToOneReverse"
  ) {
    const oneOf = ["manyToOne", "oneToMany", "oneToOne", "oneToOneReverse"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"reference">}
 */
export function anonymousValidator2034870015(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "reference") {
    const oneOf = ["reference"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"group"?: undefined|string, "name"?: undefined|string, "uniqueName"?: undefined|string, }>}
 */
export function anonymousValidator1006716453(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1006716453.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1006716453],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").CodeGenType|{"group"?: undefined|string, "name"?: undefined|string, "uniqueName"?: undefined|string, }>}
 */
export function anonymousValidator1947892754(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<import("./types").CodeGenType|{"group"?: undefined|string, "name"?: undefined|string, "uniqueName"?: undefined|string, }>} */
  let result = { errors: [] };
  result = anonymousValidator682551261(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1006716453(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "reference", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "reference": import("./types").CodeGenType|{"group"?: undefined|string, "name"?: undefined|string, "uniqueName"?: undefined|string, }, }>}
 */
export function anonymousValidator127554530(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator2034870015(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1947892754(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").CodeGenReferenceType>}
 */
export function anonymousValidator1480613130(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator127554530(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "relation", "subType": "manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse", "reference": import("./types").CodeGenReferenceType, "ownKey": string, "referencedKey"?: undefined|string, "isOptional": boolean, }>}
 */
export function anonymousValidator243901689(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1035049954(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator664918956(
      value["subType"],
      `${propertyPath}.subType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["subType"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1480613130(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["ownKey"],
      `${propertyPath}.ownKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["ownKey"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["referencedKey"],
      `${propertyPath}.referencedKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["referencedKey"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CodeGenRelationType)[]>}
 */
export function anonymousValidator1064092154(value, propertyPath) {
  if (isNil(value)) {
    return { value: [] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator243901689(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").CodeGenObjectType>}
 */
export function anonymousValidator1913140908(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator17105276(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists">}
 */
export function anonymousValidator538147770(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "equal" &&
    value !== "notEqual" &&
    value !== "in" &&
    value !== "notIn" &&
    value !== "greaterThan" &&
    value !== "lowerThan" &&
    value !== "isNull" &&
    value !== "isNotNull" &&
    value !== "includeNotNull" &&
    value !== "like" &&
    value !== "iLike" &&
    value !== "notLike" &&
    value !== "exists" &&
    value !== "notExists"
  ) {
    const oneOf = [
      "equal",
      "notEqual",
      "in",
      "notIn",
      "greaterThan",
      "lowerThan",
      "isNull",
      "isNotNull",
      "includeNotNull",
      "like",
      "iLike",
      "notLike",
      "exists",
      "notExists",
    ];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", }>}
 */
export function anonymousValidator726016308(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["key"],
      `${propertyPath}.key`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["key"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isRelation"],
      `${propertyPath}.isRelation`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isRelation"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator538147770(
      value["variant"],
      `${propertyPath}.variant`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["variant"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<({"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", })[]>}
 */
export function anonymousValidator718135986(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator726016308(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"type": string, "rawType": import("./types").CodeGenObjectType, "fields": ({"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", })[], }>}
 */
export function anonymousValidator1907823387(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1913140908(
      value["rawType"],
      `${propertyPath}.rawType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["rawType"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator718135986(
      value["fields"],
      `${propertyPath}.fields`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fields"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"key": string, "optional": boolean, }>}
 */
export function anonymousValidator244788999(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["key"],
      `${propertyPath}.key`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["key"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2047524467(
      value["optional"],
      `${propertyPath}.optional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["optional"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<({"key": string, "optional": boolean, })[]>}
 */
export function anonymousValidator273243195(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator244788999(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"type": string, "specType": string, "fields": ({"key": string, "optional": boolean, })[], }>}
 */
export function anonymousValidator1449958994(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["specType"],
      `${propertyPath}.specType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specType"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator273243195(
      value["fields"],
      `${propertyPath}.fields`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fields"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, }>}
 */
export function anonymousValidator1218262237(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["key"],
      `${propertyPath}.key`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["key"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["hasSqlDefault"],
      `${propertyPath}.hasSqlDefault`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["hasSqlDefault"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isJsonb"],
      `${propertyPath}.isJsonb`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isJsonb"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<({"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, })[]>}
 */
export function anonymousValidator1906374053(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1218262237(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, })[], }>}
 */
export function anonymousValidator1837423837(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["insertType"],
      `${propertyPath}.insertType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["insertType"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["updateType"],
      `${propertyPath}.updateType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["updateType"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1906374053(
      value["fields"],
      `${propertyPath}.fields`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fields"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "object", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, "strict": boolean, }, "internalSettings": {}, "shortName"?: undefined|string, "keys": { [ key: string]:import("./types").CodeGenType}, "enableQueries": boolean, "queryOptions"?: undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, "schema": string, }, "relations": (import("./types").CodeGenRelationType)[], "where"?: undefined|{"type": string, "rawType": import("./types").CodeGenObjectType, "fields": ({"key": string, "name": string, "isRelation": boolean, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike"|"exists"|"notExists", })[], }, "orderBy"?: undefined|{"type": string, "specType": string, "fields": ({"key": string, "optional": boolean, })[], }, "partial"?: undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: undefined|string, "hasSqlDefault": boolean, "isJsonb": boolean, })[], }, }>}
 */
export function anonymousValidator17105276(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator540066309(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator438930840(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["shortName"],
      `${propertyPath}.shortName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["shortName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1529527338(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["enableQueries"],
      `${propertyPath}.enableQueries`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["enableQueries"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1454543746(
      value["queryOptions"],
      `${propertyPath}.queryOptions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["queryOptions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1064092154(
      value["relations"],
      `${propertyPath}.relations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["relations"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1907823387(
      value["where"],
      `${propertyPath}.where`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["where"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1449958994(
      value["orderBy"],
      `${propertyPath}.orderBy`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["orderBy"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1837423837(
      value["partial"],
      `${propertyPath}.partial`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["partial"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"string">}
 */
export function anonymousValidator760248297(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "string") {
    const oneOf = ["string"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<number>}
 */
export function anonymousValidator731977090(value, propertyPath) {
  if (isNil(value)) {
    return { value: 1 };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator1503038347(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value.length > 2) {
    const max = 2;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|(string)[]>}
 */
export function anonymousValidator623734288(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1503038347(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }>}
 */
export function anonymousValidator981840544(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["convert"],
      `${propertyPath}.convert`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["convert"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["trim"],
      `${propertyPath}.trim`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["trim"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["lowerCase"],
      `${propertyPath}.lowerCase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["lowerCase"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["upperCase"],
      `${propertyPath}.upperCase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["upperCase"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator731977090(
      value["min"],
      `${propertyPath}.min`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["min"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator963028965(
      value["max"],
      `${propertyPath}.max`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["max"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["pattern"],
      `${propertyPath}.pattern`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["pattern"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator623734288(
      value["disallowedCharacters"],
      `${propertyPath}.disallowedCharacters`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["disallowedCharacters"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "string", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }, "internalSettings": {}, "oneOf"?: undefined|(string)[], }>}
 */
export function anonymousValidator1672152398(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator760248297(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator981840544(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator890105892(
      value["oneOf"],
      `${propertyPath}.oneOf`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["oneOf"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"uuid">}
 */
export function anonymousValidator43940351(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "uuid") {
    const oneOf = ["uuid"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "uuid", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, }>}
 */
export function anonymousValidator1836970168(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator43940351(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator942201043(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"route">}
 */
export function anonymousValidator241103039(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "route") {
    const oneOf = ["route"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"json"|"form-data">}
 */
export function anonymousValidator2066419866(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value !== "json" && value !== "form-data") {
    const oneOf = ["json", "form-data"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"stripTrailingSlash"?: undefined|boolean, "requestBodyType"?: undefined|"json"|"form-data", }>}
 */
export function anonymousValidator1023845888(value, propertyPath) {
  if (isNil(value)) {
    return { value: { stripTrailingSlash: false, requestBodyType: "json" } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator196147222(
      value["stripTrailingSlash"],
      `${propertyPath}.stripTrailingSlash`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["stripTrailingSlash"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2066419866(
      value["requestBodyType"],
      `${propertyPath}.requestBodyType`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["requestBodyType"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH">}
 */
export function anonymousValidator1056430884(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "GET" &&
    value !== "POST" &&
    value !== "PUT" &&
    value !== "DELETE" &&
    value !== "HEAD" &&
    value !== "PATCH"
  ) {
    const oneOf = ["GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(string)[]>}
 */
export function anonymousValidator1898391521(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator186795873(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|import("./types").CodeGenType>}
 */
export function anonymousValidator708039854(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator682551261(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"routeInvalidation">}
 */
export function anonymousValidator719331197(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "routeInvalidation") {
    const oneOf = ["routeInvalidation"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"group": string, "name"?: undefined|string, }>}
 */
export function anonymousValidator146110107(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: string]:(string)[]}>}
 */
export function anonymousValidator1711070661(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator186795873(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator1898391521(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"params": { [ key: string]:(string)[]}, "query": { [ key: string]:(string)[]}, }>}
 */
export function anonymousValidator1719563809(value, propertyPath) {
  if (isNil(value)) {
    return { value: { params: {}, query: {} } };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1711070661(
      value["params"],
      `${propertyPath}.params`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["params"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1711070661(
      value["query"],
      `${propertyPath}.query`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["query"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"useSharedParams": boolean, "useSharedQuery": boolean, "specification": {"params": { [ key: string]:(string)[]}, "query": { [ key: string]:(string)[]}, }, }>}
 */
export function anonymousValidator1005870638(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["useSharedParams"],
      `${propertyPath}.useSharedParams`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useSharedParams"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["useSharedQuery"],
      `${propertyPath}.useSharedQuery`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useSharedQuery"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1719563809(
      value["specification"],
      `${propertyPath}.specification`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["specification"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "routeInvalidation", "target": {"group": string, "name"?: undefined|string, }, "properties": {"useSharedParams": boolean, "useSharedQuery": boolean, "specification": {"params": { [ key: string]:(string)[]}, "query": { [ key: string]:(string)[]}, }, }, }>}
 */
export function anonymousValidator224332322(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator719331197(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator146110107(
      value["target"],
      `${propertyPath}.target`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["target"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1005870638(
      value["properties"],
      `${propertyPath}.properties`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["properties"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CodeGenRouteInvalidationType)[]>}
 */
export function anonymousValidator1463282173(value, propertyPath) {
  if (isNil(value)) {
    return { value: [] };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator224332322(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "route", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {"stripTrailingSlash"?: undefined|boolean, "requestBodyType"?: undefined|"json"|"form-data", }, "method": "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH", "idempotent": boolean, "path": string, "tags": (string)[], "query"?: undefined|import("./types").CodeGenType, "params"?: undefined|import("./types").CodeGenType, "body"?: undefined|import("./types").CodeGenType, "files"?: undefined|import("./types").CodeGenType, "response"?: undefined|import("./types").CodeGenType, "invalidations": (import("./types").CodeGenRouteInvalidationType)[], }>}
 */
export function anonymousValidator1390215584(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator241103039(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1023845888(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1056430884(
      value["method"],
      `${propertyPath}.method`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["method"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["idempotent"],
      `${propertyPath}.idempotent`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["idempotent"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["path"],
      `${propertyPath}.path`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["path"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1898391521(
      value["tags"],
      `${propertyPath}.tags`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["tags"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator708039854(
      value["query"],
      `${propertyPath}.query`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["query"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator708039854(
      value["params"],
      `${propertyPath}.params`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["params"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator708039854(
      value["body"],
      `${propertyPath}.body`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["body"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator708039854(
      value["files"],
      `${propertyPath}.files`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["files"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator708039854(
      value["response"],
      `${propertyPath}.response`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["response"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1463282173(
      value["invalidations"],
      `${propertyPath}.invalidations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["invalidations"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"extend">}
 */
export function anonymousValidator336515136(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "extend") {
    const oneOf = ["extend"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "extend", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "keys": { [ key: string]:import("./types").CodeGenType}, "reference": import("./types").CodeGenReferenceType, }>}
 */
export function anonymousValidator1421326295(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator336515136(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1529527338(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1480613130(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"omit">}
 */
export function anonymousValidator1214670991(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "omit") {
    const oneOf = ["omit"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"allowNull": boolean, }>}
 */
export function anonymousValidator599748167(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1174857441(
      value["allowNull"],
      `${propertyPath}.allowNull`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["allowNull"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "omit", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, "keys": (string)[], "reference": import("./types").CodeGenType, }>}
 */
export function anonymousValidator1474724230(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1214670991(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator599748167(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1898391521(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator169184843(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"pick">}
 */
export function anonymousValidator447493159(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "pick") {
    const oneOf = ["pick"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "pick", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, "keys": (string)[], "reference": import("./types").CodeGenType, }>}
 */
export function anonymousValidator512566754(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator447493159(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator599748167(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1898391521(
      value["keys"],
      `${propertyPath}.keys`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["keys"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator169184843(
      value["reference"],
      `${propertyPath}.reference`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["reference"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"crud">}
 */
export function anonymousValidator1173938076(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "crud") {
    const oneOf = ["crud"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|import("./types").CodeGenRelationType>}
 */
export function anonymousValidator84237458(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator243901689(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|import("./types").CodeGenCrudType>}
 */
export function anonymousValidator581222320(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  return anonymousValidator1787806021(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"key": string, "field": import("./types").CodeGenType, }>}
 */
export function anonymousValidator35698685(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys35698685.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys35698685],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["key"],
      `${propertyPath}.key`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["key"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator169184843(
      value["field"],
      `${propertyPath}.field`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["field"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"usedRelation"?: undefined|import("./types").CodeGenRelationType, "parent"?: undefined|import("./types").CodeGenCrudType, "writeableTypeName"?: undefined|string, "primaryKey"?: undefined|{"key": string, "field": import("./types").CodeGenType, }, }>}
 */
export function anonymousValidator468818986(value, propertyPath) {
  if (isNil(value)) {
    return { value: {} };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator84237458(
      value["usedRelation"],
      `${propertyPath}.usedRelation`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["usedRelation"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator581222320(
      value["parent"],
      `${propertyPath}.parent`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["parent"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["writeableTypeName"],
      `${propertyPath}.writeableTypeName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["writeableTypeName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator35698685(
      value["primaryKey"],
      `${propertyPath}.primaryKey`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["primaryKey"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"name"?: undefined|string, }>}
 */
export function anonymousValidator1874431172(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"field": string, "options"?: undefined|{"name"?: undefined|string, }, }>}
 */
export function anonymousValidator234152904(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator186795873(
      value["field"],
      `${propertyPath}.field`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["field"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1874431172(
      value["options"],
      `${propertyPath}.options`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["options"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"listRoute"?: undefined|boolean, "singleRoute"?: undefined|boolean, "createRoute"?: undefined|boolean, "updateRoute"?: undefined|boolean, "deleteRoute"?: undefined|boolean, }>}
 */
export function anonymousValidator1468771841(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator196147222(
      value["listRoute"],
      `${propertyPath}.listRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["listRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["singleRoute"],
      `${propertyPath}.singleRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["singleRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["createRoute"],
      `${propertyPath}.createRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["createRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["updateRoute"],
      `${propertyPath}.updateRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["updateRoute"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["deleteRoute"],
      `${propertyPath}.deleteRoute`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["deleteRoute"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }>}
 */
export function anonymousValidator921887009(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator890105892(
      value["$omit"],
      `${propertyPath}.$omit`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["$omit"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator890105892(
      value["$pick"],
      `${propertyPath}.$pick`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["$pick"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"readable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, "writable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, }>}
 */
export function anonymousValidator1186181590(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator921887009(
      value["readable"],
      `${propertyPath}.readable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["readable"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator921887009(
      value["writable"],
      `${propertyPath}.writable`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["writable"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CodeGenCrudType)[]>}
 */
export function anonymousValidator581628245(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator1787806021(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "crud", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {"usedRelation"?: undefined|import("./types").CodeGenRelationType, "parent"?: undefined|import("./types").CodeGenCrudType, "writeableTypeName"?: undefined|string, "primaryKey"?: undefined|{"key": string, "field": import("./types").CodeGenType, }, }, "basePath"?: undefined|string, "entity"?: undefined|import("./types").CodeGenType, "fromParent"?: undefined|{"field": string, "options"?: undefined|{"name"?: undefined|string, }, }, "routeOptions": {"listRoute"?: undefined|boolean, "singleRoute"?: undefined|boolean, "createRoute"?: undefined|boolean, "updateRoute"?: undefined|boolean, "deleteRoute"?: undefined|boolean, }, "fieldOptions": {"readable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, "writable"?: undefined|{"$omit"?: undefined|(string)[], "$pick"?: undefined|(string)[], }, }, "inlineRelations": (import("./types").CodeGenCrudType)[], "nestedRelations": (import("./types").CodeGenCrudType)[], }>}
 */
export function anonymousValidator1787806021(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator1173938076(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator468818986(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["basePath"],
      `${propertyPath}.basePath`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["basePath"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator708039854(
      value["entity"],
      `${propertyPath}.entity`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["entity"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator234152904(
      value["fromParent"],
      `${propertyPath}.fromParent`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fromParent"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1468771841(
      value["routeOptions"],
      `${propertyPath}.routeOptions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["routeOptions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1186181590(
      value["fieldOptions"],
      `${propertyPath}.fieldOptions`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fieldOptions"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator581628245(
      value["inlineRelations"],
      `${propertyPath}.inlineRelations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["inlineRelations"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator581628245(
      value["nestedRelations"],
      `${propertyPath}.nestedRelations`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["nestedRelations"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").CodeGenAnyType|import("./types").CodeGenAnyOfType|import("./types").CodeGenArrayType|import("./types").CodeGenBooleanType|import("./types").CodeGenDateType|import("./types").CodeGenFileType|import("./types").CodeGenGenericType|import("./types").CodeGenNumberType|import("./types").CodeGenObjectType|import("./types").CodeGenReferenceType|import("./types").CodeGenStringType|import("./types").CodeGenUuidType|import("./types").CodeGenRouteType|import("./types").CodeGenExtendType|import("./types").CodeGenOmitType|import("./types").CodeGenPickType|import("./types").CodeGenCrudType>}
 */
export function anonymousValidator682551261(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  /** @type {InternalError[]} */
  let errors = [];
  /** @type {EitherN<import("./types").CodeGenAnyType|import("./types").CodeGenAnyOfType|import("./types").CodeGenArrayType|import("./types").CodeGenBooleanType|import("./types").CodeGenDateType|import("./types").CodeGenFileType|import("./types").CodeGenGenericType|import("./types").CodeGenNumberType|import("./types").CodeGenObjectType|import("./types").CodeGenReferenceType|import("./types").CodeGenStringType|import("./types").CodeGenUuidType|import("./types").CodeGenRouteType|import("./types").CodeGenExtendType|import("./types").CodeGenOmitType|import("./types").CodeGenPickType|import("./types").CodeGenCrudType>} */
  let result = { errors: [] };
  result = anonymousValidator1519740867(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator20588538(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1312175728(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator17476225(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator2019605291(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator508679687(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1377926226(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1441913722(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator17105276(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator127554530(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1672152398(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1836970168(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1390215584(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1421326295(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1474724230(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator512566754(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  result = anonymousValidator1787806021(value, propertyPath);
  if (result.errors) {
    errors.push(result.errors[0]);
  } else {
    return result;
  }
  for (const err of errors) {
    err.info.via = "validator.anyOf";
  }
  return {
    errors,
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CodeGenType)[]>}
 */
export function anonymousValidator1978730633(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator682551261(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"type": "anyOf", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, "hasDefaultValue": boolean, }, "validator": {}, "internalSettings": {}, "values": (import("./types").CodeGenType)[], }>}
 */
export function anonymousValidator20588538(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  {
    const validatorResult = anonymousValidator611235225(
      value["type"],
      `${propertyPath}.type`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["type"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator2115758866(
      value["docString"],
      `${propertyPath}.docString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["docString"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1174857441(
      value["isOptional"],
      `${propertyPath}.isOptional`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isOptional"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator219305298(
      value["defaultValue"],
      `${propertyPath}.defaultValue`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["defaultValue"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["uniqueName"],
      `${propertyPath}.uniqueName`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["uniqueName"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["group"],
      `${propertyPath}.group`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["group"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["name"],
      `${propertyPath}.name`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["name"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator368068670(
      value["sql"],
      `${propertyPath}.sql`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["sql"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["validator"],
      `${propertyPath}.validator`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["validator"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1963780689(
      value["internalSettings"],
      `${propertyPath}.internalSettings`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["internalSettings"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1978730633(
      value["values"],
      `${propertyPath}.values`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["values"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"errorString": string, }>}
 */
export function anonymousValidator2029084423(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys2029084423.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys2029084423],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["errorString"],
      `${propertyPath}.errorString`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["errorString"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("../../App").GenerateOpts>}
 */
export function anonymousValidator634141747(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.any.undefined",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<string>}
 */
export function anonymousValidator2067293249(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (!/^[a-zA-Z][a-zA-Z\d]+$/g.test(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.pattern",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: import("./types").CodeGenNamePart]:import("./types").CodeGenType}>}
 */
export function anonymousValidator810836208(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator2067293249(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator682551261(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{ [ key: import("./types").CodeGenNamePart]:{ [ key: import("./types").CodeGenNamePart]:import("./types").CodeGenType}}>}
 */
export function anonymousValidator1413365072(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.generic.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator2067293249(
      key,
      propertyPath + ".$key[" + key + "]",
    );
    if (genericKey.errors) {
      errors.push(...genericKey.errors);
      continue;
    }
    const genericValue = anonymousValidator810836208(
      value[key],
      propertyPath + ".$value[" + key + "]",
    );
    if (genericValue.errors) {
      errors.push(...genericValue.errors);
    } else {
      result[genericKey.value] = genericValue.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<import("./types").CodeGenStructure>}
 */
export function anonymousValidator602578904(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.reference.undefined",
          info: {},
        },
      ],
    };
  }
  return anonymousValidator1413365072(value, propertyPath);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<".js"|".ts">}
 */
export function anonymousValidator1146021598(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== ".js" && value !== ".ts") {
    const oneOf = [".js", ".ts"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"relativePath": string, "contents": string, }>}
 */
export function anonymousValidator682118687(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys682118687.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys682118687],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["relativePath"],
      `${propertyPath}.relativePath`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["relativePath"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["contents"],
      `${propertyPath}.contents`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["contents"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CodeGenFile)[]>}
 */
export function anonymousValidator1979163207(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator682118687(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<(import("./types").CodeGenCollectableError)[]>}
 */
export function anonymousValidator226175071(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator2029084423(
      value[i],
      propertyPath + "[" + i + "]",
    );
    if (arrVar.errors) {
      errors.push(...arrVar.errors);
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"options": import("../../App").GenerateOpts, "structure": import("./types").CodeGenStructure, "extension": ".js"|".ts", "importExtension": string, "outputFiles": (import("./types").CodeGenFile)[], "errors": (import("./types").CodeGenCollectableError)[], }>}
 */
export function anonymousValidator980814292(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys980814292.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys980814292],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator634141747(
      value["options"],
      `${propertyPath}.options`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["options"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator602578904(
      value["structure"],
      `${propertyPath}.structure`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["structure"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1146021598(
      value["extension"],
      `${propertyPath}.extension`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["extension"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator186795873(
      value["importExtension"],
      `${propertyPath}.importExtension`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["importExtension"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1979163207(
      value["outputFiles"],
      `${propertyPath}.outputFiles`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["outputFiles"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator226175071(
      value["errors"],
      `${propertyPath}.errors`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["errors"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<"init"|"collect"|"finish">}
 */
export function anonymousValidator2078657473(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "init" && value !== "collect" && value !== "finish") {
    const oneOf = ["init", "collect", "finish"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"phase": "init"|"collect"|"finish", }>}
 */
export function anonymousValidator1664519436(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1664519436.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1664519436],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator2078657473(
      value["phase"],
      `${propertyPath}.phase`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["phase"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<undefined|"input"|"outputRouter"|"outputClient">}
 */
export function anonymousValidator1836086405(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (
    value !== "input" &&
    value !== "outputRouter" &&
    value !== "outputClient"
  ) {
    const oneOf = ["input", "outputRouter", "outputClient"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf, value },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {EitherN<{"isJSON"?: undefined|boolean, "useDefaults"?: undefined|boolean, "useTypescript"?: undefined|boolean, "isNode"?: undefined|boolean, "isBrowser"?: undefined|boolean, "suffix"?: undefined|string, "isCommonFile"?: undefined|boolean, "isTypeFile"?: undefined|boolean, "fileTypeIO"?: undefined|"input"|"outputRouter"|"outputClient", }>}
 */
export function anonymousValidator1287070944(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1287070944.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: {
              expectedKeys: [...objectKeys1287070944],
              foundKeys: [...Object.keys(value)],
            },
          },
        ],
      };
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["isJSON"],
      `${propertyPath}.isJSON`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isJSON"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["useDefaults"],
      `${propertyPath}.useDefaults`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useDefaults"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["useTypescript"],
      `${propertyPath}.useTypescript`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["useTypescript"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["isNode"],
      `${propertyPath}.isNode`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isNode"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["isBrowser"],
      `${propertyPath}.isBrowser`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isBrowser"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1443576836(
      value["suffix"],
      `${propertyPath}.suffix`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["suffix"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["isCommonFile"],
      `${propertyPath}.isCommonFile`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isCommonFile"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator196147222(
      value["isTypeFile"],
      `${propertyPath}.isTypeFile`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["isTypeFile"] = validatorResult.value;
    }
  }
  {
    const validatorResult = anonymousValidator1836086405(
      value["fileTypeIO"],
      `${propertyPath}.fileTypeIO`,
    );
    if (validatorResult.errors) {
      errors.push(...validatorResult.errors);
    } else {
      result["fileTypeIO"] = validatorResult.value;
    }
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
