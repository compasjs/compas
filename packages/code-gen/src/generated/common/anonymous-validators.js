// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

const objectKeys815277285 = new Set(["uniqueName", "group", "name"]);
const objectKeys980814292 = new Set([
  "options",
  "structure",
  "extension",
  "importExtension",
  "outputFiles",
  "errors",
]);
const objectKeys2069957416 = new Set([
  "enabledGroups",
  "isBrowser",
  "isNode",
  "isNodeServer",
  "enabledGenerators",
  "useTypescript",
  "dumpStructure",
  "dumpApiStructure",
  "dumpPostgres",
  "throwingValidators",
  "fileHeader",
  "outputDirectory",
]);
const objectKeys682118687 = new Set(["relativePath", "contents"]);
const objectKeys1045315509 = new Set(["key", "typeName"]);
const objectKeys564383959 = new Set(["key", "typeName", "referencedByType"]);
const objectKeys210116167 = new Set([
  "key",
  "referencedByGroup",
  "referencedByType",
  "typeName",
  "relationOwnKey",
]);
const objectKeys1331366345 = new Set([
  "key",
  "type",
  "referencedType",
  "ownKey",
]);
const objectKeys2008271825 = new Set(["key"]);
const objectKeys347072999 = new Set(["key"]);
const objectKeys914281176 = new Set([
  "key",
  "shortName",
  "firstName",
  "secondName",
]);
const objectKeys451802958 = new Set(["key", "groupName"]);
const objectKeys1664519436 = new Set(["phase"]);
const objectKeys1287070944 = new Set([
  "isJSON",
  "nestedIsJSON",
  "useDefaults",
  "useTypescript",
  "isNode",
  "isBrowser",
  "suffix",
  "fileTypeIO",
]);
/**
 * @param {*} value
 * @returns {boolean}
 */
export function isNil(value) {
  return value === undefined || value === null;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator2115758866(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return "";
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length === 0) {
    return "";
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {boolean|undefined}
 */
export function anonymousValidator1174857441(
  value,
  propertyPath,
  errors = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return false;
  }
  if (typeof value !== "boolean") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator657675998(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 0) {
    const min = 0;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator293751998(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push({
      key: `validator.${parentType}.integer`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value < -2147483647) {
    const min = -2147483647;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value > 2147483647) {
    const max = 2147483647;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|string|boolean|number|undefined}
 */
export function anonymousValidator219305298(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    return value;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator657675998(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  if (isNil(value) || typeof value !== "boolean") {
    const parentType = "boolean";
    subErrors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: propertyPath },
    });
  }
  result = value ?? undefined;
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator293751998(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  errors.push({
    key: `validator.${parentType}.type`,
    info: { propertyPath, errors: subErrors },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|string|undefined}
 */
export function anonymousValidator1443576836(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length === 0) {
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"primary": boolean, "searchable": boolean, }|undefined}
 */
export function anonymousValidator1369019459(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["primary"] = anonymousValidator1174857441(
    value["primary"],
    `${propertyPath}.primary`,
    errors,
  );
  result["searchable"] = anonymousValidator1174857441(
    value["searchable"],
    `${propertyPath}.searchable`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{}|undefined}
 */
export function anonymousValidator1963780689(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return {};
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"allowNull": boolean, }|undefined}
 */
export function anonymousValidator942201043(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return { allowNull: false };
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["allowNull"] = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"javaScript"?: undefined|string, "typeScript"?: undefined|string, }|undefined}
 */
export function anonymousValidator1282254259(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return {};
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["javaScript"] = anonymousValidator1443576836(
    value["javaScript"],
    `${propertyPath}.javaScript`,
    errors,
  );
  result["typeScript"] = anonymousValidator1443576836(
    value["typeScript"],
    `${propertyPath}.typeScript`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "any", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, "rawValue"?: undefined|string, "rawValueImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, "rawValidator"?: undefined|string, "rawValidatorImport": {"javaScript"?: undefined|string, "typeScript"?: undefined|string, }, }|undefined}
 */
export function anonymousValidator1519740867(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "any") {
    const parentType = "string";
    const oneOf = ["any"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator942201043(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["rawValue"] = anonymousValidator1443576836(
    value["rawValue"],
    `${propertyPath}.rawValue`,
    errors,
  );
  result["rawValueImport"] = anonymousValidator1282254259(
    value["rawValueImport"],
    `${propertyPath}.rawValueImport`,
    errors,
  );
  result["rawValidator"] = anonymousValidator1443576836(
    value["rawValidator"],
    `${propertyPath}.rawValidator`,
    errors,
  );
  result["rawValidatorImport"] = anonymousValidator1282254259(
    value["rawValidatorImport"],
    `${propertyPath}.rawValidatorImport`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|number|undefined}
 */
export function anonymousValidator963028965(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push({
      key: `validator.${parentType}.integer`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value < -2147483647) {
    const min = -2147483647;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value > 2147483647) {
    const max = 2147483647;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }|undefined}
 */
export function anonymousValidator914179656(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["min"] = anonymousValidator963028965(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator963028965(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "array", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "min"?: undefined|number, "max"?: undefined|number, }, "internalSettings": {}, "values": CodeGenType, }|undefined}
 */
export function anonymousValidator1312175728(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "array") {
    const parentType = "string";
    const oneOf = ["array"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator914179656(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["values"] = anonymousValidator682551261(
    value["values"],
    `${propertyPath}.values`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "allowNull": boolean, }|undefined}
 */
export function anonymousValidator1064911095(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["allowNull"] = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "boolean", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "allowNull": boolean, }, "internalSettings": {}, "oneOf"?: undefined|boolean, }|undefined}
 */
export function anonymousValidator17476225(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "boolean") {
    const parentType = "string";
    const oneOf = ["boolean"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1064911095(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  if (!isNil(value["oneOf"]) && typeof value["oneOf"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.oneOf` },
    });
  }
  result["oneOf"] = value["oneOf"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|string|undefined}
 */
export function anonymousValidator852571656(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length === 0) {
    return undefined;
  }
  if (value.length < 24) {
    const min = 24;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value.length > 29) {
    const max = 29;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  if (
    !/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/gi.test(
      value,
    )
  ) {
    errors.push({
      key: `validator.${parentType}.pattern`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|Date|undefined}
 */
export function anonymousValidator1988053796(
  value,
  propertyPath,
  errors = [],
  parentType = "date",
) {
  if (isNil(value)) {
    return value;
  }
  if (
    typeof value !== "string" &&
    typeof value !== "number" &&
    !(value instanceof Date)
  ) {
    errors.push({
      key: `validator.${parentType}.invalid`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value === "string") {
    value = anonymousValidator852571656(value, propertyPath, errors, "date");
    if (!value) {
      return value;
    }
  }
  const date = new Date(value);
  if (isNaN(date.getTime())) {
    errors.push({
      key: `validator.${parentType}.invalid`,
      info: { propertyPath },
    });
    return undefined;
  }
  return date;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }|undefined}
 */
export function anonymousValidator517837192(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return { allowNull: false };
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["allowNull"] = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  result["min"] = anonymousValidator1988053796(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator1988053796(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  if (!isNil(value["inFuture"]) && typeof value["inFuture"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.inFuture` },
    });
  }
  result["inFuture"] = value["inFuture"] ?? undefined;
  if (!isNil(value["inPast"]) && typeof value["inPast"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.inPast` },
    });
  }
  result["inPast"] = value["inPast"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "date", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, "min"?: undefined|Date, "max"?: undefined|Date, "inFuture"?: undefined|boolean, "inPast"?: undefined|boolean, }, "internalSettings": {}, }|undefined}
 */
export function anonymousValidator2019605291(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "date") {
    const parentType = "string";
    const oneOf = ["date"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator517837192(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator186795873(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|(string)[]|undefined}
 */
export function anonymousValidator890105892(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return value;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"mimeTypes"?: undefined|(string)[], }|undefined}
 */
export function anonymousValidator889761232(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return {};
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["mimeTypes"] = anonymousValidator890105892(
    value["mimeTypes"],
    `${propertyPath}.mimeTypes`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "file", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"mimeTypes"?: undefined|(string)[], }, "internalSettings": {}, }|undefined}
 */
export function anonymousValidator508679687(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "file") {
    const parentType = "string";
    const oneOf = ["file"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator889761232(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "generic", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {}, "internalSettings": {}, "keys": CodeGenType, "values": CodeGenType, }|undefined}
 */
export function anonymousValidator1377926226(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "generic") {
    const parentType = "string";
    const oneOf = ["generic"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["keys"] = anonymousValidator682551261(
    value["keys"],
    `${propertyPath}.keys`,
    errors,
  );
  result["values"] = anonymousValidator682551261(
    value["values"],
    `${propertyPath}.values`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }|undefined}
 */
export function anonymousValidator1608555242(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["floatingPoint"] = anonymousValidator1174857441(
    value["floatingPoint"],
    `${propertyPath}.floatingPoint`,
    errors,
  );
  result["min"] = anonymousValidator963028965(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator963028965(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  result["allowNull"] = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|(number)[]|undefined}
 */
export function anonymousValidator1370653763(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return value;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator293751998(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "number", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "floatingPoint": boolean, "min"?: undefined|number, "max"?: undefined|number, "allowNull": boolean, }, "internalSettings": {}, "oneOf"?: undefined|(number)[], }|undefined}
 */
export function anonymousValidator1441913722(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "number") {
    const parentType = "string";
    const oneOf = ["number"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1608555242(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["oneOf"] = anonymousValidator1370653763(
    value["oneOf"],
    `${propertyPath}.oneOf`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {boolean|undefined}
 */
export function anonymousValidator801301862(
  value,
  propertyPath,
  errors = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return true;
  }
  if (typeof value !== "boolean") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"allowNull": boolean, "strict": boolean, }|undefined}
 */
export function anonymousValidator438930840(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["allowNull"] = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  result["strict"] = anonymousValidator801301862(
    value["strict"],
    `${propertyPath}.strict`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {Object<string, CodeGenType>|undefined}
 */
export function anonymousValidator1529527338(
  value,
  propertyPath,
  errors = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator186795873(
      key,
      `${propertyPath}.$key[${key}]`,
      errors,
    );
    if (genericKey !== undefined) {
      result[genericKey] = anonymousValidator682551261(
        value[key],
        `${propertyPath}.$value[${key}]`,
        errors,
      );
    }
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, }|undefined}
 */
export function anonymousValidator1591987555(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["withSoftDeletes"] = anonymousValidator1174857441(
    value["withSoftDeletes"],
    `${propertyPath}.withSoftDeletes`,
    errors,
  );
  result["withDates"] = anonymousValidator1174857441(
    value["withDates"],
    `${propertyPath}.withDates`,
    errors,
  );
  result["withPrimaryKey"] = anonymousValidator801301862(
    value["withPrimaryKey"],
    `${propertyPath}.withPrimaryKey`,
    errors,
  );
  result["isView"] = anonymousValidator1174857441(
    value["isView"],
    `${propertyPath}.isView`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }|undefined}
 */
export function anonymousValidator815277285(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys815277285.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {CodeGenType|{"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }|undefined}
 */
export function anonymousValidator2139331922(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator682551261(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator815277285(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  errors.push({
    key: `validator.${parentType}.type`,
    info: { propertyPath, errors: subErrors },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "reference", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {}, "internalSettings": {}, "reference": CodeGenType|{"uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, }, }|undefined}
 */
export function anonymousValidator127554530(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "reference") {
    const parentType = "string";
    const oneOf = ["reference"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["reference"] = anonymousValidator2139331922(
    value["reference"],
    `${propertyPath}.reference`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "relation", "subType": "manyToOne"|"oneToMany"|"oneToOne"|"oneToOneReverse", "reference": CodeGenReferenceType, "ownKey": string, "referencedKey"?: undefined|string, "isOptional": boolean, }|undefined}
 */
export function anonymousValidator243901689(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "relation") {
    const parentType = "string";
    const oneOf = ["relation"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  if (
    value["subType"] !== "manyToOne" &&
    value["subType"] !== "oneToMany" &&
    value["subType"] !== "oneToOne" &&
    value["subType"] !== "oneToOneReverse"
  ) {
    const parentType = "string";
    const oneOf = ["manyToOne", "oneToMany", "oneToOne", "oneToOneReverse"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.subType`, oneOf },
    });
  }
  result["subType"] = value["subType"] ?? undefined;
  result["reference"] = anonymousValidator127554530(
    value["reference"],
    `${propertyPath}.reference`,
    errors,
  );
  result["ownKey"] = anonymousValidator186795873(
    value["ownKey"],
    `${propertyPath}.ownKey`,
    errors,
  );
  result["referencedKey"] = anonymousValidator1443576836(
    value["referencedKey"],
    `${propertyPath}.referencedKey`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {(CodeGenRelationType)[]|undefined}
 */
export function anonymousValidator1064092154(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return [];
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator243901689(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike", }|undefined}
 */
export function anonymousValidator1861729288(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["key"] = anonymousValidator186795873(
    value["key"],
    `${propertyPath}.key`,
    errors,
  );
  result["name"] = anonymousValidator186795873(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  if (
    value["variant"] !== "equal" &&
    value["variant"] !== "notEqual" &&
    value["variant"] !== "in" &&
    value["variant"] !== "notIn" &&
    value["variant"] !== "greaterThan" &&
    value["variant"] !== "lowerThan" &&
    value["variant"] !== "isNull" &&
    value["variant"] !== "isNotNull" &&
    value["variant"] !== "includeNotNull" &&
    value["variant"] !== "like" &&
    value["variant"] !== "iLike" &&
    value["variant"] !== "notLike"
  ) {
    const parentType = "string";
    const oneOf = [
      "equal",
      "notEqual",
      "in",
      "notIn",
      "greaterThan",
      "lowerThan",
      "isNull",
      "isNotNull",
      "includeNotNull",
      "like",
      "iLike",
      "notLike",
    ];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.variant`, oneOf },
    });
  }
  result["variant"] = value["variant"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {({"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike", })[]|undefined}
 */
export function anonymousValidator237528902(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1861729288(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"type": string, "fields": ({"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike", })[], }|undefined}
 */
export function anonymousValidator1209434737(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["type"] = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
    errors,
  );
  result["fields"] = anonymousValidator237528902(
    value["fields"],
    `${propertyPath}.fields`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": string, "optional": boolean, }|undefined}
 */
export function anonymousValidator244788999(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["key"] = anonymousValidator186795873(
    value["key"],
    `${propertyPath}.key`,
    errors,
  );
  if (isNil(value["optional"]) || typeof value["optional"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.optional` },
    });
  }
  result["optional"] = value["optional"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {({"key": string, "optional": boolean, })[]|undefined}
 */
export function anonymousValidator273243195(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator244788999(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"type": string, "specType": string, "fields": ({"key": string, "optional": boolean, })[], }|undefined}
 */
export function anonymousValidator1449958994(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["type"] = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
    errors,
  );
  result["specType"] = anonymousValidator186795873(
    value["specType"],
    `${propertyPath}.specType`,
    errors,
  );
  result["fields"] = anonymousValidator273243195(
    value["fields"],
    `${propertyPath}.fields`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": string, "defaultValue"?: undefined|string, "isJsonb": boolean, }|undefined}
 */
export function anonymousValidator767145861(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["key"] = anonymousValidator186795873(
    value["key"],
    `${propertyPath}.key`,
    errors,
  );
  result["defaultValue"] = anonymousValidator1443576836(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["isJsonb"] = anonymousValidator1174857441(
    value["isJsonb"],
    `${propertyPath}.isJsonb`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {({"key": string, "defaultValue"?: undefined|string, "isJsonb": boolean, })[]|undefined}
 */
export function anonymousValidator53797699(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator767145861(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: undefined|string, "isJsonb": boolean, })[], }|undefined}
 */
export function anonymousValidator2068553851(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return value;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["insertType"] = anonymousValidator186795873(
    value["insertType"],
    `${propertyPath}.insertType`,
    errors,
  );
  result["updateType"] = anonymousValidator186795873(
    value["updateType"],
    `${propertyPath}.updateType`,
    errors,
  );
  result["fields"] = anonymousValidator53797699(
    value["fields"],
    `${propertyPath}.fields`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "object", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, "strict": boolean, }, "internalSettings": {}, "shortName"?: undefined|string, "keys": Object<string, CodeGenType>, "enableQueries": boolean, "queryOptions"?: undefined|{"withSoftDeletes": boolean, "withDates": boolean, "withPrimaryKey": boolean, "isView": boolean, }, "relations": (CodeGenRelationType)[], "where"?: undefined|{"type": string, "fields": ({"key": string, "name": string, "variant": "equal"|"notEqual"|"in"|"notIn"|"greaterThan"|"lowerThan"|"isNull"|"isNotNull"|"includeNotNull"|"like"|"iLike"|"notLike", })[], }, "orderBy"?: undefined|{"type": string, "specType": string, "fields": ({"key": string, "optional": boolean, })[], }, "partial"?: undefined|{"insertType": string, "updateType": string, "fields": ({"key": string, "defaultValue"?: undefined|string, "isJsonb": boolean, })[], }, }|undefined}
 */
export function anonymousValidator17105276(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "object") {
    const parentType = "string";
    const oneOf = ["object"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator438930840(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["shortName"] = anonymousValidator1443576836(
    value["shortName"],
    `${propertyPath}.shortName`,
    errors,
  );
  result["keys"] = anonymousValidator1529527338(
    value["keys"],
    `${propertyPath}.keys`,
    errors,
  );
  result["enableQueries"] = anonymousValidator1174857441(
    value["enableQueries"],
    `${propertyPath}.enableQueries`,
    errors,
  );
  result["queryOptions"] = anonymousValidator1591987555(
    value["queryOptions"],
    `${propertyPath}.queryOptions`,
    errors,
  );
  result["relations"] = anonymousValidator1064092154(
    value["relations"],
    `${propertyPath}.relations`,
    errors,
  );
  result["where"] = anonymousValidator1209434737(
    value["where"],
    `${propertyPath}.where`,
    errors,
  );
  result["orderBy"] = anonymousValidator1449958994(
    value["orderBy"],
    `${propertyPath}.orderBy`,
    errors,
  );
  result["partial"] = anonymousValidator2068553851(
    value["partial"],
    `${propertyPath}.partial`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {number|undefined}
 */
export function anonymousValidator731977090(
  value,
  propertyPath,
  errors = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return 1;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Number.isInteger(value)) {
    errors.push({
      key: `validator.${parentType}.integer`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value < -2147483647) {
    const min = -2147483647;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value > 2147483647) {
    const max = 2147483647;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {string|undefined}
 */
export function anonymousValidator1503038347(
  value,
  propertyPath,
  errors = [],
  parentType = "string",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "string") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (value.length < 1) {
    const min = 1;
    errors.push({
      key: `validator.${parentType}.min`,
      info: { propertyPath, min },
    });
    return undefined;
  }
  if (value.length > 2) {
    const max = 2;
    errors.push({
      key: `validator.${parentType}.max`,
      info: { propertyPath, max },
    });
    return undefined;
  }
  return value;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|(string)[]|undefined}
 */
export function anonymousValidator623734288(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return value;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1503038347(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }|undefined}
 */
export function anonymousValidator981840544(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  result["convert"] = anonymousValidator1174857441(
    value["convert"],
    `${propertyPath}.convert`,
    errors,
  );
  result["trim"] = anonymousValidator1174857441(
    value["trim"],
    `${propertyPath}.trim`,
    errors,
  );
  result["lowerCase"] = anonymousValidator1174857441(
    value["lowerCase"],
    `${propertyPath}.lowerCase`,
    errors,
  );
  result["upperCase"] = anonymousValidator1174857441(
    value["upperCase"],
    `${propertyPath}.upperCase`,
    errors,
  );
  result["min"] = anonymousValidator731977090(
    value["min"],
    `${propertyPath}.min`,
    errors,
  );
  result["max"] = anonymousValidator963028965(
    value["max"],
    `${propertyPath}.max`,
    errors,
  );
  result["pattern"] = anonymousValidator1443576836(
    value["pattern"],
    `${propertyPath}.pattern`,
    errors,
  );
  result["allowNull"] = anonymousValidator1174857441(
    value["allowNull"],
    `${propertyPath}.allowNull`,
    errors,
  );
  result["disallowedCharacters"] = anonymousValidator623734288(
    value["disallowedCharacters"],
    `${propertyPath}.disallowedCharacters`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "string", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"convert": boolean, "trim": boolean, "lowerCase": boolean, "upperCase": boolean, "min": number, "max"?: undefined|number, "pattern"?: undefined|string, "allowNull": boolean, "disallowedCharacters"?: undefined|(string)[], }, "internalSettings": {}, "oneOf"?: undefined|(string)[], }|undefined}
 */
export function anonymousValidator1672152398(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "string") {
    const parentType = "string";
    const oneOf = ["string"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator981840544(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["oneOf"] = anonymousValidator890105892(
    value["oneOf"],
    `${propertyPath}.oneOf`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "uuid", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {"allowNull": boolean, }, "internalSettings": {}, }|undefined}
 */
export function anonymousValidator1836970168(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "uuid") {
    const parentType = "string";
    const oneOf = ["uuid"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator942201043(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"requestBodyType"?: undefined|"json"|"form-data", }|undefined}
 */
export function anonymousValidator1139247391(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return { requestBodyType: "json" };
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (
    value["requestBodyType"] !== "json" &&
    value["requestBodyType"] !== "form-data" &&
    value["requestBodyType"] !== undefined &&
    value["requestBodyType"] !== null
  ) {
    const parentType = "string";
    const oneOf = ["json", "form-data"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.requestBodyType`, oneOf },
    });
  }
  result["requestBodyType"] = value["requestBodyType"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {(string)[]|undefined}
 */
export function anonymousValidator1898391521(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator186795873(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {undefined|CodeGenType|undefined}
 */
export function anonymousValidator708039854(
  value,
  propertyPath,
  errors = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return value;
  }
  return anonymousValidator682551261(value, propertyPath, errors);
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "route", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {}, "internalSettings": {"requestBodyType"?: undefined|"json"|"form-data", }, "method": "GET"|"POST"|"PUT"|"DELETE"|"HEAD"|"PATCH", "idempotent": boolean, "path": string, "tags": (string)[], "query"?: undefined|CodeGenType, "params"?: undefined|CodeGenType, "body"?: undefined|CodeGenType, "files"?: undefined|CodeGenType, "response"?: undefined|CodeGenType, }|undefined}
 */
export function anonymousValidator1390215584(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "route") {
    const parentType = "string";
    const oneOf = ["route"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1139247391(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  if (
    value["method"] !== "GET" &&
    value["method"] !== "POST" &&
    value["method"] !== "PUT" &&
    value["method"] !== "DELETE" &&
    value["method"] !== "HEAD" &&
    value["method"] !== "PATCH"
  ) {
    const parentType = "string";
    const oneOf = ["GET", "POST", "PUT", "DELETE", "HEAD", "PATCH"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.method`, oneOf },
    });
  }
  result["method"] = value["method"] ?? undefined;
  result["idempotent"] = anonymousValidator1174857441(
    value["idempotent"],
    `${propertyPath}.idempotent`,
    errors,
  );
  result["path"] = anonymousValidator186795873(
    value["path"],
    `${propertyPath}.path`,
    errors,
  );
  result["tags"] = anonymousValidator1898391521(
    value["tags"],
    `${propertyPath}.tags`,
    errors,
  );
  result["query"] = anonymousValidator708039854(
    value["query"],
    `${propertyPath}.query`,
    errors,
  );
  result["params"] = anonymousValidator708039854(
    value["params"],
    `${propertyPath}.params`,
    errors,
  );
  result["body"] = anonymousValidator708039854(
    value["body"],
    `${propertyPath}.body`,
    errors,
  );
  result["files"] = anonymousValidator708039854(
    value["files"],
    `${propertyPath}.files`,
    errors,
  );
  result["response"] = anonymousValidator708039854(
    value["response"],
    `${propertyPath}.response`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {CodeGenAnyType|CodeGenAnyOfType|CodeGenArrayType|CodeGenBooleanType|CodeGenDateType|CodeGenFileType|CodeGenGenericType|CodeGenNumberType|CodeGenObjectType|CodeGenReferenceType|CodeGenRelationType|CodeGenStringType|CodeGenUuidType|CodeGenRouteType|undefined}
 */
export function anonymousValidator682551261(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator1519740867(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator20588538(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1312175728(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator17476225(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator2019605291(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator508679687(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1377926226(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1441913722(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator17105276(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator127554530(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator243901689(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1672152398(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1836970168(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1390215584(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  errors.push({
    key: `validator.${parentType}.type`,
    info: { propertyPath, errors: subErrors },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {(CodeGenType)[]|undefined}
 */
export function anonymousValidator1978730633(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator682551261(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"type": "anyOf", "docString": string, "isOptional": boolean, "defaultValue"?: undefined|string|boolean|number, "uniqueName"?: undefined|string, "group"?: undefined|string, "name"?: undefined|string, "sql"?: undefined|{"primary": boolean, "searchable": boolean, }, "validator": {}, "internalSettings": {}, "values": (CodeGenType)[], }|undefined}
 */
export function anonymousValidator20588538(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  if (value["type"] !== "anyOf") {
    const parentType = "string";
    const oneOf = ["anyOf"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.type`, oneOf },
    });
  }
  result["type"] = value["type"] ?? undefined;
  result["docString"] = anonymousValidator2115758866(
    value["docString"],
    `${propertyPath}.docString`,
    errors,
  );
  result["isOptional"] = anonymousValidator1174857441(
    value["isOptional"],
    `${propertyPath}.isOptional`,
    errors,
  );
  result["defaultValue"] = anonymousValidator219305298(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
    errors,
  );
  result["uniqueName"] = anonymousValidator1443576836(
    value["uniqueName"],
    `${propertyPath}.uniqueName`,
    errors,
  );
  result["group"] = anonymousValidator1443576836(
    value["group"],
    `${propertyPath}.group`,
    errors,
  );
  result["name"] = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
    errors,
  );
  result["sql"] = anonymousValidator1369019459(
    value["sql"],
    `${propertyPath}.sql`,
    errors,
  );
  result["validator"] = anonymousValidator1963780689(
    value["validator"],
    `${propertyPath}.validator`,
    errors,
  );
  result["internalSettings"] = anonymousValidator1963780689(
    value["internalSettings"],
    `${propertyPath}.internalSettings`,
    errors,
  );
  result["values"] = anonymousValidator1978730633(
    value["values"],
    `${propertyPath}.values`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {("type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery")[]|undefined}
 */
export function anonymousValidator1173328807(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    if (
      value[i] !== "type" &&
      value[i] !== "validator" &&
      value[i] !== "router" &&
      value[i] !== "sql" &&
      value[i] !== "apiClient" &&
      value[i] !== "reactQuery"
    ) {
      const parentType = "string";
      const oneOf = [
        "type",
        "validator",
        "router",
        "sql",
        "apiClient",
        "reactQuery",
      ];
      errors.push({
        key: `validator.${parentType}.oneOf`,
        info: { propertyPath: `${propertyPath}[${i}]`, oneOf },
      });
    }
    result[i] = value[i] ?? undefined;
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"enabledGroups": (string)[], "isBrowser": boolean, "isNode": boolean, "isNodeServer": boolean, "enabledGenerators": ("type"|"validator"|"router"|"sql"|"apiClient"|"reactQuery")[], "useTypescript": boolean, "dumpStructure": boolean, "dumpApiStructure": boolean, "dumpPostgres": boolean, "throwingValidators": boolean, "fileHeader": string, "outputDirectory": string, }|undefined}
 */
export function anonymousValidator2069957416(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys2069957416.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["enabledGroups"] = anonymousValidator1898391521(
    value["enabledGroups"],
    `${propertyPath}.enabledGroups`,
    errors,
  );
  if (isNil(value["isBrowser"]) || typeof value["isBrowser"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isBrowser` },
    });
  }
  result["isBrowser"] = value["isBrowser"] ?? undefined;
  if (isNil(value["isNode"]) || typeof value["isNode"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isNode` },
    });
  }
  result["isNode"] = value["isNode"] ?? undefined;
  if (
    isNil(value["isNodeServer"]) ||
    typeof value["isNodeServer"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isNodeServer` },
    });
  }
  result["isNodeServer"] = value["isNodeServer"] ?? undefined;
  result["enabledGenerators"] = anonymousValidator1173328807(
    value["enabledGenerators"],
    `${propertyPath}.enabledGenerators`,
    errors,
  );
  if (
    isNil(value["useTypescript"]) ||
    typeof value["useTypescript"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.useTypescript` },
    });
  }
  result["useTypescript"] = value["useTypescript"] ?? undefined;
  if (
    isNil(value["dumpStructure"]) ||
    typeof value["dumpStructure"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.dumpStructure` },
    });
  }
  result["dumpStructure"] = value["dumpStructure"] ?? undefined;
  if (
    isNil(value["dumpApiStructure"]) ||
    typeof value["dumpApiStructure"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.dumpApiStructure` },
    });
  }
  result["dumpApiStructure"] = value["dumpApiStructure"] ?? undefined;
  if (
    isNil(value["dumpPostgres"]) ||
    typeof value["dumpPostgres"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.dumpPostgres` },
    });
  }
  result["dumpPostgres"] = value["dumpPostgres"] ?? undefined;
  if (
    isNil(value["throwingValidators"]) ||
    typeof value["throwingValidators"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.throwingValidators` },
    });
  }
  result["throwingValidators"] = value["throwingValidators"] ?? undefined;
  result["fileHeader"] = anonymousValidator186795873(
    value["fileHeader"],
    `${propertyPath}.fileHeader`,
    errors,
  );
  result["outputDirectory"] = anonymousValidator186795873(
    value["outputDirectory"],
    `${propertyPath}.outputDirectory`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {Object<string, Object<string, CodeGenType>>|undefined}
 */
export function anonymousValidator1413365072(
  value,
  propertyPath,
  errors = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const genericKey = anonymousValidator186795873(
      key,
      `${propertyPath}.$key[${key}]`,
      errors,
    );
    if (genericKey !== undefined) {
      result[genericKey] = anonymousValidator1529527338(
        value[key],
        `${propertyPath}.$value[${key}]`,
        errors,
      );
    }
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"relativePath": string, "contents": string, }|undefined}
 */
export function anonymousValidator682118687(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys682118687.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["relativePath"] = anonymousValidator186795873(
    value["relativePath"],
    `${propertyPath}.relativePath`,
    errors,
  );
  result["contents"] = anonymousValidator186795873(
    value["contents"],
    `${propertyPath}.contents`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {(CodeGenFile)[]|undefined}
 */
export function anonymousValidator1979163207(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator682118687(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlMissingPrimaryKey", "typeName": string, }|undefined}
 */
export function anonymousValidator1045315509(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1045315509.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlMissingPrimaryKey") {
    const parentType = "string";
    const oneOf = ["sqlMissingPrimaryKey"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  result["typeName"] = anonymousValidator186795873(
    value["typeName"],
    `${propertyPath}.typeName`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|undefined}
 */
export function anonymousValidator564383959(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys564383959.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlForgotEnableQueries") {
    const parentType = "string";
    const oneOf = ["sqlForgotEnableQueries"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  result["typeName"] = anonymousValidator186795873(
    value["typeName"],
    `${propertyPath}.typeName`,
    errors,
  );
  result["referencedByType"] = anonymousValidator186795873(
    value["referencedByType"],
    `${propertyPath}.referencedByType`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|undefined}
 */
export function anonymousValidator210116167(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys210116167.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlMissingOneToMany") {
    const parentType = "string";
    const oneOf = ["sqlMissingOneToMany"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  result["referencedByGroup"] = anonymousValidator186795873(
    value["referencedByGroup"],
    `${propertyPath}.referencedByGroup`,
    errors,
  );
  result["referencedByType"] = anonymousValidator186795873(
    value["referencedByType"],
    `${propertyPath}.referencedByType`,
    errors,
  );
  result["typeName"] = anonymousValidator186795873(
    value["typeName"],
    `${propertyPath}.typeName`,
    errors,
  );
  result["relationOwnKey"] = anonymousValidator186795873(
    value["relationOwnKey"],
    `${propertyPath}.relationOwnKey`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|undefined}
 */
export function anonymousValidator1331366345(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1331366345.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlUnusedOneToMany") {
    const parentType = "string";
    const oneOf = ["sqlUnusedOneToMany"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  result["type"] = anonymousValidator186795873(
    value["type"],
    `${propertyPath}.type`,
    errors,
  );
  result["referencedType"] = anonymousValidator186795873(
    value["referencedType"],
    `${propertyPath}.referencedType`,
    errors,
  );
  result["ownKey"] = anonymousValidator186795873(
    value["ownKey"],
    `${propertyPath}.ownKey`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlEnableValidator", }|undefined}
 */
export function anonymousValidator2008271825(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys2008271825.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlEnableValidator") {
    const parentType = "string";
    const oneOf = ["sqlEnableValidator"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlThrowingValidators", }|undefined}
 */
export function anonymousValidator347072999(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys347072999.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlThrowingValidators") {
    const parentType = "string";
    const oneOf = ["sqlThrowingValidators"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|undefined}
 */
export function anonymousValidator914281176(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys914281176.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "sqlDuplicateShortName") {
    const parentType = "string";
    const oneOf = ["sqlDuplicateShortName"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  result["shortName"] = anonymousValidator186795873(
    value["shortName"],
    `${propertyPath}.shortName`,
    errors,
  );
  result["firstName"] = anonymousValidator186795873(
    value["firstName"],
    `${propertyPath}.firstName`,
    errors,
  );
  result["secondName"] = anonymousValidator186795873(
    value["secondName"],
    `${propertyPath}.secondName`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "coreReservedGroupName", "groupName": string, }|undefined}
 */
export function anonymousValidator451802958(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys451802958.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (value["key"] !== "coreReservedGroupName") {
    const parentType = "string";
    const oneOf = ["coreReservedGroupName"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.key`, oneOf },
    });
  }
  result["key"] = value["key"] ?? undefined;
  result["groupName"] = anonymousValidator186795873(
    value["groupName"],
    `${propertyPath}.groupName`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlThrowingValidators", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "coreReservedGroupName", "groupName": string, }|undefined}
 */
export function anonymousValidator1080303482(
  value,
  propertyPath,
  errors = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  const subErrors = [];
  let errorCount = 0;
  let result = undefined;
  result = anonymousValidator1045315509(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator564383959(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator210116167(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator1331366345(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator2008271825(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator347072999(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator914281176(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  result = anonymousValidator451802958(value, propertyPath, subErrors);
  if (subErrors.length === errorCount) {
    return result;
  }
  subErrors.splice(errorCount + 1, subErrors.length - errorCount);
  errorCount = subErrors.length;
  delete subErrors[errorCount - 1].stack;
  errors.push({
    key: `validator.${parentType}.type`,
    info: { propertyPath, errors: subErrors },
  });
  return undefined;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {({"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlThrowingValidators", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "coreReservedGroupName", "groupName": string, })[]|undefined}
 */
export function anonymousValidator1364098500(
  value,
  propertyPath,
  errors = [],
  parentType = "array",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (!Array.isArray(value)) {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Array.from({ length: value.length });
  for (let i = 0; i < value.length; ++i) {
    result[i] = anonymousValidator1080303482(
      value[i],
      `${propertyPath}[${i}]`,
      errors,
    );
  }
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"options": CodeGenGenerateOpts, "structure": CodeGenStructure, "extension": ".js"|".ts", "importExtension": string, "outputFiles": (CodeGenFile)[], "errors": ({"key": "sqlMissingPrimaryKey", "typeName": string, }|{"key": "sqlForgotEnableQueries", "typeName": string, "referencedByType": string, }|{"key": "sqlMissingOneToMany", "referencedByGroup": string, "referencedByType": string, "typeName": string, "relationOwnKey": string, }|{"key": "sqlUnusedOneToMany", "type": string, "referencedType": string, "ownKey": string, }|{"key": "sqlEnableValidator", }|{"key": "sqlThrowingValidators", }|{"key": "sqlDuplicateShortName", "shortName": string, "firstName": string, "secondName": string, }|{"key": "coreReservedGroupName", "groupName": string, })[], }|undefined}
 */
export function anonymousValidator980814292(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys980814292.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  result["options"] = anonymousValidator2069957416(
    value["options"],
    `${propertyPath}.options`,
    errors,
  );
  result["structure"] = anonymousValidator1413365072(
    value["structure"],
    `${propertyPath}.structure`,
    errors,
  );
  if (value["extension"] !== ".js" && value["extension"] !== ".ts") {
    const parentType = "string";
    const oneOf = [".js", ".ts"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.extension`, oneOf },
    });
  }
  result["extension"] = value["extension"] ?? undefined;
  result["importExtension"] = anonymousValidator186795873(
    value["importExtension"],
    `${propertyPath}.importExtension`,
    errors,
  );
  result["outputFiles"] = anonymousValidator1979163207(
    value["outputFiles"],
    `${propertyPath}.outputFiles`,
    errors,
  );
  result["errors"] = anonymousValidator1364098500(
    value["errors"],
    `${propertyPath}.errors`,
    errors,
  );
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"phase": "init"|"collect"|"finish", }|undefined}
 */
export function anonymousValidator1664519436(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1664519436.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (
    value["phase"] !== "init" &&
    value["phase"] !== "collect" &&
    value["phase"] !== "finish"
  ) {
    const parentType = "string";
    const oneOf = ["init", "collect", "finish"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.phase`, oneOf },
    });
  }
  result["phase"] = value["phase"] ?? undefined;
  return result;
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @param {{ key: string, info: any }[]} errors
 * @param {string} parentType
 * @returns {{"isJSON"?: undefined|boolean, "nestedIsJSON"?: undefined|boolean, "useDefaults"?: undefined|boolean, "useTypescript"?: undefined|boolean, "isNode"?: undefined|boolean, "isBrowser"?: undefined|boolean, "suffix"?: undefined|string, "fileTypeIO"?: undefined|"input"|"outputRouter"|"outputClient", }|undefined}
 */
export function anonymousValidator1287070944(
  value,
  propertyPath,
  errors = [],
  parentType = "object",
) {
  if (isNil(value)) {
    errors.push({
      key: `validator.${parentType}.undefined`,
      info: { propertyPath },
    });
    return undefined;
  }
  if (typeof value !== "object") {
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath },
    });
    return undefined;
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    if (!objectKeys1287070944.has(key)) {
      errors.push({
        key: `validator.${parentType}.strict`,
        info: { propertyPath, extraKey: key },
      });
      return undefined;
    }
  }
  if (!isNil(value["isJSON"]) && typeof value["isJSON"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isJSON` },
    });
  }
  result["isJSON"] = value["isJSON"] ?? undefined;
  if (
    !isNil(value["nestedIsJSON"]) &&
    typeof value["nestedIsJSON"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.nestedIsJSON` },
    });
  }
  result["nestedIsJSON"] = value["nestedIsJSON"] ?? undefined;
  if (
    !isNil(value["useDefaults"]) &&
    typeof value["useDefaults"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.useDefaults` },
    });
  }
  result["useDefaults"] = value["useDefaults"] ?? undefined;
  if (
    !isNil(value["useTypescript"]) &&
    typeof value["useTypescript"] !== "boolean"
  ) {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.useTypescript` },
    });
  }
  result["useTypescript"] = value["useTypescript"] ?? undefined;
  if (!isNil(value["isNode"]) && typeof value["isNode"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isNode` },
    });
  }
  result["isNode"] = value["isNode"] ?? undefined;
  if (!isNil(value["isBrowser"]) && typeof value["isBrowser"] !== "boolean") {
    const parentType = "boolean";
    errors.push({
      key: `validator.${parentType}.type`,
      info: { propertyPath: `${propertyPath}.isBrowser` },
    });
  }
  result["isBrowser"] = value["isBrowser"] ?? undefined;
  result["suffix"] = anonymousValidator1443576836(
    value["suffix"],
    `${propertyPath}.suffix`,
    errors,
  );
  if (
    value["fileTypeIO"] !== "input" &&
    value["fileTypeIO"] !== "outputRouter" &&
    value["fileTypeIO"] !== "outputClient" &&
    value["fileTypeIO"] !== undefined &&
    value["fileTypeIO"] !== null
  ) {
    const parentType = "string";
    const oneOf = ["input", "outputRouter", "outputClient"];
    errors.push({
      key: `validator.${parentType}.oneOf`,
      info: { propertyPath: `${propertyPath}.fileTypeIO`, oneOf },
    });
  }
  result["fileTypeIO"] = value["fileTypeIO"] ?? undefined;
  return result;
}
