// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

export const validatorHooks = {};

const isNil = (value) => value === undefined || value === null;

/**
 * This function should not throw as the corresponding validator will do that
 * @callback ValidationErrorFn
 * @param {string} key
 * @param {Object} info
 */

/**
 * @type ValidationErrorFn
 */
let _errorBuildFn = (key, info) => {
  const err = new Error(`ValidationError: ${key}`);
  err.key = key;
  err.info = info;
  return err;
};

/**
 * Set a different error function, for example AppError.validationError
 * @param {ValidationErrorFn} fn
 */
export function validatorSetError(fn) {
  _errorBuildFn = fn;
}

function buildError(key, info) {
  throw _errorBuildFn(key, info);
}

export const codeGenValidators = {
  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenType}
   */
  type: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenType"](result);
    }
    result = anyOfValidator0(result, propertyPath);
    if ("postValidateCodeGenType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenAnyType}
   */
  anyType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenAnyType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenAnyType"](result);
    }
    result = objectValidator15(result, propertyPath);
    if ("postValidateCodeGenAnyType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenAnyType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenAnyOfType}
   */
  anyOfType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenAnyOfType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenAnyOfType"](result);
    }
    result = objectValidator25(result, propertyPath);
    if ("postValidateCodeGenAnyOfType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenAnyOfType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenArrayType}
   */
  arrayType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenArrayType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenArrayType"](result);
    }
    result = objectValidator29(result, propertyPath);
    if ("postValidateCodeGenArrayType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenArrayType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenBooleanType}
   */
  booleanType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenBooleanType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenBooleanType"](result);
    }
    result = objectValidator34(result, propertyPath);
    if ("postValidateCodeGenBooleanType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenBooleanType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenDateType}
   */
  dateType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenDateType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenDateType"](result);
    }
    result = objectValidator38(result, propertyPath);
    if ("postValidateCodeGenDateType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenDateType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenFileType}
   */
  fileType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenFileType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenFileType"](result);
    }
    result = objectValidator40(result, propertyPath);
    if ("postValidateCodeGenFileType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenFileType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenGenericType}
   */
  genericType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenGenericType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenGenericType"](result);
    }
    result = objectValidator42(result, propertyPath);
    if ("postValidateCodeGenGenericType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenGenericType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenNumberType}
   */
  numberType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenNumberType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenNumberType"](result);
    }
    result = objectValidator46(result, propertyPath);
    if ("postValidateCodeGenNumberType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenNumberType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenObjectType}
   */
  objectType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenObjectType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenObjectType"](result);
    }
    result = objectValidator50(result, propertyPath);
    if ("postValidateCodeGenObjectType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenObjectType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenReferenceType}
   */
  referenceType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenReferenceType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenReferenceType"](result);
    }
    result = objectValidator57(result, propertyPath);
    if ("postValidateCodeGenReferenceType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenReferenceType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenRelationType}
   */
  relationType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenRelationType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenRelationType"](result);
    }
    result = objectValidator60(result, propertyPath);
    if ("postValidateCodeGenRelationType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenRelationType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenStringType}
   */
  stringType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenStringType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenStringType"](result);
    }
    result = objectValidator65(result, propertyPath);
    if ("postValidateCodeGenStringType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenStringType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenUuidType}
   */
  uuidType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenUuidType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenUuidType"](result);
    }
    result = objectValidator70(result, propertyPath);
    if ("postValidateCodeGenUuidType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenUuidType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenRouteType}
   */
  routeType: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenRouteType" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenRouteType"](result);
    }
    result = objectValidator72(result, propertyPath);
    if ("postValidateCodeGenRouteType" in validatorHooks) {
      return validatorHooks["postValidateCodeGenRouteType"](result);
    }
    return result;
  },

  /**
   *
   * @param {*} value
   * @param {string} [propertyPath]
   * @returns { CodeGenStructure}
   */
  structure: (value, propertyPath = "$") => {
    let result = value;
    if ("preValidateCodeGenStructure" in validatorHooks) {
      result = validatorHooks["preValidateCodeGenStructure"](result);
    }
    result = genericValidator81(result, propertyPath);
    if ("postValidateCodeGenStructure" in validatorHooks) {
      return validatorHooks["postValidateCodeGenStructure"](result);
    }
    return result;
  },
};

function referenceValidator1(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.anyType(value, propertyPath);
}
function referenceValidator2(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.anyOfType(value, propertyPath);
}
function referenceValidator3(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.arrayType(value, propertyPath);
}
function referenceValidator4(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.booleanType(value, propertyPath);
}
function referenceValidator5(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.dateType(value, propertyPath);
}
function referenceValidator6(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.fileType(value, propertyPath);
}
function referenceValidator7(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.genericType(value, propertyPath);
}
function referenceValidator8(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.numberType(value, propertyPath);
}
function referenceValidator9(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.objectType(value, propertyPath);
}
function referenceValidator10(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.referenceType(value, propertyPath);
}
function referenceValidator11(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.relationType(value, propertyPath);
}
function referenceValidator12(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.stringType(value, propertyPath);
}
function referenceValidator13(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.uuidType(value, propertyPath);
}
function referenceValidator14(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.routeType(value, propertyPath);
}
function anyOfValidator0(
  value,
  propertyPath,
  errorList = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    return buildError("validator.anyOf.undefined", { propertyPath }, errorList);
  }
  const errors = [];
  try {
    return referenceValidator1(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator2(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator3(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator4(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator5(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator6(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator7(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator8(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator9(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator10(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator11(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator12(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator13(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return referenceValidator14(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  return buildError(
    `validator.${parentType}.type`,
    { propertyPath, errors },
    errorList,
  );
}
function stringValidator16(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "any") {
    const oneOf = "any";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function stringValidator17(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return;
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 0) {
    const min = 0;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  return value;
}
function booleanValidator18(
  value,
  propertyPath,
  errorList = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return false;
  }
  if (typeof value !== "boolean") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  return value;
}
function stringValidator20(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 0) {
    const min = 0;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  return value;
}
function booleanValidator21(
  value,
  propertyPath,
  errorList = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return buildError(
      "validator.boolean.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "boolean") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  return value;
}
function numberValidator22(
  value,
  propertyPath,
  errorList = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return buildError(
      "validator.number.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (!Number.isInteger(value)) {
    return buildError(
      `validator.${parentType}.integer`,
      { propertyPath },
      errorList,
    );
  }
  return value;
}
function anyOfValidator19(
  value,
  propertyPath,
  errorList = [],
  parentType = "anyOf",
) {
  if (isNil(value)) {
    return;
  }
  const errors = [];
  try {
    return stringValidator20(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return booleanValidator21(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  try {
    return numberValidator22(value, propertyPath, errorList);
  } catch (e) {
    errors.push({
      name: e.name,
      message: e.message,
      key: e.key,
      info: e.info,
    });
  }
  return buildError(
    `validator.${parentType}.type`,
    { propertyPath, errors },
    errorList,
  );
}
function stringValidator23(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return;
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  return value;
}
function objectValidator24(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return;
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["primary"] = booleanValidator18(
    value["primary"],
    `${propertyPath}.` + `primary`,
    errorList,
  );
  result["searchable"] = booleanValidator18(
    value["searchable"],
    `${propertyPath}.` + `searchable`,
    errorList,
  );
  return result;
}
function objectValidator15(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator16(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["typeOf"] = stringValidator23(
    value["typeOf"],
    `${propertyPath}.` + `typeOf`,
    errorList,
  );
  result["instanceOf"] = stringValidator23(
    value["instanceOf"],
    `${propertyPath}.` + `instanceOf`,
    errorList,
  );
  return result;
}
function stringValidator26(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "anyOf") {
    const oneOf = "anyOf";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function referenceValidator28(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function arrayValidator27(
  value,
  propertyPath,
  errorList = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return buildError("validator.array.undefined", { propertyPath }, errorList);
  }
  if (!Array.isArray(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = [];
  for (let i = 0; i < value.length; ++i) {
    result.push(
      referenceValidator28(value[i], `${propertyPath}[${i}]`, errorList),
    );
  }
  return result;
}
function objectValidator25(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator26(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["values"] = arrayValidator27(
    value["values"],
    `${propertyPath}.` + `values`,
    errorList,
  );
  return result;
}
function stringValidator30(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "array") {
    const oneOf = "array";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function numberValidator32(
  value,
  propertyPath,
  errorList = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (!Number.isInteger(value)) {
    return buildError(
      `validator.${parentType}.integer`,
      { propertyPath },
      errorList,
    );
  }
  return value;
}
function objectValidator31(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["convert"] = booleanValidator18(
    value["convert"],
    `${propertyPath}.` + `convert`,
    errorList,
  );
  result["min"] = numberValidator32(
    value["min"],
    `${propertyPath}.` + `min`,
    errorList,
  );
  result["max"] = numberValidator32(
    value["max"],
    `${propertyPath}.` + `max`,
    errorList,
  );
  return result;
}
function referenceValidator33(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function objectValidator29(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator30(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["validator"] = objectValidator31(
    value["validator"],
    `${propertyPath}.` + `validator`,
    errorList,
  );
  result["values"] = referenceValidator33(
    value["values"],
    `${propertyPath}.` + `values`,
    errorList,
  );
  return result;
}
function stringValidator35(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "boolean") {
    const oneOf = "boolean";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function booleanValidator36(
  value,
  propertyPath,
  errorList = [],
  parentType = "boolean",
) {
  if (isNil(value)) {
    return;
  }
  if (typeof value !== "boolean") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  return value;
}
function objectValidator37(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["convert"] = booleanValidator18(
    value["convert"],
    `${propertyPath}.` + `convert`,
    errorList,
  );
  return result;
}
function objectValidator34(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator35(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["oneOf"] = booleanValidator36(
    value["oneOf"],
    `${propertyPath}.` + `oneOf`,
    errorList,
  );
  result["validator"] = objectValidator37(
    value["validator"],
    `${propertyPath}.` + `validator`,
    errorList,
  );
  return result;
}
function stringValidator39(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "date") {
    const oneOf = "date";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function objectValidator38(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator39(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  return result;
}
function stringValidator41(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "file") {
    const oneOf = "file";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function objectValidator40(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator41(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  return result;
}
function stringValidator43(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "generic") {
    const oneOf = "generic";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function referenceValidator44(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function referenceValidator45(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function objectValidator42(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator43(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["keys"] = referenceValidator44(
    value["keys"],
    `${propertyPath}.` + `keys`,
    errorList,
  );
  result["values"] = referenceValidator45(
    value["values"],
    `${propertyPath}.` + `values`,
    errorList,
  );
  return result;
}
function stringValidator47(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "number") {
    const oneOf = "number";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function arrayValidator48(
  value,
  propertyPath,
  errorList = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return;
  }
  if (!Array.isArray(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = [];
  for (let i = 0; i < value.length; ++i) {
    result.push(
      numberValidator22(value[i], `${propertyPath}[${i}]`, errorList),
    );
  }
  return result;
}
function objectValidator49(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["convert"] = booleanValidator18(
    value["convert"],
    `${propertyPath}.` + `convert`,
    errorList,
  );
  result["floatingPoint"] = booleanValidator18(
    value["floatingPoint"],
    `${propertyPath}.` + `floatingPoint`,
    errorList,
  );
  result["min"] = numberValidator32(
    value["min"],
    `${propertyPath}.` + `min`,
    errorList,
  );
  result["max"] = numberValidator32(
    value["max"],
    `${propertyPath}.` + `max`,
    errorList,
  );
  return result;
}
function objectValidator46(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator47(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["oneOf"] = arrayValidator48(
    value["oneOf"],
    `${propertyPath}.` + `oneOf`,
    errorList,
  );
  result["validator"] = objectValidator49(
    value["validator"],
    `${propertyPath}.` + `validator`,
    errorList,
  );
  return result;
}
function stringValidator51(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "object") {
    const oneOf = "object";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function objectValidator52(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["strict"] = booleanValidator18(
    value["strict"],
    `${propertyPath}.` + `strict`,
    errorList,
  );
  return result;
}
function stringValidator54(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  return value;
}
function referenceValidator55(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function genericValidator53(
  value,
  propertyPath,
  errorList = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    return buildError(
      "validator.generic.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const validatedKey = stringValidator54(
      key,
      `${propertyPath}.$key[${key}]`,
      errorList,
    );
    const validatedValue = referenceValidator55(
      value[key],
      `${propertyPath}.$value[${key}]`,
      errorList,
    );
    result[validatedKey] = validatedValue;
  }
  return result;
}
function objectValidator56(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return;
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["withHistory"] = booleanValidator18(
    value["withHistory"],
    `${propertyPath}.` + `withHistory`,
    errorList,
  );
  result["withDates"] = booleanValidator18(
    value["withDates"],
    `${propertyPath}.` + `withDates`,
    errorList,
  );
  return result;
}
function objectValidator50(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator51(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["validator"] = objectValidator52(
    value["validator"],
    `${propertyPath}.` + `validator`,
    errorList,
  );
  result["keys"] = genericValidator53(
    value["keys"],
    `${propertyPath}.` + `keys`,
    errorList,
  );
  result["enableQueries"] = booleanValidator18(
    value["enableQueries"],
    `${propertyPath}.` + `enableQueries`,
    errorList,
  );
  result["queryOptions"] = objectValidator56(
    value["queryOptions"],
    `${propertyPath}.` + `queryOptions`,
    errorList,
  );
  return result;
}
function stringValidator58(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "reference") {
    const oneOf = "reference";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function objectValidator59(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  return result;
}
function objectValidator57(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator58(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["reference"] = objectValidator59(
    value["reference"],
    `${propertyPath}.` + `reference`,
    errorList,
  );
  return result;
}
function stringValidator61(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "relation") {
    const oneOf = "relation";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function stringValidator62(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "oneToOne" && value !== "oneToMany" && value !== "manyToOne") {
    const oneOf = "oneToOne, oneToMany, manyToOne";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function referenceValidator63(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function referenceValidator64(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function objectValidator60(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator61(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["relationType"] = stringValidator62(
    value["relationType"],
    `${propertyPath}.` + `relationType`,
    errorList,
  );
  result["left"] = referenceValidator63(
    value["left"],
    `${propertyPath}.` + `left`,
    errorList,
  );
  result["leftKey"] = stringValidator54(
    value["leftKey"],
    `${propertyPath}.` + `leftKey`,
    errorList,
  );
  result["right"] = referenceValidator64(
    value["right"],
    `${propertyPath}.` + `right`,
    errorList,
  );
  result["rightKey"] = stringValidator54(
    value["rightKey"],
    `${propertyPath}.` + `rightKey`,
    errorList,
  );
  result["substituteKey"] = stringValidator54(
    value["substituteKey"],
    `${propertyPath}.` + `substituteKey`,
    errorList,
  );
  return result;
}
function stringValidator66(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "string") {
    const oneOf = "string";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function arrayValidator67(
  value,
  propertyPath,
  errorList = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return;
  }
  if (!Array.isArray(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = [];
  for (let i = 0; i < value.length; ++i) {
    result.push(
      stringValidator54(value[i], `${propertyPath}[${i}]`, errorList),
    );
  }
  return result;
}
function numberValidator69(
  value,
  propertyPath,
  errorList = [],
  parentType = "number",
) {
  if (isNil(value)) {
    return 1;
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (!Number.isInteger(value)) {
    return buildError(
      `validator.${parentType}.integer`,
      { propertyPath },
      errorList,
    );
  }
  return value;
}
function objectValidator68(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["convert"] = booleanValidator18(
    value["convert"],
    `${propertyPath}.` + `convert`,
    errorList,
  );
  result["trim"] = booleanValidator18(
    value["trim"],
    `${propertyPath}.` + `trim`,
    errorList,
  );
  result["lowerCase"] = booleanValidator18(
    value["lowerCase"],
    `${propertyPath}.` + `lowerCase`,
    errorList,
  );
  result["upperCase"] = booleanValidator18(
    value["upperCase"],
    `${propertyPath}.` + `upperCase`,
    errorList,
  );
  result["min"] = numberValidator69(
    value["min"],
    `${propertyPath}.` + `min`,
    errorList,
  );
  result["max"] = numberValidator32(
    value["max"],
    `${propertyPath}.` + `max`,
    errorList,
  );
  result["pattern"] = stringValidator23(
    value["pattern"],
    `${propertyPath}.` + `pattern`,
    errorList,
  );
  return result;
}
function objectValidator65(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator66(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["oneOf"] = arrayValidator67(
    value["oneOf"],
    `${propertyPath}.` + `oneOf`,
    errorList,
  );
  result["validator"] = objectValidator68(
    value["validator"],
    `${propertyPath}.` + `validator`,
    errorList,
  );
  return result;
}
function stringValidator71(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "uuid") {
    const oneOf = "uuid";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function objectValidator70(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator71(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  return result;
}
function stringValidator73(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (value !== "route") {
    const oneOf = "route";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function stringValidator74(
  value,
  propertyPath,
  errorList = [],
  parentType = "string",
) {
  if (isNil(value)) {
    return buildError(
      "validator.string.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "string") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  if (value.length < 1) {
    const min = 1;
    return buildError(
      `validator.${parentType}.min`,
      { propertyPath, min },
      errorList,
    );
  }
  if (
    value !== "GET" &&
    value !== "POST" &&
    value !== "PUT" &&
    value !== "DELETE" &&
    value !== "HEAD"
  ) {
    const oneOf = "GET, POST, PUT, DELETE, HEAD";
    return buildError(
      `validator.${parentType}.oneOf`,
      { propertyPath, oneOf },
      errorList,
    );
  }
  return value;
}
function arrayValidator75(
  value,
  propertyPath,
  errorList = [],
  parentType = "array",
) {
  if (isNil(value)) {
    return buildError("validator.array.undefined", { propertyPath }, errorList);
  }
  if (!Array.isArray(value)) {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = [];
  for (let i = 0; i < value.length; ++i) {
    result.push(
      stringValidator54(value[i], `${propertyPath}[${i}]`, errorList),
    );
  }
  return result;
}
function referenceValidator76(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return;
  }
  return codeGenValidators.type(value, propertyPath);
}
function referenceValidator77(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return;
  }
  return codeGenValidators.type(value, propertyPath);
}
function referenceValidator78(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return;
  }
  return codeGenValidators.type(value, propertyPath);
}
function referenceValidator79(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return;
  }
  return codeGenValidators.type(value, propertyPath);
}
function referenceValidator80(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return;
  }
  return codeGenValidators.type(value, propertyPath);
}
function objectValidator72(
  value,
  propertyPath,
  errorList = [],
  parentType = "object",
) {
  if (isNil(value)) {
    return buildError(
      "validator.object.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  result["type"] = stringValidator73(
    value["type"],
    `${propertyPath}.` + `type`,
    errorList,
  );
  result["docString"] = stringValidator17(
    value["docString"],
    `${propertyPath}.` + `docString`,
    errorList,
  );
  result["isOptional"] = booleanValidator18(
    value["isOptional"],
    `${propertyPath}.` + `isOptional`,
    errorList,
  );
  result["defaultValue"] = anyOfValidator19(
    value["defaultValue"],
    `${propertyPath}.` + `defaultValue`,
    errorList,
  );
  result["uniqueName"] = stringValidator23(
    value["uniqueName"],
    `${propertyPath}.` + `uniqueName`,
    errorList,
  );
  result["group"] = stringValidator23(
    value["group"],
    `${propertyPath}.` + `group`,
    errorList,
  );
  result["name"] = stringValidator23(
    value["name"],
    `${propertyPath}.` + `name`,
    errorList,
  );
  result["sql"] = objectValidator24(
    value["sql"],
    `${propertyPath}.` + `sql`,
    errorList,
  );
  result["method"] = stringValidator74(
    value["method"],
    `${propertyPath}.` + `method`,
    errorList,
  );
  result["path"] = stringValidator54(
    value["path"],
    `${propertyPath}.` + `path`,
    errorList,
  );
  result["tags"] = arrayValidator75(
    value["tags"],
    `${propertyPath}.` + `tags`,
    errorList,
  );
  result["query"] = referenceValidator76(
    value["query"],
    `${propertyPath}.` + `query`,
    errorList,
  );
  result["params"] = referenceValidator77(
    value["params"],
    `${propertyPath}.` + `params`,
    errorList,
  );
  result["body"] = referenceValidator78(
    value["body"],
    `${propertyPath}.` + `body`,
    errorList,
  );
  result["files"] = referenceValidator79(
    value["files"],
    `${propertyPath}.` + `files`,
    errorList,
  );
  result["response"] = referenceValidator80(
    value["response"],
    `${propertyPath}.` + `response`,
    errorList,
  );
  return result;
}
function referenceValidator83(
  value,
  propertyPath,
  errorList = [],
  parentType = "reference",
) {
  if (isNil(value)) {
    return buildError(
      "validator.reference.undefined",
      { propertyPath },
      errorList,
    );
  }
  return codeGenValidators.type(value, propertyPath);
}
function genericValidator82(
  value,
  propertyPath,
  errorList = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    return buildError(
      "validator.generic.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const validatedKey = stringValidator54(
      key,
      `${propertyPath}.$key[${key}]`,
      errorList,
    );
    const validatedValue = referenceValidator83(
      value[key],
      `${propertyPath}.$value[${key}]`,
      errorList,
    );
    result[validatedKey] = validatedValue;
  }
  return result;
}
function genericValidator81(
  value,
  propertyPath,
  errorList = [],
  parentType = "generic",
) {
  if (isNil(value)) {
    return buildError(
      "validator.generic.undefined",
      { propertyPath },
      errorList,
    );
  }
  if (typeof value !== "object") {
    return buildError(
      `validator.${parentType}.type`,
      { propertyPath },
      errorList,
    );
  }
  const result = Object.create(null);
  for (const key of Object.keys(value)) {
    const validatedKey = stringValidator54(
      key,
      `${propertyPath}.$key[${key}]`,
      errorList,
    );
    const validatedValue = genericValidator82(
      value[key],
      `${propertyPath}.$value[${key}]`,
      errorList,
    );
    result[validatedKey] = validatedValue;
  }
  return result;
}
