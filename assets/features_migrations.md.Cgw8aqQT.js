import{_ as i,c as a,o as t,ag as s}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Postgres migrations","description":"","frontmatter":{},"headers":[],"relativePath":"features/migrations.md","filePath":"features/migrations.md"}'),o={name:"features/migrations.md"};function n(r,e,l,c,p,d){return t(),a("div",null,[...e[0]||(e[0]=[s(`<h1 id="postgres-migrations" tabindex="-1">Postgres migrations <a class="header-anchor" href="#postgres-migrations" aria-label="Permalink to &quot;Postgres migrations&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> and <code>@compas/store</code> to be installed</p></div><h2 id="migration-files" tabindex="-1">Migration files <a class="header-anchor" href="#migration-files" aria-label="Permalink to &quot;Migration files&quot;">​</a></h2><p>Compas cli comes with a migration runner built-in. This is based on various migration functions exported from @compas/store. The migration system supports two types of migrations:</p><ul><li>Forward migrations</li><li>Repeatable migrations</li></ul><p>Forward migrations are a way of only advancing the schema state. So when you need to rollback a change, a new forward migration needs to be created.</p><p>Repeatable migrations can be used in combination with <code>CREATE OR REPLACE</code> with for example views. If the hash of the current repeatable migration is not equal to the last execution stored in the database, the migration is executed.</p><p>Every migration file gets a new transaction by default. To skip transaction creation, add <code>-- disable auto transaction</code> in your file.</p><p>The migrations files are expected to live in <code>$project/migrations</code> directory. The file names should be in the following format: <code>001-name.sql</code> or <code>002-r-long-name.sql</code> for repeatable migrations.</p><p>We also support JavaScript based migrations, this allows you to do conditional logic based on environment settings. A JavaScript migration file follows the same file format as sql files: <code>002-my-js-migration.js</code>. To disable automatic transactions you can use <code>// disable auto transaction</code> anywhere in the file.</p><p>The file is imported by the migration runner and expected to export the following migration function:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Do migrations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Note that it is suggested to keep the amount of differences per environment to a minimal, since it makes issues harder to debug.</p><p>See the CLI reference for <a href="/references/cli.html#compas-migrate"><code>compas migrate</code></a> for the build-in migration runner.</p>`,14)])])}const g=i(o,[["render",n]]);export{m as __pageData,g as default};
