import{_ as t,c as o,o as a,ag as i}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"Contributing","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"../contributing.md","filePath":"../contributing.md"}'),s={name:"../contributing.md"};function n(c,e,d,l,r,p){return a(),o("div",null,[...e[0]||(e[0]=[i(`<h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h1><h3 id="development-scripts" tabindex="-1">Development &amp; scripts <a class="header-anchor" href="#development-scripts" aria-label="Permalink to &quot;Development &amp; scripts&quot;">​</a></h3><p>Development should be pretty straight forward. Run <code>compas test</code> to run the test suite. Before making a commit, make sure to run <code>compas lint</code>. Note that this automatically tries to fix most issues. All commands in this repo can be run vai the &#39;self-hosted&#39; <code>@compas/cli</code>. Run <code>compas help</code> for an overview. Below a few commands related to things you could be working on:</p><p><strong>General</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Install dependencies</span></span>
<span class="line"><span>npm install</span></span>
<span class="line"><span># Format with ESLint &amp; Prettier</span></span>
<span class="line"><span>compas lint</span></span>
<span class="line"><span># Run the tests</span></span>
<span class="line"><span>compas test (--coverage)</span></span></code></pre></div><p><strong>Documentation</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Sync CLI api reference and regenerate</span></span>
<span class="line"><span>compas run syncMetadata</span></span></code></pre></div><p><strong>Code generation, @compas/store structure changes</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>compas generate</span></span></code></pre></div><h3 id="improving-test-coverage" tabindex="-1">Improving test coverage <a class="header-anchor" href="#improving-test-coverage" aria-label="Permalink to &quot;Improving test coverage&quot;">​</a></h3><p>There are many things not covered by tests, there are a few ways to improve coverage, but let&#39;s start by running <code>compas test --coverage</code> and opening <code>file:///path/to/repo/coverage/lcov-report/index.html</code> in your browser.</p><p>If it is your first time doing this, start by checking out files in the <code>generated</code> directory. Most of these files are partially covered, and it should be pretty straight forward to find a related function that is tested, and doing the same for the yet untested function. For new cases related to code generation, add the missing case in <code>gen/testing.js</code> and regenerate with <code>compas generate</code>. Then run <code>compas test --coverage</code> again to see that the new case is not yet covered by tests.</p><h3 id="debugging-tests" tabindex="-1">Debugging tests <a class="header-anchor" href="#debugging-tests" aria-label="Permalink to &quot;Debugging tests&quot;">​</a></h3><p>Debug that file as if you debug whatever other Node.js script. E.g in Webstorm: (right-mouse click -&gt; Debug <code>file.test.js</code>)</p><h3 id="publishing" tabindex="-1">Publishing <a class="header-anchor" href="#publishing" aria-label="Permalink to &quot;Publishing&quot;">​</a></h3><ul><li>Ensure you are logged in to npm with <code>npm whoami</code>, when logged out; <code>npm login</code></li><li>Ensure you have the <code>main</code>-branch checked out, and are completely up-to-date</li><li>Write to the changelog <ul><li>Run <code>compas run changelog</code></li><li>Replace <code>x.x.x</code> with the new version (3 times) in <code>./changelog.md</code></li><li>Write about the changes and how to use it them, in <code>docs/releases/x.x.x.md</code></li></ul></li><li>Check if types are still generating with <code>compas run types</code></li><li>Sync metadata: <code>compas run syncMetadata</code>, this will sync the changelog to the docs folder and regenerate the api reference.</li><li>Commit with <code>chore: prepare release for vX.X.X</code> and push to main</li><li>Run <code>compas release --version vX.x.X --otp 111111</code>. This will build &amp; publish all packages <ul><li>Specify the new version</li><li>Check packages it will publish and send <code>y</code></li><li>Give a new OTP every time it is asked.</li></ul></li></ul><h3 id="webstorm" tabindex="-1">WebStorm <a class="header-anchor" href="#webstorm" aria-label="Permalink to &quot;WebStorm&quot;">​</a></h3><ul><li><code>Help</code> &gt; <code>Edit Custom Properties...</code> &gt; <code>idea.javascript.max.evaluation.complexity=80</code></li><li>Open <code>/package.json</code> &gt; <code>Find Actions</code> &gt; <code>Apply Prettier Code Style Rules</code></li><li>Open <code>/.eslintrc.cjs</code> &gt; <code>Find Actions</code> &gt; <code>Apply ESLint Code Style Rules</code></li><li><code>Settings</code> &gt; <code>Node.js And NPM</code> &gt; <code>Coding assistance for Node.js</code></li><li><code>Edit configurations...</code> &gt; <code>Templates/Node.js</code>: <ul><li><code>V8 Profiling</code> &gt; <code>Allow taking heap snapshots</code></li><li><code>Configuration</code> &gt; <code>Working directory</code> &gt; <code>/path/to/checkout/root</code></li></ul></li></ul>`,18)])])}const u=t(s,[["render",n]]);export{h as __pageData,u as default};
