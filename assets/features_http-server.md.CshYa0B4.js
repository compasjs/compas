import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"HTTP server","description":"","frontmatter":{},"headers":[],"relativePath":"features/http-server.md","filePath":"features/http-server.md"}'),l={name:"features/http-server.md"};function n(h,s,p,r,o,d){return a(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="http-server" tabindex="-1">HTTP server <a class="header-anchor" href="#http-server" aria-label="Permalink to &quot;HTTP server&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/stdlib</code> and <code>@compas/server</code> to be installed</p></div><p>Compas also provides some utilities for constructing an HTTP server. This is based on <a href="https://koajs.com/" target="_blank" rel="noreferrer">Koa</a>. The server consist of built-in error handling, a logger and security headers.</p><h2 id="default-server" tabindex="-1">Default server <a class="header-anchor" href="#default-server" aria-label="Permalink to &quot;Default server&quot;">​</a></h2><p>Create a file at <code>scripts/api.js</code> with the following contents:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@compas/server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mainFn } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@compas/stdlib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mainFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, main);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>When we run this file we can already check out some default features.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./scripts/api.js</span></span></code></pre></div><p>We are going to do some GET requests, you can use your browser or another HTTP client, like <a href="https://httpie.io/" target="_blank" rel="noreferrer">httpie</a> .</p><ol><li>Check if the server is running</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/_health</span></span></code></pre></div><ol start="2"><li>404 handling</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000/oops</span></span></code></pre></div><ol start="3"><li>Logging</li></ol><p>Check the logs of the running server. You should see quite a bit of output there. Notice that the <code>/_health</code> request is missing. In order, you should see the following:</p><ul><li>Formatted 404 error with stack trace. This is an &#39;info&#39; log for any non 500 response status error.</li><li>The request log to <code>/oops</code>, containing some request and response information.</li><li>Event callstack, this can be used for timings, analytics or other diagnostic purposes.</li></ul><p>Notes that all logs also contain a <code>requestId</code>. This is automatically added when you use the logger provided by <code>ctx.log</code>. The context also contains <code>ctx.event</code>. These two together are explained in <a href="/features/logger-and-events.html">logger and events</a></p><h2 id="other-middleware" tabindex="-1">Other middleware <a class="header-anchor" href="#other-middleware" aria-label="Permalink to &quot;Other middleware&quot;">​</a></h2><ul><li><code>createBodyParser</code> can be used to create a middleware that is able to parse json or multipart bodies.</li><li><code>compose</code> can be used to manually compose multiple middleware in to a single callable middleware</li><li><code>sendFile</code> is a utility to easily send out files. Supports partial responses, when for example sending a video.</li></ul>`,19)])])}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
