import{_ as e,c as a,o,ag as i}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"compas","description":"","frontmatter":{},"headers":[],"relativePath":"references/cli.md","filePath":"references/cli.md"}'),s={name:"references/cli.md"};function n(r,t,d,h,l,c){return o(),a("div",null,[...t[0]||(t[0]=[i('<h1 id="compas" tabindex="-1"><code>compas</code> <a class="header-anchor" href="#compas" aria-label="Permalink to &quot;`compas`&quot;">​</a></h1><p>The Compas CLI</p><p>Unified backend tooling.</p><p>Examples:</p><ul><li>compas docker up</li><li>compas lint --jsdoc</li><li>compas visualise erd --generated-directory ./src/generated</li></ul><p>References:</p><ul><li>Docs: <a href="https://compasjs.com" target="_blank" rel="noreferrer">https://compasjs.com</a></li><li>Source: <a href="https://github.com/compasjs/compas" target="_blank" rel="noreferrer">https://github.com/compasjs/compas</a></li><li>Issues: <a href="https://github.com/compasjs/compas/issues" target="_blank" rel="noreferrer">https://github.com/compasjs/compas/issues</a></li></ul><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-completions" tabindex="-1"><code>compas completions</code> <a class="header-anchor" href="#compas-completions" aria-label="Permalink to &quot;`compas completions`&quot;">​</a></h2><p>Configure shell auto-complete for this CLI.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-check-env" tabindex="-1"><code>compas check-env</code> <a class="header-anchor" href="#compas-check-env" aria-label="Permalink to &quot;`compas check-env`&quot;">​</a></h2><p>Various checks helping with a better Compas experience.</p><p>This command is able to check a few things in the current project, to see if it is optimally configured.</p><ul><li>&#39;.env.local&#39; should be in the .gitignore</li><li>&#39;.cache&#39; should be in the .gitignore</li><li>Only a single Compas version should be installed</li><li>Docker should be available to use with <code>compas docker</code></li></ul><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-code-mod" tabindex="-1"><code>compas code-mod</code> <a class="header-anchor" href="#compas-code-mod" aria-label="Permalink to &quot;`compas code-mod`&quot;">​</a></h2><p>Execute code-mods to help migrating to new Compas versions.</p><p>Since Compas generates quite a bit of boilerplate, this command can help you migrate to new Compas versions that have breaking changes in generated code. By detecting usage patterns of the generated output of a previous Compas version, it can migrate (most of) your usages to whatever the new version brings.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-code-mod-list" tabindex="-1"><code>compas code-mod list</code> <a class="header-anchor" href="#compas-code-mod-list" aria-label="Permalink to &quot;`compas code-mod list`&quot;">​</a></h3><p>List the available code-mods.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-code-mod-exec" tabindex="-1"><code>compas code-mod exec</code> <a class="header-anchor" href="#compas-code-mod-exec" aria-label="Permalink to &quot;`compas code-mod exec`&quot;">​</a></h3><p>Execute the specified code-mod.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--name</td><td>The code-mod name to execute. (string, required)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-docker" tabindex="-1"><code>compas docker</code> <a class="header-anchor" href="#compas-docker" aria-label="Permalink to &quot;`compas docker`&quot;">​</a></h2><p>Manage common docker components.</p><p>Manages a single PostgreSQL and Minio container for use in all your local projects. It can switch between multiple PostgreSQL versions (12-16 are supported via --postgres-version), however only a single version can be &#39;up&#39; at a time.</p><p>PostgreSQL credentials:</p><blockquote><p>postgresql://postgres:postgres@127.0.0.1:5432/postgres</p></blockquote><p>Minio credentials:</p><ul><li>ACCESS_KEY: minio</li><li>SECRET_KEY: minio123</li></ul><p>You can prevent Docker usage, but still use commands like &#39;compas docker clean&#39; with either the &#39;--use-host&#39; flag or by setting &#39;COMPAS_SKIP_DOCKER=true&#39; in your environment.</p><hr><p>Don&#39;t use this command and secrets for your production deployment.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--postgres-version</td><td>Specify the PostgreSQL version to use. Defaults to 12. (number)</td></tr><tr><td>--use-host</td><td>Skip Docker altogether and assume that Postgres and Minio are enabled on the host. Alternatively, set COMPAS_SKIP_DOCKER=true. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-docker-up" tabindex="-1"><code>compas docker up</code> <a class="header-anchor" href="#compas-docker-up" aria-label="Permalink to &quot;`compas docker up`&quot;">​</a></h3><p>Start the managed containers.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--postgres-version</td><td>Specify the PostgreSQL version to use. Defaults to 12. (number)</td></tr><tr><td>--use-host</td><td>Skip Docker altogether and assume that Postgres and Minio are enabled on the host. Alternatively, set COMPAS_SKIP_DOCKER=true. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-docker-down" tabindex="-1"><code>compas docker down</code> <a class="header-anchor" href="#compas-docker-down" aria-label="Permalink to &quot;`compas docker down`&quot;">​</a></h3><p>Stop the managed containers.</p><p>Stop any of the containers that could possibly be started by this CLI. It ignores context and stops any PostgreSQL container started by this CLI, ignoring <code>--postgres-version</code>.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--postgres-version</td><td>Specify the PostgreSQL version to use. Defaults to 12. (number)</td></tr><tr><td>--use-host</td><td>Skip Docker altogether and assume that Postgres and Minio are enabled on the host. Alternatively, set COMPAS_SKIP_DOCKER=true. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-docker-clean" tabindex="-1"><code>compas docker clean</code> <a class="header-anchor" href="#compas-docker-clean" aria-label="Permalink to &quot;`compas docker clean`&quot;">​</a></h3><p>Clean up all containers and volumes, or only the PostgreSQL databases of the specified projects.</p><p>When no arguments are passed, all created docker containers and volumes are removed.</p><p>By passing &#39;--project&#39;, it can clean up PostgreSQL databases without having to restart the containers. The flag is repeatable, so multiple projects can be cleaned at the same time. If no value is passed, it defaults to &#39;process.env.APP_NAME&#39;.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--project</td><td>Specify the project(s) to remove. If no value is passed, the current project is read from <code>environment.APP_NAME</code>. (booleanOrString[])</td></tr><tr><td>--postgres-version</td><td>Specify the PostgreSQL version to use. Defaults to 12. (number)</td></tr><tr><td>--use-host</td><td>Skip Docker altogether and assume that Postgres and Minio are enabled on the host. Alternatively, set COMPAS_SKIP_DOCKER=true. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-init" tabindex="-1"><code>compas init</code> <a class="header-anchor" href="#compas-init" aria-label="Permalink to &quot;`compas init`&quot;">​</a></h2><p>Init various files in the current project.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--all</td><td>Enable &#39;--gitignore&#39;, &#39;--jsconfig&#39; and &#39;--lint-config&#39;. (boolean)</td></tr><tr><td>--gitignore</td><td>Creates or overwrites the .gitignore, with defaults for IDE(s), Yarn/NPM and caches. (boolean)</td></tr><tr><td>--jsconfig</td><td>Creates or overwrites the root jsconfig.json file, to use with the Typescript Language Server. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-lint" tabindex="-1"><code>compas lint</code> <a class="header-anchor" href="#compas-lint" aria-label="Permalink to &quot;`compas lint`&quot;">​</a></h2><p>Lint all project files.</p><p>Uses Prettier and ESLint to lint project files.</p><p>ESLint is used for all JavaScript files and Prettier runs on JavaScript, JSON, Markdown, and YAML files. The default configuration can be initialized via &#39;compas init --lint-config&#39;.</p><p>If the &#39;lint&#39; (or &#39;lint:ci&#39;) script exists, they are preferred over manually running ESLint and Prettier.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--skip-prettier</td><td>Skip running Prettier. (boolean)</td></tr><tr><td>--skip-eslint</td><td>Skip running ESLint. (boolean)</td></tr><tr><td>--eslint-cache-location</td><td>Location of ESLint cache directory. Defaults to &#39;.cache/eslint/&#39;. (string)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-migrate" tabindex="-1"><code>compas migrate</code> <a class="header-anchor" href="#compas-migrate" aria-label="Permalink to &quot;`compas migrate`&quot;">​</a></h2><p>Run PostgreSQL migrations via the @compas/store migration system.</p><p>The migrations are managed via the @compas/store provided system. And are forward only.</p><p>A custom Postgres connection object can be provided by exporting a &#39;postgresConnectionSettings&#39; object from the files specified via the &#39;--connection-settings&#39; flag.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--connection-settings</td><td>Specify a path that contains the PostgreSQL connection object. (string)</td></tr><tr><td>--watch</td><td>Run the command, restarting it when file changes happen. See &#39;compas help watch&#39; for more information. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-migrate-info" tabindex="-1"><code>compas migrate info</code> <a class="header-anchor" href="#compas-migrate-info" aria-label="Permalink to &quot;`compas migrate info`&quot;">​</a></h3><p>Print the current migration state.</p><p>Print information about the migration state and exit. The information consists of migrations that are not applied yet, and migrations that have &#39;hashChanges&#39;, basically saying that the file on disk is out of sync with the migration that was applied in the past.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--connection-settings</td><td>Specify a path that contains the PostgreSQL connection object. (string)</td></tr><tr><td>--watch</td><td>Run the command, restarting it when file changes happen. See &#39;compas help watch&#39; for more information. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-migrate-rebuild" tabindex="-1"><code>compas migrate rebuild</code> <a class="header-anchor" href="#compas-migrate-rebuild" aria-label="Permalink to &quot;`compas migrate rebuild`&quot;">​</a></h3><p>Recreate migration state based on the file system.</p><p>Rebuild migration table with current file state. This allows for reordering migrations, squashing migrations and other things that alter the migration files, but do not affect the schema in any way. Note that Compas can&#39;t enforce any consistency between the migration files and the current schema state. So use with caution.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--connection-settings</td><td>Specify a path that contains the PostgreSQL connection object. (string)</td></tr><tr><td>--watch</td><td>Run the command, restarting it when file changes happen. See &#39;compas help watch&#39; for more information. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-run" tabindex="-1"><code>compas run</code> <a class="header-anchor" href="#compas-run" aria-label="Permalink to &quot;`compas run`&quot;">​</a></h2><p>Run arbitrary JavaScript files, scripts defined in the package.json and scripts located in the scripts directory.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--script-args</td><td>Arguments passed as is to the script when executed (like &#39;--port 3000&#39;). (string)</td></tr><tr><td>--node-args</td><td>Arguments passed to Node when executing the script (like &#39;--inspect&#39;). (string)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h3 id="compas-run-script" tabindex="-1"><code>compas run $script</code> <a class="header-anchor" href="#compas-run-script" aria-label="Permalink to &quot;`compas run $script`&quot;">​</a></h3><p>The file or script to run.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--watch</td><td>Run the command, restarting it when file changes happen. See &#39;compas help watch&#39; for more information. (boolean)</td></tr><tr><td>--script-args</td><td>Arguments passed as is to the script when executed (like &#39;--port 3000&#39;). (string)</td></tr><tr><td>--node-args</td><td>Arguments passed to Node when executing the script (like &#39;--inspect&#39;). (string)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-test" tabindex="-1"><code>compas test</code> <a class="header-anchor" href="#compas-test" aria-label="Permalink to &quot;`compas test`&quot;">​</a></h2><p>Run all tests in your project.</p><p>The test runner searches for all files ending with &#39;.test.js&#39; and runs them. Tests run in series in a single worker and subtests run serially in the order they are defined. If &#39;--serial&#39; is not passed, there will be multiple workers each executing parts of the tests.</p><p>Test files should be ordinary JavaScript files. By calling &#39;mainTestFn&#39; at the top of your file you can still use &#39;node ./path/to/file.test.js&#39; to execute the tests.</p><p>Global configuration can be applied to the test runners via a &#39;test/config.js&#39; file. A global timeout can be configured by setting &#39;export const timeout = 2500;&#39;. The value is specified in milliseconds. There is also a global &#39;setup&#39; and &#39;teardown&#39; function that can be exported from the &#39;test/config.js&#39; file. They may return a Promise.</p><p>To prevent flaky tests, &#39;--randomize-rounds&#39; can be used. This shuffles the order in which the tests are started. And prevents dependencies between test files. Making it easier to run a single test file via for examples &#39;compas run ./path/to/file.test.js&#39;.</p><p>Collecting and processing coverage information is done using C8. Use one of the supported configuration files by C8 to alter its behaviour. See <a href="https://www.npmjs.com/package/c8" target="_blank" rel="noreferrer">https://www.npmjs.com/package/c8</a> for more information.</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>--serial</td><td>Run tests serially instead of in parallel. Alternatively set &#39;--parallel-count 1&#39; (boolean)</td></tr><tr><td>--bail</td><td>Exit the test runner after the first failed assertion. Requires &#39;--serial&#39;. (boolean)</td></tr><tr><td>--parallel-count</td><td>The number of workers to use, when running in parallel. Defaulting to (the number of CPU cores - 1) or 4, whichever is lower. (number)</td></tr><tr><td>--randomize-rounds</td><td>Runs test the specified amount of times, shuffling the test file order between runs. (number)</td></tr><tr><td>--coverage</td><td>Collect coverage information while running the tests. (boolean)</td></tr><tr><td>--with-logs</td><td>Enable output of application loggers in the tests. (boolean)</td></tr><tr><td>--watch</td><td>Run the command, restarting it when file changes happen. See &#39;compas help watch&#39; for more information. (boolean)</td></tr><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-version" tabindex="-1"><code>compas version</code> <a class="header-anchor" href="#compas-version" aria-label="Permalink to &quot;`compas version`&quot;">​</a></h2><p>Print the installed Compas version and exit</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-help" tabindex="-1"><code>compas help</code> <a class="header-anchor" href="#compas-help" aria-label="Permalink to &quot;`compas help`&quot;">​</a></h2><p>Display help for any of the available commands.</p><p>// TODO</p><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table><h2 id="compas-watch" tabindex="-1"><code>compas watch</code> <a class="header-anchor" href="#compas-watch" aria-label="Permalink to &quot;`compas watch`&quot;">​</a></h2><p>Run the command, restarting it when file changes happen.</p><p>Some commands in this CLI can be watched. They can be executed via <code>compas watch [..subCommand]</code> or by adding the &#39;--watch&#39; flag when invoking the command.</p><p>The watching happens by monitoring all the files in your project and restarting the command once files are changed. Manually restarting is also possible by sending <code>rs&lt;enter&gt;</code> to the program.</p><p>Watch behaviour can be tuned by commands. Setting &#39;modifiers.isWatchable&#39; to &#39;true&#39; is necessary for it to allow watching, and &#39;watchSettings&#39; can be specified with custom extensions to be watched or specific directories to ignore. When watch behavior is needed for custom scripts, following the steps in <a href="https://compasjs.com/features/extending-the-cli.html" target="_blank" rel="noreferrer">extending the cli</a> is mandatory.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cliDefinition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	shortDescription: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	modifiers: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		isWatchable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is mandatory</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	watchSettings: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		extensions: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Defaults to &#39;[&quot;js&quot;, &quot;json&quot;]&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		ignorePatterns: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__fixtures__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Defaults to &#39;[&quot;.cache&quot;, &quot;coverage&quot;, &quot;node_modules&quot;]&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>You can also add a compas config file at &#39;config/compas.{js,json}&#39; to specify project specific items. They are appended to the specification of the command and can be used if your tests write files that may trigger the watcher. See the <a href="https://compasjs.com/references/compas-config.html" target="_blank" rel="noreferrer">Compas configuration reference</a> for more information about the allowed options.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;cli&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		&quot;globalWatchOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;extensions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">			&quot;ignorePatterns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__fixtures__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test/tmp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>-h, --help</td><td>Display information about the current command. (boolean)</td></tr></tbody></table>',101)])])}const u=e(s,[["render",n]]);export{m as __pageData,u as default};
