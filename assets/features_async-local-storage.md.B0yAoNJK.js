import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.B-XtCDNB.js";const d=JSON.parse('{"title":"Async Local Storage","description":"","frontmatter":{},"headers":[],"relativePath":"features/async-local-storage.md","filePath":"features/async-local-storage.md"}'),n={name:"features/async-local-storage.md"};function l(o,a,r,h,p,c){return i(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="async-local-storage" tabindex="-1">Async Local Storage <a class="header-anchor" href="#async-local-storage" aria-label="Permalink to &quot;Async Local Storage&quot;">​</a></h1><p>Various features from Compas are also registered in an AsyncLocalStorage context, making them job or api request aware. This document describes the different available systems and how they integrate automatically or can be integrated manually.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>These API&#39;s are experimental and subject to change.</p></div><h2 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h2><p>The stdlib provided <a href="/features/logger-and-events.html">Logger</a> also exports a <code>contextAwareLogger</code>. This logger is globally available and uses the logger that is currently active via <code>asyncLocalStorageLogger</code>.</p><p><strong>Automatic integrations</strong>:</p><ul><li>The logger is automatically populated based on <code>ctx.log</code> in Koa Application.</li><li>The logger is automatically populated based on <code>event.log</code> in the Queue worker handlers.</li></ul><p><strong>Manual integration</strong>:</p><p>Manual integration is possible by wrapping a piece of code in a <code>AsyncLocalStorage#run</code> function.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { asyncLocalStorageLogger } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@compas/stdlib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncLocalStorageLogger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ log: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Run async code here.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	contextAwareLogger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="further-reading" tabindex="-1">Further reading <a class="header-anchor" href="#further-reading" aria-label="Permalink to &quot;Further reading&quot;">​</a></h2><ul><li><a href="https://nodejs.org/api/async_context.html#class-asynclocalstorage" target="_blank" rel="noreferrer">Node.js docs on AsyncLocalStorage</a>.</li></ul>`,12)])])}const k=s(n,[["render",l]]);export{d as __pageData,k as default};
