import{_ as a,c as t,o,ag as s}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"With Auth Compas template","description":"","frontmatter":{},"headers":[],"relativePath":"../examples/with-auth/README.md","filePath":"../examples/with-auth/README.md"}'),r={name:"../examples/with-auth/README.md"};function i(n,e,l,d,c,u){return o(),t("div",null,[...e[0]||(e[0]=[s('<h1 id="with-auth-compas-template" tabindex="-1">With Auth Compas template <a class="header-anchor" href="#with-auth-compas-template" aria-label="Permalink to &quot;With Auth Compas template&quot;">​</a></h1><p>This project is created using the <a href="https://github.com/compasjs/compas/tree/main/examples/with-auth" target="_blank" rel="noreferrer">with-auth</a> template.</p><h2 id="maintenance-mode" tabindex="-1">Maintenance mode <a class="header-anchor" href="#maintenance-mode" aria-label="Permalink to &quot;Maintenance mode&quot;">​</a></h2><p>Compas is in maintenance mode. The packages will be maintained for the foreseeable future. New features might be added, but some will also be dropped in favor of other ecosystem-available libraries. Please don&#39;t start new projects using Compas.</p><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h2><ul><li>Start up the development Postgres and Minio instances <ul><li><code>compas docker up</code></li></ul></li><li>Apply the Postgres migrations <ul><li><code>compas migrate</code></li></ul></li><li>Regenerate router, validators, types, sql, etc. <ul><li><code>compas generate</code> / <code>compas generate application</code></li></ul></li><li>Run the tests <ul><li><code>compas test --serial</code></li></ul></li></ul><h2 id="structure-and-features" tabindex="-1">Structure and features <a class="header-anchor" href="#structure-and-features" aria-label="Permalink to &quot;Structure and features&quot;">​</a></h2><p>This project is structured according to the <a href="https://github.com/compasjs/compas/tree/main/examples/default" target="_blank" rel="noreferrer">default Compas template</a>.</p><ul><li>Uses <code>@compas/eslint-plugin</code> with <code>compas lint</code> for running ESLint and Prettier</li><li>Has code generation based on <code>@compas/code-gen</code>, with the definitions stored in <code>gen/*</code> and a custom command in <code>commands/generate.js</code></li><li>Contains &#39;global&#39; services via <a href="https://stackoverflow.com/a/57552682" target="_blank" rel="noreferrer">ES Module live bindings</a> in <code>services/core.js</code>.</li><li>Entrypoint for both starting the api via <code>compas run api</code> / <code>node ./scripts/api.js</code> and a background queue via <code>compas run queue</code> / <code>node ./scripts/queue.js</code>.</li><li>Tests running on a temporary Postgres database, temporary S3 bucket and validating responses.</li></ul><h2 id="auth" tabindex="-1">Auth <a class="header-anchor" href="#auth" aria-label="Permalink to &quot;Auth&quot;">​</a></h2><p>This project is created with support for sessions provided by <a href="https://compasjs.com/features/session-handling.html" target="_blank" rel="noreferrer">@compas/store</a>. It is a minimal setup where someone can register with email and password, is able to login, logout and get information about when they have registered. The <code>userHandlers.me</code> implementation uses <code>userResolveSession</code> which you can use in your own routes. The other provided routes use the session-store and session-transport functions from Compas to manage session creation, extension and removal.</p><p>There is no logic included for email validation, password reset flows or removing the user.</p>',12)])])}const m=a(r,[["render",i]]);export{h as __pageData,m as default};
