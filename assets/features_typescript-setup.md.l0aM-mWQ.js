import{_ as t,c as s,o as p,ag as o}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Typescript setup","description":"","frontmatter":{},"headers":[],"relativePath":"features/typescript-setup.md","filePath":"features/typescript-setup.md"}'),c={name:"features/typescript-setup.md"};function i(a,e,r,n,d,u){return p(),s("div",null,[...e[0]||(e[0]=[o('<h1 id="typescript-setup" tabindex="-1">Typescript setup <a class="header-anchor" href="#typescript-setup" aria-label="Permalink to &quot;Typescript setup&quot;">â€‹</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> to be installed</p></div><p>The recommended way of developing projects with Compas is to use JavaScript with types in JSDoc. This prevents compilation steps and gives the same auto complete experience as with Typescript. Some IDE&#39;s work better with the Typescript Language Server so we recommend using a <code>tsconfig</code> or <code>jsconfig</code>. Compas provides a <code>jsconfig</code> via <code>compas init --jsconfig</code>.</p><p>Note that the Compas ESLint plugin does not support Typescript files. Use a custom config with for example <code>@typescript-eslint</code> for a better experience.</p>',4)])])}const f=t(c,[["render",i]]);export{m as __pageData,f as default};
