name: PR Checks
on: [pull_request]

env:
  CI: true

jobs:
  lint:
    permissions:
      contents: read
    timeout-minutes: 15
    strategy:
      matrix:
        node: [16, 18]
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Run compas lint
        run: |
          npx compas lint

  test:
    permissions:
      contents: read
    timeout-minutes: 15
    strategy:
      matrix:
        node: [16, 18]
        postgresVersion: [12, 13, 14]
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Start Docker
        run: |
          npx compas docker up --postgres-version ${{ matrix.postgresVersion }}
          npx compas migrate

      - name: Run compas test
        run: |
          npx compas test

  coverage:
    permissions:
      contents: read
    timeout-minutes: 15
    strategy:
      matrix:
        node: [16, 18]
        postgresVersion: [14]
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Start Docker
        run: |
          npx compas docker up --postgres-version ${{ matrix.postgresVersion }}
          npx compas migrate

      - name: Run compas test --coverage
        run: |
          npx compas test --coverage

      - name: Upload coverage
        if: matrix.node == '18'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage

  build-docs-check-diff:
    timeout-minutes: 15
    strategy:
      matrix:
        node: [16, 18]
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3.4.1
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: Build docs
        run: |
          npm install
          echo 'VITE_USER_NODE_ENV=production' > ./docs/.env
          npx compas run syncMetadata
          npx compas run docs:build
          rm ./docs/.env

      - name: Check if there are changes
        id: changes
        uses: UnicornGlobal/has-changes-action@v1.0.11

      - name: Fail if there are uncommited changes
        if: steps.changes.outputs.changes == 1
        run: |
          git status
          exit 1
