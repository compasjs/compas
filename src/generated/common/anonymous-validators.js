// @ts-nocheck
// Generated by @compas/code-gen
/* eslint-disable no-unused-vars */

import { isNil } from "@compas/stdlib";

/**
 * @typedef {{
 *   propertyPath: string,
 *   key: string,
 *   info: any,
 * }} InternalError
 */

const objectKeys730878810 = new Set(["type", "raw", "range"]);
const objectKeys781728730 = new Set(["start", "end", "pkg", "file", "line"]);
const objectKeys1282872738 = new Set([
  "type",
  "name",
  "summary",
  "description",
  "availableSince",
  "isVariable",
  "parsedType",
  "range",
]);
const objectKeys1865996329 = new Set(["type", "params", "returnType"]);
const objectKeys607756027 = new Set(["name", "description", "type"]);
const objectKeys835333298 = new Set([
  "type",
  "value",
  "isOptional",
  "defaultValue",
  "isDocBlockReference",
]);
const objectKeys1831335775 = new Set(["type", "value", "range"]);
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "unknown", errors?: InternalError[] }}
 */
export function anonymousValidator533051296(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "unknown") {
    const oneOf = ["unknown"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: string, errors?: InternalError[] }}
 */
export function anonymousValidator186795873(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: number, errors?: InternalError[] }}
 */
export function anonymousValidator293751998(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "number" || isNaN(value) || !isFinite(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.type",
          info: {},
        },
      ],
    };
  }
  if (!Number.isInteger(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.integer",
          info: {},
        },
      ],
    };
  }
  if (value < -2147483647) {
    const min = -2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.min",
          info: { min },
        },
      ],
    };
  }
  if (value > 2147483647) {
    const max = 2147483647;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.number.max",
          info: { max },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "stdlib"|"cli"|"store"|"server", errors?: InternalError[] }}
 */
export function anonymousValidator1407080209(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (
    value !== "stdlib" &&
    value !== "cli" &&
    value !== "store" &&
    value !== "server"
  ) {
    const oneOf = ["stdlib", "cli", "store", "server"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|string, errors?: InternalError[] }}
 */
export function anonymousValidator1443576836(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length === 0) {
    return {
      value: undefined,
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|{"start": number, "end": number, "pkg": DocParserPackage, "file": string, "line"?: undefined|string, }, errors?: InternalError[] }}
 */
export function anonymousValidator781728730(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys781728730.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val109757538 = anonymousValidator293751998(
    value["start"],
    `${propertyPath}.start`,
  );
  if (val109757538.errors) {
    errors = errors.concat(val109757538.errors.flat(2));
  } else {
    result["start"] = val109757538.value;
  }
  const val100571 = anonymousValidator293751998(
    value["end"],
    `${propertyPath}.end`,
  );
  if (val100571.errors) {
    errors = errors.concat(val100571.errors.flat(2));
  } else {
    result["end"] = val100571.value;
  }
  const val111052 = anonymousValidator1407080209(
    value["pkg"],
    `${propertyPath}.pkg`,
  );
  if (val111052.errors) {
    errors = errors.concat(val111052.errors.flat(2));
  } else {
    result["pkg"] = val111052.value;
  }
  const val3143036 = anonymousValidator186795873(
    value["file"],
    `${propertyPath}.file`,
  );
  if (val3143036.errors) {
    errors = errors.concat(val3143036.errors.flat(2));
  } else {
    result["file"] = val3143036.value;
  }
  const val3321844 = anonymousValidator1443576836(
    value["line"],
    `${propertyPath}.line`,
  );
  if (val3321844.errors) {
    errors = errors.concat(val3321844.errors.flat(2));
  } else {
    result["line"] = val3321844.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "unknown", "raw": string, "range": DocParserRange, }, errors?: InternalError[] }}
 */
export function anonymousValidator730878810(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys730878810.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3575610 = anonymousValidator533051296(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val112680 = anonymousValidator186795873(
    value["raw"],
    `${propertyPath}.raw`,
  );
  if (val112680.errors) {
    errors = errors.concat(val112680.errors.flat(2));
  } else {
    result["raw"] = val112680.value;
  }
  const val108280125 = anonymousValidator781728730(
    value["range"],
    `${propertyPath}.range`,
  );
  if (val108280125.errors) {
    errors = errors.concat(val108280125.errors.flat(2));
  } else {
    result["range"] = val108280125.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "functionDeclaration", errors?: InternalError[] }}
 */
export function anonymousValidator1297425816(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "functionDeclaration") {
    const oneOf = ["functionDeclaration"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: boolean, errors?: InternalError[] }}
 */
export function anonymousValidator2047524467(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "function", errors?: InternalError[] }}
 */
export function anonymousValidator74992834(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "function") {
    const oneOf = ["function"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "literal", errors?: InternalError[] }}
 */
export function anonymousValidator1922346267(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "literal") {
    const oneOf = ["literal"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: undefined|boolean, errors?: InternalError[] }}
 */
export function anonymousValidator196147222(value, propertyPath) {
  if (isNil(value)) {
    return { value: undefined };
  }
  if (typeof value !== "boolean") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.boolean.type",
          info: {},
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "literal", "value": string, "isOptional"?: undefined|boolean, "defaultValue"?: undefined|string, "isDocBlockReference"?: undefined|boolean, }, errors?: InternalError[] }}
 */
export function anonymousValidator835333298(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys835333298.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3575610 = anonymousValidator1922346267(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val111972721 = anonymousValidator186795873(
    value["value"],
    `${propertyPath}.value`,
  );
  if (val111972721.errors) {
    errors = errors.concat(val111972721.errors.flat(2));
  } else {
    result["value"] = val111972721.value;
  }
  const val872287574 = anonymousValidator196147222(
    value["isOptional"],
    `${propertyPath}.isOptional`,
  );
  if (val872287574.errors) {
    errors = errors.concat(val872287574.errors.flat(2));
  } else {
    result["isOptional"] = val872287574.value;
  }
  const val659125328 = anonymousValidator1443576836(
    value["defaultValue"],
    `${propertyPath}.defaultValue`,
  );
  if (val659125328.errors) {
    errors = errors.concat(val659125328.errors.flat(2));
  } else {
    result["defaultValue"] = val659125328.value;
  }
  const val1014029172 = anonymousValidator196147222(
    value["isDocBlockReference"],
    `${propertyPath}.isDocBlockReference`,
  );
  if (val1014029172.errors) {
    errors = errors.concat(val1014029172.errors.flat(2));
  } else {
    result["isDocBlockReference"] = val1014029172.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: DocParserLiteralType|DocParserFunctionType, errors?: InternalError[] }}
 */
export function anonymousValidator2103344335(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: DocParserLiteralType|DocParserFunctionType, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator835333298(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1865996329(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"name": string, "description": string, "type": DocParserType, }, errors?: InternalError[] }}
 */
export function anonymousValidator607756027(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys607756027.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3373707 = anonymousValidator186795873(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val1724546052 = anonymousValidator186795873(
    value["description"],
    `${propertyPath}.description`,
  );
  if (val1724546052.errors) {
    errors = errors.concat(val1724546052.errors.flat(2));
  } else {
    result["description"] = val1724546052.value;
  }
  const val3575610 = anonymousValidator2103344335(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: ({"name": string, "description": string, "type": DocParserType, })[], errors?: InternalError[] }}
 */
export function anonymousValidator2044597891(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.undefined",
          info: {},
        },
      ],
    };
  }
  if (!Array.isArray(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.array.type",
          info: {},
        },
      ],
    };
  }
  const result = Array.from({ length: value.length });
  let errors = [];
  for (let i = 0; i < value.length; ++i) {
    const arrVar = anonymousValidator607756027(
      value[i],
      `${propertyPath}[${i}]`,
    );
    if (arrVar.errors) {
      errors = errors.concat(arrVar.errors.flat(2));
    } else {
      result[i] = arrVar.value;
    }
  }
  if (errors.length > 0) {
    /** @type {{ errors: InternalError[] }} */
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "function", "params": ({"name": string, "description": string, "type": DocParserType, })[], "returnType": DocParserType, }, errors?: InternalError[] }}
 */
export function anonymousValidator1865996329(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1865996329.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3575610 = anonymousValidator74992834(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val995427962 = anonymousValidator2044597891(
    value["params"],
    `${propertyPath}.params`,
  );
  if (val995427962.errors) {
    errors = errors.concat(val995427962.errors.flat(2));
  } else {
    result["params"] = val995427962.value;
  }
  const val1337206922 = anonymousValidator2103344335(
    value["returnType"],
    `${propertyPath}.returnType`,
  );
  if (val1337206922.errors) {
    errors = errors.concat(val1337206922.errors.flat(2));
  } else {
    result["returnType"] = val1337206922.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "functionDeclaration", "name"?: undefined|string, "summary"?: undefined|string, "description"?: undefined|string, "availableSince"?: undefined|string, "isVariable": boolean, "parsedType": DocParserFunctionType, "range": DocParserRange, }, errors?: InternalError[] }}
 */
export function anonymousValidator1282872738(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1282872738.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3575610 = anonymousValidator1297425816(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val3373707 = anonymousValidator1443576836(
    value["name"],
    `${propertyPath}.name`,
  );
  if (val3373707.errors) {
    errors = errors.concat(val3373707.errors.flat(2));
  } else {
    result["name"] = val3373707.value;
  }
  const val1857640538 = anonymousValidator1443576836(
    value["summary"],
    `${propertyPath}.summary`,
  );
  if (val1857640538.errors) {
    errors = errors.concat(val1857640538.errors.flat(2));
  } else {
    result["summary"] = val1857640538.value;
  }
  const val1724546052 = anonymousValidator1443576836(
    value["description"],
    `${propertyPath}.description`,
  );
  if (val1724546052.errors) {
    errors = errors.concat(val1724546052.errors.flat(2));
  } else {
    result["description"] = val1724546052.value;
  }
  const val2065314319 = anonymousValidator1443576836(
    value["availableSince"],
    `${propertyPath}.availableSince`,
  );
  if (val2065314319.errors) {
    errors = errors.concat(val2065314319.errors.flat(2));
  } else {
    result["availableSince"] = val2065314319.value;
  }
  const val2042857018 = anonymousValidator2047524467(
    value["isVariable"],
    `${propertyPath}.isVariable`,
  );
  if (val2042857018.errors) {
    errors = errors.concat(val2042857018.errors.flat(2));
  } else {
    result["isVariable"] = val2042857018.value;
  }
  const val976957717 = anonymousValidator1865996329(
    value["parsedType"],
    `${propertyPath}.parsedType`,
  );
  if (val976957717.errors) {
    errors = errors.concat(val976957717.errors.flat(2));
  } else {
    result["parsedType"] = val976957717.value;
  }
  const val108280125 = anonymousValidator781728730(
    value["range"],
    `${propertyPath}.range`,
  );
  if (val108280125.errors) {
    errors = errors.concat(val108280125.errors.flat(2));
  } else {
    result["range"] = val108280125.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: DocParserUnknownBlock|DocParserFunctionDeclarationBlock, errors?: InternalError[] }}
 */
export function anonymousValidator796176522(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.anyOf.undefined",
          info: {},
        },
      ],
    };
  }
  let errors = [];
  /** @type {{ value?: DocParserUnknownBlock|DocParserFunctionDeclarationBlock, errors?: InternalError[] }} */
  let result = { errors: [] };
  result = anonymousValidator730878810(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  result = anonymousValidator1282872738(value, propertyPath);
  if (result.errors) {
    errors = errors.concat(result.errors.flat(2));
  } else {
    return result;
  }
  const info = {};
  for (const err of errors) {
    if (isNil(info[err.propertyPath])) {
      info[err.propertyPath] = err;
    } else if (Array.isArray(info[err.propertyPath])) {
      info[err.propertyPath] = info[err.propertyPath].concat(err);
    } else {
      info[err.propertyPath] = [info[err.propertyPath]].concat(err);
    }
  }
  /** @type {{ errors: InternalError[] }} */
  return {
    errors: [
      {
        propertyPath,
        key: "validator.anyOf",
        info,
      },
    ],
  };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: "MultiLine"|"SingleLine", errors?: InternalError[] }}
 */
export function anonymousValidator1303070771(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "string") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.type",
          info: {},
        },
      ],
    };
  }
  if (value.length < 1) {
    const min = 1;
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.min",
          info: { min },
        },
      ],
    };
  }
  if (value !== "MultiLine" && value !== "SingleLine") {
    const oneOf = ["MultiLine", "SingleLine"];
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.string.oneOf",
          info: { oneOf },
        },
      ],
    };
  }
  return { value };
}
/**
 * @param {*} value
 * @param {string} propertyPath
 * @returns {{ value?: {"type": "MultiLine"|"SingleLine", "value": string, "range": DocParserRange, }, errors?: InternalError[] }}
 */
export function anonymousValidator1831335775(value, propertyPath) {
  if (isNil(value)) {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.undefined",
          info: {},
        },
      ],
    };
  }
  if (typeof value !== "object") {
    /** @type {{ errors: InternalError[] }} */
    return {
      errors: [
        {
          propertyPath,
          key: "validator.object.type",
          info: {},
        },
      ],
    };
  }
  const result = Object.create(null);
  let errors = [];
  for (const key of Object.keys(value)) {
    if (!objectKeys1831335775.has(key)) {
      /** @type {{ errors: InternalError[] }} */
      return {
        errors: [
          {
            propertyPath,
            key: "validator.object.strict",
            info: { extraKey: key },
          },
        ],
      };
    }
  }
  const val3575610 = anonymousValidator1303070771(
    value["type"],
    `${propertyPath}.type`,
  );
  if (val3575610.errors) {
    errors = errors.concat(val3575610.errors.flat(2));
  } else {
    result["type"] = val3575610.value;
  }
  const val111972721 = anonymousValidator186795873(
    value["value"],
    `${propertyPath}.value`,
  );
  if (val111972721.errors) {
    errors = errors.concat(val111972721.errors.flat(2));
  } else {
    result["value"] = val111972721.value;
  }
  const val108280125 = anonymousValidator781728730(
    value["range"],
    `${propertyPath}.range`,
  );
  if (val108280125.errors) {
    errors = errors.concat(val108280125.errors.flat(2));
  } else {
    result["range"] = val108280125.value;
  }
  if (errors.length > 0) {
    return { errors };
  }
  return { value: result };
}
